
Mini_Project4_Mohamed_Magdy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  000033e8  0000347c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008001a2  008001a2  000035be  2**0
                  ALLOC
  3 .stab         00002e38  00000000  00000000  000035c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001444  00000000  00000000  000063f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000783c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000079dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b35f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c538  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c9ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d35c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9d 18 	call	0x313a	; 0x313a <main>
      8a:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e9       	ldi	r26, 0x97	; 151
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e9       	ldi	r24, 0x97	; 151
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e9       	ldi	r22, 0x97	; 151
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 86 19 	jmp	0x330c	; 0x330c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e1 56       	subi	r30, 0x61	; 97
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <GPIO_setupPinDirection+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <GPIO_setupPinDirection+0x8>
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	89 83       	std	Y+1, r24	; 0x01
     e3e:	6a 83       	std	Y+2, r22	; 0x02
     e40:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	88 30       	cpi	r24, 0x08	; 8
     e46:	08 f0       	brcs	.+2      	; 0xe4a <GPIO_setupPinDirection+0x1c>
     e48:	d5 c0       	rjmp	.+426    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	84 30       	cpi	r24, 0x04	; 4
     e4e:	08 f0       	brcs	.+2      	; 0xe52 <GPIO_setupPinDirection+0x24>
     e50:	d1 c0       	rjmp	.+418    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	3d 83       	std	Y+5, r19	; 0x05
     e5a:	2c 83       	std	Y+4, r18	; 0x04
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	91 05       	cpc	r25, r1
     e64:	09 f4       	brne	.+2      	; 0xe68 <GPIO_setupPinDirection+0x3a>
     e66:	43 c0       	rjmp	.+134    	; 0xeee <GPIO_setupPinDirection+0xc0>
     e68:	2c 81       	ldd	r18, Y+4	; 0x04
     e6a:	3d 81       	ldd	r19, Y+5	; 0x05
     e6c:	22 30       	cpi	r18, 0x02	; 2
     e6e:	31 05       	cpc	r19, r1
     e70:	2c f4       	brge	.+10     	; 0xe7c <GPIO_setupPinDirection+0x4e>
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	9d 81       	ldd	r25, Y+5	; 0x05
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	71 f0       	breq	.+28     	; 0xe96 <GPIO_setupPinDirection+0x68>
     e7a:	bc c0       	rjmp	.+376    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
     e7c:	2c 81       	ldd	r18, Y+4	; 0x04
     e7e:	3d 81       	ldd	r19, Y+5	; 0x05
     e80:	22 30       	cpi	r18, 0x02	; 2
     e82:	31 05       	cpc	r19, r1
     e84:	09 f4       	brne	.+2      	; 0xe88 <GPIO_setupPinDirection+0x5a>
     e86:	5f c0       	rjmp	.+190    	; 0xf46 <GPIO_setupPinDirection+0x118>
     e88:	8c 81       	ldd	r24, Y+4	; 0x04
     e8a:	9d 81       	ldd	r25, Y+5	; 0x05
     e8c:	83 30       	cpi	r24, 0x03	; 3
     e8e:	91 05       	cpc	r25, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <GPIO_setupPinDirection+0x66>
     e92:	85 c0       	rjmp	.+266    	; 0xf9e <GPIO_setupPinDirection+0x170>
     e94:	af c0       	rjmp	.+350    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	a1 f4       	brne	.+40     	; 0xec4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     e9c:	aa e3       	ldi	r26, 0x3A	; 58
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	ea e3       	ldi	r30, 0x3A	; 58
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 2e       	mov	r0, r18
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <GPIO_setupPinDirection+0x8c>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <GPIO_setupPinDirection+0x88>
     ebe:	84 2b       	or	r24, r20
     ec0:	8c 93       	st	X, r24
     ec2:	98 c0       	rjmp	.+304    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     ec4:	aa e3       	ldi	r26, 0x3A	; 58
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ea e3       	ldi	r30, 0x3A	; 58
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 2e       	mov	r0, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <GPIO_setupPinDirection+0xb4>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	0a 94       	dec	r0
     ee4:	e2 f7       	brpl	.-8      	; 0xede <GPIO_setupPinDirection+0xb0>
     ee6:	80 95       	com	r24
     ee8:	84 23       	and	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	83 c0       	rjmp	.+262    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	a1 f4       	brne	.+40     	; 0xf1c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     ef4:	a7 e3       	ldi	r26, 0x37	; 55
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e7 e3       	ldi	r30, 0x37	; 55
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	48 2f       	mov	r20, r24
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 2e       	mov	r0, r18
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <GPIO_setupPinDirection+0xe4>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <GPIO_setupPinDirection+0xe0>
     f16:	84 2b       	or	r24, r20
     f18:	8c 93       	st	X, r24
     f1a:	6c c0       	rjmp	.+216    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f1c:	a7 e3       	ldi	r26, 0x37	; 55
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e7 e3       	ldi	r30, 0x37	; 55
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <GPIO_setupPinDirection+0x10c>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <GPIO_setupPinDirection+0x108>
     f3e:	80 95       	com	r24
     f40:	84 23       	and	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	57 c0       	rjmp	.+174    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	a1 f4       	brne	.+40     	; 0xf74 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f4c:	a4 e3       	ldi	r26, 0x34	; 52
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e4 e3       	ldi	r30, 0x34	; 52
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 2e       	mov	r0, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <GPIO_setupPinDirection+0x13c>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <GPIO_setupPinDirection+0x138>
     f6e:	84 2b       	or	r24, r20
     f70:	8c 93       	st	X, r24
     f72:	40 c0       	rjmp	.+128    	; 0xff4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     f74:	a4 e3       	ldi	r26, 0x34	; 52
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e4 e3       	ldi	r30, 0x34	; 52
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <GPIO_setupPinDirection+0x164>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <GPIO_setupPinDirection+0x160>
     f96:	80 95       	com	r24
     f98:	84 23       	and	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	2b c0       	rjmp	.+86     	; 0xff4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	a1 f4       	brne	.+40     	; 0xfcc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     fa4:	a1 e3       	ldi	r26, 0x31	; 49
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e1 e3       	ldi	r30, 0x31	; 49
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <GPIO_setupPinDirection+0x194>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <GPIO_setupPinDirection+0x190>
     fc6:	84 2b       	or	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	14 c0       	rjmp	.+40     	; 0xff4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     fcc:	a1 e3       	ldi	r26, 0x31	; 49
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e1 e3       	ldi	r30, 0x31	; 49
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 2e       	mov	r0, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <GPIO_setupPinDirection+0x1bc>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <GPIO_setupPinDirection+0x1b8>
     fee:	80 95       	com	r24
     ff0:	84 23       	and	r24, r20
     ff2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	00 d0       	rcall	.+0      	; 0x100a <GPIO_writePin+0x6>
    100a:	00 d0       	rcall	.+0      	; 0x100c <GPIO_writePin+0x8>
    100c:	0f 92       	push	r0
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	6a 83       	std	Y+2, r22	; 0x02
    1016:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	88 30       	cpi	r24, 0x08	; 8
    101c:	08 f0       	brcs	.+2      	; 0x1020 <GPIO_writePin+0x1c>
    101e:	d5 c0       	rjmp	.+426    	; 0x11ca <GPIO_writePin+0x1c6>
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	84 30       	cpi	r24, 0x04	; 4
    1024:	08 f0       	brcs	.+2      	; 0x1028 <GPIO_writePin+0x24>
    1026:	d1 c0       	rjmp	.+418    	; 0x11ca <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3d 83       	std	Y+5, r19	; 0x05
    1030:	2c 83       	std	Y+4, r18	; 0x04
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	9d 81       	ldd	r25, Y+5	; 0x05
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	91 05       	cpc	r25, r1
    103a:	09 f4       	brne	.+2      	; 0x103e <GPIO_writePin+0x3a>
    103c:	43 c0       	rjmp	.+134    	; 0x10c4 <GPIO_writePin+0xc0>
    103e:	2c 81       	ldd	r18, Y+4	; 0x04
    1040:	3d 81       	ldd	r19, Y+5	; 0x05
    1042:	22 30       	cpi	r18, 0x02	; 2
    1044:	31 05       	cpc	r19, r1
    1046:	2c f4       	brge	.+10     	; 0x1052 <GPIO_writePin+0x4e>
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	9d 81       	ldd	r25, Y+5	; 0x05
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	71 f0       	breq	.+28     	; 0x106c <GPIO_writePin+0x68>
    1050:	bc c0       	rjmp	.+376    	; 0x11ca <GPIO_writePin+0x1c6>
    1052:	2c 81       	ldd	r18, Y+4	; 0x04
    1054:	3d 81       	ldd	r19, Y+5	; 0x05
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	09 f4       	brne	.+2      	; 0x105e <GPIO_writePin+0x5a>
    105c:	5f c0       	rjmp	.+190    	; 0x111c <GPIO_writePin+0x118>
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	9d 81       	ldd	r25, Y+5	; 0x05
    1062:	83 30       	cpi	r24, 0x03	; 3
    1064:	91 05       	cpc	r25, r1
    1066:	09 f4       	brne	.+2      	; 0x106a <GPIO_writePin+0x66>
    1068:	85 c0       	rjmp	.+266    	; 0x1174 <GPIO_writePin+0x170>
    106a:	af c0       	rjmp	.+350    	; 0x11ca <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	a1 f4       	brne	.+40     	; 0x109a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1072:	ab e3       	ldi	r26, 0x3B	; 59
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	eb e3       	ldi	r30, 0x3B	; 59
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <GPIO_writePin+0x8c>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <GPIO_writePin+0x88>
    1094:	84 2b       	or	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	98 c0       	rjmp	.+304    	; 0x11ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    109a:	ab e3       	ldi	r26, 0x3B	; 59
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	eb e3       	ldi	r30, 0x3B	; 59
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <GPIO_writePin+0xb4>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <GPIO_writePin+0xb0>
    10bc:	80 95       	com	r24
    10be:	84 23       	and	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	83 c0       	rjmp	.+262    	; 0x11ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	a1 f4       	brne	.+40     	; 0x10f2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    10ca:	a8 e3       	ldi	r26, 0x38	; 56
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e8 e3       	ldi	r30, 0x38	; 56
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <GPIO_writePin+0xe4>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <GPIO_writePin+0xe0>
    10ec:	84 2b       	or	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	6c c0       	rjmp	.+216    	; 0x11ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    10f2:	a8 e3       	ldi	r26, 0x38	; 56
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e8 e3       	ldi	r30, 0x38	; 56
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <GPIO_writePin+0x10c>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <GPIO_writePin+0x108>
    1114:	80 95       	com	r24
    1116:	84 23       	and	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	57 c0       	rjmp	.+174    	; 0x11ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	a1 f4       	brne	.+40     	; 0x114a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1122:	a5 e3       	ldi	r26, 0x35	; 53
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e5 e3       	ldi	r30, 0x35	; 53
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <GPIO_writePin+0x13c>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <GPIO_writePin+0x138>
    1144:	84 2b       	or	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	40 c0       	rjmp	.+128    	; 0x11ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    114a:	a5 e3       	ldi	r26, 0x35	; 53
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e5 e3       	ldi	r30, 0x35	; 53
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <GPIO_writePin+0x164>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <GPIO_writePin+0x160>
    116c:	80 95       	com	r24
    116e:	84 23       	and	r24, r20
    1170:	8c 93       	st	X, r24
    1172:	2b c0       	rjmp	.+86     	; 0x11ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	a1 f4       	brne	.+40     	; 0x11a2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    117a:	a2 e3       	ldi	r26, 0x32	; 50
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e2 e3       	ldi	r30, 0x32	; 50
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <GPIO_writePin+0x194>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <GPIO_writePin+0x190>
    119c:	84 2b       	or	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	14 c0       	rjmp	.+40     	; 0x11ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    11a2:	a2 e3       	ldi	r26, 0x32	; 50
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e2 e3       	ldi	r30, 0x32	; 50
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <GPIO_writePin+0x1bc>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <GPIO_writePin+0x1b8>
    11c4:	80 95       	com	r24
    11c6:	84 23       	and	r24, r20
    11c8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <GPIO_readPin+0x6>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <GPIO_readPin+0x8>
    11e2:	0f 92       	push	r0
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	8a 83       	std	Y+2, r24	; 0x02
    11ea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    11ec:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	88 30       	cpi	r24, 0x08	; 8
    11f2:	08 f0       	brcs	.+2      	; 0x11f6 <GPIO_readPin+0x1c>
    11f4:	84 c0       	rjmp	.+264    	; 0x12fe <GPIO_readPin+0x124>
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	84 30       	cpi	r24, 0x04	; 4
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <GPIO_readPin+0x24>
    11fc:	80 c0       	rjmp	.+256    	; 0x12fe <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3d 83       	std	Y+5, r19	; 0x05
    1206:	2c 83       	std	Y+4, r18	; 0x04
    1208:	4c 81       	ldd	r20, Y+4	; 0x04
    120a:	5d 81       	ldd	r21, Y+5	; 0x05
    120c:	41 30       	cpi	r20, 0x01	; 1
    120e:	51 05       	cpc	r21, r1
    1210:	79 f1       	breq	.+94     	; 0x1270 <GPIO_readPin+0x96>
    1212:	8c 81       	ldd	r24, Y+4	; 0x04
    1214:	9d 81       	ldd	r25, Y+5	; 0x05
    1216:	82 30       	cpi	r24, 0x02	; 2
    1218:	91 05       	cpc	r25, r1
    121a:	34 f4       	brge	.+12     	; 0x1228 <GPIO_readPin+0x4e>
    121c:	2c 81       	ldd	r18, Y+4	; 0x04
    121e:	3d 81       	ldd	r19, Y+5	; 0x05
    1220:	21 15       	cp	r18, r1
    1222:	31 05       	cpc	r19, r1
    1224:	69 f0       	breq	.+26     	; 0x1240 <GPIO_readPin+0x66>
    1226:	6b c0       	rjmp	.+214    	; 0x12fe <GPIO_readPin+0x124>
    1228:	4c 81       	ldd	r20, Y+4	; 0x04
    122a:	5d 81       	ldd	r21, Y+5	; 0x05
    122c:	42 30       	cpi	r20, 0x02	; 2
    122e:	51 05       	cpc	r21, r1
    1230:	b9 f1       	breq	.+110    	; 0x12a0 <GPIO_readPin+0xc6>
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	9d 81       	ldd	r25, Y+5	; 0x05
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	91 05       	cpc	r25, r1
    123a:	09 f4       	brne	.+2      	; 0x123e <GPIO_readPin+0x64>
    123c:	49 c0       	rjmp	.+146    	; 0x12d0 <GPIO_readPin+0xf6>
    123e:	5f c0       	rjmp	.+190    	; 0x12fe <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1240:	e9 e3       	ldi	r30, 0x39	; 57
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	a9 01       	movw	r20, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <GPIO_readPin+0x7e>
    1254:	55 95       	asr	r21
    1256:	47 95       	ror	r20
    1258:	8a 95       	dec	r24
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <GPIO_readPin+0x7a>
    125c:	ca 01       	movw	r24, r20
    125e:	81 70       	andi	r24, 0x01	; 1
    1260:	90 70       	andi	r25, 0x00	; 0
    1262:	88 23       	and	r24, r24
    1264:	19 f0       	breq	.+6      	; 0x126c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	49 c0       	rjmp	.+146    	; 0x12fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    126c:	19 82       	std	Y+1, r1	; 0x01
    126e:	47 c0       	rjmp	.+142    	; 0x12fe <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1270:	e6 e3       	ldi	r30, 0x36	; 54
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	88 2f       	mov	r24, r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	a9 01       	movw	r20, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <GPIO_readPin+0xae>
    1284:	55 95       	asr	r21
    1286:	47 95       	ror	r20
    1288:	8a 95       	dec	r24
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <GPIO_readPin+0xaa>
    128c:	ca 01       	movw	r24, r20
    128e:	81 70       	andi	r24, 0x01	; 1
    1290:	90 70       	andi	r25, 0x00	; 0
    1292:	88 23       	and	r24, r24
    1294:	19 f0       	breq	.+6      	; 0x129c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	31 c0       	rjmp	.+98     	; 0x12fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    129c:	19 82       	std	Y+1, r1	; 0x01
    129e:	2f c0       	rjmp	.+94     	; 0x12fe <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    12a0:	e3 e3       	ldi	r30, 0x33	; 51
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	88 2f       	mov	r24, r24
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	a9 01       	movw	r20, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <GPIO_readPin+0xde>
    12b4:	55 95       	asr	r21
    12b6:	47 95       	ror	r20
    12b8:	8a 95       	dec	r24
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <GPIO_readPin+0xda>
    12bc:	ca 01       	movw	r24, r20
    12be:	81 70       	andi	r24, 0x01	; 1
    12c0:	90 70       	andi	r25, 0x00	; 0
    12c2:	88 23       	and	r24, r24
    12c4:	19 f0       	breq	.+6      	; 0x12cc <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	19 c0       	rjmp	.+50     	; 0x12fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12cc:	19 82       	std	Y+1, r1	; 0x01
    12ce:	17 c0       	rjmp	.+46     	; 0x12fe <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    12d0:	e0 e3       	ldi	r30, 0x30	; 48
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	88 2f       	mov	r24, r24
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	a9 01       	movw	r20, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <GPIO_readPin+0x10e>
    12e4:	55 95       	asr	r21
    12e6:	47 95       	ror	r20
    12e8:	8a 95       	dec	r24
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <GPIO_readPin+0x10a>
    12ec:	ca 01       	movw	r24, r20
    12ee:	81 70       	andi	r24, 0x01	; 1
    12f0:	90 70       	andi	r25, 0x00	; 0
    12f2:	88 23       	and	r24, r24
    12f4:	19 f0       	breq	.+6      	; 0x12fc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12fc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	00 d0       	rcall	.+0      	; 0x1316 <GPIO_setupPortDirection+0x6>
    1316:	00 d0       	rcall	.+0      	; 0x1318 <GPIO_setupPortDirection+0x8>
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	84 30       	cpi	r24, 0x04	; 4
    1324:	90 f5       	brcc	.+100    	; 0x138a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	3c 83       	std	Y+4, r19	; 0x04
    132e:	2b 83       	std	Y+3, r18	; 0x03
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	9c 81       	ldd	r25, Y+4	; 0x04
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	91 05       	cpc	r25, r1
    1338:	d1 f0       	breq	.+52     	; 0x136e <GPIO_setupPortDirection+0x5e>
    133a:	2b 81       	ldd	r18, Y+3	; 0x03
    133c:	3c 81       	ldd	r19, Y+4	; 0x04
    133e:	22 30       	cpi	r18, 0x02	; 2
    1340:	31 05       	cpc	r19, r1
    1342:	2c f4       	brge	.+10     	; 0x134e <GPIO_setupPortDirection+0x3e>
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	61 f0       	breq	.+24     	; 0x1364 <GPIO_setupPortDirection+0x54>
    134c:	1e c0       	rjmp	.+60     	; 0x138a <GPIO_setupPortDirection+0x7a>
    134e:	2b 81       	ldd	r18, Y+3	; 0x03
    1350:	3c 81       	ldd	r19, Y+4	; 0x04
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	81 f0       	breq	.+32     	; 0x1378 <GPIO_setupPortDirection+0x68>
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	83 30       	cpi	r24, 0x03	; 3
    135e:	91 05       	cpc	r25, r1
    1360:	81 f0       	breq	.+32     	; 0x1382 <GPIO_setupPortDirection+0x72>
    1362:	13 c0       	rjmp	.+38     	; 0x138a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1364:	ea e3       	ldi	r30, 0x3A	; 58
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	80 83       	st	Z, r24
    136c:	0e c0       	rjmp	.+28     	; 0x138a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    136e:	e7 e3       	ldi	r30, 0x37	; 55
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	80 83       	st	Z, r24
    1376:	09 c0       	rjmp	.+18     	; 0x138a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1378:	e4 e3       	ldi	r30, 0x34	; 52
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	80 83       	st	Z, r24
    1380:	04 c0       	rjmp	.+8      	; 0x138a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1382:	e1 e3       	ldi	r30, 0x31	; 49
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	80 83       	st	Z, r24
			break;
		}
	}
}
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	00 d0       	rcall	.+0      	; 0x139e <GPIO_writePort+0x6>
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <GPIO_writePort+0x8>
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	84 30       	cpi	r24, 0x04	; 4
    13ac:	90 f5       	brcc	.+100    	; 0x1412 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	3c 83       	std	Y+4, r19	; 0x04
    13b6:	2b 83       	std	Y+3, r18	; 0x03
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	91 05       	cpc	r25, r1
    13c0:	d1 f0       	breq	.+52     	; 0x13f6 <GPIO_writePort+0x5e>
    13c2:	2b 81       	ldd	r18, Y+3	; 0x03
    13c4:	3c 81       	ldd	r19, Y+4	; 0x04
    13c6:	22 30       	cpi	r18, 0x02	; 2
    13c8:	31 05       	cpc	r19, r1
    13ca:	2c f4       	brge	.+10     	; 0x13d6 <GPIO_writePort+0x3e>
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	9c 81       	ldd	r25, Y+4	; 0x04
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	61 f0       	breq	.+24     	; 0x13ec <GPIO_writePort+0x54>
    13d4:	1e c0       	rjmp	.+60     	; 0x1412 <GPIO_writePort+0x7a>
    13d6:	2b 81       	ldd	r18, Y+3	; 0x03
    13d8:	3c 81       	ldd	r19, Y+4	; 0x04
    13da:	22 30       	cpi	r18, 0x02	; 2
    13dc:	31 05       	cpc	r19, r1
    13de:	81 f0       	breq	.+32     	; 0x1400 <GPIO_writePort+0x68>
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	83 30       	cpi	r24, 0x03	; 3
    13e6:	91 05       	cpc	r25, r1
    13e8:	81 f0       	breq	.+32     	; 0x140a <GPIO_writePort+0x72>
    13ea:	13 c0       	rjmp	.+38     	; 0x1412 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    13ec:	eb e3       	ldi	r30, 0x3B	; 59
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	80 83       	st	Z, r24
    13f4:	0e c0       	rjmp	.+28     	; 0x1412 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    13f6:	e8 e3       	ldi	r30, 0x38	; 56
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	80 83       	st	Z, r24
    13fe:	09 c0       	rjmp	.+18     	; 0x1412 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1400:	e5 e3       	ldi	r30, 0x35	; 53
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	80 83       	st	Z, r24
    1408:	04 c0       	rjmp	.+8      	; 0x1412 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    140a:	e2 e3       	ldi	r30, 0x32	; 50
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	80 83       	st	Z, r24
			break;
		}
	}
}
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <GPIO_readPort+0x6>
    1426:	00 d0       	rcall	.+0      	; 0x1428 <GPIO_readPort+0x8>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    142e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	84 30       	cpi	r24, 0x04	; 4
    1434:	90 f5       	brcc	.+100    	; 0x149a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	3c 83       	std	Y+4, r19	; 0x04
    143e:	2b 83       	std	Y+3, r18	; 0x03
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	9c 81       	ldd	r25, Y+4	; 0x04
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	91 05       	cpc	r25, r1
    1448:	d1 f0       	breq	.+52     	; 0x147e <GPIO_readPort+0x5e>
    144a:	2b 81       	ldd	r18, Y+3	; 0x03
    144c:	3c 81       	ldd	r19, Y+4	; 0x04
    144e:	22 30       	cpi	r18, 0x02	; 2
    1450:	31 05       	cpc	r19, r1
    1452:	2c f4       	brge	.+10     	; 0x145e <GPIO_readPort+0x3e>
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	61 f0       	breq	.+24     	; 0x1474 <GPIO_readPort+0x54>
    145c:	1e c0       	rjmp	.+60     	; 0x149a <GPIO_readPort+0x7a>
    145e:	2b 81       	ldd	r18, Y+3	; 0x03
    1460:	3c 81       	ldd	r19, Y+4	; 0x04
    1462:	22 30       	cpi	r18, 0x02	; 2
    1464:	31 05       	cpc	r19, r1
    1466:	81 f0       	breq	.+32     	; 0x1488 <GPIO_readPort+0x68>
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	83 30       	cpi	r24, 0x03	; 3
    146e:	91 05       	cpc	r25, r1
    1470:	81 f0       	breq	.+32     	; 0x1492 <GPIO_readPort+0x72>
    1472:	13 c0       	rjmp	.+38     	; 0x149a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1474:	e9 e3       	ldi	r30, 0x39	; 57
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	0e c0       	rjmp	.+28     	; 0x149a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    147e:	e6 e3       	ldi	r30, 0x36	; 54
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	09 c0       	rjmp	.+18     	; 0x149a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1488:	e3 e3       	ldi	r30, 0x33	; 51
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	04 c0       	rjmp	.+8      	; 0x149a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1492:	e0 e3       	ldi	r30, 0x30	; 48
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    149a:	89 81       	ldd	r24, Y+1	; 0x01
}
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    14aa:	1f 92       	push	r1
    14ac:	0f 92       	push	r0
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	0f 92       	push	r0
    14b2:	11 24       	eor	r1, r1
    14b4:	2f 93       	push	r18
    14b6:	3f 93       	push	r19
    14b8:	4f 93       	push	r20
    14ba:	5f 93       	push	r21
    14bc:	6f 93       	push	r22
    14be:	7f 93       	push	r23
    14c0:	8f 93       	push	r24
    14c2:	9f 93       	push	r25
    14c4:	af 93       	push	r26
    14c6:	bf 93       	push	r27
    14c8:	ef 93       	push	r30
    14ca:	ff 93       	push	r31
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    14d4:	80 91 a2 01 	lds	r24, 0x01A2
    14d8:	90 91 a3 01 	lds	r25, 0x01A3
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	29 f0       	breq	.+10     	; 0x14ea <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    14e0:	e0 91 a2 01 	lds	r30, 0x01A2
    14e4:	f0 91 a3 01 	lds	r31, 0x01A3
    14e8:	09 95       	icall
	}
}
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	ff 91       	pop	r31
    14f0:	ef 91       	pop	r30
    14f2:	bf 91       	pop	r27
    14f4:	af 91       	pop	r26
    14f6:	9f 91       	pop	r25
    14f8:	8f 91       	pop	r24
    14fa:	7f 91       	pop	r23
    14fc:	6f 91       	pop	r22
    14fe:	5f 91       	pop	r21
    1500:	4f 91       	pop	r20
    1502:	3f 91       	pop	r19
    1504:	2f 91       	pop	r18
    1506:	0f 90       	pop	r0
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	0f 90       	pop	r0
    150c:	1f 90       	pop	r1
    150e:	18 95       	reti

00001510 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <ICU_init+0x6>
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	9a 83       	std	Y+2, r25	; 0x02
    151c:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    151e:	a1 e3       	ldi	r26, 0x31	; 49
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e1 e3       	ldi	r30, 0x31	; 49
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	8f 7b       	andi	r24, 0xBF	; 191
    152a:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    152c:	ef e4       	ldi	r30, 0x4F	; 79
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	8c e0       	ldi	r24, 0x0C	; 12
    1532:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1534:	ae e4       	ldi	r26, 0x4E	; 78
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	ee e4       	ldi	r30, 0x4E	; 78
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	98 2f       	mov	r25, r24
    1540:	98 7f       	andi	r25, 0xF8	; 248
    1542:	e9 81       	ldd	r30, Y+1	; 0x01
    1544:	fa 81       	ldd	r31, Y+2	; 0x02
    1546:	80 81       	ld	r24, Z
    1548:	89 2b       	or	r24, r25
    154a:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    154c:	ae e4       	ldi	r26, 0x4E	; 78
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	ee e4       	ldi	r30, 0x4E	; 78
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	28 2f       	mov	r18, r24
    1558:	2f 7b       	andi	r18, 0xBF	; 191
    155a:	e9 81       	ldd	r30, Y+1	; 0x01
    155c:	fa 81       	ldd	r31, Y+2	; 0x02
    155e:	81 81       	ldd	r24, Z+1	; 0x01
    1560:	88 2f       	mov	r24, r24
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	00 24       	eor	r0, r0
    1566:	96 95       	lsr	r25
    1568:	87 95       	ror	r24
    156a:	07 94       	ror	r0
    156c:	96 95       	lsr	r25
    156e:	87 95       	ror	r24
    1570:	07 94       	ror	r0
    1572:	98 2f       	mov	r25, r24
    1574:	80 2d       	mov	r24, r0
    1576:	82 2b       	or	r24, r18
    1578:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    157a:	ec e4       	ldi	r30, 0x4C	; 76
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	11 82       	std	Z+1, r1	; 0x01
    1580:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    1582:	e6 e4       	ldi	r30, 0x46	; 70
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	11 82       	std	Z+1, r1	; 0x01
    1588:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    158a:	a9 e5       	ldi	r26, 0x59	; 89
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e9 e5       	ldi	r30, 0x59	; 89
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	80 62       	ori	r24, 0x20	; 32
    1596:	8c 93       	st	X, r24
}
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <ICU_setCallBack+0x6>
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	9a 83       	std	Y+2, r25	; 0x02
    15ae:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	9a 81       	ldd	r25, Y+2	; 0x02
    15b4:	90 93 a3 01 	sts	0x01A3, r25
    15b8:	80 93 a2 01 	sts	0x01A2, r24
}
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	0f 92       	push	r0
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    15d2:	ae e4       	ldi	r26, 0x4E	; 78
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	ee e4       	ldi	r30, 0x4E	; 78
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	28 2f       	mov	r18, r24
    15de:	2f 7b       	andi	r18, 0xBF	; 191
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	00 24       	eor	r0, r0
    15e8:	96 95       	lsr	r25
    15ea:	87 95       	ror	r24
    15ec:	07 94       	ror	r0
    15ee:	96 95       	lsr	r25
    15f0:	87 95       	ror	r24
    15f2:	07 94       	ror	r0
    15f4:	98 2f       	mov	r25, r24
    15f6:	80 2d       	mov	r24, r0
    15f8:	82 2b       	or	r24, r18
    15fa:	8c 93       	st	X, r24
}
    15fc:	0f 90       	pop	r0
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    160c:	e6 e4       	ldi	r30, 0x46	; 70
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	91 81       	ldd	r25, Z+1	; 0x01
}
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1622:	ec e4       	ldi	r30, 0x4C	; 76
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	11 82       	std	Z+1, r1	; 0x01
    1628:	10 82       	st	Z, r1
}
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    1638:	ef e4       	ldi	r30, 0x4F	; 79
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	10 82       	st	Z, r1
	TCCR1B = 0;
    163e:	ee e4       	ldi	r30, 0x4E	; 78
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	10 82       	st	Z, r1
	TCNT1 = 0;
    1644:	ec e4       	ldi	r30, 0x4C	; 76
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	11 82       	std	Z+1, r1	; 0x01
    164a:	10 82       	st	Z, r1
	ICR1 = 0;
    164c:	e6 e4       	ldi	r30, 0x46	; 70
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	11 82       	std	Z+1, r1	; 0x01
    1652:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    1654:	a9 e5       	ldi	r26, 0x59	; 89
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e9 e5       	ldi	r30, 0x59	; 89
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	8f 7d       	andi	r24, 0xDF	; 223
    1660:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    1662:	10 92 a3 01 	sts	0x01A3, r1
    1666:	10 92 a2 01 	sts	0x01A2, r1
}
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <LEDS_init>:

#include "../COMMON/common_macros.h"
#include<avr/io.h>
#include"../MCAL/gpio.h"
void LEDS_init(void)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
	   /* Red */
	    GPIO_setupPinDirection(RED_LED_PORT, RED_LED_PIN , PIN_OUTPUT);
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	41 e0       	ldi	r20, 0x01	; 1
    167e:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
	    LED_off(LED_RED);
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	0e 94 88 0b 	call	0x1710	; 0x1710 <LED_off>

	    /* Green */
	    GPIO_setupPinDirection(GREEN_LED_PORT, GREEN_LED_PIN, PIN_OUTPUT);
    1688:	82 e0       	ldi	r24, 0x02	; 2
    168a:	61 e0       	ldi	r22, 0x01	; 1
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
	    LED_off(LED_GREEN);
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	0e 94 88 0b 	call	0x1710	; 0x1710 <LED_off>

	    /* Blue */
	    GPIO_setupPinDirection(BLUE_LED_PORT, BLUE_LED_PIN, PIN_OUTPUT);
    1698:	82 e0       	ldi	r24, 0x02	; 2
    169a:	62 e0       	ldi	r22, 0x02	; 2
    169c:	41 e0       	ldi	r20, 0x01	; 1
    169e:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
	    LED_off(LED_BLUE);
    16a2:	82 e0       	ldi	r24, 0x02	; 2
    16a4:	0e 94 88 0b 	call	0x1710	; 0x1710 <LED_off>
}
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <LED_on>:


void LED_on(LED_ID id)
{  switch (id) {
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <LED_on+0x6>
    16b4:	0f 92       	push	r0
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	3b 83       	std	Y+3, r19	; 0x03
    16c4:	2a 83       	std	Y+2, r18	; 0x02
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	91 05       	cpc	r25, r1
    16ce:	79 f0       	breq	.+30     	; 0x16ee <LED_on+0x40>
    16d0:	2a 81       	ldd	r18, Y+2	; 0x02
    16d2:	3b 81       	ldd	r19, Y+3	; 0x03
    16d4:	22 30       	cpi	r18, 0x02	; 2
    16d6:	31 05       	cpc	r19, r1
    16d8:	81 f0       	breq	.+32     	; 0x16fa <LED_on+0x4c>
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	9b 81       	ldd	r25, Y+3	; 0x03
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	89 f4       	brne	.+34     	; 0x1704 <LED_on+0x56>
case LED_RED:
	 GPIO_writePin(RED_LED_PORT, RED_LED_PIN,LOGIC_HIGH );
    16e2:	82 e0       	ldi	r24, 0x02	; 2
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	41 e0       	ldi	r20, 0x01	; 1
    16e8:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    16ec:	0b c0       	rjmp	.+22     	; 0x1704 <LED_on+0x56>

    break;

case LED_GREEN:
	 GPIO_writePin(GREEN_LED_PORT, GREEN_LED_PIN,LOGIC_HIGH );
    16ee:	82 e0       	ldi	r24, 0x02	; 2
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	41 e0       	ldi	r20, 0x01	; 1
    16f4:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <LED_on+0x56>

    break;

case LED_BLUE:
	 GPIO_writePin(BLUE_LED_PORT, BLUE_LED_PIN,LOGIC_HIGH );
    16fa:	82 e0       	ldi	r24, 0x02	; 2
    16fc:	62 e0       	ldi	r22, 0x02	; 2
    16fe:	41 e0       	ldi	r20, 0x01	; 1
    1700:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>

    break;
}

}
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <LED_off>:

void LED_off(LED_ID id)
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	00 d0       	rcall	.+0      	; 0x1716 <LED_off+0x6>
    1716:	0f 92       	push	r0
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	89 83       	std	Y+1, r24	; 0x01
    switch (id) {
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	3b 83       	std	Y+3, r19	; 0x03
    1726:	2a 83       	std	Y+2, r18	; 0x02
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	9b 81       	ldd	r25, Y+3	; 0x03
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	91 05       	cpc	r25, r1
    1730:	79 f0       	breq	.+30     	; 0x1750 <LED_off+0x40>
    1732:	2a 81       	ldd	r18, Y+2	; 0x02
    1734:	3b 81       	ldd	r19, Y+3	; 0x03
    1736:	22 30       	cpi	r18, 0x02	; 2
    1738:	31 05       	cpc	r19, r1
    173a:	81 f0       	breq	.+32     	; 0x175c <LED_off+0x4c>
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	9b 81       	ldd	r25, Y+3	; 0x03
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	89 f4       	brne	.+34     	; 0x1766 <LED_off+0x56>
        case LED_RED:
        	GPIO_writePin(RED_LED_PORT, RED_LED_PIN,LOGIC_LOW);
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	40 e0       	ldi	r20, 0x00	; 0
    174a:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    174e:	0b c0       	rjmp	.+22     	; 0x1766 <LED_off+0x56>

            break;

        case LED_GREEN:
        	GPIO_writePin(GREEN_LED_PORT, GREEN_LED_PIN,LOGIC_LOW);
    1750:	82 e0       	ldi	r24, 0x02	; 2
    1752:	61 e0       	ldi	r22, 0x01	; 1
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    175a:	05 c0       	rjmp	.+10     	; 0x1766 <LED_off+0x56>

            break;

        case LED_BLUE:
        	GPIO_writePin(BLUE_LED_PORT, BLUE_LED_PIN,LOGIC_LOW);
    175c:	82 e0       	ldi	r24, 0x02	; 2
    175e:	62 e0       	ldi	r22, 0x02	; 2
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>

            break;
    }
}
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <Ultrasonic_init>:
the GPIO driver.
▪ Inputs: None.
▪ Return: None. */


void Ultrasonic_init(void){
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
	const ICU_ConfigType config={F_CPU_8,RAISING};
	ICU_init(&config);
    177a:	8f e9       	ldi	r24, 0x9F	; 159
    177c:	91 e0       	ldi	r25, 0x01	; 1
    177e:	0e 94 88 0a 	call	0x1510	; 0x1510 <ICU_init>
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    1782:	85 e5       	ldi	r24, 0x55	; 85
    1784:	9d e0       	ldi	r25, 0x0D	; 13
    1786:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <ICU_setCallBack>
    GPIO_setupPinDirection(Ultrasonic_Trigger_PORT_ID,Ultrasonic_Trigger_PIN_ID ,PIN_OUTPUT);
    178a:	83 e0       	ldi	r24, 0x03	; 3
    178c:	67 e0       	ldi	r22, 0x07	; 7
    178e:	41 e0       	ldi	r20, 0x01	; 1
    1790:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>


}
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	08 95       	ret

0000179a <Ultrasonic_Trigger>:
/* ▪ Description:
▪ Send the trigger pulse to the ultrasonic sensor.
▪ Inputs: None.
▪ Return: None. */

void Ultrasonic_Trigger(void){
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	68 97       	sbiw	r28, 0x18	; 24
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	cd bf       	out	0x3d, r28	; 61
    GPIO_writePin(Ultrasonic_Trigger_PORT_ID,Ultrasonic_Trigger_PIN_ID,LOGIC_HIGH);
    17ae:	83 e0       	ldi	r24, 0x03	; 3
    17b0:	67 e0       	ldi	r22, 0x07	; 7
    17b2:	41 e0       	ldi	r20, 0x01	; 1
    17b4:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	a0 e2       	ldi	r26, 0x20	; 32
    17be:	b1 e4       	ldi	r27, 0x41	; 65
    17c0:	8d 8b       	std	Y+21, r24	; 0x15
    17c2:	9e 8b       	std	Y+22, r25	; 0x16
    17c4:	af 8b       	std	Y+23, r26	; 0x17
    17c6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17c8:	6d 89       	ldd	r22, Y+21	; 0x15
    17ca:	7e 89       	ldd	r23, Y+22	; 0x16
    17cc:	8f 89       	ldd	r24, Y+23	; 0x17
    17ce:	98 8d       	ldd	r25, Y+24	; 0x18
    17d0:	2b ea       	ldi	r18, 0xAB	; 171
    17d2:	3a ea       	ldi	r19, 0xAA	; 170
    17d4:	4a ea       	ldi	r20, 0xAA	; 170
    17d6:	50 e4       	ldi	r21, 0x40	; 64
    17d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	89 8b       	std	Y+17, r24	; 0x11
    17e2:	9a 8b       	std	Y+18, r25	; 0x12
    17e4:	ab 8b       	std	Y+19, r26	; 0x13
    17e6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    17e8:	69 89       	ldd	r22, Y+17	; 0x11
    17ea:	7a 89       	ldd	r23, Y+18	; 0x12
    17ec:	8b 89       	ldd	r24, Y+19	; 0x13
    17ee:	9c 89       	ldd	r25, Y+20	; 0x14
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e8       	ldi	r20, 0x80	; 128
    17f6:	5f e3       	ldi	r21, 0x3F	; 63
    17f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17fc:	88 23       	and	r24, r24
    17fe:	1c f4       	brge	.+6      	; 0x1806 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	88 8b       	std	Y+16, r24	; 0x10
    1804:	91 c0       	rjmp	.+290    	; 0x1928 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    1806:	69 89       	ldd	r22, Y+17	; 0x11
    1808:	7a 89       	ldd	r23, Y+18	; 0x12
    180a:	8b 89       	ldd	r24, Y+19	; 0x13
    180c:	9c 89       	ldd	r25, Y+20	; 0x14
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	4f e7       	ldi	r20, 0x7F	; 127
    1814:	53 e4       	ldi	r21, 0x43	; 67
    1816:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    181a:	18 16       	cp	r1, r24
    181c:	0c f0       	brlt	.+2      	; 0x1820 <Ultrasonic_Trigger+0x86>
    181e:	7b c0       	rjmp	.+246    	; 0x1916 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1820:	6d 89       	ldd	r22, Y+21	; 0x15
    1822:	7e 89       	ldd	r23, Y+22	; 0x16
    1824:	8f 89       	ldd	r24, Y+23	; 0x17
    1826:	98 8d       	ldd	r25, Y+24	; 0x18
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	4a e7       	ldi	r20, 0x7A	; 122
    182e:	54 e4       	ldi	r21, 0x44	; 68
    1830:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	8c 87       	std	Y+12, r24	; 0x0c
    183a:	9d 87       	std	Y+13, r25	; 0x0d
    183c:	ae 87       	std	Y+14, r26	; 0x0e
    183e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1840:	6c 85       	ldd	r22, Y+12	; 0x0c
    1842:	7d 85       	ldd	r23, Y+13	; 0x0d
    1844:	8e 85       	ldd	r24, Y+14	; 0x0e
    1846:	9f 85       	ldd	r25, Y+15	; 0x0f
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	4a e7       	ldi	r20, 0x7A	; 122
    184e:	55 e4       	ldi	r21, 0x45	; 69
    1850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	88 87       	std	Y+8, r24	; 0x08
    185a:	99 87       	std	Y+9, r25	; 0x09
    185c:	aa 87       	std	Y+10, r26	; 0x0a
    185e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1860:	68 85       	ldd	r22, Y+8	; 0x08
    1862:	79 85       	ldd	r23, Y+9	; 0x09
    1864:	8a 85       	ldd	r24, Y+10	; 0x0a
    1866:	9b 85       	ldd	r25, Y+11	; 0x0b
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e8       	ldi	r20, 0x80	; 128
    186e:	5f e3       	ldi	r21, 0x3F	; 63
    1870:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1874:	88 23       	and	r24, r24
    1876:	2c f4       	brge	.+10     	; 0x1882 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	9f 83       	std	Y+7, r25	; 0x07
    187e:	8e 83       	std	Y+6, r24	; 0x06
    1880:	3f c0       	rjmp	.+126    	; 0x1900 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    1882:	68 85       	ldd	r22, Y+8	; 0x08
    1884:	79 85       	ldd	r23, Y+9	; 0x09
    1886:	8a 85       	ldd	r24, Y+10	; 0x0a
    1888:	9b 85       	ldd	r25, Y+11	; 0x0b
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	3f ef       	ldi	r19, 0xFF	; 255
    188e:	4f e7       	ldi	r20, 0x7F	; 127
    1890:	57 e4       	ldi	r21, 0x47	; 71
    1892:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1896:	18 16       	cp	r1, r24
    1898:	4c f5       	brge	.+82     	; 0x18ec <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189a:	6c 85       	ldd	r22, Y+12	; 0x0c
    189c:	7d 85       	ldd	r23, Y+13	; 0x0d
    189e:	8e 85       	ldd	r24, Y+14	; 0x0e
    18a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	40 e2       	ldi	r20, 0x20	; 32
    18a8:	51 e4       	ldi	r21, 0x41	; 65
    18aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	bc 01       	movw	r22, r24
    18b4:	cd 01       	movw	r24, r26
    18b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	9f 83       	std	Y+7, r25	; 0x07
    18c0:	8e 83       	std	Y+6, r24	; 0x06
    18c2:	0f c0       	rjmp	.+30     	; 0x18e2 <Ultrasonic_Trigger+0x148>
    18c4:	80 e9       	ldi	r24, 0x90	; 144
    18c6:	91 e0       	ldi	r25, 0x01	; 1
    18c8:	9d 83       	std	Y+5, r25	; 0x05
    18ca:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18cc:	8c 81       	ldd	r24, Y+4	; 0x04
    18ce:	9d 81       	ldd	r25, Y+5	; 0x05
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	f1 f7       	brne	.-4      	; 0x18d0 <Ultrasonic_Trigger+0x136>
    18d4:	9d 83       	std	Y+5, r25	; 0x05
    18d6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d8:	8e 81       	ldd	r24, Y+6	; 0x06
    18da:	9f 81       	ldd	r25, Y+7	; 0x07
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	9f 83       	std	Y+7, r25	; 0x07
    18e0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e2:	8e 81       	ldd	r24, Y+6	; 0x06
    18e4:	9f 81       	ldd	r25, Y+7	; 0x07
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	69 f7       	brne	.-38     	; 0x18c4 <Ultrasonic_Trigger+0x12a>
    18ea:	24 c0       	rjmp	.+72     	; 0x1934 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ec:	68 85       	ldd	r22, Y+8	; 0x08
    18ee:	79 85       	ldd	r23, Y+9	; 0x09
    18f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    18f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    18f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	9f 83       	std	Y+7, r25	; 0x07
    18fe:	8e 83       	std	Y+6, r24	; 0x06
    1900:	8e 81       	ldd	r24, Y+6	; 0x06
    1902:	9f 81       	ldd	r25, Y+7	; 0x07
    1904:	9b 83       	std	Y+3, r25	; 0x03
    1906:	8a 83       	std	Y+2, r24	; 0x02
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	9b 81       	ldd	r25, Y+3	; 0x03
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	f1 f7       	brne	.-4      	; 0x190c <Ultrasonic_Trigger+0x172>
    1910:	9b 83       	std	Y+3, r25	; 0x03
    1912:	8a 83       	std	Y+2, r24	; 0x02
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1916:	69 89       	ldd	r22, Y+17	; 0x11
    1918:	7a 89       	ldd	r23, Y+18	; 0x12
    191a:	8b 89       	ldd	r24, Y+19	; 0x13
    191c:	9c 89       	ldd	r25, Y+20	; 0x14
    191e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	88 8b       	std	Y+16, r24	; 0x10
    1928:	88 89       	ldd	r24, Y+16	; 0x10
    192a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	8a 95       	dec	r24
    1930:	f1 f7       	brne	.-4      	; 0x192e <Ultrasonic_Trigger+0x194>
    1932:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10);
    GPIO_writePin(Ultrasonic_Trigger_PORT_ID,Ultrasonic_Trigger_PIN_ID,LOGIC_LOW);
    1934:	83 e0       	ldi	r24, 0x03	; 3
    1936:	67 e0       	ldi	r22, 0x07	; 7
    1938:	40 e0       	ldi	r20, 0x00	; 0
    193a:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
}
    193e:	68 96       	adiw	r28, 0x18	; 24
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <Ultrasonic_readDistance>:
▪ Start the measurement process via the ICU driver.
6
▪ Inputs: None.
▪ Return: The measured distance in centimeters.*/

uint16 Ultrasonic_readDistance(void){
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	60 97       	sbiw	r28, 0x10	; 16
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
	  uint16 distance=0;
    1964:	18 8a       	std	Y+16, r1	; 0x10
    1966:	1f 86       	std	Y+15, r1	; 0x0f
	  g_edgeCount = 0;
    1968:	10 92 a4 01 	sts	0x01A4, r1
    Ultrasonic_Trigger();
    196c:	0e 94 cd 0b 	call	0x179a	; 0x179a <Ultrasonic_Trigger>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a8 e4       	ldi	r26, 0x48	; 72
    1976:	b3 e4       	ldi	r27, 0x43	; 67
    1978:	8b 87       	std	Y+11, r24	; 0x0b
    197a:	9c 87       	std	Y+12, r25	; 0x0c
    197c:	ad 87       	std	Y+13, r26	; 0x0d
    197e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1980:	6b 85       	ldd	r22, Y+11	; 0x0b
    1982:	7c 85       	ldd	r23, Y+12	; 0x0c
    1984:	8d 85       	ldd	r24, Y+13	; 0x0d
    1986:	9e 85       	ldd	r25, Y+14	; 0x0e
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	4a e7       	ldi	r20, 0x7A	; 122
    198e:	55 e4       	ldi	r21, 0x45	; 69
    1990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	8f 83       	std	Y+7, r24	; 0x07
    199a:	98 87       	std	Y+8, r25	; 0x08
    199c:	a9 87       	std	Y+9, r26	; 0x09
    199e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19a0:	6f 81       	ldd	r22, Y+7	; 0x07
    19a2:	78 85       	ldd	r23, Y+8	; 0x08
    19a4:	89 85       	ldd	r24, Y+9	; 0x09
    19a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e8       	ldi	r20, 0x80	; 128
    19ae:	5f e3       	ldi	r21, 0x3F	; 63
    19b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19b4:	88 23       	and	r24, r24
    19b6:	2c f4       	brge	.+10     	; 0x19c2 <Ultrasonic_readDistance+0x72>
		__ticks = 1;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	9e 83       	std	Y+6, r25	; 0x06
    19be:	8d 83       	std	Y+5, r24	; 0x05
    19c0:	3f c0       	rjmp	.+126    	; 0x1a40 <Ultrasonic_readDistance+0xf0>
	else if (__tmp > 65535)
    19c2:	6f 81       	ldd	r22, Y+7	; 0x07
    19c4:	78 85       	ldd	r23, Y+8	; 0x08
    19c6:	89 85       	ldd	r24, Y+9	; 0x09
    19c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	3f ef       	ldi	r19, 0xFF	; 255
    19ce:	4f e7       	ldi	r20, 0x7F	; 127
    19d0:	57 e4       	ldi	r21, 0x47	; 71
    19d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19d6:	18 16       	cp	r1, r24
    19d8:	4c f5       	brge	.+82     	; 0x1a2c <Ultrasonic_readDistance+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19da:	6b 85       	ldd	r22, Y+11	; 0x0b
    19dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19de:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e2       	ldi	r20, 0x20	; 32
    19e8:	51 e4       	ldi	r21, 0x41	; 65
    19ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	bc 01       	movw	r22, r24
    19f4:	cd 01       	movw	r24, r26
    19f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9e 83       	std	Y+6, r25	; 0x06
    1a00:	8d 83       	std	Y+5, r24	; 0x05
    1a02:	0f c0       	rjmp	.+30     	; 0x1a22 <Ultrasonic_readDistance+0xd2>
    1a04:	80 e9       	ldi	r24, 0x90	; 144
    1a06:	91 e0       	ldi	r25, 0x01	; 1
    1a08:	9c 83       	std	Y+4, r25	; 0x04
    1a0a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <Ultrasonic_readDistance+0xc0>
    1a14:	9c 83       	std	Y+4, r25	; 0x04
    1a16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	9e 83       	std	Y+6, r25	; 0x06
    1a20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a22:	8d 81       	ldd	r24, Y+5	; 0x05
    1a24:	9e 81       	ldd	r25, Y+6	; 0x06
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	69 f7       	brne	.-38     	; 0x1a04 <Ultrasonic_readDistance+0xb4>
    1a2a:	14 c0       	rjmp	.+40     	; 0x1a54 <Ultrasonic_readDistance+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2e:	78 85       	ldd	r23, Y+8	; 0x08
    1a30:	89 85       	ldd	r24, Y+9	; 0x09
    1a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	9e 83       	std	Y+6, r25	; 0x06
    1a3e:	8d 83       	std	Y+5, r24	; 0x05
    1a40:	8d 81       	ldd	r24, Y+5	; 0x05
    1a42:	9e 81       	ldd	r25, Y+6	; 0x06
    1a44:	9a 83       	std	Y+2, r25	; 0x02
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <Ultrasonic_readDistance+0xfc>
    1a50:	9a 83       	std	Y+2, r25	; 0x02
    1a52:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(200);// 3lshan el polling msh sh8al f3mlt delay 3lshan el cpu load
    distance=(uint16)(g_timeHigh / 117.6);
    1a54:	80 91 a5 01 	lds	r24, 0x01A5
    1a58:	90 91 a6 01 	lds	r25, 0x01A6
    1a5c:	cc 01       	movw	r24, r24
    1a5e:	a0 e0       	ldi	r26, 0x00	; 0
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	bc 01       	movw	r22, r24
    1a64:	cd 01       	movw	r24, r26
    1a66:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	23 e3       	ldi	r18, 0x33	; 51
    1a74:	33 e3       	ldi	r19, 0x33	; 51
    1a76:	4b ee       	ldi	r20, 0xEB	; 235
    1a78:	52 e4       	ldi	r21, 0x42	; 66
    1a7a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	98 8b       	std	Y+16, r25	; 0x10
    1a90:	8f 87       	std	Y+15, r24	; 0x0f

    return (distance+1);
    1a92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a94:	98 89       	ldd	r25, Y+16	; 0x10
    1a96:	01 96       	adiw	r24, 0x01	; 1
}
    1a98:	60 96       	adiw	r28, 0x10	; 16
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <Ultrasonic_edgeProcessing>:



void Ultrasonic_edgeProcessing(void)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    1ab2:	80 91 a4 01 	lds	r24, 0x01A4
    1ab6:	8f 5f       	subi	r24, 0xFF	; 255
    1ab8:	80 93 a4 01 	sts	0x01A4, r24
	if(g_edgeCount == 1)
    1abc:	80 91 a4 01 	lds	r24, 0x01A4
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	31 f4       	brne	.+12     	; 0x1ad0 <Ultrasonic_edgeProcessing+0x26>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */		ICU_clearTimerValue();
    1ac4:	0e 94 0d 0b 	call	0x161a	; 0x161a <ICU_clearTimerValue>

		/* Detect falling edge */
		ICU_setEdgeDetectionType(FALLING);
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <ICU_setEdgeDetectionType>
    1ace:	0d c0       	rjmp	.+26     	; 0x1aea <Ultrasonic_edgeProcessing+0x40>
	}
	else if(g_edgeCount == 2)
    1ad0:	80 91 a4 01 	lds	r24, 0x01A4
    1ad4:	82 30       	cpi	r24, 0x02	; 2
    1ad6:	49 f4       	brne	.+18     	; 0x1aea <Ultrasonic_edgeProcessing+0x40>
	{
		/* Store the High time value */
		g_timeHigh = ICU_getInputCaptureValue();
    1ad8:	0e 94 02 0b 	call	0x1604	; 0x1604 <ICU_getInputCaptureValue>
    1adc:	90 93 a6 01 	sts	0x01A6, r25
    1ae0:	80 93 a5 01 	sts	0x01A5, r24
		/* Detect rising edge */
		ICU_setEdgeDetectionType(RAISING);
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <ICU_setEdgeDetectionType>

	}

}
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <Buzzer_init>:
 *
 *******************************************************************************/

#include "buzzer.h"
void Buzzer_init(void)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    BUZZER_DDR |= (1 << BUZZER_PIN);   // Set buzzer pin as output
    1af8:	a4 e3       	ldi	r26, 0x34	; 52
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e4 e3       	ldi	r30, 0x34	; 52
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	80 62       	ori	r24, 0x20	; 32
    1b04:	8c 93       	st	X, r24
    BUZZER_PORT &= ~(1 << BUZZER_PIN); // Turn buzzer off initially
    1b06:	a5 e3       	ldi	r26, 0x35	; 53
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e5 e3       	ldi	r30, 0x35	; 53
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	8f 7d       	andi	r24, 0xDF	; 223
    1b12:	8c 93       	st	X, r24
}
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <Buzzer_on>:

void Buzzer_on(void)
{
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    BUZZER_PORT |= (1 << BUZZER_PIN); // Set pin high
    1b22:	a5 e3       	ldi	r26, 0x35	; 53
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e5 e3       	ldi	r30, 0x35	; 53
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	80 62       	ori	r24, 0x20	; 32
    1b2e:	8c 93       	st	X, r24
}
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <Buzzer_off>:

void Buzzer_off(void)
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    BUZZER_PORT &= ~(1 << BUZZER_PIN); // Set pin low
    1b3e:	a5 e3       	ldi	r26, 0x35	; 53
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e5 e3       	ldi	r30, 0x35	; 53
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	8f 7d       	andi	r24, 0xDF	; 223
    1b4a:	8c 93       	st	X, r24
}
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	2e 97       	sbiw	r28, 0x0e	; 14
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	61 e0       	ldi	r22, 0x01	; 1
    1b6a:	41 e0       	ldi	r20, 0x01	; 1
    1b6c:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	62 e0       	ldi	r22, 0x02	; 2
    1b74:	41 e0       	ldi	r20, 0x01	; 1
    1b76:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	a0 ea       	ldi	r26, 0xA0	; 160
    1b80:	b1 e4       	ldi	r27, 0x41	; 65
    1b82:	8b 87       	std	Y+11, r24	; 0x0b
    1b84:	9c 87       	std	Y+12, r25	; 0x0c
    1b86:	ad 87       	std	Y+13, r26	; 0x0d
    1b88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	4a e7       	ldi	r20, 0x7A	; 122
    1b98:	55 e4       	ldi	r21, 0x45	; 69
    1b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	8f 83       	std	Y+7, r24	; 0x07
    1ba4:	98 87       	std	Y+8, r25	; 0x08
    1ba6:	a9 87       	std	Y+9, r26	; 0x09
    1ba8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1baa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bac:	78 85       	ldd	r23, Y+8	; 0x08
    1bae:	89 85       	ldd	r24, Y+9	; 0x09
    1bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e8       	ldi	r20, 0x80	; 128
    1bb8:	5f e3       	ldi	r21, 0x3F	; 63
    1bba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bbe:	88 23       	and	r24, r24
    1bc0:	2c f4       	brge	.+10     	; 0x1bcc <LCD_init+0x7a>
		__ticks = 1;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	9e 83       	std	Y+6, r25	; 0x06
    1bc8:	8d 83       	std	Y+5, r24	; 0x05
    1bca:	3f c0       	rjmp	.+126    	; 0x1c4a <LCD_init+0xf8>
	else if (__tmp > 65535)
    1bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bce:	78 85       	ldd	r23, Y+8	; 0x08
    1bd0:	89 85       	ldd	r24, Y+9	; 0x09
    1bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	3f ef       	ldi	r19, 0xFF	; 255
    1bd8:	4f e7       	ldi	r20, 0x7F	; 127
    1bda:	57 e4       	ldi	r21, 0x47	; 71
    1bdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1be0:	18 16       	cp	r1, r24
    1be2:	4c f5       	brge	.+82     	; 0x1c36 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e2       	ldi	r20, 0x20	; 32
    1bf2:	51 e4       	ldi	r21, 0x41	; 65
    1bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	bc 01       	movw	r22, r24
    1bfe:	cd 01       	movw	r24, r26
    1c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	9e 83       	std	Y+6, r25	; 0x06
    1c0a:	8d 83       	std	Y+5, r24	; 0x05
    1c0c:	0f c0       	rjmp	.+30     	; 0x1c2c <LCD_init+0xda>
    1c0e:	80 e9       	ldi	r24, 0x90	; 144
    1c10:	91 e0       	ldi	r25, 0x01	; 1
    1c12:	9c 83       	std	Y+4, r25	; 0x04
    1c14:	8b 83       	std	Y+3, r24	; 0x03
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <LCD_init+0xc8>
    1c1e:	9c 83       	std	Y+4, r25	; 0x04
    1c20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c22:	8d 81       	ldd	r24, Y+5	; 0x05
    1c24:	9e 81       	ldd	r25, Y+6	; 0x06
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	9e 83       	std	Y+6, r25	; 0x06
    1c2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	69 f7       	brne	.-38     	; 0x1c0e <LCD_init+0xbc>
    1c34:	14 c0       	rjmp	.+40     	; 0x1c5e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c36:	6f 81       	ldd	r22, Y+7	; 0x07
    1c38:	78 85       	ldd	r23, Y+8	; 0x08
    1c3a:	89 85       	ldd	r24, Y+9	; 0x09
    1c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	9e 83       	std	Y+6, r25	; 0x06
    1c48:	8d 83       	std	Y+5, r24	; 0x05
    1c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4e:	9a 83       	std	Y+2, r25	; 0x02
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	9a 81       	ldd	r25, Y+2	; 0x02
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	f1 f7       	brne	.-4      	; 0x1c56 <LCD_init+0x104>
    1c5a:	9a 83       	std	Y+2, r25	; 0x02
    1c5c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	63 e0       	ldi	r22, 0x03	; 3
    1c62:	41 e0       	ldi	r20, 0x01	; 1
    1c64:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	64 e0       	ldi	r22, 0x04	; 4
    1c6c:	41 e0       	ldi	r20, 0x01	; 1
    1c6e:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	65 e0       	ldi	r22, 0x05	; 5
    1c76:	41 e0       	ldi	r20, 0x01	; 1
    1c78:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	66 e0       	ldi	r22, 0x06	; 6
    1c80:	41 e0       	ldi	r20, 0x01	; 1
    1c82:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1c86:	83 e3       	ldi	r24, 0x33	; 51
    1c88:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1c8c:	82 e3       	ldi	r24, 0x32	; 50
    1c8e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1c92:	88 e2       	ldi	r24, 0x28	; 40
    1c94:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1c98:	8c e0       	ldi	r24, 0x0C	; 12
    1c9a:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_sendCommand>
}
    1ca4:	2e 96       	adiw	r28, 0x0e	; 14
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1cb6:	0f 93       	push	r16
    1cb8:	1f 93       	push	r17
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	c3 56       	subi	r28, 0x63	; 99
    1cc4:	d0 40       	sbci	r29, 0x00	; 0
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	ed 59       	subi	r30, 0x9D	; 157
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	61 e0       	ldi	r22, 0x01	; 1
    1cdc:	40 e0       	ldi	r20, 0x00	; 0
    1cde:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e1 5a       	subi	r30, 0xA1	; 161
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	a0 e8       	ldi	r26, 0x80	; 128
    1cee:	bf e3       	ldi	r27, 0x3F	; 63
    1cf0:	80 83       	st	Z, r24
    1cf2:	91 83       	std	Z+1, r25	; 0x01
    1cf4:	a2 83       	std	Z+2, r26	; 0x02
    1cf6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf8:	8e 01       	movw	r16, r28
    1cfa:	05 5a       	subi	r16, 0xA5	; 165
    1cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfe:	fe 01       	movw	r30, r28
    1d00:	e1 5a       	subi	r30, 0xA1	; 161
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	60 81       	ld	r22, Z
    1d06:	71 81       	ldd	r23, Z+1	; 0x01
    1d08:	82 81       	ldd	r24, Z+2	; 0x02
    1d0a:	93 81       	ldd	r25, Z+3	; 0x03
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	4a e7       	ldi	r20, 0x7A	; 122
    1d12:	55 e4       	ldi	r21, 0x45	; 69
    1d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	f8 01       	movw	r30, r16
    1d1e:	80 83       	st	Z, r24
    1d20:	91 83       	std	Z+1, r25	; 0x01
    1d22:	a2 83       	std	Z+2, r26	; 0x02
    1d24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d26:	fe 01       	movw	r30, r28
    1d28:	e5 5a       	subi	r30, 0xA5	; 165
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	60 81       	ld	r22, Z
    1d2e:	71 81       	ldd	r23, Z+1	; 0x01
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e8       	ldi	r20, 0x80	; 128
    1d3a:	5f e3       	ldi	r21, 0x3F	; 63
    1d3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d40:	88 23       	and	r24, r24
    1d42:	44 f4       	brge	.+16     	; 0x1d54 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1d44:	fe 01       	movw	r30, r28
    1d46:	e7 5a       	subi	r30, 0xA7	; 167
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	80 83       	st	Z, r24
    1d52:	64 c0       	rjmp	.+200    	; 0x1e1c <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1d54:	fe 01       	movw	r30, r28
    1d56:	e5 5a       	subi	r30, 0xA5	; 165
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	60 81       	ld	r22, Z
    1d5c:	71 81       	ldd	r23, Z+1	; 0x01
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	3f ef       	ldi	r19, 0xFF	; 255
    1d66:	4f e7       	ldi	r20, 0x7F	; 127
    1d68:	57 e4       	ldi	r21, 0x47	; 71
    1d6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d6e:	18 16       	cp	r1, r24
    1d70:	0c f0       	brlt	.+2      	; 0x1d74 <LCD_sendCommand+0xbe>
    1d72:	43 c0       	rjmp	.+134    	; 0x1dfa <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d74:	fe 01       	movw	r30, r28
    1d76:	e1 5a       	subi	r30, 0xA1	; 161
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	60 81       	ld	r22, Z
    1d7c:	71 81       	ldd	r23, Z+1	; 0x01
    1d7e:	82 81       	ldd	r24, Z+2	; 0x02
    1d80:	93 81       	ldd	r25, Z+3	; 0x03
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e2       	ldi	r20, 0x20	; 32
    1d88:	51 e4       	ldi	r21, 0x41	; 65
    1d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	8e 01       	movw	r16, r28
    1d94:	07 5a       	subi	r16, 0xA7	; 167
    1d96:	1f 4f       	sbci	r17, 0xFF	; 255
    1d98:	bc 01       	movw	r22, r24
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	f8 01       	movw	r30, r16
    1da6:	91 83       	std	Z+1, r25	; 0x01
    1da8:	80 83       	st	Z, r24
    1daa:	1f c0       	rjmp	.+62     	; 0x1dea <LCD_sendCommand+0x134>
    1dac:	fe 01       	movw	r30, r28
    1dae:	e9 5a       	subi	r30, 0xA9	; 169
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	80 e9       	ldi	r24, 0x90	; 144
    1db4:	91 e0       	ldi	r25, 0x01	; 1
    1db6:	91 83       	std	Z+1, r25	; 0x01
    1db8:	80 83       	st	Z, r24
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e9 5a       	subi	r30, 0xA9	; 169
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	80 81       	ld	r24, Z
    1dc2:	91 81       	ldd	r25, Z+1	; 0x01
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <LCD_sendCommand+0x10e>
    1dc8:	fe 01       	movw	r30, r28
    1dca:	e9 5a       	subi	r30, 0xA9	; 169
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	91 83       	std	Z+1, r25	; 0x01
    1dd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd2:	de 01       	movw	r26, r28
    1dd4:	a7 5a       	subi	r26, 0xA7	; 167
    1dd6:	bf 4f       	sbci	r27, 0xFF	; 255
    1dd8:	fe 01       	movw	r30, r28
    1dda:	e7 5a       	subi	r30, 0xA7	; 167
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	80 81       	ld	r24, Z
    1de0:	91 81       	ldd	r25, Z+1	; 0x01
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	11 96       	adiw	r26, 0x01	; 1
    1de6:	9c 93       	st	X, r25
    1de8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dea:	fe 01       	movw	r30, r28
    1dec:	e7 5a       	subi	r30, 0xA7	; 167
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	80 81       	ld	r24, Z
    1df2:	91 81       	ldd	r25, Z+1	; 0x01
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	d1 f6       	brne	.-76     	; 0x1dac <LCD_sendCommand+0xf6>
    1df8:	27 c0       	rjmp	.+78     	; 0x1e48 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfa:	8e 01       	movw	r16, r28
    1dfc:	07 5a       	subi	r16, 0xA7	; 167
    1dfe:	1f 4f       	sbci	r17, 0xFF	; 255
    1e00:	fe 01       	movw	r30, r28
    1e02:	e5 5a       	subi	r30, 0xA5	; 165
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	60 81       	ld	r22, Z
    1e08:	71 81       	ldd	r23, Z+1	; 0x01
    1e0a:	82 81       	ldd	r24, Z+2	; 0x02
    1e0c:	93 81       	ldd	r25, Z+3	; 0x03
    1e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	f8 01       	movw	r30, r16
    1e18:	91 83       	std	Z+1, r25	; 0x01
    1e1a:	80 83       	st	Z, r24
    1e1c:	de 01       	movw	r26, r28
    1e1e:	ab 5a       	subi	r26, 0xAB	; 171
    1e20:	bf 4f       	sbci	r27, 0xFF	; 255
    1e22:	fe 01       	movw	r30, r28
    1e24:	e7 5a       	subi	r30, 0xA7	; 167
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	80 81       	ld	r24, Z
    1e2a:	91 81       	ldd	r25, Z+1	; 0x01
    1e2c:	8d 93       	st	X+, r24
    1e2e:	9c 93       	st	X, r25
    1e30:	fe 01       	movw	r30, r28
    1e32:	eb 5a       	subi	r30, 0xAB	; 171
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	80 81       	ld	r24, Z
    1e38:	91 81       	ldd	r25, Z+1	; 0x01
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	f1 f7       	brne	.-4      	; 0x1e3a <LCD_sendCommand+0x184>
    1e3e:	fe 01       	movw	r30, r28
    1e40:	eb 5a       	subi	r30, 0xAB	; 171
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	91 83       	std	Z+1, r25	; 0x01
    1e46:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	62 e0       	ldi	r22, 0x02	; 2
    1e4c:	41 e0       	ldi	r20, 0x01	; 1
    1e4e:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    1e52:	fe 01       	movw	r30, r28
    1e54:	ef 5a       	subi	r30, 0xAF	; 175
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	a0 e8       	ldi	r26, 0x80	; 128
    1e5e:	bf e3       	ldi	r27, 0x3F	; 63
    1e60:	80 83       	st	Z, r24
    1e62:	91 83       	std	Z+1, r25	; 0x01
    1e64:	a2 83       	std	Z+2, r26	; 0x02
    1e66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e68:	8e 01       	movw	r16, r28
    1e6a:	03 5b       	subi	r16, 0xB3	; 179
    1e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6e:	fe 01       	movw	r30, r28
    1e70:	ef 5a       	subi	r30, 0xAF	; 175
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	60 81       	ld	r22, Z
    1e76:	71 81       	ldd	r23, Z+1	; 0x01
    1e78:	82 81       	ldd	r24, Z+2	; 0x02
    1e7a:	93 81       	ldd	r25, Z+3	; 0x03
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	4a e7       	ldi	r20, 0x7A	; 122
    1e82:	55 e4       	ldi	r21, 0x45	; 69
    1e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	f8 01       	movw	r30, r16
    1e8e:	80 83       	st	Z, r24
    1e90:	91 83       	std	Z+1, r25	; 0x01
    1e92:	a2 83       	std	Z+2, r26	; 0x02
    1e94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e96:	fe 01       	movw	r30, r28
    1e98:	e3 5b       	subi	r30, 0xB3	; 179
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	60 81       	ld	r22, Z
    1e9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e8       	ldi	r20, 0x80	; 128
    1eaa:	5f e3       	ldi	r21, 0x3F	; 63
    1eac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eb0:	88 23       	and	r24, r24
    1eb2:	44 f4       	brge	.+16     	; 0x1ec4 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e5 5b       	subi	r30, 0xB5	; 181
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	91 83       	std	Z+1, r25	; 0x01
    1ec0:	80 83       	st	Z, r24
    1ec2:	64 c0       	rjmp	.+200    	; 0x1f8c <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	e3 5b       	subi	r30, 0xB3	; 179
    1ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eca:	60 81       	ld	r22, Z
    1ecc:	71 81       	ldd	r23, Z+1	; 0x01
    1ece:	82 81       	ldd	r24, Z+2	; 0x02
    1ed0:	93 81       	ldd	r25, Z+3	; 0x03
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	3f ef       	ldi	r19, 0xFF	; 255
    1ed6:	4f e7       	ldi	r20, 0x7F	; 127
    1ed8:	57 e4       	ldi	r21, 0x47	; 71
    1eda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ede:	18 16       	cp	r1, r24
    1ee0:	0c f0       	brlt	.+2      	; 0x1ee4 <LCD_sendCommand+0x22e>
    1ee2:	43 c0       	rjmp	.+134    	; 0x1f6a <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	ef 5a       	subi	r30, 0xAF	; 175
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	60 81       	ld	r22, Z
    1eec:	71 81       	ldd	r23, Z+1	; 0x01
    1eee:	82 81       	ldd	r24, Z+2	; 0x02
    1ef0:	93 81       	ldd	r25, Z+3	; 0x03
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e2       	ldi	r20, 0x20	; 32
    1ef8:	51 e4       	ldi	r21, 0x41	; 65
    1efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	8e 01       	movw	r16, r28
    1f04:	05 5b       	subi	r16, 0xB5	; 181
    1f06:	1f 4f       	sbci	r17, 0xFF	; 255
    1f08:	bc 01       	movw	r22, r24
    1f0a:	cd 01       	movw	r24, r26
    1f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	f8 01       	movw	r30, r16
    1f16:	91 83       	std	Z+1, r25	; 0x01
    1f18:	80 83       	st	Z, r24
    1f1a:	1f c0       	rjmp	.+62     	; 0x1f5a <LCD_sendCommand+0x2a4>
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	e7 5b       	subi	r30, 0xB7	; 183
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	80 e9       	ldi	r24, 0x90	; 144
    1f24:	91 e0       	ldi	r25, 0x01	; 1
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	80 83       	st	Z, r24
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	e7 5b       	subi	r30, 0xB7	; 183
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	80 81       	ld	r24, Z
    1f32:	91 81       	ldd	r25, Z+1	; 0x01
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <LCD_sendCommand+0x27e>
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e7 5b       	subi	r30, 0xB7	; 183
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	91 83       	std	Z+1, r25	; 0x01
    1f40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f42:	de 01       	movw	r26, r28
    1f44:	a5 5b       	subi	r26, 0xB5	; 181
    1f46:	bf 4f       	sbci	r27, 0xFF	; 255
    1f48:	fe 01       	movw	r30, r28
    1f4a:	e5 5b       	subi	r30, 0xB5	; 181
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	80 81       	ld	r24, Z
    1f50:	91 81       	ldd	r25, Z+1	; 0x01
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	11 96       	adiw	r26, 0x01	; 1
    1f56:	9c 93       	st	X, r25
    1f58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e5 5b       	subi	r30, 0xB5	; 181
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	80 81       	ld	r24, Z
    1f62:	91 81       	ldd	r25, Z+1	; 0x01
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	d1 f6       	brne	.-76     	; 0x1f1c <LCD_sendCommand+0x266>
    1f68:	27 c0       	rjmp	.+78     	; 0x1fb8 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6a:	8e 01       	movw	r16, r28
    1f6c:	05 5b       	subi	r16, 0xB5	; 181
    1f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f70:	fe 01       	movw	r30, r28
    1f72:	e3 5b       	subi	r30, 0xB3	; 179
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	60 81       	ld	r22, Z
    1f78:	71 81       	ldd	r23, Z+1	; 0x01
    1f7a:	82 81       	ldd	r24, Z+2	; 0x02
    1f7c:	93 81       	ldd	r25, Z+3	; 0x03
    1f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	f8 01       	movw	r30, r16
    1f88:	91 83       	std	Z+1, r25	; 0x01
    1f8a:	80 83       	st	Z, r24
    1f8c:	de 01       	movw	r26, r28
    1f8e:	a9 5b       	subi	r26, 0xB9	; 185
    1f90:	bf 4f       	sbci	r27, 0xFF	; 255
    1f92:	fe 01       	movw	r30, r28
    1f94:	e5 5b       	subi	r30, 0xB5	; 181
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	80 81       	ld	r24, Z
    1f9a:	91 81       	ldd	r25, Z+1	; 0x01
    1f9c:	8d 93       	st	X+, r24
    1f9e:	9c 93       	st	X, r25
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e9 5b       	subi	r30, 0xB9	; 185
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	80 81       	ld	r24, Z
    1fa8:	91 81       	ldd	r25, Z+1	; 0x01
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	f1 f7       	brne	.-4      	; 0x1faa <LCD_sendCommand+0x2f4>
    1fae:	fe 01       	movw	r30, r28
    1fb0:	e9 5b       	subi	r30, 0xB9	; 185
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	91 83       	std	Z+1, r25	; 0x01
    1fb6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1fb8:	fe 01       	movw	r30, r28
    1fba:	ed 59       	subi	r30, 0x9D	; 157
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	80 81       	ld	r24, Z
    1fc0:	88 2f       	mov	r24, r24
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	80 71       	andi	r24, 0x10	; 16
    1fc6:	90 70       	andi	r25, 0x00	; 0
    1fc8:	95 95       	asr	r25
    1fca:	87 95       	ror	r24
    1fcc:	95 95       	asr	r25
    1fce:	87 95       	ror	r24
    1fd0:	95 95       	asr	r25
    1fd2:	87 95       	ror	r24
    1fd4:	95 95       	asr	r25
    1fd6:	87 95       	ror	r24
    1fd8:	98 2f       	mov	r25, r24
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	63 e0       	ldi	r22, 0x03	; 3
    1fde:	49 2f       	mov	r20, r25
    1fe0:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	ed 59       	subi	r30, 0x9D	; 157
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	80 81       	ld	r24, Z
    1fec:	88 2f       	mov	r24, r24
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	80 72       	andi	r24, 0x20	; 32
    1ff2:	90 70       	andi	r25, 0x00	; 0
    1ff4:	95 95       	asr	r25
    1ff6:	87 95       	ror	r24
    1ff8:	95 95       	asr	r25
    1ffa:	87 95       	ror	r24
    1ffc:	95 95       	asr	r25
    1ffe:	87 95       	ror	r24
    2000:	95 95       	asr	r25
    2002:	87 95       	ror	r24
    2004:	95 95       	asr	r25
    2006:	87 95       	ror	r24
    2008:	98 2f       	mov	r25, r24
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	64 e0       	ldi	r22, 0x04	; 4
    200e:	49 2f       	mov	r20, r25
    2010:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    2014:	fe 01       	movw	r30, r28
    2016:	ed 59       	subi	r30, 0x9D	; 157
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 81       	ld	r24, Z
    201c:	88 2f       	mov	r24, r24
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	80 74       	andi	r24, 0x40	; 64
    2022:	90 70       	andi	r25, 0x00	; 0
    2024:	08 2e       	mov	r0, r24
    2026:	89 2f       	mov	r24, r25
    2028:	00 0c       	add	r0, r0
    202a:	88 1f       	adc	r24, r24
    202c:	99 0b       	sbc	r25, r25
    202e:	00 0c       	add	r0, r0
    2030:	88 1f       	adc	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	98 2f       	mov	r25, r24
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	65 e0       	ldi	r22, 0x05	; 5
    203a:	49 2f       	mov	r20, r25
    203c:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2040:	fe 01       	movw	r30, r28
    2042:	ed 59       	subi	r30, 0x9D	; 157
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	80 81       	ld	r24, Z
    2048:	98 2f       	mov	r25, r24
    204a:	99 1f       	adc	r25, r25
    204c:	99 27       	eor	r25, r25
    204e:	99 1f       	adc	r25, r25
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	66 e0       	ldi	r22, 0x06	; 6
    2054:	49 2f       	mov	r20, r25
    2056:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    205a:	fe 01       	movw	r30, r28
    205c:	ed 5b       	subi	r30, 0xBD	; 189
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	a0 e8       	ldi	r26, 0x80	; 128
    2066:	bf e3       	ldi	r27, 0x3F	; 63
    2068:	80 83       	st	Z, r24
    206a:	91 83       	std	Z+1, r25	; 0x01
    206c:	a2 83       	std	Z+2, r26	; 0x02
    206e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2070:	8e 01       	movw	r16, r28
    2072:	01 5c       	subi	r16, 0xC1	; 193
    2074:	1f 4f       	sbci	r17, 0xFF	; 255
    2076:	fe 01       	movw	r30, r28
    2078:	ed 5b       	subi	r30, 0xBD	; 189
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	60 81       	ld	r22, Z
    207e:	71 81       	ldd	r23, Z+1	; 0x01
    2080:	82 81       	ldd	r24, Z+2	; 0x02
    2082:	93 81       	ldd	r25, Z+3	; 0x03
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a e7       	ldi	r20, 0x7A	; 122
    208a:	55 e4       	ldi	r21, 0x45	; 69
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	f8 01       	movw	r30, r16
    2096:	80 83       	st	Z, r24
    2098:	91 83       	std	Z+1, r25	; 0x01
    209a:	a2 83       	std	Z+2, r26	; 0x02
    209c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    209e:	fe 01       	movw	r30, r28
    20a0:	ff 96       	adiw	r30, 0x3f	; 63
    20a2:	60 81       	ld	r22, Z
    20a4:	71 81       	ldd	r23, Z+1	; 0x01
    20a6:	82 81       	ldd	r24, Z+2	; 0x02
    20a8:	93 81       	ldd	r25, Z+3	; 0x03
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e8       	ldi	r20, 0x80	; 128
    20b0:	5f e3       	ldi	r21, 0x3F	; 63
    20b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20b6:	88 23       	and	r24, r24
    20b8:	2c f4       	brge	.+10     	; 0x20c4 <LCD_sendCommand+0x40e>
		__ticks = 1;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	9e af       	std	Y+62, r25	; 0x3e
    20c0:	8d af       	std	Y+61, r24	; 0x3d
    20c2:	46 c0       	rjmp	.+140    	; 0x2150 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    20c4:	fe 01       	movw	r30, r28
    20c6:	ff 96       	adiw	r30, 0x3f	; 63
    20c8:	60 81       	ld	r22, Z
    20ca:	71 81       	ldd	r23, Z+1	; 0x01
    20cc:	82 81       	ldd	r24, Z+2	; 0x02
    20ce:	93 81       	ldd	r25, Z+3	; 0x03
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	3f ef       	ldi	r19, 0xFF	; 255
    20d4:	4f e7       	ldi	r20, 0x7F	; 127
    20d6:	57 e4       	ldi	r21, 0x47	; 71
    20d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20dc:	18 16       	cp	r1, r24
    20de:	64 f5       	brge	.+88     	; 0x2138 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e0:	fe 01       	movw	r30, r28
    20e2:	ed 5b       	subi	r30, 0xBD	; 189
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	60 81       	ld	r22, Z
    20e8:	71 81       	ldd	r23, Z+1	; 0x01
    20ea:	82 81       	ldd	r24, Z+2	; 0x02
    20ec:	93 81       	ldd	r25, Z+3	; 0x03
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e2       	ldi	r20, 0x20	; 32
    20f4:	51 e4       	ldi	r21, 0x41	; 65
    20f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	9e af       	std	Y+62, r25	; 0x3e
    210c:	8d af       	std	Y+61, r24	; 0x3d
    210e:	0f c0       	rjmp	.+30     	; 0x212e <LCD_sendCommand+0x478>
    2110:	80 e9       	ldi	r24, 0x90	; 144
    2112:	91 e0       	ldi	r25, 0x01	; 1
    2114:	9c af       	std	Y+60, r25	; 0x3c
    2116:	8b af       	std	Y+59, r24	; 0x3b
    2118:	8b ad       	ldd	r24, Y+59	; 0x3b
    211a:	9c ad       	ldd	r25, Y+60	; 0x3c
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <LCD_sendCommand+0x466>
    2120:	9c af       	std	Y+60, r25	; 0x3c
    2122:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2124:	8d ad       	ldd	r24, Y+61	; 0x3d
    2126:	9e ad       	ldd	r25, Y+62	; 0x3e
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	9e af       	std	Y+62, r25	; 0x3e
    212c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2130:	9e ad       	ldd	r25, Y+62	; 0x3e
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	69 f7       	brne	.-38     	; 0x2110 <LCD_sendCommand+0x45a>
    2136:	16 c0       	rjmp	.+44     	; 0x2164 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2138:	fe 01       	movw	r30, r28
    213a:	ff 96       	adiw	r30, 0x3f	; 63
    213c:	60 81       	ld	r22, Z
    213e:	71 81       	ldd	r23, Z+1	; 0x01
    2140:	82 81       	ldd	r24, Z+2	; 0x02
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9e af       	std	Y+62, r25	; 0x3e
    214e:	8d af       	std	Y+61, r24	; 0x3d
    2150:	8d ad       	ldd	r24, Y+61	; 0x3d
    2152:	9e ad       	ldd	r25, Y+62	; 0x3e
    2154:	9a af       	std	Y+58, r25	; 0x3a
    2156:	89 af       	std	Y+57, r24	; 0x39
    2158:	89 ad       	ldd	r24, Y+57	; 0x39
    215a:	9a ad       	ldd	r25, Y+58	; 0x3a
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <LCD_sendCommand+0x4a6>
    2160:	9a af       	std	Y+58, r25	; 0x3a
    2162:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	62 e0       	ldi	r22, 0x02	; 2
    2168:	40 e0       	ldi	r20, 0x00	; 0
    216a:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	a0 e8       	ldi	r26, 0x80	; 128
    2174:	bf e3       	ldi	r27, 0x3F	; 63
    2176:	8d ab       	std	Y+53, r24	; 0x35
    2178:	9e ab       	std	Y+54, r25	; 0x36
    217a:	af ab       	std	Y+55, r26	; 0x37
    217c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217e:	6d a9       	ldd	r22, Y+53	; 0x35
    2180:	7e a9       	ldd	r23, Y+54	; 0x36
    2182:	8f a9       	ldd	r24, Y+55	; 0x37
    2184:	98 ad       	ldd	r25, Y+56	; 0x38
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	4a e7       	ldi	r20, 0x7A	; 122
    218c:	55 e4       	ldi	r21, 0x45	; 69
    218e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	89 ab       	std	Y+49, r24	; 0x31
    2198:	9a ab       	std	Y+50, r25	; 0x32
    219a:	ab ab       	std	Y+51, r26	; 0x33
    219c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    219e:	69 a9       	ldd	r22, Y+49	; 0x31
    21a0:	7a a9       	ldd	r23, Y+50	; 0x32
    21a2:	8b a9       	ldd	r24, Y+51	; 0x33
    21a4:	9c a9       	ldd	r25, Y+52	; 0x34
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e8       	ldi	r20, 0x80	; 128
    21ac:	5f e3       	ldi	r21, 0x3F	; 63
    21ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b2:	88 23       	and	r24, r24
    21b4:	2c f4       	brge	.+10     	; 0x21c0 <LCD_sendCommand+0x50a>
		__ticks = 1;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	98 ab       	std	Y+48, r25	; 0x30
    21bc:	8f a7       	std	Y+47, r24	; 0x2f
    21be:	3f c0       	rjmp	.+126    	; 0x223e <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    21c0:	69 a9       	ldd	r22, Y+49	; 0x31
    21c2:	7a a9       	ldd	r23, Y+50	; 0x32
    21c4:	8b a9       	ldd	r24, Y+51	; 0x33
    21c6:	9c a9       	ldd	r25, Y+52	; 0x34
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	3f ef       	ldi	r19, 0xFF	; 255
    21cc:	4f e7       	ldi	r20, 0x7F	; 127
    21ce:	57 e4       	ldi	r21, 0x47	; 71
    21d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d4:	18 16       	cp	r1, r24
    21d6:	4c f5       	brge	.+82     	; 0x222a <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d8:	6d a9       	ldd	r22, Y+53	; 0x35
    21da:	7e a9       	ldd	r23, Y+54	; 0x36
    21dc:	8f a9       	ldd	r24, Y+55	; 0x37
    21de:	98 ad       	ldd	r25, Y+56	; 0x38
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e2       	ldi	r20, 0x20	; 32
    21e6:	51 e4       	ldi	r21, 0x41	; 65
    21e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	bc 01       	movw	r22, r24
    21f2:	cd 01       	movw	r24, r26
    21f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	98 ab       	std	Y+48, r25	; 0x30
    21fe:	8f a7       	std	Y+47, r24	; 0x2f
    2200:	0f c0       	rjmp	.+30     	; 0x2220 <LCD_sendCommand+0x56a>
    2202:	80 e9       	ldi	r24, 0x90	; 144
    2204:	91 e0       	ldi	r25, 0x01	; 1
    2206:	9e a7       	std	Y+46, r25	; 0x2e
    2208:	8d a7       	std	Y+45, r24	; 0x2d
    220a:	8d a5       	ldd	r24, Y+45	; 0x2d
    220c:	9e a5       	ldd	r25, Y+46	; 0x2e
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <LCD_sendCommand+0x558>
    2212:	9e a7       	std	Y+46, r25	; 0x2e
    2214:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2216:	8f a5       	ldd	r24, Y+47	; 0x2f
    2218:	98 a9       	ldd	r25, Y+48	; 0x30
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	98 ab       	std	Y+48, r25	; 0x30
    221e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2220:	8f a5       	ldd	r24, Y+47	; 0x2f
    2222:	98 a9       	ldd	r25, Y+48	; 0x30
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	69 f7       	brne	.-38     	; 0x2202 <LCD_sendCommand+0x54c>
    2228:	14 c0       	rjmp	.+40     	; 0x2252 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222a:	69 a9       	ldd	r22, Y+49	; 0x31
    222c:	7a a9       	ldd	r23, Y+50	; 0x32
    222e:	8b a9       	ldd	r24, Y+51	; 0x33
    2230:	9c a9       	ldd	r25, Y+52	; 0x34
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	98 ab       	std	Y+48, r25	; 0x30
    223c:	8f a7       	std	Y+47, r24	; 0x2f
    223e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2240:	98 a9       	ldd	r25, Y+48	; 0x30
    2242:	9c a7       	std	Y+44, r25	; 0x2c
    2244:	8b a7       	std	Y+43, r24	; 0x2b
    2246:	8b a5       	ldd	r24, Y+43	; 0x2b
    2248:	9c a5       	ldd	r25, Y+44	; 0x2c
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	f1 f7       	brne	.-4      	; 0x224a <LCD_sendCommand+0x594>
    224e:	9c a7       	std	Y+44, r25	; 0x2c
    2250:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	62 e0       	ldi	r22, 0x02	; 2
    2256:	41 e0       	ldi	r20, 0x01	; 1
    2258:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a0 e8       	ldi	r26, 0x80	; 128
    2262:	bf e3       	ldi	r27, 0x3F	; 63
    2264:	8f a3       	std	Y+39, r24	; 0x27
    2266:	98 a7       	std	Y+40, r25	; 0x28
    2268:	a9 a7       	std	Y+41, r26	; 0x29
    226a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226c:	6f a1       	ldd	r22, Y+39	; 0x27
    226e:	78 a5       	ldd	r23, Y+40	; 0x28
    2270:	89 a5       	ldd	r24, Y+41	; 0x29
    2272:	9a a5       	ldd	r25, Y+42	; 0x2a
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a e7       	ldi	r20, 0x7A	; 122
    227a:	55 e4       	ldi	r21, 0x45	; 69
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	8b a3       	std	Y+35, r24	; 0x23
    2286:	9c a3       	std	Y+36, r25	; 0x24
    2288:	ad a3       	std	Y+37, r26	; 0x25
    228a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    228c:	6b a1       	ldd	r22, Y+35	; 0x23
    228e:	7c a1       	ldd	r23, Y+36	; 0x24
    2290:	8d a1       	ldd	r24, Y+37	; 0x25
    2292:	9e a1       	ldd	r25, Y+38	; 0x26
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	2c f4       	brge	.+10     	; 0x22ae <LCD_sendCommand+0x5f8>
		__ticks = 1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9a a3       	std	Y+34, r25	; 0x22
    22aa:	89 a3       	std	Y+33, r24	; 0x21
    22ac:	3f c0       	rjmp	.+126    	; 0x232c <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    22ae:	6b a1       	ldd	r22, Y+35	; 0x23
    22b0:	7c a1       	ldd	r23, Y+36	; 0x24
    22b2:	8d a1       	ldd	r24, Y+37	; 0x25
    22b4:	9e a1       	ldd	r25, Y+38	; 0x26
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	3f ef       	ldi	r19, 0xFF	; 255
    22ba:	4f e7       	ldi	r20, 0x7F	; 127
    22bc:	57 e4       	ldi	r21, 0x47	; 71
    22be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22c2:	18 16       	cp	r1, r24
    22c4:	4c f5       	brge	.+82     	; 0x2318 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	6f a1       	ldd	r22, Y+39	; 0x27
    22c8:	78 a5       	ldd	r23, Y+40	; 0x28
    22ca:	89 a5       	ldd	r24, Y+41	; 0x29
    22cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9a a3       	std	Y+34, r25	; 0x22
    22ec:	89 a3       	std	Y+33, r24	; 0x21
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <LCD_sendCommand+0x658>
    22f0:	80 e9       	ldi	r24, 0x90	; 144
    22f2:	91 e0       	ldi	r25, 0x01	; 1
    22f4:	98 a3       	std	Y+32, r25	; 0x20
    22f6:	8f 8f       	std	Y+31, r24	; 0x1f
    22f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22fa:	98 a1       	ldd	r25, Y+32	; 0x20
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <LCD_sendCommand+0x646>
    2300:	98 a3       	std	Y+32, r25	; 0x20
    2302:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	89 a1       	ldd	r24, Y+33	; 0x21
    2306:	9a a1       	ldd	r25, Y+34	; 0x22
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	9a a3       	std	Y+34, r25	; 0x22
    230c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230e:	89 a1       	ldd	r24, Y+33	; 0x21
    2310:	9a a1       	ldd	r25, Y+34	; 0x22
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f7       	brne	.-38     	; 0x22f0 <LCD_sendCommand+0x63a>
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	6b a1       	ldd	r22, Y+35	; 0x23
    231a:	7c a1       	ldd	r23, Y+36	; 0x24
    231c:	8d a1       	ldd	r24, Y+37	; 0x25
    231e:	9e a1       	ldd	r25, Y+38	; 0x26
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	9a a3       	std	Y+34, r25	; 0x22
    232a:	89 a3       	std	Y+33, r24	; 0x21
    232c:	89 a1       	ldd	r24, Y+33	; 0x21
    232e:	9a a1       	ldd	r25, Y+34	; 0x22
    2330:	9e 8f       	std	Y+30, r25	; 0x1e
    2332:	8d 8f       	std	Y+29, r24	; 0x1d
    2334:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2336:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <LCD_sendCommand+0x682>
    233c:	9e 8f       	std	Y+30, r25	; 0x1e
    233e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2340:	fe 01       	movw	r30, r28
    2342:	ed 59       	subi	r30, 0x9D	; 157
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	80 81       	ld	r24, Z
    2348:	98 2f       	mov	r25, r24
    234a:	91 70       	andi	r25, 0x01	; 1
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	63 e0       	ldi	r22, 0x03	; 3
    2350:	49 2f       	mov	r20, r25
    2352:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2356:	fe 01       	movw	r30, r28
    2358:	ed 59       	subi	r30, 0x9D	; 157
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	80 81       	ld	r24, Z
    235e:	88 2f       	mov	r24, r24
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	82 70       	andi	r24, 0x02	; 2
    2364:	90 70       	andi	r25, 0x00	; 0
    2366:	95 95       	asr	r25
    2368:	87 95       	ror	r24
    236a:	98 2f       	mov	r25, r24
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	64 e0       	ldi	r22, 0x04	; 4
    2370:	49 2f       	mov	r20, r25
    2372:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2376:	fe 01       	movw	r30, r28
    2378:	ed 59       	subi	r30, 0x9D	; 157
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	80 81       	ld	r24, Z
    237e:	88 2f       	mov	r24, r24
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	84 70       	andi	r24, 0x04	; 4
    2384:	90 70       	andi	r25, 0x00	; 0
    2386:	95 95       	asr	r25
    2388:	87 95       	ror	r24
    238a:	95 95       	asr	r25
    238c:	87 95       	ror	r24
    238e:	98 2f       	mov	r25, r24
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	65 e0       	ldi	r22, 0x05	; 5
    2394:	49 2f       	mov	r20, r25
    2396:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    239a:	fe 01       	movw	r30, r28
    239c:	ed 59       	subi	r30, 0x9D	; 157
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 81       	ld	r24, Z
    23a2:	88 2f       	mov	r24, r24
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	88 70       	andi	r24, 0x08	; 8
    23a8:	90 70       	andi	r25, 0x00	; 0
    23aa:	95 95       	asr	r25
    23ac:	87 95       	ror	r24
    23ae:	95 95       	asr	r25
    23b0:	87 95       	ror	r24
    23b2:	95 95       	asr	r25
    23b4:	87 95       	ror	r24
    23b6:	98 2f       	mov	r25, r24
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	66 e0       	ldi	r22, 0x06	; 6
    23bc:	49 2f       	mov	r20, r25
    23be:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	a0 e8       	ldi	r26, 0x80	; 128
    23c8:	bf e3       	ldi	r27, 0x3F	; 63
    23ca:	89 8f       	std	Y+25, r24	; 0x19
    23cc:	9a 8f       	std	Y+26, r25	; 0x1a
    23ce:	ab 8f       	std	Y+27, r26	; 0x1b
    23d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d2:	69 8d       	ldd	r22, Y+25	; 0x19
    23d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	4a e7       	ldi	r20, 0x7A	; 122
    23e0:	55 e4       	ldi	r21, 0x45	; 69
    23e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	8d 8b       	std	Y+21, r24	; 0x15
    23ec:	9e 8b       	std	Y+22, r25	; 0x16
    23ee:	af 8b       	std	Y+23, r26	; 0x17
    23f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23f2:	6d 89       	ldd	r22, Y+21	; 0x15
    23f4:	7e 89       	ldd	r23, Y+22	; 0x16
    23f6:	8f 89       	ldd	r24, Y+23	; 0x17
    23f8:	98 8d       	ldd	r25, Y+24	; 0x18
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e8       	ldi	r20, 0x80	; 128
    2400:	5f e3       	ldi	r21, 0x3F	; 63
    2402:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2406:	88 23       	and	r24, r24
    2408:	2c f4       	brge	.+10     	; 0x2414 <LCD_sendCommand+0x75e>
		__ticks = 1;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	9c 8b       	std	Y+20, r25	; 0x14
    2410:	8b 8b       	std	Y+19, r24	; 0x13
    2412:	3f c0       	rjmp	.+126    	; 0x2492 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2414:	6d 89       	ldd	r22, Y+21	; 0x15
    2416:	7e 89       	ldd	r23, Y+22	; 0x16
    2418:	8f 89       	ldd	r24, Y+23	; 0x17
    241a:	98 8d       	ldd	r25, Y+24	; 0x18
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	3f ef       	ldi	r19, 0xFF	; 255
    2420:	4f e7       	ldi	r20, 0x7F	; 127
    2422:	57 e4       	ldi	r21, 0x47	; 71
    2424:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2428:	18 16       	cp	r1, r24
    242a:	4c f5       	brge	.+82     	; 0x247e <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242c:	69 8d       	ldd	r22, Y+25	; 0x19
    242e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2430:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2432:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e2       	ldi	r20, 0x20	; 32
    243a:	51 e4       	ldi	r21, 0x41	; 65
    243c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	bc 01       	movw	r22, r24
    2446:	cd 01       	movw	r24, r26
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	9c 8b       	std	Y+20, r25	; 0x14
    2452:	8b 8b       	std	Y+19, r24	; 0x13
    2454:	0f c0       	rjmp	.+30     	; 0x2474 <LCD_sendCommand+0x7be>
    2456:	80 e9       	ldi	r24, 0x90	; 144
    2458:	91 e0       	ldi	r25, 0x01	; 1
    245a:	9a 8b       	std	Y+18, r25	; 0x12
    245c:	89 8b       	std	Y+17, r24	; 0x11
    245e:	89 89       	ldd	r24, Y+17	; 0x11
    2460:	9a 89       	ldd	r25, Y+18	; 0x12
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <LCD_sendCommand+0x7ac>
    2466:	9a 8b       	std	Y+18, r25	; 0x12
    2468:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246a:	8b 89       	ldd	r24, Y+19	; 0x13
    246c:	9c 89       	ldd	r25, Y+20	; 0x14
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	9c 8b       	std	Y+20, r25	; 0x14
    2472:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2474:	8b 89       	ldd	r24, Y+19	; 0x13
    2476:	9c 89       	ldd	r25, Y+20	; 0x14
    2478:	00 97       	sbiw	r24, 0x00	; 0
    247a:	69 f7       	brne	.-38     	; 0x2456 <LCD_sendCommand+0x7a0>
    247c:	14 c0       	rjmp	.+40     	; 0x24a6 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247e:	6d 89       	ldd	r22, Y+21	; 0x15
    2480:	7e 89       	ldd	r23, Y+22	; 0x16
    2482:	8f 89       	ldd	r24, Y+23	; 0x17
    2484:	98 8d       	ldd	r25, Y+24	; 0x18
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	9c 8b       	std	Y+20, r25	; 0x14
    2490:	8b 8b       	std	Y+19, r24	; 0x13
    2492:	8b 89       	ldd	r24, Y+19	; 0x13
    2494:	9c 89       	ldd	r25, Y+20	; 0x14
    2496:	98 8b       	std	Y+16, r25	; 0x10
    2498:	8f 87       	std	Y+15, r24	; 0x0f
    249a:	8f 85       	ldd	r24, Y+15	; 0x0f
    249c:	98 89       	ldd	r25, Y+16	; 0x10
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <LCD_sendCommand+0x7e8>
    24a2:	98 8b       	std	Y+16, r25	; 0x10
    24a4:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	62 e0       	ldi	r22, 0x02	; 2
    24aa:	40 e0       	ldi	r20, 0x00	; 0
    24ac:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	a0 e8       	ldi	r26, 0x80	; 128
    24b6:	bf e3       	ldi	r27, 0x3F	; 63
    24b8:	8b 87       	std	Y+11, r24	; 0x0b
    24ba:	9c 87       	std	Y+12, r25	; 0x0c
    24bc:	ad 87       	std	Y+13, r26	; 0x0d
    24be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	4a e7       	ldi	r20, 0x7A	; 122
    24ce:	55 e4       	ldi	r21, 0x45	; 69
    24d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	8f 83       	std	Y+7, r24	; 0x07
    24da:	98 87       	std	Y+8, r25	; 0x08
    24dc:	a9 87       	std	Y+9, r26	; 0x09
    24de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24e0:	6f 81       	ldd	r22, Y+7	; 0x07
    24e2:	78 85       	ldd	r23, Y+8	; 0x08
    24e4:	89 85       	ldd	r24, Y+9	; 0x09
    24e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e8       	ldi	r20, 0x80	; 128
    24ee:	5f e3       	ldi	r21, 0x3F	; 63
    24f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f4:	88 23       	and	r24, r24
    24f6:	2c f4       	brge	.+10     	; 0x2502 <LCD_sendCommand+0x84c>
		__ticks = 1;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	9e 83       	std	Y+6, r25	; 0x06
    24fe:	8d 83       	std	Y+5, r24	; 0x05
    2500:	3f c0       	rjmp	.+126    	; 0x2580 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2502:	6f 81       	ldd	r22, Y+7	; 0x07
    2504:	78 85       	ldd	r23, Y+8	; 0x08
    2506:	89 85       	ldd	r24, Y+9	; 0x09
    2508:	9a 85       	ldd	r25, Y+10	; 0x0a
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	3f ef       	ldi	r19, 0xFF	; 255
    250e:	4f e7       	ldi	r20, 0x7F	; 127
    2510:	57 e4       	ldi	r21, 0x47	; 71
    2512:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2516:	18 16       	cp	r1, r24
    2518:	4c f5       	brge	.+82     	; 0x256c <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251a:	6b 85       	ldd	r22, Y+11	; 0x0b
    251c:	7c 85       	ldd	r23, Y+12	; 0x0c
    251e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2520:	9e 85       	ldd	r25, Y+14	; 0x0e
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e2       	ldi	r20, 0x20	; 32
    2528:	51 e4       	ldi	r21, 0x41	; 65
    252a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	bc 01       	movw	r22, r24
    2534:	cd 01       	movw	r24, r26
    2536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
    2542:	0f c0       	rjmp	.+30     	; 0x2562 <LCD_sendCommand+0x8ac>
    2544:	80 e9       	ldi	r24, 0x90	; 144
    2546:	91 e0       	ldi	r25, 0x01	; 1
    2548:	9c 83       	std	Y+4, r25	; 0x04
    254a:	8b 83       	std	Y+3, r24	; 0x03
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	9c 81       	ldd	r25, Y+4	; 0x04
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <LCD_sendCommand+0x89a>
    2554:	9c 83       	std	Y+4, r25	; 0x04
    2556:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2558:	8d 81       	ldd	r24, Y+5	; 0x05
    255a:	9e 81       	ldd	r25, Y+6	; 0x06
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	9e 83       	std	Y+6, r25	; 0x06
    2560:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2562:	8d 81       	ldd	r24, Y+5	; 0x05
    2564:	9e 81       	ldd	r25, Y+6	; 0x06
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	69 f7       	brne	.-38     	; 0x2544 <LCD_sendCommand+0x88e>
    256a:	14 c0       	rjmp	.+40     	; 0x2594 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256c:	6f 81       	ldd	r22, Y+7	; 0x07
    256e:	78 85       	ldd	r23, Y+8	; 0x08
    2570:	89 85       	ldd	r24, Y+9	; 0x09
    2572:	9a 85       	ldd	r25, Y+10	; 0x0a
    2574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	9e 83       	std	Y+6, r25	; 0x06
    257e:	8d 83       	std	Y+5, r24	; 0x05
    2580:	8d 81       	ldd	r24, Y+5	; 0x05
    2582:	9e 81       	ldd	r25, Y+6	; 0x06
    2584:	9a 83       	std	Y+2, r25	; 0x02
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	9a 81       	ldd	r25, Y+2	; 0x02
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <LCD_sendCommand+0x8d6>
    2590:	9a 83       	std	Y+2, r25	; 0x02
    2592:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2594:	cd 59       	subi	r28, 0x9D	; 157
    2596:	df 4f       	sbci	r29, 0xFF	; 255
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	1f 91       	pop	r17
    25a8:	0f 91       	pop	r16
    25aa:	08 95       	ret

000025ac <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    25ac:	0f 93       	push	r16
    25ae:	1f 93       	push	r17
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	c3 56       	subi	r28, 0x63	; 99
    25ba:	d0 40       	sbci	r29, 0x00	; 0
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	fe 01       	movw	r30, r28
    25c8:	ed 59       	subi	r30, 0x9D	; 157
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	61 e0       	ldi	r22, 0x01	; 1
    25d2:	41 e0       	ldi	r20, 0x01	; 1
    25d4:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    25d8:	fe 01       	movw	r30, r28
    25da:	e1 5a       	subi	r30, 0xA1	; 161
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	a0 e8       	ldi	r26, 0x80	; 128
    25e4:	bf e3       	ldi	r27, 0x3F	; 63
    25e6:	80 83       	st	Z, r24
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	a2 83       	std	Z+2, r26	; 0x02
    25ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ee:	8e 01       	movw	r16, r28
    25f0:	05 5a       	subi	r16, 0xA5	; 165
    25f2:	1f 4f       	sbci	r17, 0xFF	; 255
    25f4:	fe 01       	movw	r30, r28
    25f6:	e1 5a       	subi	r30, 0xA1	; 161
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	60 81       	ld	r22, Z
    25fc:	71 81       	ldd	r23, Z+1	; 0x01
    25fe:	82 81       	ldd	r24, Z+2	; 0x02
    2600:	93 81       	ldd	r25, Z+3	; 0x03
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	4a e7       	ldi	r20, 0x7A	; 122
    2608:	55 e4       	ldi	r21, 0x45	; 69
    260a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	f8 01       	movw	r30, r16
    2614:	80 83       	st	Z, r24
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	a2 83       	std	Z+2, r26	; 0x02
    261a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    261c:	fe 01       	movw	r30, r28
    261e:	e5 5a       	subi	r30, 0xA5	; 165
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	60 81       	ld	r22, Z
    2624:	71 81       	ldd	r23, Z+1	; 0x01
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e8       	ldi	r20, 0x80	; 128
    2630:	5f e3       	ldi	r21, 0x3F	; 63
    2632:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2636:	88 23       	and	r24, r24
    2638:	44 f4       	brge	.+16     	; 0x264a <LCD_displayCharacter+0x9e>
		__ticks = 1;
    263a:	fe 01       	movw	r30, r28
    263c:	e7 5a       	subi	r30, 0xA7	; 167
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	91 83       	std	Z+1, r25	; 0x01
    2646:	80 83       	st	Z, r24
    2648:	64 c0       	rjmp	.+200    	; 0x2712 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    264a:	fe 01       	movw	r30, r28
    264c:	e5 5a       	subi	r30, 0xA5	; 165
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	60 81       	ld	r22, Z
    2652:	71 81       	ldd	r23, Z+1	; 0x01
    2654:	82 81       	ldd	r24, Z+2	; 0x02
    2656:	93 81       	ldd	r25, Z+3	; 0x03
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	3f ef       	ldi	r19, 0xFF	; 255
    265c:	4f e7       	ldi	r20, 0x7F	; 127
    265e:	57 e4       	ldi	r21, 0x47	; 71
    2660:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2664:	18 16       	cp	r1, r24
    2666:	0c f0       	brlt	.+2      	; 0x266a <LCD_displayCharacter+0xbe>
    2668:	43 c0       	rjmp	.+134    	; 0x26f0 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266a:	fe 01       	movw	r30, r28
    266c:	e1 5a       	subi	r30, 0xA1	; 161
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	60 81       	ld	r22, Z
    2672:	71 81       	ldd	r23, Z+1	; 0x01
    2674:	82 81       	ldd	r24, Z+2	; 0x02
    2676:	93 81       	ldd	r25, Z+3	; 0x03
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e2       	ldi	r20, 0x20	; 32
    267e:	51 e4       	ldi	r21, 0x41	; 65
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	8e 01       	movw	r16, r28
    268a:	07 5a       	subi	r16, 0xA7	; 167
    268c:	1f 4f       	sbci	r17, 0xFF	; 255
    268e:	bc 01       	movw	r22, r24
    2690:	cd 01       	movw	r24, r26
    2692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	f8 01       	movw	r30, r16
    269c:	91 83       	std	Z+1, r25	; 0x01
    269e:	80 83       	st	Z, r24
    26a0:	1f c0       	rjmp	.+62     	; 0x26e0 <LCD_displayCharacter+0x134>
    26a2:	fe 01       	movw	r30, r28
    26a4:	e9 5a       	subi	r30, 0xA9	; 169
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	80 e9       	ldi	r24, 0x90	; 144
    26aa:	91 e0       	ldi	r25, 0x01	; 1
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	80 83       	st	Z, r24
    26b0:	fe 01       	movw	r30, r28
    26b2:	e9 5a       	subi	r30, 0xA9	; 169
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <LCD_displayCharacter+0x10e>
    26be:	fe 01       	movw	r30, r28
    26c0:	e9 5a       	subi	r30, 0xA9	; 169
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c8:	de 01       	movw	r26, r28
    26ca:	a7 5a       	subi	r26, 0xA7	; 167
    26cc:	bf 4f       	sbci	r27, 0xFF	; 255
    26ce:	fe 01       	movw	r30, r28
    26d0:	e7 5a       	subi	r30, 0xA7	; 167
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	11 96       	adiw	r26, 0x01	; 1
    26dc:	9c 93       	st	X, r25
    26de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e0:	fe 01       	movw	r30, r28
    26e2:	e7 5a       	subi	r30, 0xA7	; 167
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	80 81       	ld	r24, Z
    26e8:	91 81       	ldd	r25, Z+1	; 0x01
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	d1 f6       	brne	.-76     	; 0x26a2 <LCD_displayCharacter+0xf6>
    26ee:	27 c0       	rjmp	.+78     	; 0x273e <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f0:	8e 01       	movw	r16, r28
    26f2:	07 5a       	subi	r16, 0xA7	; 167
    26f4:	1f 4f       	sbci	r17, 0xFF	; 255
    26f6:	fe 01       	movw	r30, r28
    26f8:	e5 5a       	subi	r30, 0xA5	; 165
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	60 81       	ld	r22, Z
    26fe:	71 81       	ldd	r23, Z+1	; 0x01
    2700:	82 81       	ldd	r24, Z+2	; 0x02
    2702:	93 81       	ldd	r25, Z+3	; 0x03
    2704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	f8 01       	movw	r30, r16
    270e:	91 83       	std	Z+1, r25	; 0x01
    2710:	80 83       	st	Z, r24
    2712:	de 01       	movw	r26, r28
    2714:	ab 5a       	subi	r26, 0xAB	; 171
    2716:	bf 4f       	sbci	r27, 0xFF	; 255
    2718:	fe 01       	movw	r30, r28
    271a:	e7 5a       	subi	r30, 0xA7	; 167
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	80 81       	ld	r24, Z
    2720:	91 81       	ldd	r25, Z+1	; 0x01
    2722:	8d 93       	st	X+, r24
    2724:	9c 93       	st	X, r25
    2726:	fe 01       	movw	r30, r28
    2728:	eb 5a       	subi	r30, 0xAB	; 171
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	80 81       	ld	r24, Z
    272e:	91 81       	ldd	r25, Z+1	; 0x01
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	f1 f7       	brne	.-4      	; 0x2730 <LCD_displayCharacter+0x184>
    2734:	fe 01       	movw	r30, r28
    2736:	eb 5a       	subi	r30, 0xAB	; 171
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	91 83       	std	Z+1, r25	; 0x01
    273c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	62 e0       	ldi	r22, 0x02	; 2
    2742:	41 e0       	ldi	r20, 0x01	; 1
    2744:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    2748:	fe 01       	movw	r30, r28
    274a:	ef 5a       	subi	r30, 0xAF	; 175
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	a0 e8       	ldi	r26, 0x80	; 128
    2754:	bf e3       	ldi	r27, 0x3F	; 63
    2756:	80 83       	st	Z, r24
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	a2 83       	std	Z+2, r26	; 0x02
    275c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275e:	8e 01       	movw	r16, r28
    2760:	03 5b       	subi	r16, 0xB3	; 179
    2762:	1f 4f       	sbci	r17, 0xFF	; 255
    2764:	fe 01       	movw	r30, r28
    2766:	ef 5a       	subi	r30, 0xAF	; 175
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	60 81       	ld	r22, Z
    276c:	71 81       	ldd	r23, Z+1	; 0x01
    276e:	82 81       	ldd	r24, Z+2	; 0x02
    2770:	93 81       	ldd	r25, Z+3	; 0x03
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	4a e7       	ldi	r20, 0x7A	; 122
    2778:	55 e4       	ldi	r21, 0x45	; 69
    277a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	f8 01       	movw	r30, r16
    2784:	80 83       	st	Z, r24
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	a2 83       	std	Z+2, r26	; 0x02
    278a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    278c:	fe 01       	movw	r30, r28
    278e:	e3 5b       	subi	r30, 0xB3	; 179
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	60 81       	ld	r22, Z
    2794:	71 81       	ldd	r23, Z+1	; 0x01
    2796:	82 81       	ldd	r24, Z+2	; 0x02
    2798:	93 81       	ldd	r25, Z+3	; 0x03
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e8       	ldi	r20, 0x80	; 128
    27a0:	5f e3       	ldi	r21, 0x3F	; 63
    27a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27a6:	88 23       	and	r24, r24
    27a8:	44 f4       	brge	.+16     	; 0x27ba <LCD_displayCharacter+0x20e>
		__ticks = 1;
    27aa:	fe 01       	movw	r30, r28
    27ac:	e5 5b       	subi	r30, 0xB5	; 181
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	91 83       	std	Z+1, r25	; 0x01
    27b6:	80 83       	st	Z, r24
    27b8:	64 c0       	rjmp	.+200    	; 0x2882 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    27ba:	fe 01       	movw	r30, r28
    27bc:	e3 5b       	subi	r30, 0xB3	; 179
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	60 81       	ld	r22, Z
    27c2:	71 81       	ldd	r23, Z+1	; 0x01
    27c4:	82 81       	ldd	r24, Z+2	; 0x02
    27c6:	93 81       	ldd	r25, Z+3	; 0x03
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	3f ef       	ldi	r19, 0xFF	; 255
    27cc:	4f e7       	ldi	r20, 0x7F	; 127
    27ce:	57 e4       	ldi	r21, 0x47	; 71
    27d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27d4:	18 16       	cp	r1, r24
    27d6:	0c f0       	brlt	.+2      	; 0x27da <LCD_displayCharacter+0x22e>
    27d8:	43 c0       	rjmp	.+134    	; 0x2860 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27da:	fe 01       	movw	r30, r28
    27dc:	ef 5a       	subi	r30, 0xAF	; 175
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	60 81       	ld	r22, Z
    27e2:	71 81       	ldd	r23, Z+1	; 0x01
    27e4:	82 81       	ldd	r24, Z+2	; 0x02
    27e6:	93 81       	ldd	r25, Z+3	; 0x03
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	40 e2       	ldi	r20, 0x20	; 32
    27ee:	51 e4       	ldi	r21, 0x41	; 65
    27f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	8e 01       	movw	r16, r28
    27fa:	05 5b       	subi	r16, 0xB5	; 181
    27fc:	1f 4f       	sbci	r17, 0xFF	; 255
    27fe:	bc 01       	movw	r22, r24
    2800:	cd 01       	movw	r24, r26
    2802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	f8 01       	movw	r30, r16
    280c:	91 83       	std	Z+1, r25	; 0x01
    280e:	80 83       	st	Z, r24
    2810:	1f c0       	rjmp	.+62     	; 0x2850 <LCD_displayCharacter+0x2a4>
    2812:	fe 01       	movw	r30, r28
    2814:	e7 5b       	subi	r30, 0xB7	; 183
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	80 e9       	ldi	r24, 0x90	; 144
    281a:	91 e0       	ldi	r25, 0x01	; 1
    281c:	91 83       	std	Z+1, r25	; 0x01
    281e:	80 83       	st	Z, r24
    2820:	fe 01       	movw	r30, r28
    2822:	e7 5b       	subi	r30, 0xB7	; 183
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	80 81       	ld	r24, Z
    2828:	91 81       	ldd	r25, Z+1	; 0x01
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	f1 f7       	brne	.-4      	; 0x282a <LCD_displayCharacter+0x27e>
    282e:	fe 01       	movw	r30, r28
    2830:	e7 5b       	subi	r30, 0xB7	; 183
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	91 83       	std	Z+1, r25	; 0x01
    2836:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2838:	de 01       	movw	r26, r28
    283a:	a5 5b       	subi	r26, 0xB5	; 181
    283c:	bf 4f       	sbci	r27, 0xFF	; 255
    283e:	fe 01       	movw	r30, r28
    2840:	e5 5b       	subi	r30, 0xB5	; 181
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	80 81       	ld	r24, Z
    2846:	91 81       	ldd	r25, Z+1	; 0x01
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	11 96       	adiw	r26, 0x01	; 1
    284c:	9c 93       	st	X, r25
    284e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2850:	fe 01       	movw	r30, r28
    2852:	e5 5b       	subi	r30, 0xB5	; 181
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	80 81       	ld	r24, Z
    2858:	91 81       	ldd	r25, Z+1	; 0x01
    285a:	00 97       	sbiw	r24, 0x00	; 0
    285c:	d1 f6       	brne	.-76     	; 0x2812 <LCD_displayCharacter+0x266>
    285e:	27 c0       	rjmp	.+78     	; 0x28ae <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2860:	8e 01       	movw	r16, r28
    2862:	05 5b       	subi	r16, 0xB5	; 181
    2864:	1f 4f       	sbci	r17, 0xFF	; 255
    2866:	fe 01       	movw	r30, r28
    2868:	e3 5b       	subi	r30, 0xB3	; 179
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	60 81       	ld	r22, Z
    286e:	71 81       	ldd	r23, Z+1	; 0x01
    2870:	82 81       	ldd	r24, Z+2	; 0x02
    2872:	93 81       	ldd	r25, Z+3	; 0x03
    2874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	f8 01       	movw	r30, r16
    287e:	91 83       	std	Z+1, r25	; 0x01
    2880:	80 83       	st	Z, r24
    2882:	de 01       	movw	r26, r28
    2884:	a9 5b       	subi	r26, 0xB9	; 185
    2886:	bf 4f       	sbci	r27, 0xFF	; 255
    2888:	fe 01       	movw	r30, r28
    288a:	e5 5b       	subi	r30, 0xB5	; 181
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	80 81       	ld	r24, Z
    2890:	91 81       	ldd	r25, Z+1	; 0x01
    2892:	8d 93       	st	X+, r24
    2894:	9c 93       	st	X, r25
    2896:	fe 01       	movw	r30, r28
    2898:	e9 5b       	subi	r30, 0xB9	; 185
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	80 81       	ld	r24, Z
    289e:	91 81       	ldd	r25, Z+1	; 0x01
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <LCD_displayCharacter+0x2f4>
    28a4:	fe 01       	movw	r30, r28
    28a6:	e9 5b       	subi	r30, 0xB9	; 185
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	91 83       	std	Z+1, r25	; 0x01
    28ac:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    28ae:	fe 01       	movw	r30, r28
    28b0:	ed 59       	subi	r30, 0x9D	; 157
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 81       	ld	r24, Z
    28b6:	88 2f       	mov	r24, r24
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	80 71       	andi	r24, 0x10	; 16
    28bc:	90 70       	andi	r25, 0x00	; 0
    28be:	95 95       	asr	r25
    28c0:	87 95       	ror	r24
    28c2:	95 95       	asr	r25
    28c4:	87 95       	ror	r24
    28c6:	95 95       	asr	r25
    28c8:	87 95       	ror	r24
    28ca:	95 95       	asr	r25
    28cc:	87 95       	ror	r24
    28ce:	98 2f       	mov	r25, r24
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	63 e0       	ldi	r22, 0x03	; 3
    28d4:	49 2f       	mov	r20, r25
    28d6:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    28da:	fe 01       	movw	r30, r28
    28dc:	ed 59       	subi	r30, 0x9D	; 157
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	80 81       	ld	r24, Z
    28e2:	88 2f       	mov	r24, r24
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	80 72       	andi	r24, 0x20	; 32
    28e8:	90 70       	andi	r25, 0x00	; 0
    28ea:	95 95       	asr	r25
    28ec:	87 95       	ror	r24
    28ee:	95 95       	asr	r25
    28f0:	87 95       	ror	r24
    28f2:	95 95       	asr	r25
    28f4:	87 95       	ror	r24
    28f6:	95 95       	asr	r25
    28f8:	87 95       	ror	r24
    28fa:	95 95       	asr	r25
    28fc:	87 95       	ror	r24
    28fe:	98 2f       	mov	r25, r24
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	64 e0       	ldi	r22, 0x04	; 4
    2904:	49 2f       	mov	r20, r25
    2906:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    290a:	fe 01       	movw	r30, r28
    290c:	ed 59       	subi	r30, 0x9D	; 157
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	80 81       	ld	r24, Z
    2912:	88 2f       	mov	r24, r24
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	80 74       	andi	r24, 0x40	; 64
    2918:	90 70       	andi	r25, 0x00	; 0
    291a:	08 2e       	mov	r0, r24
    291c:	89 2f       	mov	r24, r25
    291e:	00 0c       	add	r0, r0
    2920:	88 1f       	adc	r24, r24
    2922:	99 0b       	sbc	r25, r25
    2924:	00 0c       	add	r0, r0
    2926:	88 1f       	adc	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	98 2f       	mov	r25, r24
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	65 e0       	ldi	r22, 0x05	; 5
    2930:	49 2f       	mov	r20, r25
    2932:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2936:	fe 01       	movw	r30, r28
    2938:	ed 59       	subi	r30, 0x9D	; 157
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	80 81       	ld	r24, Z
    293e:	98 2f       	mov	r25, r24
    2940:	99 1f       	adc	r25, r25
    2942:	99 27       	eor	r25, r25
    2944:	99 1f       	adc	r25, r25
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	66 e0       	ldi	r22, 0x06	; 6
    294a:	49 2f       	mov	r20, r25
    294c:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    2950:	fe 01       	movw	r30, r28
    2952:	ed 5b       	subi	r30, 0xBD	; 189
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	a0 e8       	ldi	r26, 0x80	; 128
    295c:	bf e3       	ldi	r27, 0x3F	; 63
    295e:	80 83       	st	Z, r24
    2960:	91 83       	std	Z+1, r25	; 0x01
    2962:	a2 83       	std	Z+2, r26	; 0x02
    2964:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2966:	8e 01       	movw	r16, r28
    2968:	01 5c       	subi	r16, 0xC1	; 193
    296a:	1f 4f       	sbci	r17, 0xFF	; 255
    296c:	fe 01       	movw	r30, r28
    296e:	ed 5b       	subi	r30, 0xBD	; 189
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	60 81       	ld	r22, Z
    2974:	71 81       	ldd	r23, Z+1	; 0x01
    2976:	82 81       	ldd	r24, Z+2	; 0x02
    2978:	93 81       	ldd	r25, Z+3	; 0x03
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	4a e7       	ldi	r20, 0x7A	; 122
    2980:	55 e4       	ldi	r21, 0x45	; 69
    2982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	f8 01       	movw	r30, r16
    298c:	80 83       	st	Z, r24
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	a2 83       	std	Z+2, r26	; 0x02
    2992:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2994:	fe 01       	movw	r30, r28
    2996:	ff 96       	adiw	r30, 0x3f	; 63
    2998:	60 81       	ld	r22, Z
    299a:	71 81       	ldd	r23, Z+1	; 0x01
    299c:	82 81       	ldd	r24, Z+2	; 0x02
    299e:	93 81       	ldd	r25, Z+3	; 0x03
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	40 e8       	ldi	r20, 0x80	; 128
    29a6:	5f e3       	ldi	r21, 0x3F	; 63
    29a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ac:	88 23       	and	r24, r24
    29ae:	2c f4       	brge	.+10     	; 0x29ba <LCD_displayCharacter+0x40e>
		__ticks = 1;
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	9e af       	std	Y+62, r25	; 0x3e
    29b6:	8d af       	std	Y+61, r24	; 0x3d
    29b8:	46 c0       	rjmp	.+140    	; 0x2a46 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    29ba:	fe 01       	movw	r30, r28
    29bc:	ff 96       	adiw	r30, 0x3f	; 63
    29be:	60 81       	ld	r22, Z
    29c0:	71 81       	ldd	r23, Z+1	; 0x01
    29c2:	82 81       	ldd	r24, Z+2	; 0x02
    29c4:	93 81       	ldd	r25, Z+3	; 0x03
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	3f ef       	ldi	r19, 0xFF	; 255
    29ca:	4f e7       	ldi	r20, 0x7F	; 127
    29cc:	57 e4       	ldi	r21, 0x47	; 71
    29ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29d2:	18 16       	cp	r1, r24
    29d4:	64 f5       	brge	.+88     	; 0x2a2e <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d6:	fe 01       	movw	r30, r28
    29d8:	ed 5b       	subi	r30, 0xBD	; 189
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	60 81       	ld	r22, Z
    29de:	71 81       	ldd	r23, Z+1	; 0x01
    29e0:	82 81       	ldd	r24, Z+2	; 0x02
    29e2:	93 81       	ldd	r25, Z+3	; 0x03
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e2       	ldi	r20, 0x20	; 32
    29ea:	51 e4       	ldi	r21, 0x41	; 65
    29ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	bc 01       	movw	r22, r24
    29f6:	cd 01       	movw	r24, r26
    29f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	9e af       	std	Y+62, r25	; 0x3e
    2a02:	8d af       	std	Y+61, r24	; 0x3d
    2a04:	0f c0       	rjmp	.+30     	; 0x2a24 <LCD_displayCharacter+0x478>
    2a06:	80 e9       	ldi	r24, 0x90	; 144
    2a08:	91 e0       	ldi	r25, 0x01	; 1
    2a0a:	9c af       	std	Y+60, r25	; 0x3c
    2a0c:	8b af       	std	Y+59, r24	; 0x3b
    2a0e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a10:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <LCD_displayCharacter+0x466>
    2a16:	9c af       	std	Y+60, r25	; 0x3c
    2a18:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	9e af       	std	Y+62, r25	; 0x3e
    2a22:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a24:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a26:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a28:	00 97       	sbiw	r24, 0x00	; 0
    2a2a:	69 f7       	brne	.-38     	; 0x2a06 <LCD_displayCharacter+0x45a>
    2a2c:	16 c0       	rjmp	.+44     	; 0x2a5a <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2e:	fe 01       	movw	r30, r28
    2a30:	ff 96       	adiw	r30, 0x3f	; 63
    2a32:	60 81       	ld	r22, Z
    2a34:	71 81       	ldd	r23, Z+1	; 0x01
    2a36:	82 81       	ldd	r24, Z+2	; 0x02
    2a38:	93 81       	ldd	r25, Z+3	; 0x03
    2a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	9e af       	std	Y+62, r25	; 0x3e
    2a44:	8d af       	std	Y+61, r24	; 0x3d
    2a46:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a48:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a4a:	9a af       	std	Y+58, r25	; 0x3a
    2a4c:	89 af       	std	Y+57, r24	; 0x39
    2a4e:	89 ad       	ldd	r24, Y+57	; 0x39
    2a50:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <LCD_displayCharacter+0x4a6>
    2a56:	9a af       	std	Y+58, r25	; 0x3a
    2a58:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	62 e0       	ldi	r22, 0x02	; 2
    2a5e:	40 e0       	ldi	r20, 0x00	; 0
    2a60:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	a0 e8       	ldi	r26, 0x80	; 128
    2a6a:	bf e3       	ldi	r27, 0x3F	; 63
    2a6c:	8d ab       	std	Y+53, r24	; 0x35
    2a6e:	9e ab       	std	Y+54, r25	; 0x36
    2a70:	af ab       	std	Y+55, r26	; 0x37
    2a72:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a74:	6d a9       	ldd	r22, Y+53	; 0x35
    2a76:	7e a9       	ldd	r23, Y+54	; 0x36
    2a78:	8f a9       	ldd	r24, Y+55	; 0x37
    2a7a:	98 ad       	ldd	r25, Y+56	; 0x38
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	4a e7       	ldi	r20, 0x7A	; 122
    2a82:	55 e4       	ldi	r21, 0x45	; 69
    2a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	89 ab       	std	Y+49, r24	; 0x31
    2a8e:	9a ab       	std	Y+50, r25	; 0x32
    2a90:	ab ab       	std	Y+51, r26	; 0x33
    2a92:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a94:	69 a9       	ldd	r22, Y+49	; 0x31
    2a96:	7a a9       	ldd	r23, Y+50	; 0x32
    2a98:	8b a9       	ldd	r24, Y+51	; 0x33
    2a9a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	40 e8       	ldi	r20, 0x80	; 128
    2aa2:	5f e3       	ldi	r21, 0x3F	; 63
    2aa4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aa8:	88 23       	and	r24, r24
    2aaa:	2c f4       	brge	.+10     	; 0x2ab6 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	98 ab       	std	Y+48, r25	; 0x30
    2ab2:	8f a7       	std	Y+47, r24	; 0x2f
    2ab4:	3f c0       	rjmp	.+126    	; 0x2b34 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2ab6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ab8:	7a a9       	ldd	r23, Y+50	; 0x32
    2aba:	8b a9       	ldd	r24, Y+51	; 0x33
    2abc:	9c a9       	ldd	r25, Y+52	; 0x34
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	3f ef       	ldi	r19, 0xFF	; 255
    2ac2:	4f e7       	ldi	r20, 0x7F	; 127
    2ac4:	57 e4       	ldi	r21, 0x47	; 71
    2ac6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aca:	18 16       	cp	r1, r24
    2acc:	4c f5       	brge	.+82     	; 0x2b20 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ace:	6d a9       	ldd	r22, Y+53	; 0x35
    2ad0:	7e a9       	ldd	r23, Y+54	; 0x36
    2ad2:	8f a9       	ldd	r24, Y+55	; 0x37
    2ad4:	98 ad       	ldd	r25, Y+56	; 0x38
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e2       	ldi	r20, 0x20	; 32
    2adc:	51 e4       	ldi	r21, 0x41	; 65
    2ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	bc 01       	movw	r22, r24
    2ae8:	cd 01       	movw	r24, r26
    2aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	98 ab       	std	Y+48, r25	; 0x30
    2af4:	8f a7       	std	Y+47, r24	; 0x2f
    2af6:	0f c0       	rjmp	.+30     	; 0x2b16 <LCD_displayCharacter+0x56a>
    2af8:	80 e9       	ldi	r24, 0x90	; 144
    2afa:	91 e0       	ldi	r25, 0x01	; 1
    2afc:	9e a7       	std	Y+46, r25	; 0x2e
    2afe:	8d a7       	std	Y+45, r24	; 0x2d
    2b00:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b02:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b04:	01 97       	sbiw	r24, 0x01	; 1
    2b06:	f1 f7       	brne	.-4      	; 0x2b04 <LCD_displayCharacter+0x558>
    2b08:	9e a7       	std	Y+46, r25	; 0x2e
    2b0a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b0e:	98 a9       	ldd	r25, Y+48	; 0x30
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	98 ab       	std	Y+48, r25	; 0x30
    2b14:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b16:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b18:	98 a9       	ldd	r25, Y+48	; 0x30
    2b1a:	00 97       	sbiw	r24, 0x00	; 0
    2b1c:	69 f7       	brne	.-38     	; 0x2af8 <LCD_displayCharacter+0x54c>
    2b1e:	14 c0       	rjmp	.+40     	; 0x2b48 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b20:	69 a9       	ldd	r22, Y+49	; 0x31
    2b22:	7a a9       	ldd	r23, Y+50	; 0x32
    2b24:	8b a9       	ldd	r24, Y+51	; 0x33
    2b26:	9c a9       	ldd	r25, Y+52	; 0x34
    2b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	98 ab       	std	Y+48, r25	; 0x30
    2b32:	8f a7       	std	Y+47, r24	; 0x2f
    2b34:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b36:	98 a9       	ldd	r25, Y+48	; 0x30
    2b38:	9c a7       	std	Y+44, r25	; 0x2c
    2b3a:	8b a7       	std	Y+43, r24	; 0x2b
    2b3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	f1 f7       	brne	.-4      	; 0x2b40 <LCD_displayCharacter+0x594>
    2b44:	9c a7       	std	Y+44, r25	; 0x2c
    2b46:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	62 e0       	ldi	r22, 0x02	; 2
    2b4c:	41 e0       	ldi	r20, 0x01	; 1
    2b4e:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	a0 e8       	ldi	r26, 0x80	; 128
    2b58:	bf e3       	ldi	r27, 0x3F	; 63
    2b5a:	8f a3       	std	Y+39, r24	; 0x27
    2b5c:	98 a7       	std	Y+40, r25	; 0x28
    2b5e:	a9 a7       	std	Y+41, r26	; 0x29
    2b60:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b62:	6f a1       	ldd	r22, Y+39	; 0x27
    2b64:	78 a5       	ldd	r23, Y+40	; 0x28
    2b66:	89 a5       	ldd	r24, Y+41	; 0x29
    2b68:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	4a e7       	ldi	r20, 0x7A	; 122
    2b70:	55 e4       	ldi	r21, 0x45	; 69
    2b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	8b a3       	std	Y+35, r24	; 0x23
    2b7c:	9c a3       	std	Y+36, r25	; 0x24
    2b7e:	ad a3       	std	Y+37, r26	; 0x25
    2b80:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b82:	6b a1       	ldd	r22, Y+35	; 0x23
    2b84:	7c a1       	ldd	r23, Y+36	; 0x24
    2b86:	8d a1       	ldd	r24, Y+37	; 0x25
    2b88:	9e a1       	ldd	r25, Y+38	; 0x26
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e8       	ldi	r20, 0x80	; 128
    2b90:	5f e3       	ldi	r21, 0x3F	; 63
    2b92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b96:	88 23       	and	r24, r24
    2b98:	2c f4       	brge	.+10     	; 0x2ba4 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	9a a3       	std	Y+34, r25	; 0x22
    2ba0:	89 a3       	std	Y+33, r24	; 0x21
    2ba2:	3f c0       	rjmp	.+126    	; 0x2c22 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2ba4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba8:	8d a1       	ldd	r24, Y+37	; 0x25
    2baa:	9e a1       	ldd	r25, Y+38	; 0x26
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	3f ef       	ldi	r19, 0xFF	; 255
    2bb0:	4f e7       	ldi	r20, 0x7F	; 127
    2bb2:	57 e4       	ldi	r21, 0x47	; 71
    2bb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb8:	18 16       	cp	r1, r24
    2bba:	4c f5       	brge	.+82     	; 0x2c0e <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbc:	6f a1       	ldd	r22, Y+39	; 0x27
    2bbe:	78 a5       	ldd	r23, Y+40	; 0x28
    2bc0:	89 a5       	ldd	r24, Y+41	; 0x29
    2bc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e2       	ldi	r20, 0x20	; 32
    2bca:	51 e4       	ldi	r21, 0x41	; 65
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	bc 01       	movw	r22, r24
    2bd6:	cd 01       	movw	r24, r26
    2bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	9a a3       	std	Y+34, r25	; 0x22
    2be2:	89 a3       	std	Y+33, r24	; 0x21
    2be4:	0f c0       	rjmp	.+30     	; 0x2c04 <LCD_displayCharacter+0x658>
    2be6:	80 e9       	ldi	r24, 0x90	; 144
    2be8:	91 e0       	ldi	r25, 0x01	; 1
    2bea:	98 a3       	std	Y+32, r25	; 0x20
    2bec:	8f 8f       	std	Y+31, r24	; 0x1f
    2bee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bf0:	98 a1       	ldd	r25, Y+32	; 0x20
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <LCD_displayCharacter+0x646>
    2bf6:	98 a3       	std	Y+32, r25	; 0x20
    2bf8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfa:	89 a1       	ldd	r24, Y+33	; 0x21
    2bfc:	9a a1       	ldd	r25, Y+34	; 0x22
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	9a a3       	std	Y+34, r25	; 0x22
    2c02:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c04:	89 a1       	ldd	r24, Y+33	; 0x21
    2c06:	9a a1       	ldd	r25, Y+34	; 0x22
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	69 f7       	brne	.-38     	; 0x2be6 <LCD_displayCharacter+0x63a>
    2c0c:	14 c0       	rjmp	.+40     	; 0x2c36 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0e:	6b a1       	ldd	r22, Y+35	; 0x23
    2c10:	7c a1       	ldd	r23, Y+36	; 0x24
    2c12:	8d a1       	ldd	r24, Y+37	; 0x25
    2c14:	9e a1       	ldd	r25, Y+38	; 0x26
    2c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	9a a3       	std	Y+34, r25	; 0x22
    2c20:	89 a3       	std	Y+33, r24	; 0x21
    2c22:	89 a1       	ldd	r24, Y+33	; 0x21
    2c24:	9a a1       	ldd	r25, Y+34	; 0x22
    2c26:	9e 8f       	std	Y+30, r25	; 0x1e
    2c28:	8d 8f       	std	Y+29, r24	; 0x1d
    2c2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	f1 f7       	brne	.-4      	; 0x2c2e <LCD_displayCharacter+0x682>
    2c32:	9e 8f       	std	Y+30, r25	; 0x1e
    2c34:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2c36:	fe 01       	movw	r30, r28
    2c38:	ed 59       	subi	r30, 0x9D	; 157
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	80 81       	ld	r24, Z
    2c3e:	98 2f       	mov	r25, r24
    2c40:	91 70       	andi	r25, 0x01	; 1
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	63 e0       	ldi	r22, 0x03	; 3
    2c46:	49 2f       	mov	r20, r25
    2c48:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	ed 59       	subi	r30, 0x9D	; 157
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	80 81       	ld	r24, Z
    2c54:	88 2f       	mov	r24, r24
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	82 70       	andi	r24, 0x02	; 2
    2c5a:	90 70       	andi	r25, 0x00	; 0
    2c5c:	95 95       	asr	r25
    2c5e:	87 95       	ror	r24
    2c60:	98 2f       	mov	r25, r24
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	64 e0       	ldi	r22, 0x04	; 4
    2c66:	49 2f       	mov	r20, r25
    2c68:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2c6c:	fe 01       	movw	r30, r28
    2c6e:	ed 59       	subi	r30, 0x9D	; 157
    2c70:	ff 4f       	sbci	r31, 0xFF	; 255
    2c72:	80 81       	ld	r24, Z
    2c74:	88 2f       	mov	r24, r24
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	84 70       	andi	r24, 0x04	; 4
    2c7a:	90 70       	andi	r25, 0x00	; 0
    2c7c:	95 95       	asr	r25
    2c7e:	87 95       	ror	r24
    2c80:	95 95       	asr	r25
    2c82:	87 95       	ror	r24
    2c84:	98 2f       	mov	r25, r24
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	65 e0       	ldi	r22, 0x05	; 5
    2c8a:	49 2f       	mov	r20, r25
    2c8c:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2c90:	fe 01       	movw	r30, r28
    2c92:	ed 59       	subi	r30, 0x9D	; 157
    2c94:	ff 4f       	sbci	r31, 0xFF	; 255
    2c96:	80 81       	ld	r24, Z
    2c98:	88 2f       	mov	r24, r24
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	88 70       	andi	r24, 0x08	; 8
    2c9e:	90 70       	andi	r25, 0x00	; 0
    2ca0:	95 95       	asr	r25
    2ca2:	87 95       	ror	r24
    2ca4:	95 95       	asr	r25
    2ca6:	87 95       	ror	r24
    2ca8:	95 95       	asr	r25
    2caa:	87 95       	ror	r24
    2cac:	98 2f       	mov	r25, r24
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	66 e0       	ldi	r22, 0x06	; 6
    2cb2:	49 2f       	mov	r20, r25
    2cb4:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	a0 e8       	ldi	r26, 0x80	; 128
    2cbe:	bf e3       	ldi	r27, 0x3F	; 63
    2cc0:	89 8f       	std	Y+25, r24	; 0x19
    2cc2:	9a 8f       	std	Y+26, r25	; 0x1a
    2cc4:	ab 8f       	std	Y+27, r26	; 0x1b
    2cc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc8:	69 8d       	ldd	r22, Y+25	; 0x19
    2cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	4a e7       	ldi	r20, 0x7A	; 122
    2cd6:	55 e4       	ldi	r21, 0x45	; 69
    2cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	8d 8b       	std	Y+21, r24	; 0x15
    2ce2:	9e 8b       	std	Y+22, r25	; 0x16
    2ce4:	af 8b       	std	Y+23, r26	; 0x17
    2ce6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ce8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cea:	7e 89       	ldd	r23, Y+22	; 0x16
    2cec:	8f 89       	ldd	r24, Y+23	; 0x17
    2cee:	98 8d       	ldd	r25, Y+24	; 0x18
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	40 e8       	ldi	r20, 0x80	; 128
    2cf6:	5f e3       	ldi	r21, 0x3F	; 63
    2cf8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cfc:	88 23       	and	r24, r24
    2cfe:	2c f4       	brge	.+10     	; 0x2d0a <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	9c 8b       	std	Y+20, r25	; 0x14
    2d06:	8b 8b       	std	Y+19, r24	; 0x13
    2d08:	3f c0       	rjmp	.+126    	; 0x2d88 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2d0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d10:	98 8d       	ldd	r25, Y+24	; 0x18
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	3f ef       	ldi	r19, 0xFF	; 255
    2d16:	4f e7       	ldi	r20, 0x7F	; 127
    2d18:	57 e4       	ldi	r21, 0x47	; 71
    2d1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d1e:	18 16       	cp	r1, r24
    2d20:	4c f5       	brge	.+82     	; 0x2d74 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d22:	69 8d       	ldd	r22, Y+25	; 0x19
    2d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	40 e2       	ldi	r20, 0x20	; 32
    2d30:	51 e4       	ldi	r21, 0x41	; 65
    2d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	bc 01       	movw	r22, r24
    2d3c:	cd 01       	movw	r24, r26
    2d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	9c 8b       	std	Y+20, r25	; 0x14
    2d48:	8b 8b       	std	Y+19, r24	; 0x13
    2d4a:	0f c0       	rjmp	.+30     	; 0x2d6a <LCD_displayCharacter+0x7be>
    2d4c:	80 e9       	ldi	r24, 0x90	; 144
    2d4e:	91 e0       	ldi	r25, 0x01	; 1
    2d50:	9a 8b       	std	Y+18, r25	; 0x12
    2d52:	89 8b       	std	Y+17, r24	; 0x11
    2d54:	89 89       	ldd	r24, Y+17	; 0x11
    2d56:	9a 89       	ldd	r25, Y+18	; 0x12
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	f1 f7       	brne	.-4      	; 0x2d58 <LCD_displayCharacter+0x7ac>
    2d5c:	9a 8b       	std	Y+18, r25	; 0x12
    2d5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d60:	8b 89       	ldd	r24, Y+19	; 0x13
    2d62:	9c 89       	ldd	r25, Y+20	; 0x14
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	9c 8b       	std	Y+20, r25	; 0x14
    2d68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d6a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d6c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d6e:	00 97       	sbiw	r24, 0x00	; 0
    2d70:	69 f7       	brne	.-38     	; 0x2d4c <LCD_displayCharacter+0x7a0>
    2d72:	14 c0       	rjmp	.+40     	; 0x2d9c <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d74:	6d 89       	ldd	r22, Y+21	; 0x15
    2d76:	7e 89       	ldd	r23, Y+22	; 0x16
    2d78:	8f 89       	ldd	r24, Y+23	; 0x17
    2d7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	9c 8b       	std	Y+20, r25	; 0x14
    2d86:	8b 8b       	std	Y+19, r24	; 0x13
    2d88:	8b 89       	ldd	r24, Y+19	; 0x13
    2d8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d8c:	98 8b       	std	Y+16, r25	; 0x10
    2d8e:	8f 87       	std	Y+15, r24	; 0x0f
    2d90:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d92:	98 89       	ldd	r25, Y+16	; 0x10
    2d94:	01 97       	sbiw	r24, 0x01	; 1
    2d96:	f1 f7       	brne	.-4      	; 0x2d94 <LCD_displayCharacter+0x7e8>
    2d98:	98 8b       	std	Y+16, r25	; 0x10
    2d9a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	62 e0       	ldi	r22, 0x02	; 2
    2da0:	40 e0       	ldi	r20, 0x00	; 0
    2da2:	0e 94 02 08 	call	0x1004	; 0x1004 <GPIO_writePin>
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	a0 e8       	ldi	r26, 0x80	; 128
    2dac:	bf e3       	ldi	r27, 0x3F	; 63
    2dae:	8b 87       	std	Y+11, r24	; 0x0b
    2db0:	9c 87       	std	Y+12, r25	; 0x0c
    2db2:	ad 87       	std	Y+13, r26	; 0x0d
    2db4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	4a e7       	ldi	r20, 0x7A	; 122
    2dc4:	55 e4       	ldi	r21, 0x45	; 69
    2dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	8f 83       	std	Y+7, r24	; 0x07
    2dd0:	98 87       	std	Y+8, r25	; 0x08
    2dd2:	a9 87       	std	Y+9, r26	; 0x09
    2dd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd8:	78 85       	ldd	r23, Y+8	; 0x08
    2dda:	89 85       	ldd	r24, Y+9	; 0x09
    2ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	40 e8       	ldi	r20, 0x80	; 128
    2de4:	5f e3       	ldi	r21, 0x3F	; 63
    2de6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dea:	88 23       	and	r24, r24
    2dec:	2c f4       	brge	.+10     	; 0x2df8 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	9e 83       	std	Y+6, r25	; 0x06
    2df4:	8d 83       	std	Y+5, r24	; 0x05
    2df6:	3f c0       	rjmp	.+126    	; 0x2e76 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2df8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dfa:	78 85       	ldd	r23, Y+8	; 0x08
    2dfc:	89 85       	ldd	r24, Y+9	; 0x09
    2dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	3f ef       	ldi	r19, 0xFF	; 255
    2e04:	4f e7       	ldi	r20, 0x7F	; 127
    2e06:	57 e4       	ldi	r21, 0x47	; 71
    2e08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e0c:	18 16       	cp	r1, r24
    2e0e:	4c f5       	brge	.+82     	; 0x2e62 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	40 e2       	ldi	r20, 0x20	; 32
    2e1e:	51 e4       	ldi	r21, 0x41	; 65
    2e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	bc 01       	movw	r22, r24
    2e2a:	cd 01       	movw	r24, r26
    2e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	9e 83       	std	Y+6, r25	; 0x06
    2e36:	8d 83       	std	Y+5, r24	; 0x05
    2e38:	0f c0       	rjmp	.+30     	; 0x2e58 <LCD_displayCharacter+0x8ac>
    2e3a:	80 e9       	ldi	r24, 0x90	; 144
    2e3c:	91 e0       	ldi	r25, 0x01	; 1
    2e3e:	9c 83       	std	Y+4, r25	; 0x04
    2e40:	8b 83       	std	Y+3, r24	; 0x03
    2e42:	8b 81       	ldd	r24, Y+3	; 0x03
    2e44:	9c 81       	ldd	r25, Y+4	; 0x04
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	f1 f7       	brne	.-4      	; 0x2e46 <LCD_displayCharacter+0x89a>
    2e4a:	9c 83       	std	Y+4, r25	; 0x04
    2e4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e50:	9e 81       	ldd	r25, Y+6	; 0x06
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	9e 83       	std	Y+6, r25	; 0x06
    2e56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e58:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e5c:	00 97       	sbiw	r24, 0x00	; 0
    2e5e:	69 f7       	brne	.-38     	; 0x2e3a <LCD_displayCharacter+0x88e>
    2e60:	14 c0       	rjmp	.+40     	; 0x2e8a <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e62:	6f 81       	ldd	r22, Y+7	; 0x07
    2e64:	78 85       	ldd	r23, Y+8	; 0x08
    2e66:	89 85       	ldd	r24, Y+9	; 0x09
    2e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	9e 83       	std	Y+6, r25	; 0x06
    2e74:	8d 83       	std	Y+5, r24	; 0x05
    2e76:	8d 81       	ldd	r24, Y+5	; 0x05
    2e78:	9e 81       	ldd	r25, Y+6	; 0x06
    2e7a:	9a 83       	std	Y+2, r25	; 0x02
    2e7c:	89 83       	std	Y+1, r24	; 0x01
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	9a 81       	ldd	r25, Y+2	; 0x02
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	f1 f7       	brne	.-4      	; 0x2e82 <LCD_displayCharacter+0x8d6>
    2e86:	9a 83       	std	Y+2, r25	; 0x02
    2e88:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2e8a:	cd 59       	subi	r28, 0x9D	; 157
    2e8c:	df 4f       	sbci	r29, 0xFF	; 255
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	cf 91       	pop	r28
    2e9a:	df 91       	pop	r29
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	08 95       	ret

00002ea2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2ea2:	df 93       	push	r29
    2ea4:	cf 93       	push	r28
    2ea6:	00 d0       	rcall	.+0      	; 0x2ea8 <LCD_displayString+0x6>
    2ea8:	0f 92       	push	r0
    2eaa:	cd b7       	in	r28, 0x3d	; 61
    2eac:	de b7       	in	r29, 0x3e	; 62
    2eae:	9b 83       	std	Y+3, r25	; 0x03
    2eb0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2eb2:	19 82       	std	Y+1, r1	; 0x01
    2eb4:	0e c0       	rjmp	.+28     	; 0x2ed2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	28 2f       	mov	r18, r24
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	e2 0f       	add	r30, r18
    2ec4:	f3 1f       	adc	r31, r19
    2ec6:	80 81       	ld	r24, Z
    2ec8:	0e 94 d6 12 	call	0x25ac	; 0x25ac <LCD_displayCharacter>
		i++;
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	8f 5f       	subi	r24, 0xFF	; 255
    2ed0:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
    2ed4:	28 2f       	mov	r18, r24
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eda:	9b 81       	ldd	r25, Y+3	; 0x03
    2edc:	fc 01       	movw	r30, r24
    2ede:	e2 0f       	add	r30, r18
    2ee0:	f3 1f       	adc	r31, r19
    2ee2:	80 81       	ld	r24, Z
    2ee4:	88 23       	and	r24, r24
    2ee6:	39 f7       	brne	.-50     	; 0x2eb6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	cf 91       	pop	r28
    2ef0:	df 91       	pop	r29
    2ef2:	08 95       	ret

00002ef4 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2ef4:	df 93       	push	r29
    2ef6:	cf 93       	push	r28
    2ef8:	00 d0       	rcall	.+0      	; 0x2efa <LCD_moveCursor+0x6>
    2efa:	00 d0       	rcall	.+0      	; 0x2efc <LCD_moveCursor+0x8>
    2efc:	0f 92       	push	r0
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	8a 83       	std	Y+2, r24	; 0x02
    2f04:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2f06:	8a 81       	ldd	r24, Y+2	; 0x02
    2f08:	28 2f       	mov	r18, r24
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	3d 83       	std	Y+5, r19	; 0x05
    2f0e:	2c 83       	std	Y+4, r18	; 0x04
    2f10:	8c 81       	ldd	r24, Y+4	; 0x04
    2f12:	9d 81       	ldd	r25, Y+5	; 0x05
    2f14:	81 30       	cpi	r24, 0x01	; 1
    2f16:	91 05       	cpc	r25, r1
    2f18:	c1 f0       	breq	.+48     	; 0x2f4a <LCD_moveCursor+0x56>
    2f1a:	2c 81       	ldd	r18, Y+4	; 0x04
    2f1c:	3d 81       	ldd	r19, Y+5	; 0x05
    2f1e:	22 30       	cpi	r18, 0x02	; 2
    2f20:	31 05       	cpc	r19, r1
    2f22:	2c f4       	brge	.+10     	; 0x2f2e <LCD_moveCursor+0x3a>
    2f24:	8c 81       	ldd	r24, Y+4	; 0x04
    2f26:	9d 81       	ldd	r25, Y+5	; 0x05
    2f28:	00 97       	sbiw	r24, 0x00	; 0
    2f2a:	61 f0       	breq	.+24     	; 0x2f44 <LCD_moveCursor+0x50>
    2f2c:	19 c0       	rjmp	.+50     	; 0x2f60 <LCD_moveCursor+0x6c>
    2f2e:	2c 81       	ldd	r18, Y+4	; 0x04
    2f30:	3d 81       	ldd	r19, Y+5	; 0x05
    2f32:	22 30       	cpi	r18, 0x02	; 2
    2f34:	31 05       	cpc	r19, r1
    2f36:	69 f0       	breq	.+26     	; 0x2f52 <LCD_moveCursor+0x5e>
    2f38:	8c 81       	ldd	r24, Y+4	; 0x04
    2f3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f3c:	83 30       	cpi	r24, 0x03	; 3
    2f3e:	91 05       	cpc	r25, r1
    2f40:	61 f0       	breq	.+24     	; 0x2f5a <LCD_moveCursor+0x66>
    2f42:	0e c0       	rjmp	.+28     	; 0x2f60 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2f44:	8b 81       	ldd	r24, Y+3	; 0x03
    2f46:	89 83       	std	Y+1, r24	; 0x01
    2f48:	0b c0       	rjmp	.+22     	; 0x2f60 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4c:	80 5c       	subi	r24, 0xC0	; 192
    2f4e:	89 83       	std	Y+1, r24	; 0x01
    2f50:	07 c0       	rjmp	.+14     	; 0x2f60 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2f52:	8b 81       	ldd	r24, Y+3	; 0x03
    2f54:	80 5f       	subi	r24, 0xF0	; 240
    2f56:	89 83       	std	Y+1, r24	; 0x01
    2f58:	03 c0       	rjmp	.+6      	; 0x2f60 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5c:	80 5b       	subi	r24, 0xB0	; 176
    2f5e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	80 68       	ori	r24, 0x80	; 128
    2f64:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_sendCommand>
}
    2f68:	0f 90       	pop	r0
    2f6a:	0f 90       	pop	r0
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	08 95       	ret

00002f78 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2f78:	df 93       	push	r29
    2f7a:	cf 93       	push	r28
    2f7c:	00 d0       	rcall	.+0      	; 0x2f7e <LCD_displayStringRowColumn+0x6>
    2f7e:	00 d0       	rcall	.+0      	; 0x2f80 <LCD_displayStringRowColumn+0x8>
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
    2f84:	89 83       	std	Y+1, r24	; 0x01
    2f86:	6a 83       	std	Y+2, r22	; 0x02
    2f88:	5c 83       	std	Y+4, r21	; 0x04
    2f8a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	6a 81       	ldd	r22, Y+2	; 0x02
    2f90:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2f94:	8b 81       	ldd	r24, Y+3	; 0x03
    2f96:	9c 81       	ldd	r25, Y+4	; 0x04
    2f98:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <LCD_displayString>
}
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	cf 91       	pop	r28
    2fa6:	df 91       	pop	r29
    2fa8:	08 95       	ret

00002faa <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2faa:	df 93       	push	r29
    2fac:	cf 93       	push	r28
    2fae:	cd b7       	in	r28, 0x3d	; 61
    2fb0:	de b7       	in	r29, 0x3e	; 62
    2fb2:	62 97       	sbiw	r28, 0x12	; 18
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	f8 94       	cli
    2fb8:	de bf       	out	0x3e, r29	; 62
    2fba:	0f be       	out	0x3f, r0	; 63
    2fbc:	cd bf       	out	0x3d, r28	; 61
    2fbe:	9a 8b       	std	Y+18, r25	; 0x12
    2fc0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2fc2:	89 89       	ldd	r24, Y+17	; 0x11
    2fc4:	9a 89       	ldd	r25, Y+18	; 0x12
    2fc6:	9e 01       	movw	r18, r28
    2fc8:	2f 5f       	subi	r18, 0xFF	; 255
    2fca:	3f 4f       	sbci	r19, 0xFF	; 255
    2fcc:	b9 01       	movw	r22, r18
    2fce:	4a e0       	ldi	r20, 0x0A	; 10
    2fd0:	50 e0       	ldi	r21, 0x00	; 0
    2fd2:	0e 94 ad 19 	call	0x335a	; 0x335a <itoa>
   LCD_displayString(buff); /* Display the string */
    2fd6:	ce 01       	movw	r24, r28
    2fd8:	01 96       	adiw	r24, 0x01	; 1
    2fda:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <LCD_displayString>
}
    2fde:	62 96       	adiw	r28, 0x12	; 18
    2fe0:	0f b6       	in	r0, 0x3f	; 63
    2fe2:	f8 94       	cli
    2fe4:	de bf       	out	0x3e, r29	; 62
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	cd bf       	out	0x3d, r28	; 61
    2fea:	cf 91       	pop	r28
    2fec:	df 91       	pop	r29
    2fee:	08 95       	ret

00002ff0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_sendCommand>
}
    2ffe:	cf 91       	pop	r28
    3000:	df 91       	pop	r29
    3002:	08 95       	ret

00003004 <Blinking>:
#include "../HAL/buzzer.h"



// Function To blink the leds no more //
void Blinking(void){
    3004:	df 93       	push	r29
    3006:	cf 93       	push	r28
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
    300c:	2e 97       	sbiw	r28, 0x0e	; 14
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
	LED_on(LED_RED);
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LED_on>
	LED_on(LED_GREEN);
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LED_on>
	LED_on(LED_BLUE);
    3024:	82 e0       	ldi	r24, 0x02	; 2
    3026:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LED_on>
	Buzzer_on();
    302a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <Buzzer_on>
    302e:	80 e0       	ldi	r24, 0x00	; 0
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	a6 e1       	ldi	r26, 0x16	; 22
    3034:	b4 e4       	ldi	r27, 0x44	; 68
    3036:	8b 87       	std	Y+11, r24	; 0x0b
    3038:	9c 87       	std	Y+12, r25	; 0x0c
    303a:	ad 87       	std	Y+13, r26	; 0x0d
    303c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3040:	7c 85       	ldd	r23, Y+12	; 0x0c
    3042:	8d 85       	ldd	r24, Y+13	; 0x0d
    3044:	9e 85       	ldd	r25, Y+14	; 0x0e
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	4a e7       	ldi	r20, 0x7A	; 122
    304c:	55 e4       	ldi	r21, 0x45	; 69
    304e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	8f 83       	std	Y+7, r24	; 0x07
    3058:	98 87       	std	Y+8, r25	; 0x08
    305a:	a9 87       	std	Y+9, r26	; 0x09
    305c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    305e:	6f 81       	ldd	r22, Y+7	; 0x07
    3060:	78 85       	ldd	r23, Y+8	; 0x08
    3062:	89 85       	ldd	r24, Y+9	; 0x09
    3064:	9a 85       	ldd	r25, Y+10	; 0x0a
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	40 e8       	ldi	r20, 0x80	; 128
    306c:	5f e3       	ldi	r21, 0x3F	; 63
    306e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3072:	88 23       	and	r24, r24
    3074:	2c f4       	brge	.+10     	; 0x3080 <Blinking+0x7c>
		__ticks = 1;
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	9e 83       	std	Y+6, r25	; 0x06
    307c:	8d 83       	std	Y+5, r24	; 0x05
    307e:	3f c0       	rjmp	.+126    	; 0x30fe <Blinking+0xfa>
	else if (__tmp > 65535)
    3080:	6f 81       	ldd	r22, Y+7	; 0x07
    3082:	78 85       	ldd	r23, Y+8	; 0x08
    3084:	89 85       	ldd	r24, Y+9	; 0x09
    3086:	9a 85       	ldd	r25, Y+10	; 0x0a
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	3f ef       	ldi	r19, 0xFF	; 255
    308c:	4f e7       	ldi	r20, 0x7F	; 127
    308e:	57 e4       	ldi	r21, 0x47	; 71
    3090:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3094:	18 16       	cp	r1, r24
    3096:	4c f5       	brge	.+82     	; 0x30ea <Blinking+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3098:	6b 85       	ldd	r22, Y+11	; 0x0b
    309a:	7c 85       	ldd	r23, Y+12	; 0x0c
    309c:	8d 85       	ldd	r24, Y+13	; 0x0d
    309e:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e2       	ldi	r20, 0x20	; 32
    30a6:	51 e4       	ldi	r21, 0x41	; 65
    30a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	bc 01       	movw	r22, r24
    30b2:	cd 01       	movw	r24, r26
    30b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	9e 83       	std	Y+6, r25	; 0x06
    30be:	8d 83       	std	Y+5, r24	; 0x05
    30c0:	0f c0       	rjmp	.+30     	; 0x30e0 <Blinking+0xdc>
    30c2:	80 e9       	ldi	r24, 0x90	; 144
    30c4:	91 e0       	ldi	r25, 0x01	; 1
    30c6:	9c 83       	std	Y+4, r25	; 0x04
    30c8:	8b 83       	std	Y+3, r24	; 0x03
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	9c 81       	ldd	r25, Y+4	; 0x04
    30ce:	01 97       	sbiw	r24, 0x01	; 1
    30d0:	f1 f7       	brne	.-4      	; 0x30ce <Blinking+0xca>
    30d2:	9c 83       	std	Y+4, r25	; 0x04
    30d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d6:	8d 81       	ldd	r24, Y+5	; 0x05
    30d8:	9e 81       	ldd	r25, Y+6	; 0x06
    30da:	01 97       	sbiw	r24, 0x01	; 1
    30dc:	9e 83       	std	Y+6, r25	; 0x06
    30de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e0:	8d 81       	ldd	r24, Y+5	; 0x05
    30e2:	9e 81       	ldd	r25, Y+6	; 0x06
    30e4:	00 97       	sbiw	r24, 0x00	; 0
    30e6:	69 f7       	brne	.-38     	; 0x30c2 <Blinking+0xbe>
    30e8:	14 c0       	rjmp	.+40     	; 0x3112 <Blinking+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ea:	6f 81       	ldd	r22, Y+7	; 0x07
    30ec:	78 85       	ldd	r23, Y+8	; 0x08
    30ee:	89 85       	ldd	r24, Y+9	; 0x09
    30f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	9e 83       	std	Y+6, r25	; 0x06
    30fc:	8d 83       	std	Y+5, r24	; 0x05
    30fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3100:	9e 81       	ldd	r25, Y+6	; 0x06
    3102:	9a 83       	std	Y+2, r25	; 0x02
    3104:	89 83       	std	Y+1, r24	; 0x01
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	9a 81       	ldd	r25, Y+2	; 0x02
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	f1 f7       	brne	.-4      	; 0x310a <Blinking+0x106>
    310e:	9a 83       	std	Y+2, r25	; 0x02
    3110:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(600);
	LED_off(LED_RED);
    3112:	80 e0       	ldi	r24, 0x00	; 0
    3114:	0e 94 88 0b 	call	0x1710	; 0x1710 <LED_off>
	LED_off(LED_GREEN);
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	0e 94 88 0b 	call	0x1710	; 0x1710 <LED_off>
	LED_off(LED_BLUE);
    311e:	82 e0       	ldi	r24, 0x02	; 2
    3120:	0e 94 88 0b 	call	0x1710	; 0x1710 <LED_off>
	Buzzer_off();
    3124:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <Buzzer_off>

}
    3128:	2e 96       	adiw	r28, 0x0e	; 14
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	f8 94       	cli
    312e:	de bf       	out	0x3e, r29	; 62
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	cd bf       	out	0x3d, r28	; 61
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <main>:



int main(void){
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	00 d0       	rcall	.+0      	; 0x3140 <main+0x6>
    3140:	00 d0       	rcall	.+0      	; 0x3142 <main+0x8>
    3142:	00 d0       	rcall	.+0      	; 0x3144 <main+0xa>
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
	SREG|=(1<<7);
    3148:	af e5       	ldi	r26, 0x5F	; 95
    314a:	b0 e0       	ldi	r27, 0x00	; 0
    314c:	ef e5       	ldi	r30, 0x5F	; 95
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	80 81       	ld	r24, Z
    3152:	80 68       	ori	r24, 0x80	; 128
    3154:	8c 93       	st	X, r24
	Buzzer_init();
    3156:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <Buzzer_init>
	LCD_init();
    315a:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <LCD_init>
	LEDS_init();
    315e:	0e 94 38 0b 	call	0x1670	; 0x1670 <LEDS_init>
	Ultrasonic_init();
    3162:	0e 94 b9 0b 	call	0x1772	; 0x1772 <Ultrasonic_init>
	uint16 distance=0;
    3166:	1e 82       	std	Y+6, r1	; 0x06
    3168:	1d 82       	std	Y+5, r1	; 0x05
	uint16 last_read=900;// 3lshan t5ly elrqm my3mlsh flick//
    316a:	84 e8       	ldi	r24, 0x84	; 132
    316c:	93 e0       	ldi	r25, 0x03	; 3
    316e:	9c 83       	std	Y+4, r25	; 0x04
    3170:	8b 83       	std	Y+3, r24	; 0x03
	uint16 alarm =900;// 3lshan elrqm f alarm //
    3172:	84 e8       	ldi	r24, 0x84	; 132
    3174:	93 e0       	ldi	r25, 0x03	; 3
    3176:	9a 83       	std	Y+2, r25	; 0x02
    3178:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayStringRowColumn(0, 0, "Distance=    cm");
    317a:	20 e6       	ldi	r18, 0x60	; 96
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	60 e0       	ldi	r22, 0x00	; 0
    3182:	a9 01       	movw	r20, r18
    3184:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayStringRowColumn>
while(1){


     distance=Ultrasonic_readDistance();
    3188:	0e 94 a8 0c 	call	0x1950	; 0x1950 <Ultrasonic_readDistance>
    318c:	9e 83       	std	Y+6, r25	; 0x06
    318e:	8d 83       	std	Y+5, r24	; 0x05
     // mtnsah w ant 5arg t5ly distance=last_read//




if(distance!=last_read){
    3190:	2d 81       	ldd	r18, Y+5	; 0x05
    3192:	3e 81       	ldd	r19, Y+6	; 0x06
    3194:	8b 81       	ldd	r24, Y+3	; 0x03
    3196:	9c 81       	ldd	r25, Y+4	; 0x04
    3198:	28 17       	cp	r18, r24
    319a:	39 07       	cpc	r19, r25
    319c:	a9 f3       	breq	.-22     	; 0x3188 <main+0x4e>
     LCD_moveCursor(0, 10);
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	6a e0       	ldi	r22, 0x0A	; 10
    31a2:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <LCD_moveCursor>
     LCD_displayString("   ");
    31a6:	80 e7       	ldi	r24, 0x70	; 112
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <LCD_displayString>
     LCD_moveCursor(0, 10);
    31ae:	80 e0       	ldi	r24, 0x00	; 0
    31b0:	6a e0       	ldi	r22, 0x0A	; 10
    31b2:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <LCD_moveCursor>
     LCD_intgerToString(distance);
    31b6:	8d 81       	ldd	r24, Y+5	; 0x05
    31b8:	9e 81       	ldd	r25, Y+6	; 0x06
    31ba:	0e 94 d5 17 	call	0x2faa	; 0x2faa <LCD_intgerToString>
     last_read=distance;
    31be:	8d 81       	ldd	r24, Y+5	; 0x05
    31c0:	9e 81       	ldd	r25, Y+6	; 0x06
    31c2:	9c 83       	std	Y+4, r25	; 0x04
    31c4:	8b 83       	std	Y+3, r24	; 0x03

     //         ========Conditions=======         //


     // ==== NO ALARM Conditions ====//
     	if(distance>20){
    31c6:	8d 81       	ldd	r24, Y+5	; 0x05
    31c8:	9e 81       	ldd	r25, Y+6	; 0x06
    31ca:	85 31       	cpi	r24, 0x15	; 21
    31cc:	91 05       	cpc	r25, r1
    31ce:	60 f0       	brcs	.+24     	; 0x31e8 <main+0xae>
          	LED_off(LED_RED);
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	0e 94 88 0b 	call	0x1710	; 0x1710 <LED_off>
     	    LED_off(LED_GREEN);
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	0e 94 88 0b 	call	0x1710	; 0x1710 <LED_off>
     	    LED_off(LED_BLUE);
    31dc:	82 e0       	ldi	r24, 0x02	; 2
    31de:	0e 94 88 0b 	call	0x1710	; 0x1710 <LED_off>
     	    Buzzer_off();
    31e2:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <Buzzer_off>
    31e6:	d0 cf       	rjmp	.-96     	; 0x3188 <main+0x4e>

     	}
     	else if((distance>=16)&&(distance<=20)){
    31e8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ea:	9e 81       	ldd	r25, Y+6	; 0x06
    31ec:	80 31       	cpi	r24, 0x10	; 16
    31ee:	91 05       	cpc	r25, r1
    31f0:	88 f0       	brcs	.+34     	; 0x3214 <main+0xda>
    31f2:	8d 81       	ldd	r24, Y+5	; 0x05
    31f4:	9e 81       	ldd	r25, Y+6	; 0x06
    31f6:	85 31       	cpi	r24, 0x15	; 21
    31f8:	91 05       	cpc	r25, r1
    31fa:	60 f4       	brcc	.+24     	; 0x3214 <main+0xda>
     		LED_off(LED_GREEN);
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	0e 94 88 0b 	call	0x1710	; 0x1710 <LED_off>
     		LED_off(LED_BLUE);
    3202:	82 e0       	ldi	r24, 0x02	; 2
    3204:	0e 94 88 0b 	call	0x1710	; 0x1710 <LED_off>
     		LED_on(LED_RED);
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LED_on>
     		Buzzer_off();
    320e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <Buzzer_off>
    3212:	ba cf       	rjmp	.-140    	; 0x3188 <main+0x4e>

     	}
     	else if((distance>=11)&&(distance<=15)){
    3214:	8d 81       	ldd	r24, Y+5	; 0x05
    3216:	9e 81       	ldd	r25, Y+6	; 0x06
    3218:	8b 30       	cpi	r24, 0x0B	; 11
    321a:	91 05       	cpc	r25, r1
    321c:	88 f0       	brcs	.+34     	; 0x3240 <main+0x106>
    321e:	8d 81       	ldd	r24, Y+5	; 0x05
    3220:	9e 81       	ldd	r25, Y+6	; 0x06
    3222:	80 31       	cpi	r24, 0x10	; 16
    3224:	91 05       	cpc	r25, r1
    3226:	60 f4       	brcc	.+24     	; 0x3240 <main+0x106>
     		LED_on(LED_RED);
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LED_on>
     		LED_on(LED_GREEN);
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LED_on>
     		LED_off(LED_BLUE);
    3234:	82 e0       	ldi	r24, 0x02	; 2
    3236:	0e 94 88 0b 	call	0x1710	; 0x1710 <LED_off>
     		Buzzer_off();
    323a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <Buzzer_off>
    323e:	a4 cf       	rjmp	.-184    	; 0x3188 <main+0x4e>


     	}
     	else if((distance>=6)&&(distance<=10)){
    3240:	8d 81       	ldd	r24, Y+5	; 0x05
    3242:	9e 81       	ldd	r25, Y+6	; 0x06
    3244:	86 30       	cpi	r24, 0x06	; 6
    3246:	91 05       	cpc	r25, r1
    3248:	88 f0       	brcs	.+34     	; 0x326c <main+0x132>
    324a:	8d 81       	ldd	r24, Y+5	; 0x05
    324c:	9e 81       	ldd	r25, Y+6	; 0x06
    324e:	8b 30       	cpi	r24, 0x0B	; 11
    3250:	91 05       	cpc	r25, r1
    3252:	60 f4       	brcc	.+24     	; 0x326c <main+0x132>
     		LED_on(LED_RED);
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LED_on>
     		LED_on(LED_GREEN);
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LED_on>
     		LED_on(LED_BLUE);
    3260:	82 e0       	ldi	r24, 0x02	; 2
    3262:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LED_on>
     		Buzzer_off();
    3266:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <Buzzer_off>
    326a:	8e cf       	rjmp	.-228    	; 0x3188 <main+0x4e>
     	}


        // ====  ALARM Condition ====//

       else if(distance<=5){
    326c:	8d 81       	ldd	r24, Y+5	; 0x05
    326e:	9e 81       	ldd	r25, Y+6	; 0x06
    3270:	86 30       	cpi	r24, 0x06	; 6
    3272:	91 05       	cpc	r25, r1
    3274:	08 f0       	brcs	.+2      	; 0x3278 <main+0x13e>
    3276:	88 cf       	rjmp	.-240    	; 0x3188 <main+0x4e>
    	    distance=Ultrasonic_readDistance();
    3278:	0e 94 a8 0c 	call	0x1950	; 0x1950 <Ultrasonic_readDistance>
    327c:	9e 83       	std	Y+6, r25	; 0x06
    327e:	8d 83       	std	Y+5, r24	; 0x05
       	   LCD_displayStringRowColumn(1, 0, "     STOP!!        ");
    3280:	24 e7       	ldi	r18, 0x74	; 116
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	60 e0       	ldi	r22, 0x00	; 0
    3288:	a9 01       	movw	r20, r18
    328a:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayStringRowColumn>
    328e:	21 c0       	rjmp	.+66     	; 0x32d2 <main+0x198>

    	   while(distance<=5){
     	   Blinking();
    3290:	0e 94 02 18 	call	0x3004	; 0x3004 <Blinking>
     	    distance=Ultrasonic_readDistance();
    3294:	0e 94 a8 0c 	call	0x1950	; 0x1950 <Ultrasonic_readDistance>
    3298:	9e 83       	std	Y+6, r25	; 0x06
    329a:	8d 83       	std	Y+5, r24	; 0x05
     	   if(distance!=alarm){
    329c:	2d 81       	ldd	r18, Y+5	; 0x05
    329e:	3e 81       	ldd	r19, Y+6	; 0x06
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	9a 81       	ldd	r25, Y+2	; 0x02
    32a4:	28 17       	cp	r18, r24
    32a6:	39 07       	cpc	r19, r25
    32a8:	a1 f0       	breq	.+40     	; 0x32d2 <main+0x198>
     	        LCD_moveCursor(0, 10);
    32aa:	80 e0       	ldi	r24, 0x00	; 0
    32ac:	6a e0       	ldi	r22, 0x0A	; 10
    32ae:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <LCD_moveCursor>
     	        LCD_displayString("   ");
    32b2:	80 e7       	ldi	r24, 0x70	; 112
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <LCD_displayString>
     	        LCD_moveCursor(0, 10);
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	6a e0       	ldi	r22, 0x0A	; 10
    32be:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <LCD_moveCursor>
     	        LCD_intgerToString(distance);
    32c2:	8d 81       	ldd	r24, Y+5	; 0x05
    32c4:	9e 81       	ldd	r25, Y+6	; 0x06
    32c6:	0e 94 d5 17 	call	0x2faa	; 0x2faa <LCD_intgerToString>
     	        alarm=distance;
    32ca:	8d 81       	ldd	r24, Y+5	; 0x05
    32cc:	9e 81       	ldd	r25, Y+6	; 0x06
    32ce:	9a 83       	std	Y+2, r25	; 0x02
    32d0:	89 83       	std	Y+1, r24	; 0x01

       else if(distance<=5){
    	    distance=Ultrasonic_readDistance();
       	   LCD_displayStringRowColumn(1, 0, "     STOP!!        ");

    	   while(distance<=5){
    32d2:	8d 81       	ldd	r24, Y+5	; 0x05
    32d4:	9e 81       	ldd	r25, Y+6	; 0x06
    32d6:	86 30       	cpi	r24, 0x06	; 6
    32d8:	91 05       	cpc	r25, r1
    32da:	d0 f2       	brcs	.-76     	; 0x3290 <main+0x156>
     	        LCD_intgerToString(distance);
     	        alarm=distance;
    	   }

     }
      	   LCD_displayStringRowColumn(1, 0, "              ");
    32dc:	28 e8       	ldi	r18, 0x88	; 136
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	60 e0       	ldi	r22, 0x00	; 0
    32e4:	a9 01       	movw	r20, r18
    32e6:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayStringRowColumn>
    32ea:	4e cf       	rjmp	.-356    	; 0x3188 <main+0x4e>

000032ec <__prologue_saves__>:
    32ec:	2f 92       	push	r2
    32ee:	3f 92       	push	r3
    32f0:	4f 92       	push	r4
    32f2:	5f 92       	push	r5
    32f4:	6f 92       	push	r6
    32f6:	7f 92       	push	r7
    32f8:	8f 92       	push	r8
    32fa:	9f 92       	push	r9
    32fc:	af 92       	push	r10
    32fe:	bf 92       	push	r11
    3300:	cf 92       	push	r12
    3302:	df 92       	push	r13
    3304:	ef 92       	push	r14
    3306:	ff 92       	push	r15
    3308:	0f 93       	push	r16
    330a:	1f 93       	push	r17
    330c:	cf 93       	push	r28
    330e:	df 93       	push	r29
    3310:	cd b7       	in	r28, 0x3d	; 61
    3312:	de b7       	in	r29, 0x3e	; 62
    3314:	ca 1b       	sub	r28, r26
    3316:	db 0b       	sbc	r29, r27
    3318:	0f b6       	in	r0, 0x3f	; 63
    331a:	f8 94       	cli
    331c:	de bf       	out	0x3e, r29	; 62
    331e:	0f be       	out	0x3f, r0	; 63
    3320:	cd bf       	out	0x3d, r28	; 61
    3322:	09 94       	ijmp

00003324 <__epilogue_restores__>:
    3324:	2a 88       	ldd	r2, Y+18	; 0x12
    3326:	39 88       	ldd	r3, Y+17	; 0x11
    3328:	48 88       	ldd	r4, Y+16	; 0x10
    332a:	5f 84       	ldd	r5, Y+15	; 0x0f
    332c:	6e 84       	ldd	r6, Y+14	; 0x0e
    332e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3330:	8c 84       	ldd	r8, Y+12	; 0x0c
    3332:	9b 84       	ldd	r9, Y+11	; 0x0b
    3334:	aa 84       	ldd	r10, Y+10	; 0x0a
    3336:	b9 84       	ldd	r11, Y+9	; 0x09
    3338:	c8 84       	ldd	r12, Y+8	; 0x08
    333a:	df 80       	ldd	r13, Y+7	; 0x07
    333c:	ee 80       	ldd	r14, Y+6	; 0x06
    333e:	fd 80       	ldd	r15, Y+5	; 0x05
    3340:	0c 81       	ldd	r16, Y+4	; 0x04
    3342:	1b 81       	ldd	r17, Y+3	; 0x03
    3344:	aa 81       	ldd	r26, Y+2	; 0x02
    3346:	b9 81       	ldd	r27, Y+1	; 0x01
    3348:	ce 0f       	add	r28, r30
    334a:	d1 1d       	adc	r29, r1
    334c:	0f b6       	in	r0, 0x3f	; 63
    334e:	f8 94       	cli
    3350:	de bf       	out	0x3e, r29	; 62
    3352:	0f be       	out	0x3f, r0	; 63
    3354:	cd bf       	out	0x3d, r28	; 61
    3356:	ed 01       	movw	r28, r26
    3358:	08 95       	ret

0000335a <itoa>:
    335a:	fb 01       	movw	r30, r22
    335c:	9f 01       	movw	r18, r30
    335e:	e8 94       	clt
    3360:	42 30       	cpi	r20, 0x02	; 2
    3362:	c4 f0       	brlt	.+48     	; 0x3394 <itoa+0x3a>
    3364:	45 32       	cpi	r20, 0x25	; 37
    3366:	b4 f4       	brge	.+44     	; 0x3394 <itoa+0x3a>
    3368:	4a 30       	cpi	r20, 0x0A	; 10
    336a:	29 f4       	brne	.+10     	; 0x3376 <itoa+0x1c>
    336c:	97 fb       	bst	r25, 7
    336e:	1e f4       	brtc	.+6      	; 0x3376 <itoa+0x1c>
    3370:	90 95       	com	r25
    3372:	81 95       	neg	r24
    3374:	9f 4f       	sbci	r25, 0xFF	; 255
    3376:	64 2f       	mov	r22, r20
    3378:	77 27       	eor	r23, r23
    337a:	0e 94 de 19 	call	0x33bc	; 0x33bc <__udivmodhi4>
    337e:	80 5d       	subi	r24, 0xD0	; 208
    3380:	8a 33       	cpi	r24, 0x3A	; 58
    3382:	0c f0       	brlt	.+2      	; 0x3386 <itoa+0x2c>
    3384:	89 5d       	subi	r24, 0xD9	; 217
    3386:	81 93       	st	Z+, r24
    3388:	cb 01       	movw	r24, r22
    338a:	00 97       	sbiw	r24, 0x00	; 0
    338c:	a1 f7       	brne	.-24     	; 0x3376 <itoa+0x1c>
    338e:	16 f4       	brtc	.+4      	; 0x3394 <itoa+0x3a>
    3390:	5d e2       	ldi	r21, 0x2D	; 45
    3392:	51 93       	st	Z+, r21
    3394:	10 82       	st	Z, r1
    3396:	c9 01       	movw	r24, r18
    3398:	0c 94 ce 19 	jmp	0x339c	; 0x339c <strrev>

0000339c <strrev>:
    339c:	dc 01       	movw	r26, r24
    339e:	fc 01       	movw	r30, r24
    33a0:	67 2f       	mov	r22, r23
    33a2:	71 91       	ld	r23, Z+
    33a4:	77 23       	and	r23, r23
    33a6:	e1 f7       	brne	.-8      	; 0x33a0 <strrev+0x4>
    33a8:	32 97       	sbiw	r30, 0x02	; 2
    33aa:	04 c0       	rjmp	.+8      	; 0x33b4 <strrev+0x18>
    33ac:	7c 91       	ld	r23, X
    33ae:	6d 93       	st	X+, r22
    33b0:	70 83       	st	Z, r23
    33b2:	62 91       	ld	r22, -Z
    33b4:	ae 17       	cp	r26, r30
    33b6:	bf 07       	cpc	r27, r31
    33b8:	c8 f3       	brcs	.-14     	; 0x33ac <strrev+0x10>
    33ba:	08 95       	ret

000033bc <__udivmodhi4>:
    33bc:	aa 1b       	sub	r26, r26
    33be:	bb 1b       	sub	r27, r27
    33c0:	51 e1       	ldi	r21, 0x11	; 17
    33c2:	07 c0       	rjmp	.+14     	; 0x33d2 <__udivmodhi4_ep>

000033c4 <__udivmodhi4_loop>:
    33c4:	aa 1f       	adc	r26, r26
    33c6:	bb 1f       	adc	r27, r27
    33c8:	a6 17       	cp	r26, r22
    33ca:	b7 07       	cpc	r27, r23
    33cc:	10 f0       	brcs	.+4      	; 0x33d2 <__udivmodhi4_ep>
    33ce:	a6 1b       	sub	r26, r22
    33d0:	b7 0b       	sbc	r27, r23

000033d2 <__udivmodhi4_ep>:
    33d2:	88 1f       	adc	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	5a 95       	dec	r21
    33d8:	a9 f7       	brne	.-22     	; 0x33c4 <__udivmodhi4_loop>
    33da:	80 95       	com	r24
    33dc:	90 95       	com	r25
    33de:	bc 01       	movw	r22, r24
    33e0:	cd 01       	movw	r24, r26
    33e2:	08 95       	ret

000033e4 <_exit>:
    33e4:	f8 94       	cli

000033e6 <__stop_program>:
    33e6:	ff cf       	rjmp	.-2      	; 0x33e6 <__stop_program>
