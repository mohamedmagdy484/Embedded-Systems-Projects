
Final_Project_Mohamed_MAGDY_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002780  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002780  00002814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080007a  0080007a  0000282e  2**0
                  ALLOC
  3 .stab         00002f28  00000000  00000000  00002830  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b9a  00000000  00000000  00005758  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000072f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007432  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000075a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000091eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a0d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ae84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000afe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b271  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ba3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__vector_4>
      14:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 40 08 	jmp	0x1080	; 0x1080 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__vector_9>
      28:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__vector_10>
      2c:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 76 0f 	call	0x1eec	; 0x1eec <main>
      8a:	0c 94 be 13 	jmp	0x277c	; 0x277c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 87 13 	jmp	0x270e	; 0x270e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 af 13 	jmp	0x275e	; 0x275e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 af 13 	jmp	0x275e	; 0x275e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 87 13 	jmp	0x270e	; 0x270e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 af 13 	jmp	0x275e	; 0x275e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 af 13 	jmp	0x275e	; 0x275e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 af 13 	jmp	0x275e	; 0x275e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 97 13 	jmp	0x272e	; 0x272e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <PWM_Timer0_Start>:

#include <avr/io.h>
#include "PWM.h"

void PWM_Timer0_Start(uint8 duty_cycle)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
    // Set OC0 (PB3) as output
    DDRB |= (1 << PB3);
     b56:	a7 e3       	ldi	r26, 0x37	; 55
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	e7 e3       	ldi	r30, 0x37	; 55
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	88 60       	ori	r24, 0x08	; 8
     b62:	8c 93       	st	X, r24

    // Set Fast PWM mode (WGM00 & WGM01 = 1), Non-inverting mode (COM01 = 1)
    TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01) | (1 << CS00);
     b64:	e3 e5       	ldi	r30, 0x53	; 83
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	8b e6       	ldi	r24, 0x6B	; 107
     b6a:	80 83       	st	Z, r24
    // CS02 and CS00 -> Prescaler = 64

    // Set duty cycle (0-100%)
    OCR0 = (uint8)((duty_cycle * 255UL) / 100);
     b6c:	0c e5       	ldi	r16, 0x5C	; 92
     b6e:	10 e0       	ldi	r17, 0x00	; 0
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	88 2f       	mov	r24, r24
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	2f ef       	ldi	r18, 0xFF	; 255
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	bc 01       	movw	r22, r24
     b84:	cd 01       	movw	r24, r26
     b86:	0e 94 1f 13 	call	0x263e	; 0x263e <__mulsi3>
     b8a:	dc 01       	movw	r26, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	24 e6       	ldi	r18, 0x64	; 100
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	50 e0       	ldi	r21, 0x00	; 0
     b96:	bc 01       	movw	r22, r24
     b98:	cd 01       	movw	r24, r26
     b9a:	0e 94 51 13 	call	0x26a2	; 0x26a2 <__udivmodsi4>
     b9e:	da 01       	movw	r26, r20
     ba0:	c9 01       	movw	r24, r18
     ba2:	f8 01       	movw	r30, r16
     ba4:	80 83       	st	Z, r24
}
     ba6:	0f 90       	pop	r0
     ba8:	cf 91       	pop	r28
     baa:	df 91       	pop	r29
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	08 95       	ret

00000bb2 <Timer_init>:
▪ Description: Function to initialize the Timer driver
▪ Inputs: pointer to the configuration structure with type Timer_ConfigType.
▪ Return: None
*/
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
     bb2:	df 93       	push	r29
     bb4:	cf 93       	push	r28
     bb6:	00 d0       	rcall	.+0      	; 0xbb8 <Timer_init+0x6>
     bb8:	00 d0       	rcall	.+0      	; 0xbba <Timer_init+0x8>
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	9a 83       	std	Y+2, r25	; 0x02
     bc0:	89 83       	std	Y+1, r24	; 0x01
    switch(Config_Ptr->timer_ID)
     bc2:	e9 81       	ldd	r30, Y+1	; 0x01
     bc4:	fa 81       	ldd	r31, Y+2	; 0x02
     bc6:	84 81       	ldd	r24, Z+4	; 0x04
     bc8:	28 2f       	mov	r18, r24
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	3c 83       	std	Y+4, r19	; 0x04
     bce:	2b 83       	std	Y+3, r18	; 0x03
     bd0:	8b 81       	ldd	r24, Y+3	; 0x03
     bd2:	9c 81       	ldd	r25, Y+4	; 0x04
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	91 05       	cpc	r25, r1
     bd8:	09 f4       	brne	.+2      	; 0xbdc <Timer_init+0x2a>
     bda:	69 c0       	rjmp	.+210    	; 0xcae <Timer_init+0xfc>
     bdc:	2b 81       	ldd	r18, Y+3	; 0x03
     bde:	3c 81       	ldd	r19, Y+4	; 0x04
     be0:	22 30       	cpi	r18, 0x02	; 2
     be2:	31 05       	cpc	r19, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <Timer_init+0x36>
     be6:	b7 c0       	rjmp	.+366    	; 0xd56 <Timer_init+0x1a4>
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	9c 81       	ldd	r25, Y+4	; 0x04
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	09 f0       	breq	.+2      	; 0xbf2 <Timer_init+0x40>
     bf0:	0f c1       	rjmp	.+542    	; 0xe10 <Timer_init+0x25e>
    {
    case Timer0:
        TCNT0 = (uint8) Config_Ptr->timer_InitialValue;
     bf2:	a2 e5       	ldi	r26, 0x52	; 82
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e9 81       	ldd	r30, Y+1	; 0x01
     bf8:	fa 81       	ldd	r31, Y+2	; 0x02
     bfa:	80 81       	ld	r24, Z
     bfc:	91 81       	ldd	r25, Z+1	; 0x01
     bfe:	8c 93       	st	X, r24

        if(Config_Ptr->timer_mode == COMPARE_MODE)
     c00:	e9 81       	ldd	r30, Y+1	; 0x01
     c02:	fa 81       	ldd	r31, Y+2	; 0x02
     c04:	86 81       	ldd	r24, Z+6	; 0x06
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	21 f5       	brne	.+72     	; 0xc52 <Timer_init+0xa0>
        {
            OCR0 = (uint8) Config_Ptr->timer_compare_MatchValue;
     c0a:	ac e5       	ldi	r26, 0x5C	; 92
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e9 81       	ldd	r30, Y+1	; 0x01
     c10:	fa 81       	ldd	r31, Y+2	; 0x02
     c12:	82 81       	ldd	r24, Z+2	; 0x02
     c14:	93 81       	ldd	r25, Z+3	; 0x03
     c16:	8c 93       	st	X, r24
            SET_BIT(TIMSK, OCIE0);
     c18:	a9 e5       	ldi	r26, 0x59	; 89
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e9 e5       	ldi	r30, 0x59	; 89
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	82 60       	ori	r24, 0x02	; 2
     c24:	8c 93       	st	X, r24
            SET_BIT(TCCR0, FOC0);
     c26:	a3 e5       	ldi	r26, 0x53	; 83
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e3 e5       	ldi	r30, 0x53	; 83
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	80 68       	ori	r24, 0x80	; 128
     c32:	8c 93       	st	X, r24
            SET_BIT(TCCR0, WGM01);
     c34:	a3 e5       	ldi	r26, 0x53	; 83
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e3 e5       	ldi	r30, 0x53	; 83
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	88 60       	ori	r24, 0x08	; 8
     c40:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR0, WGM00);
     c42:	a3 e5       	ldi	r26, 0x53	; 83
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e3 e5       	ldi	r30, 0x53	; 83
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	8f 7b       	andi	r24, 0xBF	; 191
     c4e:	8c 93       	st	X, r24
     c50:	21 c0       	rjmp	.+66     	; 0xc94 <Timer_init+0xe2>
        }
        else if(Config_Ptr->timer_mode == NORMAL_MODE)
     c52:	e9 81       	ldd	r30, Y+1	; 0x01
     c54:	fa 81       	ldd	r31, Y+2	; 0x02
     c56:	86 81       	ldd	r24, Z+6	; 0x06
     c58:	88 23       	and	r24, r24
     c5a:	e1 f4       	brne	.+56     	; 0xc94 <Timer_init+0xe2>
        {
            SET_BIT(TIMSK, TOIE0);
     c5c:	a9 e5       	ldi	r26, 0x59	; 89
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e9 e5       	ldi	r30, 0x59	; 89
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	81 60       	ori	r24, 0x01	; 1
     c68:	8c 93       	st	X, r24
            SET_BIT(TCCR0, FOC0);
     c6a:	a3 e5       	ldi	r26, 0x53	; 83
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e3 e5       	ldi	r30, 0x53	; 83
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	80 68       	ori	r24, 0x80	; 128
     c76:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR0, WGM00);
     c78:	a3 e5       	ldi	r26, 0x53	; 83
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e3 e5       	ldi	r30, 0x53	; 83
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	8f 7b       	andi	r24, 0xBF	; 191
     c84:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR0, WGM01);
     c86:	a3 e5       	ldi	r26, 0x53	; 83
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e3 e5       	ldi	r30, 0x53	; 83
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	87 7f       	andi	r24, 0xF7	; 247
     c92:	8c 93       	st	X, r24
        }

        TCCR0 |= (Config_Ptr->timer_clock & 0x07); // Set prescaler
     c94:	a3 e5       	ldi	r26, 0x53	; 83
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e3 e5       	ldi	r30, 0x53	; 83
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	98 2f       	mov	r25, r24
     ca0:	e9 81       	ldd	r30, Y+1	; 0x01
     ca2:	fa 81       	ldd	r31, Y+2	; 0x02
     ca4:	85 81       	ldd	r24, Z+5	; 0x05
     ca6:	87 70       	andi	r24, 0x07	; 7
     ca8:	89 2b       	or	r24, r25
     caa:	8c 93       	st	X, r24
     cac:	b1 c0       	rjmp	.+354    	; 0xe10 <Timer_init+0x25e>
        break;

    case Timer1:
        TCNT1 = Config_Ptr->timer_InitialValue;
     cae:	ac e4       	ldi	r26, 0x4C	; 76
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e9 81       	ldd	r30, Y+1	; 0x01
     cb4:	fa 81       	ldd	r31, Y+2	; 0x02
     cb6:	80 81       	ld	r24, Z
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
     cba:	11 96       	adiw	r26, 0x01	; 1
     cbc:	9c 93       	st	X, r25
     cbe:	8e 93       	st	-X, r24

        if(Config_Ptr->timer_mode == COMPARE_MODE)
     cc0:	e9 81       	ldd	r30, Y+1	; 0x01
     cc2:	fa 81       	ldd	r31, Y+2	; 0x02
     cc4:	86 81       	ldd	r24, Z+6	; 0x06
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	f9 f4       	brne	.+62     	; 0xd08 <Timer_init+0x156>
        {
            OCR1A = Config_Ptr->timer_compare_MatchValue;
     cca:	aa e4       	ldi	r26, 0x4A	; 74
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e9 81       	ldd	r30, Y+1	; 0x01
     cd0:	fa 81       	ldd	r31, Y+2	; 0x02
     cd2:	82 81       	ldd	r24, Z+2	; 0x02
     cd4:	93 81       	ldd	r25, Z+3	; 0x03
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	9c 93       	st	X, r25
     cda:	8e 93       	st	-X, r24
            SET_BIT(TIMSK, OCIE1A);
     cdc:	a9 e5       	ldi	r26, 0x59	; 89
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e9 e5       	ldi	r30, 0x59	; 89
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	80 61       	ori	r24, 0x10	; 16
     ce8:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, FOC1A);
     cea:	af e4       	ldi	r26, 0x4F	; 79
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	ef e4       	ldi	r30, 0x4F	; 79
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	88 60       	ori	r24, 0x08	; 8
     cf6:	8c 93       	st	X, r24
            TCCR1B |= (1 << WGM12);   // CTC Mode
     cf8:	ae e4       	ldi	r26, 0x4E	; 78
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	ee e4       	ldi	r30, 0x4E	; 78
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	88 60       	ori	r24, 0x08	; 8
     d04:	8c 93       	st	X, r24
     d06:	1a c0       	rjmp	.+52     	; 0xd3c <Timer_init+0x18a>
        }
        else if(Config_Ptr->timer_mode == NORMAL_MODE)
     d08:	e9 81       	ldd	r30, Y+1	; 0x01
     d0a:	fa 81       	ldd	r31, Y+2	; 0x02
     d0c:	86 81       	ldd	r24, Z+6	; 0x06
     d0e:	88 23       	and	r24, r24
     d10:	a9 f4       	brne	.+42     	; 0xd3c <Timer_init+0x18a>
        {
            SET_BIT(TIMSK, TOIE1);
     d12:	a9 e5       	ldi	r26, 0x59	; 89
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e9 e5       	ldi	r30, 0x59	; 89
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	84 60       	ori	r24, 0x04	; 4
     d1e:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, FOC1A);
     d20:	af e4       	ldi	r26, 0x4F	; 79
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	ef e4       	ldi	r30, 0x4F	; 79
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	88 60       	ori	r24, 0x08	; 8
     d2c:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1B, WGM12); // Normal mode
     d2e:	ae e4       	ldi	r26, 0x4E	; 78
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ee e4       	ldi	r30, 0x4E	; 78
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	87 7f       	andi	r24, 0xF7	; 247
     d3a:	8c 93       	st	X, r24
        }

        TCCR1B |= (Config_Ptr->timer_clock & 0x07);
     d3c:	ae e4       	ldi	r26, 0x4E	; 78
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	ee e4       	ldi	r30, 0x4E	; 78
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	98 2f       	mov	r25, r24
     d48:	e9 81       	ldd	r30, Y+1	; 0x01
     d4a:	fa 81       	ldd	r31, Y+2	; 0x02
     d4c:	85 81       	ldd	r24, Z+5	; 0x05
     d4e:	87 70       	andi	r24, 0x07	; 7
     d50:	89 2b       	or	r24, r25
     d52:	8c 93       	st	X, r24
     d54:	5d c0       	rjmp	.+186    	; 0xe10 <Timer_init+0x25e>
        break;

    case Timer2:
        TCNT2 = (uint8) Config_Ptr->timer_InitialValue;
     d56:	a4 e4       	ldi	r26, 0x44	; 68
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e9 81       	ldd	r30, Y+1	; 0x01
     d5c:	fa 81       	ldd	r31, Y+2	; 0x02
     d5e:	80 81       	ld	r24, Z
     d60:	91 81       	ldd	r25, Z+1	; 0x01
     d62:	8c 93       	st	X, r24

        if(Config_Ptr->timer_mode == COMPARE_MODE)
     d64:	e9 81       	ldd	r30, Y+1	; 0x01
     d66:	fa 81       	ldd	r31, Y+2	; 0x02
     d68:	86 81       	ldd	r24, Z+6	; 0x06
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	21 f5       	brne	.+72     	; 0xdb6 <Timer_init+0x204>
        {
            OCR2 = (uint8) Config_Ptr->timer_compare_MatchValue;
     d6e:	a3 e4       	ldi	r26, 0x43	; 67
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e9 81       	ldd	r30, Y+1	; 0x01
     d74:	fa 81       	ldd	r31, Y+2	; 0x02
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	93 81       	ldd	r25, Z+3	; 0x03
     d7a:	8c 93       	st	X, r24
            SET_BIT(TIMSK, OCIE2);
     d7c:	a9 e5       	ldi	r26, 0x59	; 89
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e9 e5       	ldi	r30, 0x59	; 89
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	80 68       	ori	r24, 0x80	; 128
     d88:	8c 93       	st	X, r24
            SET_BIT(TCCR2, FOC2);
     d8a:	a5 e4       	ldi	r26, 0x45	; 69
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e5 e4       	ldi	r30, 0x45	; 69
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	80 68       	ori	r24, 0x80	; 128
     d96:	8c 93       	st	X, r24
            SET_BIT(TCCR2, WGM21);    // CTC mode
     d98:	a5 e4       	ldi	r26, 0x45	; 69
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e5 e4       	ldi	r30, 0x45	; 69
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	88 60       	ori	r24, 0x08	; 8
     da4:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR2, WGM20);
     da6:	a5 e4       	ldi	r26, 0x45	; 69
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e5 e4       	ldi	r30, 0x45	; 69
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8f 7b       	andi	r24, 0xBF	; 191
     db2:	8c 93       	st	X, r24
     db4:	21 c0       	rjmp	.+66     	; 0xdf8 <Timer_init+0x246>
        }
        else if(Config_Ptr->timer_mode == NORMAL_MODE)
     db6:	e9 81       	ldd	r30, Y+1	; 0x01
     db8:	fa 81       	ldd	r31, Y+2	; 0x02
     dba:	86 81       	ldd	r24, Z+6	; 0x06
     dbc:	88 23       	and	r24, r24
     dbe:	e1 f4       	brne	.+56     	; 0xdf8 <Timer_init+0x246>
        {
            SET_BIT(TIMSK, TOIE2);
     dc0:	a9 e5       	ldi	r26, 0x59	; 89
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e9 e5       	ldi	r30, 0x59	; 89
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	80 64       	ori	r24, 0x40	; 64
     dcc:	8c 93       	st	X, r24
            SET_BIT(TCCR2, FOC2);
     dce:	a5 e4       	ldi	r26, 0x45	; 69
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e5 e4       	ldi	r30, 0x45	; 69
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	80 68       	ori	r24, 0x80	; 128
     dda:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR2, WGM20);  // Normal mode
     ddc:	a5 e4       	ldi	r26, 0x45	; 69
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e5 e4       	ldi	r30, 0x45	; 69
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	8f 7b       	andi	r24, 0xBF	; 191
     de8:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR2, WGM21);
     dea:	a5 e4       	ldi	r26, 0x45	; 69
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e5 e4       	ldi	r30, 0x45	; 69
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	87 7f       	andi	r24, 0xF7	; 247
     df6:	8c 93       	st	X, r24
        }

        TCCR2 |= (Config_Ptr->timer_clock & 0x07);
     df8:	a5 e4       	ldi	r26, 0x45	; 69
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e5 e4       	ldi	r30, 0x45	; 69
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	98 2f       	mov	r25, r24
     e04:	e9 81       	ldd	r30, Y+1	; 0x01
     e06:	fa 81       	ldd	r31, Y+2	; 0x02
     e08:	85 81       	ldd	r24, Z+5	; 0x05
     e0a:	87 70       	andi	r24, 0x07	; 7
     e0c:	89 2b       	or	r24, r25
     e0e:	8c 93       	st	X, r24
        break;


    }
}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <Timer_deInit>:
▪ Description: Function to disable the Timer via Timer_ID.
▪ Inputs: Timer_ID
▪ Return: None
*/
void Timer_deInit(Timer_ID_Type timer_type)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <Timer_deInit+0x6>
     e24:	0f 92       	push	r0
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	89 83       	std	Y+1, r24	; 0x01
    switch(timer_type)
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	3b 83       	std	Y+3, r19	; 0x03
     e34:	2a 83       	std	Y+2, r18	; 0x02
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	9b 81       	ldd	r25, Y+3	; 0x03
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	91 05       	cpc	r25, r1
     e3e:	11 f1       	breq	.+68     	; 0xe84 <Timer_deInit+0x66>
     e40:	2a 81       	ldd	r18, Y+2	; 0x02
     e42:	3b 81       	ldd	r19, Y+3	; 0x03
     e44:	22 30       	cpi	r18, 0x02	; 2
     e46:	31 05       	cpc	r19, r1
     e48:	d1 f1       	breq	.+116    	; 0xebe <Timer_deInit+0xa0>
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	9b 81       	ldd	r25, Y+3	; 0x03
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	09 f0       	breq	.+2      	; 0xe54 <Timer_deInit+0x36>
     e52:	4c c0       	rjmp	.+152    	; 0xeec <Timer_deInit+0xce>
    {
    case Timer0:
        TCCR0 = 0;
     e54:	e3 e5       	ldi	r30, 0x53	; 83
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	10 82       	st	Z, r1
        TCNT0 = 0;
     e5a:	e2 e5       	ldi	r30, 0x52	; 82
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	10 82       	st	Z, r1
        OCR0  = 0;
     e60:	ec e5       	ldi	r30, 0x5C	; 92
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	10 82       	st	Z, r1
        CLEAR_BIT(TIMSK, TOIE0);
     e66:	a9 e5       	ldi	r26, 0x59	; 89
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e9 e5       	ldi	r30, 0x59	; 89
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8e 7f       	andi	r24, 0xFE	; 254
     e72:	8c 93       	st	X, r24
        CLEAR_BIT(TIMSK, OCIE0);
     e74:	a9 e5       	ldi	r26, 0x59	; 89
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e9 e5       	ldi	r30, 0x59	; 89
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8d 7f       	andi	r24, 0xFD	; 253
     e80:	8c 93       	st	X, r24
     e82:	34 c0       	rjmp	.+104    	; 0xeec <Timer_deInit+0xce>
        break;

    case Timer1:
        TCCR1A = 0;
     e84:	ef e4       	ldi	r30, 0x4F	; 79
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	10 82       	st	Z, r1
        TCCR1B = 0;
     e8a:	ee e4       	ldi	r30, 0x4E	; 78
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	10 82       	st	Z, r1
        TCNT1  = 0;
     e90:	ec e4       	ldi	r30, 0x4C	; 76
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	11 82       	std	Z+1, r1	; 0x01
     e96:	10 82       	st	Z, r1
        OCR1A  = 0;
     e98:	ea e4       	ldi	r30, 0x4A	; 74
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	11 82       	std	Z+1, r1	; 0x01
     e9e:	10 82       	st	Z, r1
        CLEAR_BIT(TIMSK, TOIE1);
     ea0:	a9 e5       	ldi	r26, 0x59	; 89
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e9 e5       	ldi	r30, 0x59	; 89
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	8b 7f       	andi	r24, 0xFB	; 251
     eac:	8c 93       	st	X, r24
        CLEAR_BIT(TIMSK, OCIE1A);
     eae:	a9 e5       	ldi	r26, 0x59	; 89
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e9 e5       	ldi	r30, 0x59	; 89
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	8f 7e       	andi	r24, 0xEF	; 239
     eba:	8c 93       	st	X, r24
     ebc:	17 c0       	rjmp	.+46     	; 0xeec <Timer_deInit+0xce>
        break;

    case Timer2:
        TCCR2 = 0;
     ebe:	e5 e4       	ldi	r30, 0x45	; 69
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	10 82       	st	Z, r1
        TCNT2 = 0;
     ec4:	e4 e4       	ldi	r30, 0x44	; 68
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	10 82       	st	Z, r1
        OCR2  = 0;
     eca:	e3 e4       	ldi	r30, 0x43	; 67
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	10 82       	st	Z, r1
        CLEAR_BIT(TIMSK, TOIE2);
     ed0:	a9 e5       	ldi	r26, 0x59	; 89
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e9 e5       	ldi	r30, 0x59	; 89
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	8f 7b       	andi	r24, 0xBF	; 191
     edc:	8c 93       	st	X, r24
        CLEAR_BIT(TIMSK, OCIE2);
     ede:	a9 e5       	ldi	r26, 0x59	; 89
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e9 e5       	ldi	r30, 0x59	; 89
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8f 77       	andi	r24, 0x7F	; 127
     eea:	8c 93       	st	X, r24


    }

    // Reset the callback pointer
    if(timer_type >= Timer0 && timer_type <= Timer2)
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	83 30       	cpi	r24, 0x03	; 3
     ef0:	50 f4       	brcc	.+20     	; 0xf06 <Timer_deInit+0xe8>
    		{
    			g_callBackPtr[timer_type] = NULL_PTR;
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	fc 01       	movw	r30, r24
     efe:	e6 58       	subi	r30, 0x86	; 134
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	11 82       	std	Z+1, r1	; 0x01
     f04:	10 82       	st	Z, r1
    		}

}
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <Timer_setCallBack>:
Timer.
▪ Inputs: pointer to Call Back function and Timer Id you want to set The
Callback to it.
▪ Return: None
*/
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID ){
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	00 d0       	rcall	.+0      	; 0xf18 <Timer_setCallBack+0x6>
     f18:	0f 92       	push	r0
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	9a 83       	std	Y+2, r25	; 0x02
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	6b 83       	std	Y+3, r22	; 0x03
	if(a_timer_ID >= Timer0 && a_timer_ID <= Timer2)
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	83 30       	cpi	r24, 0x03	; 3
     f28:	60 f4       	brcc	.+24     	; 0xf42 <Timer_setCallBack+0x30>
		{
			g_callBackPtr[a_timer_ID] = a_ptr;
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	88 2f       	mov	r24, r24
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	29 81       	ldd	r18, Y+1	; 0x01
     f32:	3a 81       	ldd	r19, Y+2	; 0x02
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	fc 01       	movw	r30, r24
     f3a:	e6 58       	subi	r30, 0x86	; 134
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	31 83       	std	Z+1, r19	; 0x01
     f40:	20 83       	st	Z, r18
		}
}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <__vector_11>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
     f4e:	1f 92       	push	r1
     f50:	0f 92       	push	r0
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	0f 92       	push	r0
     f56:	11 24       	eor	r1, r1
     f58:	2f 93       	push	r18
     f5a:	3f 93       	push	r19
     f5c:	4f 93       	push	r20
     f5e:	5f 93       	push	r21
     f60:	6f 93       	push	r22
     f62:	7f 93       	push	r23
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
     f68:	af 93       	push	r26
     f6a:	bf 93       	push	r27
     f6c:	ef 93       	push	r30
     f6e:	ff 93       	push	r31
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[Timer0] != NULL_PTR)
     f78:	80 91 7a 00 	lds	r24, 0x007A
     f7c:	90 91 7b 00 	lds	r25, 0x007B
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	29 f0       	breq	.+10     	; 0xf8e <__vector_11+0x40>
	{
		(*g_callBackPtr[Timer0])();
     f84:	e0 91 7a 00 	lds	r30, 0x007A
     f88:	f0 91 7b 00 	lds	r31, 0x007B
     f8c:	09 95       	icall
	}
}
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	ff 91       	pop	r31
     f94:	ef 91       	pop	r30
     f96:	bf 91       	pop	r27
     f98:	af 91       	pop	r26
     f9a:	9f 91       	pop	r25
     f9c:	8f 91       	pop	r24
     f9e:	7f 91       	pop	r23
     fa0:	6f 91       	pop	r22
     fa2:	5f 91       	pop	r21
     fa4:	4f 91       	pop	r20
     fa6:	3f 91       	pop	r19
     fa8:	2f 91       	pop	r18
     faa:	0f 90       	pop	r0
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	0f 90       	pop	r0
     fb0:	1f 90       	pop	r1
     fb2:	18 95       	reti

00000fb4 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     fb4:	1f 92       	push	r1
     fb6:	0f 92       	push	r0
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	0f 92       	push	r0
     fbc:	11 24       	eor	r1, r1
     fbe:	2f 93       	push	r18
     fc0:	3f 93       	push	r19
     fc2:	4f 93       	push	r20
     fc4:	5f 93       	push	r21
     fc6:	6f 93       	push	r22
     fc8:	7f 93       	push	r23
     fca:	8f 93       	push	r24
     fcc:	9f 93       	push	r25
     fce:	af 93       	push	r26
     fd0:	bf 93       	push	r27
     fd2:	ef 93       	push	r30
     fd4:	ff 93       	push	r31
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[Timer0] != NULL_PTR)
     fde:	80 91 7a 00 	lds	r24, 0x007A
     fe2:	90 91 7b 00 	lds	r25, 0x007B
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	29 f0       	breq	.+10     	; 0xff4 <__vector_10+0x40>
	{
		(*g_callBackPtr[Timer0])();
     fea:	e0 91 7a 00 	lds	r30, 0x007A
     fee:	f0 91 7b 00 	lds	r31, 0x007B
     ff2:	09 95       	icall
	}
}
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	ff 91       	pop	r31
     ffa:	ef 91       	pop	r30
     ffc:	bf 91       	pop	r27
     ffe:	af 91       	pop	r26
    1000:	9f 91       	pop	r25
    1002:	8f 91       	pop	r24
    1004:	7f 91       	pop	r23
    1006:	6f 91       	pop	r22
    1008:	5f 91       	pop	r21
    100a:	4f 91       	pop	r20
    100c:	3f 91       	pop	r19
    100e:	2f 91       	pop	r18
    1010:	0f 90       	pop	r0
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	0f 90       	pop	r0
    1016:	1f 90       	pop	r1
    1018:	18 95       	reti

0000101a <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    101a:	1f 92       	push	r1
    101c:	0f 92       	push	r0
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	0f 92       	push	r0
    1022:	11 24       	eor	r1, r1
    1024:	2f 93       	push	r18
    1026:	3f 93       	push	r19
    1028:	4f 93       	push	r20
    102a:	5f 93       	push	r21
    102c:	6f 93       	push	r22
    102e:	7f 93       	push	r23
    1030:	8f 93       	push	r24
    1032:	9f 93       	push	r25
    1034:	af 93       	push	r26
    1036:	bf 93       	push	r27
    1038:	ef 93       	push	r30
    103a:	ff 93       	push	r31
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[Timer1] != NULL_PTR)
    1044:	80 91 7c 00 	lds	r24, 0x007C
    1048:	90 91 7d 00 	lds	r25, 0x007D
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	29 f0       	breq	.+10     	; 0x105a <__vector_9+0x40>
	{
		(*g_callBackPtr[Timer1])();
    1050:	e0 91 7c 00 	lds	r30, 0x007C
    1054:	f0 91 7d 00 	lds	r31, 0x007D
    1058:	09 95       	icall
	}
}
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	ff 91       	pop	r31
    1060:	ef 91       	pop	r30
    1062:	bf 91       	pop	r27
    1064:	af 91       	pop	r26
    1066:	9f 91       	pop	r25
    1068:	8f 91       	pop	r24
    106a:	7f 91       	pop	r23
    106c:	6f 91       	pop	r22
    106e:	5f 91       	pop	r21
    1070:	4f 91       	pop	r20
    1072:	3f 91       	pop	r19
    1074:	2f 91       	pop	r18
    1076:	0f 90       	pop	r0
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	0f 90       	pop	r0
    107c:	1f 90       	pop	r1
    107e:	18 95       	reti

00001080 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1080:	1f 92       	push	r1
    1082:	0f 92       	push	r0
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	0f 92       	push	r0
    1088:	11 24       	eor	r1, r1
    108a:	2f 93       	push	r18
    108c:	3f 93       	push	r19
    108e:	4f 93       	push	r20
    1090:	5f 93       	push	r21
    1092:	6f 93       	push	r22
    1094:	7f 93       	push	r23
    1096:	8f 93       	push	r24
    1098:	9f 93       	push	r25
    109a:	af 93       	push	r26
    109c:	bf 93       	push	r27
    109e:	ef 93       	push	r30
    10a0:	ff 93       	push	r31
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[Timer1] != NULL_PTR)
    10aa:	80 91 7c 00 	lds	r24, 0x007C
    10ae:	90 91 7d 00 	lds	r25, 0x007D
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	29 f0       	breq	.+10     	; 0x10c0 <__vector_7+0x40>
	{
		(*g_callBackPtr[Timer1])();
    10b6:	e0 91 7c 00 	lds	r30, 0x007C
    10ba:	f0 91 7d 00 	lds	r31, 0x007D
    10be:	09 95       	icall
	}
}
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	ff 91       	pop	r31
    10c6:	ef 91       	pop	r30
    10c8:	bf 91       	pop	r27
    10ca:	af 91       	pop	r26
    10cc:	9f 91       	pop	r25
    10ce:	8f 91       	pop	r24
    10d0:	7f 91       	pop	r23
    10d2:	6f 91       	pop	r22
    10d4:	5f 91       	pop	r21
    10d6:	4f 91       	pop	r20
    10d8:	3f 91       	pop	r19
    10da:	2f 91       	pop	r18
    10dc:	0f 90       	pop	r0
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	0f 90       	pop	r0
    10e2:	1f 90       	pop	r1
    10e4:	18 95       	reti

000010e6 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    10e6:	1f 92       	push	r1
    10e8:	0f 92       	push	r0
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	0f 92       	push	r0
    10ee:	11 24       	eor	r1, r1
    10f0:	2f 93       	push	r18
    10f2:	3f 93       	push	r19
    10f4:	4f 93       	push	r20
    10f6:	5f 93       	push	r21
    10f8:	6f 93       	push	r22
    10fa:	7f 93       	push	r23
    10fc:	8f 93       	push	r24
    10fe:	9f 93       	push	r25
    1100:	af 93       	push	r26
    1102:	bf 93       	push	r27
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[Timer2] != NULL_PTR)
    1110:	80 91 7e 00 	lds	r24, 0x007E
    1114:	90 91 7f 00 	lds	r25, 0x007F
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	29 f0       	breq	.+10     	; 0x1126 <__vector_5+0x40>
	{
		(*g_callBackPtr[Timer2])();
    111c:	e0 91 7e 00 	lds	r30, 0x007E
    1120:	f0 91 7f 00 	lds	r31, 0x007F
    1124:	09 95       	icall
	}
}
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	ff 91       	pop	r31
    112c:	ef 91       	pop	r30
    112e:	bf 91       	pop	r27
    1130:	af 91       	pop	r26
    1132:	9f 91       	pop	r25
    1134:	8f 91       	pop	r24
    1136:	7f 91       	pop	r23
    1138:	6f 91       	pop	r22
    113a:	5f 91       	pop	r21
    113c:	4f 91       	pop	r20
    113e:	3f 91       	pop	r19
    1140:	2f 91       	pop	r18
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	0f 90       	pop	r0
    1148:	1f 90       	pop	r1
    114a:	18 95       	reti

0000114c <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    114c:	1f 92       	push	r1
    114e:	0f 92       	push	r0
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	0f 92       	push	r0
    1154:	11 24       	eor	r1, r1
    1156:	2f 93       	push	r18
    1158:	3f 93       	push	r19
    115a:	4f 93       	push	r20
    115c:	5f 93       	push	r21
    115e:	6f 93       	push	r22
    1160:	7f 93       	push	r23
    1162:	8f 93       	push	r24
    1164:	9f 93       	push	r25
    1166:	af 93       	push	r26
    1168:	bf 93       	push	r27
    116a:	ef 93       	push	r30
    116c:	ff 93       	push	r31
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[Timer2] != NULL_PTR)
    1176:	80 91 7e 00 	lds	r24, 0x007E
    117a:	90 91 7f 00 	lds	r25, 0x007F
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	29 f0       	breq	.+10     	; 0x118c <__vector_4+0x40>
	{
		(*g_callBackPtr[Timer2])();
    1182:	e0 91 7e 00 	lds	r30, 0x007E
    1186:	f0 91 7f 00 	lds	r31, 0x007F
    118a:	09 95       	icall
	}
}
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <GPIO_setupPinDirection+0x6>
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <GPIO_setupPinDirection+0x8>
    11ba:	0f 92       	push	r0
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	6a 83       	std	Y+2, r22	; 0x02
    11c4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	88 30       	cpi	r24, 0x08	; 8
    11ca:	08 f0       	brcs	.+2      	; 0x11ce <GPIO_setupPinDirection+0x1c>
    11cc:	d5 c0       	rjmp	.+426    	; 0x1378 <GPIO_setupPinDirection+0x1c6>
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	84 30       	cpi	r24, 0x04	; 4
    11d2:	08 f0       	brcs	.+2      	; 0x11d6 <GPIO_setupPinDirection+0x24>
    11d4:	d1 c0       	rjmp	.+418    	; 0x1378 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	3d 83       	std	Y+5, r19	; 0x05
    11de:	2c 83       	std	Y+4, r18	; 0x04
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	91 05       	cpc	r25, r1
    11e8:	09 f4       	brne	.+2      	; 0x11ec <GPIO_setupPinDirection+0x3a>
    11ea:	43 c0       	rjmp	.+134    	; 0x1272 <GPIO_setupPinDirection+0xc0>
    11ec:	2c 81       	ldd	r18, Y+4	; 0x04
    11ee:	3d 81       	ldd	r19, Y+5	; 0x05
    11f0:	22 30       	cpi	r18, 0x02	; 2
    11f2:	31 05       	cpc	r19, r1
    11f4:	2c f4       	brge	.+10     	; 0x1200 <GPIO_setupPinDirection+0x4e>
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	9d 81       	ldd	r25, Y+5	; 0x05
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	71 f0       	breq	.+28     	; 0x121a <GPIO_setupPinDirection+0x68>
    11fe:	bc c0       	rjmp	.+376    	; 0x1378 <GPIO_setupPinDirection+0x1c6>
    1200:	2c 81       	ldd	r18, Y+4	; 0x04
    1202:	3d 81       	ldd	r19, Y+5	; 0x05
    1204:	22 30       	cpi	r18, 0x02	; 2
    1206:	31 05       	cpc	r19, r1
    1208:	09 f4       	brne	.+2      	; 0x120c <GPIO_setupPinDirection+0x5a>
    120a:	5f c0       	rjmp	.+190    	; 0x12ca <GPIO_setupPinDirection+0x118>
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
    120e:	9d 81       	ldd	r25, Y+5	; 0x05
    1210:	83 30       	cpi	r24, 0x03	; 3
    1212:	91 05       	cpc	r25, r1
    1214:	09 f4       	brne	.+2      	; 0x1218 <GPIO_setupPinDirection+0x66>
    1216:	85 c0       	rjmp	.+266    	; 0x1322 <GPIO_setupPinDirection+0x170>
    1218:	af c0       	rjmp	.+350    	; 0x1378 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	a1 f4       	brne	.+40     	; 0x1248 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1220:	aa e3       	ldi	r26, 0x3A	; 58
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	ea e3       	ldi	r30, 0x3A	; 58
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <GPIO_setupPinDirection+0x8c>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <GPIO_setupPinDirection+0x88>
    1242:	84 2b       	or	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	98 c0       	rjmp	.+304    	; 0x1378 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1248:	aa e3       	ldi	r26, 0x3A	; 58
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	ea e3       	ldi	r30, 0x3A	; 58
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <GPIO_setupPinDirection+0xb4>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <GPIO_setupPinDirection+0xb0>
    126a:	80 95       	com	r24
    126c:	84 23       	and	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	83 c0       	rjmp	.+262    	; 0x1378 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	a1 f4       	brne	.+40     	; 0x12a0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1278:	a7 e3       	ldi	r26, 0x37	; 55
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e7 e3       	ldi	r30, 0x37	; 55
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <GPIO_setupPinDirection+0xe4>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <GPIO_setupPinDirection+0xe0>
    129a:	84 2b       	or	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	6c c0       	rjmp	.+216    	; 0x1378 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    12a0:	a7 e3       	ldi	r26, 0x37	; 55
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e7 e3       	ldi	r30, 0x37	; 55
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <GPIO_setupPinDirection+0x10c>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <GPIO_setupPinDirection+0x108>
    12c2:	80 95       	com	r24
    12c4:	84 23       	and	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	57 c0       	rjmp	.+174    	; 0x1378 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	a1 f4       	brne	.+40     	; 0x12f8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    12d0:	a4 e3       	ldi	r26, 0x34	; 52
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e4 e3       	ldi	r30, 0x34	; 52
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <GPIO_setupPinDirection+0x13c>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <GPIO_setupPinDirection+0x138>
    12f2:	84 2b       	or	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	40 c0       	rjmp	.+128    	; 0x1378 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    12f8:	a4 e3       	ldi	r26, 0x34	; 52
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e4 e3       	ldi	r30, 0x34	; 52
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <GPIO_setupPinDirection+0x164>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <GPIO_setupPinDirection+0x160>
    131a:	80 95       	com	r24
    131c:	84 23       	and	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	2b c0       	rjmp	.+86     	; 0x1378 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	a1 f4       	brne	.+40     	; 0x1350 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1328:	a1 e3       	ldi	r26, 0x31	; 49
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e1 e3       	ldi	r30, 0x31	; 49
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <GPIO_setupPinDirection+0x194>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <GPIO_setupPinDirection+0x190>
    134a:	84 2b       	or	r24, r20
    134c:	8c 93       	st	X, r24
    134e:	14 c0       	rjmp	.+40     	; 0x1378 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1350:	a1 e3       	ldi	r26, 0x31	; 49
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e1 e3       	ldi	r30, 0x31	; 49
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <GPIO_setupPinDirection+0x1bc>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <GPIO_setupPinDirection+0x1b8>
    1372:	80 95       	com	r24
    1374:	84 23       	and	r24, r20
    1376:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	00 d0       	rcall	.+0      	; 0x138e <GPIO_writePin+0x6>
    138e:	00 d0       	rcall	.+0      	; 0x1390 <GPIO_writePin+0x8>
    1390:	0f 92       	push	r0
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	6a 83       	std	Y+2, r22	; 0x02
    139a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	88 30       	cpi	r24, 0x08	; 8
    13a0:	08 f0       	brcs	.+2      	; 0x13a4 <GPIO_writePin+0x1c>
    13a2:	d5 c0       	rjmp	.+426    	; 0x154e <GPIO_writePin+0x1c6>
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	84 30       	cpi	r24, 0x04	; 4
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <GPIO_writePin+0x24>
    13aa:	d1 c0       	rjmp	.+418    	; 0x154e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	3d 83       	std	Y+5, r19	; 0x05
    13b4:	2c 83       	std	Y+4, r18	; 0x04
    13b6:	8c 81       	ldd	r24, Y+4	; 0x04
    13b8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	91 05       	cpc	r25, r1
    13be:	09 f4       	brne	.+2      	; 0x13c2 <GPIO_writePin+0x3a>
    13c0:	43 c0       	rjmp	.+134    	; 0x1448 <GPIO_writePin+0xc0>
    13c2:	2c 81       	ldd	r18, Y+4	; 0x04
    13c4:	3d 81       	ldd	r19, Y+5	; 0x05
    13c6:	22 30       	cpi	r18, 0x02	; 2
    13c8:	31 05       	cpc	r19, r1
    13ca:	2c f4       	brge	.+10     	; 0x13d6 <GPIO_writePin+0x4e>
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	9d 81       	ldd	r25, Y+5	; 0x05
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	71 f0       	breq	.+28     	; 0x13f0 <GPIO_writePin+0x68>
    13d4:	bc c0       	rjmp	.+376    	; 0x154e <GPIO_writePin+0x1c6>
    13d6:	2c 81       	ldd	r18, Y+4	; 0x04
    13d8:	3d 81       	ldd	r19, Y+5	; 0x05
    13da:	22 30       	cpi	r18, 0x02	; 2
    13dc:	31 05       	cpc	r19, r1
    13de:	09 f4       	brne	.+2      	; 0x13e2 <GPIO_writePin+0x5a>
    13e0:	5f c0       	rjmp	.+190    	; 0x14a0 <GPIO_writePin+0x118>
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	9d 81       	ldd	r25, Y+5	; 0x05
    13e6:	83 30       	cpi	r24, 0x03	; 3
    13e8:	91 05       	cpc	r25, r1
    13ea:	09 f4       	brne	.+2      	; 0x13ee <GPIO_writePin+0x66>
    13ec:	85 c0       	rjmp	.+266    	; 0x14f8 <GPIO_writePin+0x170>
    13ee:	af c0       	rjmp	.+350    	; 0x154e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	a1 f4       	brne	.+40     	; 0x141e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    13f6:	ab e3       	ldi	r26, 0x3B	; 59
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	eb e3       	ldi	r30, 0x3B	; 59
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <GPIO_writePin+0x8c>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <GPIO_writePin+0x88>
    1418:	84 2b       	or	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	98 c0       	rjmp	.+304    	; 0x154e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    141e:	ab e3       	ldi	r26, 0x3B	; 59
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	eb e3       	ldi	r30, 0x3B	; 59
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <GPIO_writePin+0xb4>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <GPIO_writePin+0xb0>
    1440:	80 95       	com	r24
    1442:	84 23       	and	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	83 c0       	rjmp	.+262    	; 0x154e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	a1 f4       	brne	.+40     	; 0x1476 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    144e:	a8 e3       	ldi	r26, 0x38	; 56
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e8 e3       	ldi	r30, 0x38	; 56
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <GPIO_writePin+0xe4>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <GPIO_writePin+0xe0>
    1470:	84 2b       	or	r24, r20
    1472:	8c 93       	st	X, r24
    1474:	6c c0       	rjmp	.+216    	; 0x154e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1476:	a8 e3       	ldi	r26, 0x38	; 56
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e8 e3       	ldi	r30, 0x38	; 56
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <GPIO_writePin+0x10c>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <GPIO_writePin+0x108>
    1498:	80 95       	com	r24
    149a:	84 23       	and	r24, r20
    149c:	8c 93       	st	X, r24
    149e:	57 c0       	rjmp	.+174    	; 0x154e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	a1 f4       	brne	.+40     	; 0x14ce <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    14a6:	a5 e3       	ldi	r26, 0x35	; 53
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e5 e3       	ldi	r30, 0x35	; 53
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <GPIO_writePin+0x13c>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <GPIO_writePin+0x138>
    14c8:	84 2b       	or	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	40 c0       	rjmp	.+128    	; 0x154e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    14ce:	a5 e3       	ldi	r26, 0x35	; 53
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e5 e3       	ldi	r30, 0x35	; 53
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <GPIO_writePin+0x164>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <GPIO_writePin+0x160>
    14f0:	80 95       	com	r24
    14f2:	84 23       	and	r24, r20
    14f4:	8c 93       	st	X, r24
    14f6:	2b c0       	rjmp	.+86     	; 0x154e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	a1 f4       	brne	.+40     	; 0x1526 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    14fe:	a2 e3       	ldi	r26, 0x32	; 50
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e2 e3       	ldi	r30, 0x32	; 50
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <GPIO_writePin+0x194>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <GPIO_writePin+0x190>
    1520:	84 2b       	or	r24, r20
    1522:	8c 93       	st	X, r24
    1524:	14 c0       	rjmp	.+40     	; 0x154e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1526:	a2 e3       	ldi	r26, 0x32	; 50
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e2 e3       	ldi	r30, 0x32	; 50
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	48 2f       	mov	r20, r24
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 2e       	mov	r0, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <GPIO_writePin+0x1bc>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	0a 94       	dec	r0
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <GPIO_writePin+0x1b8>
    1548:	80 95       	com	r24
    154a:	84 23       	and	r24, r20
    154c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <GPIO_readPin+0x6>
    1564:	00 d0       	rcall	.+0      	; 0x1566 <GPIO_readPin+0x8>
    1566:	0f 92       	push	r0
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	8a 83       	std	Y+2, r24	; 0x02
    156e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1570:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	88 30       	cpi	r24, 0x08	; 8
    1576:	08 f0       	brcs	.+2      	; 0x157a <GPIO_readPin+0x1c>
    1578:	84 c0       	rjmp	.+264    	; 0x1682 <GPIO_readPin+0x124>
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	84 30       	cpi	r24, 0x04	; 4
    157e:	08 f0       	brcs	.+2      	; 0x1582 <GPIO_readPin+0x24>
    1580:	80 c0       	rjmp	.+256    	; 0x1682 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	3d 83       	std	Y+5, r19	; 0x05
    158a:	2c 83       	std	Y+4, r18	; 0x04
    158c:	4c 81       	ldd	r20, Y+4	; 0x04
    158e:	5d 81       	ldd	r21, Y+5	; 0x05
    1590:	41 30       	cpi	r20, 0x01	; 1
    1592:	51 05       	cpc	r21, r1
    1594:	79 f1       	breq	.+94     	; 0x15f4 <GPIO_readPin+0x96>
    1596:	8c 81       	ldd	r24, Y+4	; 0x04
    1598:	9d 81       	ldd	r25, Y+5	; 0x05
    159a:	82 30       	cpi	r24, 0x02	; 2
    159c:	91 05       	cpc	r25, r1
    159e:	34 f4       	brge	.+12     	; 0x15ac <GPIO_readPin+0x4e>
    15a0:	2c 81       	ldd	r18, Y+4	; 0x04
    15a2:	3d 81       	ldd	r19, Y+5	; 0x05
    15a4:	21 15       	cp	r18, r1
    15a6:	31 05       	cpc	r19, r1
    15a8:	69 f0       	breq	.+26     	; 0x15c4 <GPIO_readPin+0x66>
    15aa:	6b c0       	rjmp	.+214    	; 0x1682 <GPIO_readPin+0x124>
    15ac:	4c 81       	ldd	r20, Y+4	; 0x04
    15ae:	5d 81       	ldd	r21, Y+5	; 0x05
    15b0:	42 30       	cpi	r20, 0x02	; 2
    15b2:	51 05       	cpc	r21, r1
    15b4:	b9 f1       	breq	.+110    	; 0x1624 <GPIO_readPin+0xc6>
    15b6:	8c 81       	ldd	r24, Y+4	; 0x04
    15b8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ba:	83 30       	cpi	r24, 0x03	; 3
    15bc:	91 05       	cpc	r25, r1
    15be:	09 f4       	brne	.+2      	; 0x15c2 <GPIO_readPin+0x64>
    15c0:	49 c0       	rjmp	.+146    	; 0x1654 <GPIO_readPin+0xf6>
    15c2:	5f c0       	rjmp	.+190    	; 0x1682 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    15c4:	e9 e3       	ldi	r30, 0x39	; 57
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	a9 01       	movw	r20, r18
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <GPIO_readPin+0x7e>
    15d8:	55 95       	asr	r21
    15da:	47 95       	ror	r20
    15dc:	8a 95       	dec	r24
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <GPIO_readPin+0x7a>
    15e0:	ca 01       	movw	r24, r20
    15e2:	81 70       	andi	r24, 0x01	; 1
    15e4:	90 70       	andi	r25, 0x00	; 0
    15e6:	88 23       	and	r24, r24
    15e8:	19 f0       	breq	.+6      	; 0x15f0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	49 c0       	rjmp	.+146    	; 0x1682 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15f0:	19 82       	std	Y+1, r1	; 0x01
    15f2:	47 c0       	rjmp	.+142    	; 0x1682 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    15f4:	e6 e3       	ldi	r30, 0x36	; 54
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	88 2f       	mov	r24, r24
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	a9 01       	movw	r20, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <GPIO_readPin+0xae>
    1608:	55 95       	asr	r21
    160a:	47 95       	ror	r20
    160c:	8a 95       	dec	r24
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <GPIO_readPin+0xaa>
    1610:	ca 01       	movw	r24, r20
    1612:	81 70       	andi	r24, 0x01	; 1
    1614:	90 70       	andi	r25, 0x00	; 0
    1616:	88 23       	and	r24, r24
    1618:	19 f0       	breq	.+6      	; 0x1620 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	31 c0       	rjmp	.+98     	; 0x1682 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1620:	19 82       	std	Y+1, r1	; 0x01
    1622:	2f c0       	rjmp	.+94     	; 0x1682 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1624:	e3 e3       	ldi	r30, 0x33	; 51
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	a9 01       	movw	r20, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <GPIO_readPin+0xde>
    1638:	55 95       	asr	r21
    163a:	47 95       	ror	r20
    163c:	8a 95       	dec	r24
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <GPIO_readPin+0xda>
    1640:	ca 01       	movw	r24, r20
    1642:	81 70       	andi	r24, 0x01	; 1
    1644:	90 70       	andi	r25, 0x00	; 0
    1646:	88 23       	and	r24, r24
    1648:	19 f0       	breq	.+6      	; 0x1650 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	19 c0       	rjmp	.+50     	; 0x1682 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1650:	19 82       	std	Y+1, r1	; 0x01
    1652:	17 c0       	rjmp	.+46     	; 0x1682 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1654:	e0 e3       	ldi	r30, 0x30	; 48
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	88 2f       	mov	r24, r24
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	a9 01       	movw	r20, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <GPIO_readPin+0x10e>
    1668:	55 95       	asr	r21
    166a:	47 95       	ror	r20
    166c:	8a 95       	dec	r24
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <GPIO_readPin+0x10a>
    1670:	ca 01       	movw	r24, r20
    1672:	81 70       	andi	r24, 0x01	; 1
    1674:	90 70       	andi	r25, 0x00	; 0
    1676:	88 23       	and	r24, r24
    1678:	19 f0       	breq	.+6      	; 0x1680 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1680:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1682:	89 81       	ldd	r24, Y+1	; 0x01
}
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	00 d0       	rcall	.+0      	; 0x169a <GPIO_setupPortDirection+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <GPIO_setupPortDirection+0x8>
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	84 30       	cpi	r24, 0x04	; 4
    16a8:	90 f5       	brcc	.+100    	; 0x170e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	3c 83       	std	Y+4, r19	; 0x04
    16b2:	2b 83       	std	Y+3, r18	; 0x03
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	91 05       	cpc	r25, r1
    16bc:	d1 f0       	breq	.+52     	; 0x16f2 <GPIO_setupPortDirection+0x5e>
    16be:	2b 81       	ldd	r18, Y+3	; 0x03
    16c0:	3c 81       	ldd	r19, Y+4	; 0x04
    16c2:	22 30       	cpi	r18, 0x02	; 2
    16c4:	31 05       	cpc	r19, r1
    16c6:	2c f4       	brge	.+10     	; 0x16d2 <GPIO_setupPortDirection+0x3e>
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	61 f0       	breq	.+24     	; 0x16e8 <GPIO_setupPortDirection+0x54>
    16d0:	1e c0       	rjmp	.+60     	; 0x170e <GPIO_setupPortDirection+0x7a>
    16d2:	2b 81       	ldd	r18, Y+3	; 0x03
    16d4:	3c 81       	ldd	r19, Y+4	; 0x04
    16d6:	22 30       	cpi	r18, 0x02	; 2
    16d8:	31 05       	cpc	r19, r1
    16da:	81 f0       	breq	.+32     	; 0x16fc <GPIO_setupPortDirection+0x68>
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	83 30       	cpi	r24, 0x03	; 3
    16e2:	91 05       	cpc	r25, r1
    16e4:	81 f0       	breq	.+32     	; 0x1706 <GPIO_setupPortDirection+0x72>
    16e6:	13 c0       	rjmp	.+38     	; 0x170e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    16e8:	ea e3       	ldi	r30, 0x3A	; 58
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	80 83       	st	Z, r24
    16f0:	0e c0       	rjmp	.+28     	; 0x170e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    16f2:	e7 e3       	ldi	r30, 0x37	; 55
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	80 83       	st	Z, r24
    16fa:	09 c0       	rjmp	.+18     	; 0x170e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    16fc:	e4 e3       	ldi	r30, 0x34	; 52
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	80 83       	st	Z, r24
    1704:	04 c0       	rjmp	.+8      	; 0x170e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1706:	e1 e3       	ldi	r30, 0x31	; 49
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	80 83       	st	Z, r24
			break;
		}
	}
}
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	00 d0       	rcall	.+0      	; 0x1722 <GPIO_writePort+0x6>
    1722:	00 d0       	rcall	.+0      	; 0x1724 <GPIO_writePort+0x8>
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	84 30       	cpi	r24, 0x04	; 4
    1730:	90 f5       	brcc	.+100    	; 0x1796 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	3c 83       	std	Y+4, r19	; 0x04
    173a:	2b 83       	std	Y+3, r18	; 0x03
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	9c 81       	ldd	r25, Y+4	; 0x04
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	91 05       	cpc	r25, r1
    1744:	d1 f0       	breq	.+52     	; 0x177a <GPIO_writePort+0x5e>
    1746:	2b 81       	ldd	r18, Y+3	; 0x03
    1748:	3c 81       	ldd	r19, Y+4	; 0x04
    174a:	22 30       	cpi	r18, 0x02	; 2
    174c:	31 05       	cpc	r19, r1
    174e:	2c f4       	brge	.+10     	; 0x175a <GPIO_writePort+0x3e>
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	9c 81       	ldd	r25, Y+4	; 0x04
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	61 f0       	breq	.+24     	; 0x1770 <GPIO_writePort+0x54>
    1758:	1e c0       	rjmp	.+60     	; 0x1796 <GPIO_writePort+0x7a>
    175a:	2b 81       	ldd	r18, Y+3	; 0x03
    175c:	3c 81       	ldd	r19, Y+4	; 0x04
    175e:	22 30       	cpi	r18, 0x02	; 2
    1760:	31 05       	cpc	r19, r1
    1762:	81 f0       	breq	.+32     	; 0x1784 <GPIO_writePort+0x68>
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	9c 81       	ldd	r25, Y+4	; 0x04
    1768:	83 30       	cpi	r24, 0x03	; 3
    176a:	91 05       	cpc	r25, r1
    176c:	81 f0       	breq	.+32     	; 0x178e <GPIO_writePort+0x72>
    176e:	13 c0       	rjmp	.+38     	; 0x1796 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1770:	eb e3       	ldi	r30, 0x3B	; 59
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	80 83       	st	Z, r24
    1778:	0e c0       	rjmp	.+28     	; 0x1796 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    177a:	e8 e3       	ldi	r30, 0x38	; 56
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	80 83       	st	Z, r24
    1782:	09 c0       	rjmp	.+18     	; 0x1796 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1784:	e5 e3       	ldi	r30, 0x35	; 53
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	80 83       	st	Z, r24
    178c:	04 c0       	rjmp	.+8      	; 0x1796 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    178e:	e2 e3       	ldi	r30, 0x32	; 50
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	80 83       	st	Z, r24
			break;
		}
	}
}
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <GPIO_readPort+0x6>
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <GPIO_readPort+0x8>
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    17b2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	84 30       	cpi	r24, 0x04	; 4
    17b8:	90 f5       	brcc	.+100    	; 0x181e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	3c 83       	std	Y+4, r19	; 0x04
    17c2:	2b 83       	std	Y+3, r18	; 0x03
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	91 05       	cpc	r25, r1
    17cc:	d1 f0       	breq	.+52     	; 0x1802 <GPIO_readPort+0x5e>
    17ce:	2b 81       	ldd	r18, Y+3	; 0x03
    17d0:	3c 81       	ldd	r19, Y+4	; 0x04
    17d2:	22 30       	cpi	r18, 0x02	; 2
    17d4:	31 05       	cpc	r19, r1
    17d6:	2c f4       	brge	.+10     	; 0x17e2 <GPIO_readPort+0x3e>
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	9c 81       	ldd	r25, Y+4	; 0x04
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	61 f0       	breq	.+24     	; 0x17f8 <GPIO_readPort+0x54>
    17e0:	1e c0       	rjmp	.+60     	; 0x181e <GPIO_readPort+0x7a>
    17e2:	2b 81       	ldd	r18, Y+3	; 0x03
    17e4:	3c 81       	ldd	r19, Y+4	; 0x04
    17e6:	22 30       	cpi	r18, 0x02	; 2
    17e8:	31 05       	cpc	r19, r1
    17ea:	81 f0       	breq	.+32     	; 0x180c <GPIO_readPort+0x68>
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	9c 81       	ldd	r25, Y+4	; 0x04
    17f0:	83 30       	cpi	r24, 0x03	; 3
    17f2:	91 05       	cpc	r25, r1
    17f4:	81 f0       	breq	.+32     	; 0x1816 <GPIO_readPort+0x72>
    17f6:	13 c0       	rjmp	.+38     	; 0x181e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    17f8:	e9 e3       	ldi	r30, 0x39	; 57
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	0e c0       	rjmp	.+28     	; 0x181e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1802:	e6 e3       	ldi	r30, 0x36	; 54
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	09 c0       	rjmp	.+18     	; 0x181e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    180c:	e3 e3       	ldi	r30, 0x33	; 51
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	04 c0       	rjmp	.+8      	; 0x181e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1816:	e0 e3       	ldi	r30, 0x30	; 48
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    181e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <TWI_init>:
 
#include "twi.h"
#include "../common/common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr){
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	00 d0       	rcall	.+0      	; 0x1834 <TWI_init+0x6>
    1834:	00 d0       	rcall	.+0      	; 0x1836 <TWI_init+0x8>
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	9a 83       	std	Y+2, r25	; 0x02
    183c:	89 83       	std	Y+1, r24	; 0x01



	   switch(Config_Ptr->bit_rate)
    183e:	e9 81       	ldd	r30, Y+1	; 0x01
    1840:	fa 81       	ldd	r31, Y+2	; 0x02
    1842:	81 81       	ldd	r24, Z+1	; 0x01
    1844:	92 81       	ldd	r25, Z+2	; 0x02
    1846:	9c 83       	std	Y+4, r25	; 0x04
    1848:	8b 83       	std	Y+3, r24	; 0x03
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	84 36       	cpi	r24, 0x64	; 100
    1850:	91 05       	cpc	r25, r1
    1852:	39 f0       	breq	.+14     	; 0x1862 <TWI_init+0x34>
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	21 e0       	ldi	r18, 0x01	; 1
    185a:	80 39       	cpi	r24, 0x90	; 144
    185c:	92 07       	cpc	r25, r18
    185e:	49 f0       	breq	.+18     	; 0x1872 <TWI_init+0x44>
    1860:	0f c0       	rjmp	.+30     	; 0x1880 <TWI_init+0x52>
	    {
	        case TWI_BAUD_100KHZ:
	            TWBR = 32;
    1862:	e0 e2       	ldi	r30, 0x20	; 32
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 e2       	ldi	r24, 0x20	; 32
    1868:	80 83       	st	Z, r24
	            TWSR = 0x00; // prescaler = 1
    186a:	e1 e2       	ldi	r30, 0x21	; 33
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	10 82       	st	Z, r1
    1870:	07 c0       	rjmp	.+14     	; 0x1880 <TWI_init+0x52>
	            break;

	        case TWI_BAUD_400KHZ:
	            TWBR = 2;
    1872:	e0 e2       	ldi	r30, 0x20	; 32
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	82 e0       	ldi	r24, 0x02	; 2
    1878:	80 83       	st	Z, r24
	            TWSR = 0x00;
    187a:	e1 e2       	ldi	r30, 0x21	; 33
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	10 82       	st	Z, r1
	            break;
	    }

	    // Set slave address if needed (as master use dummy address)
	    TWAR = (Config_Ptr->address << 1);
    1880:	a2 e2       	ldi	r26, 0x22	; 34
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e9 81       	ldd	r30, Y+1	; 0x01
    1886:	fa 81       	ldd	r31, Y+2	; 0x02
    1888:	80 81       	ld	r24, Z
    188a:	88 0f       	add	r24, r24
    188c:	8c 93       	st	X, r24

	    // Enable TWI
	    TWCR = (1 << TWEN);
    188e:	e6 e5       	ldi	r30, 0x56	; 86
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	84 e0       	ldi	r24, 0x04	; 4
    1894:	80 83       	st	Z, r24
	}
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <TWI_start>:




void TWI_start(void)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    18ac:	e6 e5       	ldi	r30, 0x56	; 86
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	84 ea       	ldi	r24, 0xA4	; 164
    18b2:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    18b4:	e6 e5       	ldi	r30, 0x56	; 86
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	88 23       	and	r24, r24
    18bc:	dc f7       	brge	.-10     	; 0x18b4 <TWI_start+0x10>
}
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <TWI_stop>:

void TWI_stop(void)
{
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    18cc:	e6 e5       	ldi	r30, 0x56	; 86
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	84 e9       	ldi	r24, 0x94	; 148
    18d2:	80 83       	st	Z, r24
}
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	0f 92       	push	r0
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    18e6:	e3 e2       	ldi	r30, 0x23	; 35
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    18ee:	e6 e5       	ldi	r30, 0x56	; 86
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	84 e8       	ldi	r24, 0x84	; 132
    18f4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    18f6:	e6 e5       	ldi	r30, 0x56	; 86
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	88 23       	and	r24, r24
    18fe:	dc f7       	brge	.-10     	; 0x18f6 <TWI_writeByte+0x1c>
}
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1910:	e6 e5       	ldi	r30, 0x56	; 86
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	84 ec       	ldi	r24, 0xC4	; 196
    1916:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1918:	e6 e5       	ldi	r30, 0x56	; 86
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	88 23       	and	r24, r24
    1920:	dc f7       	brge	.-10     	; 0x1918 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1922:	e3 e2       	ldi	r30, 0x23	; 35
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
}
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1936:	e6 e5       	ldi	r30, 0x56	; 86
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	84 e8       	ldi	r24, 0x84	; 132
    193c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    193e:	e6 e5       	ldi	r30, 0x56	; 86
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	88 23       	and	r24, r24
    1946:	dc f7       	brge	.-10     	; 0x193e <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1948:	e3 e2       	ldi	r30, 0x23	; 35
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
}
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	0f 92       	push	r0
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    195e:	e1 e2       	ldi	r30, 0x21	; 33
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	88 7f       	andi	r24, 0xF8	; 248
    1966:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1968:	89 81       	ldd	r24, Y+1	; 0x01
}
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr){
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <UART_init+0x6>
    1978:	00 d0       	rcall	.+0      	; 0x197a <UART_init+0x8>
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	9c 83       	std	Y+4, r25	; 0x04
    1980:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1982:	1a 82       	std	Y+2, r1	; 0x02
    1984:	19 82       	std	Y+1, r1	; 0x01
//UCSRA DAH 3LSHAN EL DOUBLE SPEED MSH HT8ER 7AGA FEEEEH//
	UCSRA = (1<<U2X);
    1986:	eb e2       	ldi	r30, 0x2B	; 43
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	82 e0       	ldi	r24, 0x02	; 2
    198c:	80 83       	st	Z, r24
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
// hna UCSRB 3lshan tf3l el recive w el transmit only msh m7tag 7aga tany mnoooo//
	UCSRB = (1<<RXEN) | (1<<TXEN);
    198e:	ea e2       	ldi	r30, 0x2A	; 42
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	88 e1       	ldi	r24, 0x18	; 24
    1994:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    1996:	e0 e4       	ldi	r30, 0x40	; 64
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 e8       	ldi	r24, 0x80	; 128
    199c:	80 83       	st	Z, r24

// Bit Data Mode



	if(Config_Ptr->bit_data == UART_5BIT_MODE){
    199e:	eb 81       	ldd	r30, Y+3	; 0x03
    19a0:	fc 81       	ldd	r31, Y+4	; 0x04
    19a2:	80 81       	ld	r24, Z
    19a4:	88 23       	and	r24, r24
    19a6:	d9 f1       	breq	.+118    	; 0x1a1e <UART_init+0xac>

	}
	else if (Config_Ptr->bit_data == UART_6BIT_MODE) {
    19a8:	eb 81       	ldd	r30, Y+3	; 0x03
    19aa:	fc 81       	ldd	r31, Y+4	; 0x04
    19ac:	80 81       	ld	r24, Z
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	41 f4       	brne	.+16     	; 0x19c2 <UART_init+0x50>
    UCSRC |= (1 << UCSZ0);
    19b2:	a0 e4       	ldi	r26, 0x40	; 64
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e0 e4       	ldi	r30, 0x40	; 64
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	82 60       	ori	r24, 0x02	; 2
    19be:	8c 93       	st	X, r24
    19c0:	2e c0       	rjmp	.+92     	; 0x1a1e <UART_init+0xac>
}
else if (Config_Ptr->bit_data == UART_7BIT_MODE) {
    19c2:	eb 81       	ldd	r30, Y+3	; 0x03
    19c4:	fc 81       	ldd	r31, Y+4	; 0x04
    19c6:	80 81       	ld	r24, Z
    19c8:	82 30       	cpi	r24, 0x02	; 2
    19ca:	41 f4       	brne	.+16     	; 0x19dc <UART_init+0x6a>
    UCSRC |= (1 << UCSZ1);
    19cc:	a0 e4       	ldi	r26, 0x40	; 64
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e0 e4       	ldi	r30, 0x40	; 64
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	84 60       	ori	r24, 0x04	; 4
    19d8:	8c 93       	st	X, r24
    19da:	21 c0       	rjmp	.+66     	; 0x1a1e <UART_init+0xac>
}
else if (Config_Ptr->bit_data == UART_8BIT_MODE) {
    19dc:	eb 81       	ldd	r30, Y+3	; 0x03
    19de:	fc 81       	ldd	r31, Y+4	; 0x04
    19e0:	80 81       	ld	r24, Z
    19e2:	83 30       	cpi	r24, 0x03	; 3
    19e4:	e1 f4       	brne	.+56     	; 0x1a1e <UART_init+0xac>
	CLEAR_BIT(UCSRB, UCSZ2);              // UCSRB
    19e6:	aa e2       	ldi	r26, 0x2A	; 42
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	ea e2       	ldi	r30, 0x2A	; 42
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	8b 7f       	andi	r24, 0xFB	; 251
    19f2:	8c 93       	st	X, r24
	SET_BIT(UCSRC, URSEL);                // UCSRC
    19f4:	a0 e4       	ldi	r26, 0x40	; 64
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e0 e4       	ldi	r30, 0x40	; 64
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	80 68       	ori	r24, 0x80	; 128
    1a00:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);                // UCSRC
    1a02:	a0 e4       	ldi	r26, 0x40	; 64
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e0 e4       	ldi	r30, 0x40	; 64
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	82 60       	ori	r24, 0x02	; 2
    1a0e:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);  }
    1a10:	a0 e4       	ldi	r26, 0x40	; 64
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e0 e4       	ldi	r30, 0x40	; 64
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	84 60       	ori	r24, 0x04	; 4
    1a1c:	8c 93       	st	X, r24

// Parity Mode
if (Config_Ptr->parity == odd) {
    1a1e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a20:	fc 81       	ldd	r31, Y+4	; 0x04
    1a22:	81 81       	ldd	r24, Z+1	; 0x01
    1a24:	81 30       	cpi	r24, 0x01	; 1
    1a26:	41 f4       	brne	.+16     	; 0x1a38 <UART_init+0xc6>
    UCSRC |= (1 << UPM1) | (1 << UPM0);
    1a28:	a0 e4       	ldi	r26, 0x40	; 64
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e0 e4       	ldi	r30, 0x40	; 64
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	80 63       	ori	r24, 0x30	; 48
    1a34:	8c 93       	st	X, r24
    1a36:	0c c0       	rjmp	.+24     	; 0x1a50 <UART_init+0xde>
}
else if (Config_Ptr->parity == even) {
    1a38:	eb 81       	ldd	r30, Y+3	; 0x03
    1a3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a3c:	81 81       	ldd	r24, Z+1	; 0x01
    1a3e:	82 30       	cpi	r24, 0x02	; 2
    1a40:	39 f4       	brne	.+14     	; 0x1a50 <UART_init+0xde>
    UCSRC |= (1 << UPM1);
    1a42:	a0 e4       	ldi	r26, 0x40	; 64
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e0 e4       	ldi	r30, 0x40	; 64
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	80 62       	ori	r24, 0x20	; 32
    1a4e:	8c 93       	st	X, r24
}
// Stop Bit

if (Config_Ptr->stop_bit == UART_TWO_STOP_BITS) {
    1a50:	eb 81       	ldd	r30, Y+3	; 0x03
    1a52:	fc 81       	ldd	r31, Y+4	; 0x04
    1a54:	82 81       	ldd	r24, Z+2	; 0x02
    1a56:	82 30       	cpi	r24, 0x02	; 2
    1a58:	39 f4       	brne	.+14     	; 0x1a68 <UART_init+0xf6>
    UCSRC |= (1 << USBS);
    1a5a:	a0 e4       	ldi	r26, 0x40	; 64
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e0 e4       	ldi	r30, 0x40	; 64
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	88 60       	ori	r24, 0x08	; 8
    1a66:	8c 93       	st	X, r24




	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    1a68:	eb 81       	ldd	r30, Y+3	; 0x03
    1a6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a6c:	83 81       	ldd	r24, Z+3	; 0x03
    1a6e:	94 81       	ldd	r25, Z+4	; 0x04
    1a70:	a5 81       	ldd	r26, Z+5	; 0x05
    1a72:	b6 81       	ldd	r27, Z+6	; 0x06
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	aa 1f       	adc	r26, r26
    1a7a:	bb 1f       	adc	r27, r27
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	aa 1f       	adc	r26, r26
    1a82:	bb 1f       	adc	r27, r27
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	aa 1f       	adc	r26, r26
    1a8a:	bb 1f       	adc	r27, r27
    1a8c:	9c 01       	movw	r18, r24
    1a8e:	ad 01       	movw	r20, r26
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	92 e1       	ldi	r25, 0x12	; 18
    1a94:	aa e7       	ldi	r26, 0x7A	; 122
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	0e 94 51 13 	call	0x26a2	; 0x26a2 <__udivmodsi4>
    1aa0:	da 01       	movw	r26, r20
    1aa2:	c9 01       	movw	r24, r18
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1aaa:	e0 e4       	ldi	r30, 0x40	; 64
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab2:	89 2f       	mov	r24, r25
    1ab4:	99 27       	eor	r25, r25
    1ab6:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1ab8:	e9 e2       	ldi	r30, 0x29	; 41
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	80 83       	st	Z, r24
}
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	0f 92       	push	r0
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1ada:	eb e2       	ldi	r30, 0x2B	; 43
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	88 2f       	mov	r24, r24
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	80 72       	andi	r24, 0x20	; 32
    1ae6:	90 70       	andi	r25, 0x00	; 0
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	b9 f3       	breq	.-18     	; 0x1ada <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1aec:	ec e2       	ldi	r30, 0x2C	; 44
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1af4:	0f 90       	pop	r0
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1b04:	eb e2       	ldi	r30, 0x2B	; 43
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	88 23       	and	r24, r24
    1b0c:	dc f7       	brge	.-10     	; 0x1b04 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    1b0e:	ec e2       	ldi	r30, 0x2C	; 44
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
}
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <UART_sendString+0x6>
    1b20:	0f 92       	push	r0
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	9b 83       	std	Y+3, r25	; 0x03
    1b28:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1b2a:	19 82       	std	Y+1, r1	; 0x01
    1b2c:	0e c0       	rjmp	.+28     	; 0x1b4a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	9b 81       	ldd	r25, Y+3	; 0x03
    1b38:	fc 01       	movw	r30, r24
    1b3a:	e2 0f       	add	r30, r18
    1b3c:	f3 1f       	adc	r31, r19
    1b3e:	80 81       	ld	r24, Z
    1b40:	0e 94 67 0d 	call	0x1ace	; 0x1ace <UART_sendByte>
		i++;
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	8f 5f       	subi	r24, 0xFF	; 255
    1b48:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	9b 81       	ldd	r25, Y+3	; 0x03
    1b54:	fc 01       	movw	r30, r24
    1b56:	e2 0f       	add	r30, r18
    1b58:	f3 1f       	adc	r31, r19
    1b5a:	80 81       	ld	r24, Z
    1b5c:	88 23       	and	r24, r24
    1b5e:	39 f7       	brne	.-50     	; 0x1b2e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1b6c:	0f 93       	push	r16
    1b6e:	1f 93       	push	r17
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <UART_receiveString+0xa>
    1b76:	0f 92       	push	r0
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	9b 83       	std	Y+3, r25	; 0x03
    1b7e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1b80:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8c:	8c 01       	movw	r16, r24
    1b8e:	02 0f       	add	r16, r18
    1b90:	13 1f       	adc	r17, r19
    1b92:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <UART_recieveByte>
    1b96:	f8 01       	movw	r30, r16
    1b98:	80 83       	st	Z, r24
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ba0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	9b 81       	ldd	r25, Y+3	; 0x03
    1bac:	8c 01       	movw	r16, r24
    1bae:	02 0f       	add	r16, r18
    1bb0:	13 1f       	adc	r17, r19
    1bb2:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <UART_recieveByte>
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	e2 0f       	add	r30, r18
    1bc8:	f3 1f       	adc	r31, r19
    1bca:	80 81       	ld	r24, Z
    1bcc:	83 32       	cpi	r24, 0x23	; 35
    1bce:	31 f7       	brne	.-52     	; 0x1b9c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bda:	fc 01       	movw	r30, r24
    1bdc:	e2 0f       	add	r30, r18
    1bde:	f3 1f       	adc	r31, r19
    1be0:	10 82       	st	Z, r1
}
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	08 95       	ret

00001bf2 <DcMotor_Init>:
#include <avr/io.h>
#include "DC_Motor.h"
#include"../mcal/pwm.h"

void DcMotor_Init(void)
{
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    // Set IN1 and IN2 as output
    DC_MOTOR_DDR |= (1 << DC_MOTOR_IN1) | (1 << DC_MOTOR_IN2);
    1bfa:	a1 e3       	ldi	r26, 0x31	; 49
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e1 e3       	ldi	r30, 0x31	; 49
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	80 6c       	ori	r24, 0xC0	; 192
    1c06:	8c 93       	st	X, r24

    // Set PWM pin (OC0) as output
    PWM_PORT |= (1 << PWM_PIN);
    1c08:	a7 e3       	ldi	r26, 0x37	; 55
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e7 e3       	ldi	r30, 0x37	; 55
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	88 60       	ori	r24, 0x08	; 8
    1c14:	8c 93       	st	X, r24

    // Set Timer0 to Fast PWM mode, non-inverting
    TCCR0 = (1 << WGM00) | (1 << WGM01)   // Fast PWM Mode
    1c16:	e3 e5       	ldi	r30, 0x53	; 83
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	8b e6       	ldi	r24, 0x6B	; 107
    1c1c:	80 83       	st	Z, r24
           | (1 << COM01)                 // Non-Inverting Mode
           | (1 << CS01) | (1 << CS00);   // Prescaler = 64

    // Stop motor initially
    DC_MOTOR_PORT &= ~((1 << DC_MOTOR_IN1) | (1 << DC_MOTOR_IN2));
    1c1e:	a2 e3       	ldi	r26, 0x32	; 50
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e2 e3       	ldi	r30, 0x32	; 50
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	8f 73       	andi	r24, 0x3F	; 63
    1c2a:	8c 93       	st	X, r24
    OCR0 = 0; // 0% duty cycle
    1c2c:	ec e5       	ldi	r30, 0x5C	; 92
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	10 82       	st	Z, r1
}
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <DcMotor_Rotate+0x6>
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <DcMotor_Rotate+0x8>
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	6a 83       	std	Y+2, r22	; 0x02

    if (speed > 100) speed = 100;
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	85 36       	cpi	r24, 0x65	; 101
    1c4c:	10 f0       	brcs	.+4      	; 0x1c52 <DcMotor_Rotate+0x1a>
    1c4e:	84 e6       	ldi	r24, 0x64	; 100
    1c50:	8a 83       	std	Y+2, r24	; 0x02

    // Convert % to 8-bit PWM value (0-255)
    OCR0 = (uint8)((speed * 255) / 100);
    1c52:	ec e5       	ldi	r30, 0x5C	; 92
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	48 2f       	mov	r20, r24
    1c5a:	50 e0       	ldi	r21, 0x00	; 0
    1c5c:	ca 01       	movw	r24, r20
    1c5e:	9c 01       	movw	r18, r24
    1c60:	22 0f       	add	r18, r18
    1c62:	33 1f       	adc	r19, r19
    1c64:	c9 01       	movw	r24, r18
    1c66:	96 95       	lsr	r25
    1c68:	98 2f       	mov	r25, r24
    1c6a:	88 27       	eor	r24, r24
    1c6c:	97 95       	ror	r25
    1c6e:	87 95       	ror	r24
    1c70:	82 1b       	sub	r24, r18
    1c72:	93 0b       	sbc	r25, r19
    1c74:	84 0f       	add	r24, r20
    1c76:	95 1f       	adc	r25, r21
    1c78:	24 e6       	ldi	r18, 0x64	; 100
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	b9 01       	movw	r22, r18
    1c7e:	0e 94 3e 13 	call	0x267c	; 0x267c <__divmodhi4>
    1c82:	cb 01       	movw	r24, r22
    1c84:	80 83       	st	Z, r24

    switch (state)
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	3c 83       	std	Y+4, r19	; 0x04
    1c8e:	2b 83       	std	Y+3, r18	; 0x03
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	9c 81       	ldd	r25, Y+4	; 0x04
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	91 05       	cpc	r25, r1
    1c98:	31 f0       	breq	.+12     	; 0x1ca6 <DcMotor_Rotate+0x6e>
    1c9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9e:	22 30       	cpi	r18, 0x02	; 2
    1ca0:	31 05       	cpc	r19, r1
    1ca2:	81 f0       	breq	.+32     	; 0x1cc4 <DcMotor_Rotate+0x8c>
    1ca4:	1e c0       	rjmp	.+60     	; 0x1ce2 <DcMotor_Rotate+0xaa>
    {
        case CW:
            DC_MOTOR_PORT |= (1 << DC_MOTOR_IN1);
    1ca6:	a2 e3       	ldi	r26, 0x32	; 50
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e2 e3       	ldi	r30, 0x32	; 50
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	80 64       	ori	r24, 0x40	; 64
    1cb2:	8c 93       	st	X, r24
            DC_MOTOR_PORT &= ~(1 << DC_MOTOR_IN2);
    1cb4:	a2 e3       	ldi	r26, 0x32	; 50
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e2 e3       	ldi	r30, 0x32	; 50
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	8f 77       	andi	r24, 0x7F	; 127
    1cc0:	8c 93       	st	X, r24
    1cc2:	16 c0       	rjmp	.+44     	; 0x1cf0 <DcMotor_Rotate+0xb8>
            break;
        case A_CW:
            DC_MOTOR_PORT |= (1 << DC_MOTOR_IN2);
    1cc4:	a2 e3       	ldi	r26, 0x32	; 50
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	e2 e3       	ldi	r30, 0x32	; 50
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	80 68       	ori	r24, 0x80	; 128
    1cd0:	8c 93       	st	X, r24
            DC_MOTOR_PORT &= ~(1 << DC_MOTOR_IN1);
    1cd2:	a2 e3       	ldi	r26, 0x32	; 50
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e2 e3       	ldi	r30, 0x32	; 50
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	8f 7b       	andi	r24, 0xBF	; 191
    1cde:	8c 93       	st	X, r24
    1ce0:	07 c0       	rjmp	.+14     	; 0x1cf0 <DcMotor_Rotate+0xb8>
            break;
        case STOP:
        default:
            DC_MOTOR_PORT &= ~((1 << DC_MOTOR_IN1) | (1 << DC_MOTOR_IN2));
    1ce2:	a2 e3       	ldi	r26, 0x32	; 50
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e2 e3       	ldi	r30, 0x32	; 50
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	8f 73       	andi	r24, 0x3F	; 63
    1cee:	8c 93       	st	X, r24
            break;
    }
}
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <PIR_init>:
 *      Author: SIGMA
 */

#include"PIR.h"

void PIR_init(void){
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
 // Set the sensor pin as input
	PIR_DDR  &= ~(1 << PIR_PIN);
    1d06:	a4 e3       	ldi	r26, 0x34	; 52
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e4 e3       	ldi	r30, 0x34	; 52
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	8b 7f       	andi	r24, 0xFB	; 251
    1d12:	8c 93       	st	X, r24
}
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <PIR_getState>:



uint8 PIR_getState(void){
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	0f 92       	push	r0
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62


return (PIR_PIN_REG & (1 << PIR_PIN )) ? LOGIC_HIGH : LOGIC_LOW;
    1d24:	e3 e3       	ldi	r30, 0x33	; 51
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	88 2f       	mov	r24, r24
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	84 70       	andi	r24, 0x04	; 4
    1d30:	90 70       	andi	r25, 0x00	; 0
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	19 f0       	breq	.+6      	; 0x1d3c <PIR_getState+0x22>
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	01 c0       	rjmp	.+2      	; 0x1d3e <PIR_getState+0x24>
    1d3c:	19 82       	std	Y+1, r1	; 0x01
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d40:	0f 90       	pop	r0
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <Buzzer_init>:
#include "buzzer.h"

void Buzzer_init(void)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    BUZZER_DDR |= (1 << BUZZER_PIN);   // Set buzzer pin as output
    1d50:	a4 e3       	ldi	r26, 0x34	; 52
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e4 e3       	ldi	r30, 0x34	; 52
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	80 68       	ori	r24, 0x80	; 128
    1d5c:	8c 93       	st	X, r24
    BUZZER_PORT &= ~(1 << BUZZER_PIN); // Turn buzzer off initially
    1d5e:	a5 e3       	ldi	r26, 0x35	; 53
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	e5 e3       	ldi	r30, 0x35	; 53
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	8f 77       	andi	r24, 0x7F	; 127
    1d6a:	8c 93       	st	X, r24
}
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <Buzzer_on>:

void Buzzer_on(void)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    BUZZER_PORT |= (1 << BUZZER_PIN); // Set pin high
    1d7a:	a5 e3       	ldi	r26, 0x35	; 53
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e5 e3       	ldi	r30, 0x35	; 53
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	80 68       	ori	r24, 0x80	; 128
    1d86:	8c 93       	st	X, r24
}
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <Buzzer_off>:

void Buzzer_off(void)
{
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    BUZZER_PORT &= ~(1 << BUZZER_PIN); // Set pin low
    1d96:	a5 e3       	ldi	r26, 0x35	; 53
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e5 e3       	ldi	r30, 0x35	; 53
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	8f 77       	andi	r24, 0x7F	; 127
    1da2:	8c 93       	st	X, r24
}
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "../mcal/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <EEPROM_writeByte+0x6>
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <EEPROM_writeByte+0x8>
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	9a 83       	std	Y+2, r25	; 0x02
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1dbc:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1dc0:	0e 94 aa 0c 	call	0x1954	; 0x1954 <TWI_getStatus>
    1dc4:	88 30       	cpi	r24, 0x08	; 8
    1dc6:	11 f0       	breq	.+4      	; 0x1dcc <EEPROM_writeByte+0x22>
        return ERROR;
    1dc8:	1c 82       	std	Y+4, r1	; 0x04
    1dca:	28 c0       	rjmp	.+80     	; 0x1e1c <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd0:	80 70       	andi	r24, 0x00	; 0
    1dd2:	97 70       	andi	r25, 0x07	; 7
    1dd4:	88 0f       	add	r24, r24
    1dd6:	89 2f       	mov	r24, r25
    1dd8:	88 1f       	adc	r24, r24
    1dda:	99 0b       	sbc	r25, r25
    1ddc:	91 95       	neg	r25
    1dde:	80 6a       	ori	r24, 0xA0	; 160
    1de0:	0e 94 6d 0c 	call	0x18da	; 0x18da <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1de4:	0e 94 aa 0c 	call	0x1954	; 0x1954 <TWI_getStatus>
    1de8:	88 31       	cpi	r24, 0x18	; 24
    1dea:	11 f0       	breq	.+4      	; 0x1df0 <EEPROM_writeByte+0x46>
        return ERROR; 
    1dec:	1c 82       	std	Y+4, r1	; 0x04
    1dee:	16 c0       	rjmp	.+44     	; 0x1e1c <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	0e 94 6d 0c 	call	0x18da	; 0x18da <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1df6:	0e 94 aa 0c 	call	0x1954	; 0x1954 <TWI_getStatus>
    1dfa:	88 32       	cpi	r24, 0x28	; 40
    1dfc:	11 f0       	breq	.+4      	; 0x1e02 <EEPROM_writeByte+0x58>
        return ERROR;
    1dfe:	1c 82       	std	Y+4, r1	; 0x04
    1e00:	0d c0       	rjmp	.+26     	; 0x1e1c <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	0e 94 6d 0c 	call	0x18da	; 0x18da <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1e08:	0e 94 aa 0c 	call	0x1954	; 0x1954 <TWI_getStatus>
    1e0c:	88 32       	cpi	r24, 0x28	; 40
    1e0e:	11 f0       	breq	.+4      	; 0x1e14 <EEPROM_writeByte+0x6a>
        return ERROR;
    1e10:	1c 82       	std	Y+4, r1	; 0x04
    1e12:	04 c0       	rjmp	.+8      	; 0x1e1c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1e14:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <TWI_stop>
	
    return SUCCESS;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	8c 83       	std	Y+4, r24	; 0x04
    1e1c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <EEPROM_readByte+0x6>
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <EEPROM_readByte+0x8>
    1e34:	0f 92       	push	r0
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	9a 83       	std	Y+2, r25	; 0x02
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    1e3e:	7c 83       	std	Y+4, r23	; 0x04
    1e40:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1e42:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1e46:	0e 94 aa 0c 	call	0x1954	; 0x1954 <TWI_getStatus>
    1e4a:	88 30       	cpi	r24, 0x08	; 8
    1e4c:	11 f0       	breq	.+4      	; 0x1e52 <EEPROM_readByte+0x26>
        return ERROR;
    1e4e:	1d 82       	std	Y+5, r1	; 0x05
    1e50:	44 c0       	rjmp	.+136    	; 0x1eda <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	9a 81       	ldd	r25, Y+2	; 0x02
    1e56:	80 70       	andi	r24, 0x00	; 0
    1e58:	97 70       	andi	r25, 0x07	; 7
    1e5a:	88 0f       	add	r24, r24
    1e5c:	89 2f       	mov	r24, r25
    1e5e:	88 1f       	adc	r24, r24
    1e60:	99 0b       	sbc	r25, r25
    1e62:	91 95       	neg	r25
    1e64:	80 6a       	ori	r24, 0xA0	; 160
    1e66:	0e 94 6d 0c 	call	0x18da	; 0x18da <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1e6a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <TWI_getStatus>
    1e6e:	88 31       	cpi	r24, 0x18	; 24
    1e70:	11 f0       	breq	.+4      	; 0x1e76 <EEPROM_readByte+0x4a>
        return ERROR;
    1e72:	1d 82       	std	Y+5, r1	; 0x05
    1e74:	32 c0       	rjmp	.+100    	; 0x1eda <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	0e 94 6d 0c 	call	0x18da	; 0x18da <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1e7c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <TWI_getStatus>
    1e80:	88 32       	cpi	r24, 0x28	; 40
    1e82:	11 f0       	breq	.+4      	; 0x1e88 <EEPROM_readByte+0x5c>
        return ERROR;
    1e84:	1d 82       	std	Y+5, r1	; 0x05
    1e86:	29 c0       	rjmp	.+82     	; 0x1eda <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1e88:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1e8c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <TWI_getStatus>
    1e90:	80 31       	cpi	r24, 0x10	; 16
    1e92:	11 f0       	breq	.+4      	; 0x1e98 <EEPROM_readByte+0x6c>
        return ERROR;
    1e94:	1d 82       	std	Y+5, r1	; 0x05
    1e96:	21 c0       	rjmp	.+66     	; 0x1eda <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9c:	80 70       	andi	r24, 0x00	; 0
    1e9e:	97 70       	andi	r25, 0x07	; 7
    1ea0:	88 0f       	add	r24, r24
    1ea2:	89 2f       	mov	r24, r25
    1ea4:	88 1f       	adc	r24, r24
    1ea6:	99 0b       	sbc	r25, r25
    1ea8:	91 95       	neg	r25
    1eaa:	81 6a       	ori	r24, 0xA1	; 161
    1eac:	0e 94 6d 0c 	call	0x18da	; 0x18da <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1eb0:	0e 94 aa 0c 	call	0x1954	; 0x1954 <TWI_getStatus>
    1eb4:	80 34       	cpi	r24, 0x40	; 64
    1eb6:	11 f0       	breq	.+4      	; 0x1ebc <EEPROM_readByte+0x90>
        return ERROR;
    1eb8:	1d 82       	std	Y+5, r1	; 0x05
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1ebc:	0e 94 97 0c 	call	0x192e	; 0x192e <TWI_readByteWithNACK>
    1ec0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ec4:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1ec6:	0e 94 aa 0c 	call	0x1954	; 0x1954 <TWI_getStatus>
    1eca:	88 35       	cpi	r24, 0x58	; 88
    1ecc:	11 f0       	breq	.+4      	; 0x1ed2 <EEPROM_readByte+0xa6>
        return ERROR;
    1ece:	1d 82       	std	Y+5, r1	; 0x05
    1ed0:	04 c0       	rjmp	.+8      	; 0x1eda <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1ed2:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <TWI_stop>

    return SUCCESS;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	8d 83       	std	Y+5, r24	; 0x05
    1eda:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <main>:
void create_pass(void);
void check_pass(void);



int main(void){
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	6f 97       	sbiw	r28, 0x1f	; 31
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
	PIR_init();
    1f00:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <PIR_init>
	Buzzer_init();
    1f04:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <Buzzer_init>
	DcMotor_Init();
    1f08:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <DcMotor_Init>
	TWI_init(&TWI_config);
    1f0c:	86 e7       	ldi	r24, 0x76	; 118
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	0e 94 17 0c 	call	0x182e	; 0x182e <TWI_init>
	UART_init(&UART_Config);
    1f14:	88 e6       	ldi	r24, 0x68	; 104
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	0e 94 b9 0c 	call	0x1972	; 0x1972 <UART_init>
	sei();
    1f1c:	78 94       	sei
	Timer_setCallBack(Timer2_OverflowCallback, Timer2);
    1f1e:	8f e0       	ldi	r24, 0x0F	; 15
    1f20:	93 e1       	ldi	r25, 0x13	; 19
    1f22:	62 e0       	ldi	r22, 0x02	; 2
    1f24:	0e 94 89 07 	call	0xf12	; 0xf12 <Timer_setCallBack>
/*=====================================================================================================
 * -----------------------------------------main loop--------------------------------------------------
* =====================================================================================================
 */
uint8 hmi_byte=0;
    1f28:	1d 8e       	std	Y+29, r1	; 0x1d
while(1){
	hmi_byte=UART_recieveByte();
    1f2a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <UART_recieveByte>
    1f2e:	8d 8f       	std	Y+29, r24	; 0x1d
switch(hmi_byte){
    1f30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	3f 8f       	std	Y+31, r19	; 0x1f
    1f38:	2e 8f       	std	Y+30, r18	; 0x1e
    1f3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f3c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f3e:	83 30       	cpi	r24, 0x03	; 3
    1f40:	91 05       	cpc	r25, r1
    1f42:	19 f1       	breq	.+70     	; 0x1f8a <main+0x9e>
    1f44:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1f46:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1f48:	24 30       	cpi	r18, 0x04	; 4
    1f4a:	31 05       	cpc	r19, r1
    1f4c:	5c f4       	brge	.+22     	; 0x1f64 <main+0x78>
    1f4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f50:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	91 05       	cpc	r25, r1
    1f56:	99 f0       	breq	.+38     	; 0x1f7e <main+0x92>
    1f58:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1f5a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1f5c:	22 30       	cpi	r18, 0x02	; 2
    1f5e:	31 05       	cpc	r19, r1
    1f60:	89 f0       	breq	.+34     	; 0x1f84 <main+0x98>
    1f62:	e3 cf       	rjmp	.-58     	; 0x1f2a <main+0x3e>
    1f64:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f66:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f68:	84 30       	cpi	r24, 0x04	; 4
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <main+0x84>
    1f6e:	40 c0       	rjmp	.+128    	; 0x1ff0 <main+0x104>
    1f70:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1f72:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1f74:	25 30       	cpi	r18, 0x05	; 5
    1f76:	31 05       	cpc	r19, r1
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <main+0x90>
    1f7a:	62 c0       	rjmp	.+196    	; 0x2040 <main+0x154>
    1f7c:	d6 cf       	rjmp	.-84     	; 0x1f2a <main+0x3e>

case 1:
create_pass();
    1f7e:	0e 94 28 11 	call	0x2250	; 0x2250 <create_pass>
    1f82:	d3 cf       	rjmp	.-90     	; 0x1f2a <main+0x3e>
break;
case 2:
	check_pass();
    1f84:	0e 94 27 12 	call	0x244e	; 0x244e <check_pass>
    1f88:	d0 cf       	rjmp	.-96     	; 0x1f2a <main+0x3e>
break;
case 3:
	 DcMotor_Rotate(CW, 100);
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	64 e6       	ldi	r22, 0x64	; 100
    1f8e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <DcMotor_Rotate>

	       Timer_init(&Timer_config);
    1f92:	8f e6       	ldi	r24, 0x6F	; 111
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <Timer_init>
	       Timer_setCallBack(Timer2_OverflowCallback, Timer2);
    1f9a:	8f e0       	ldi	r24, 0x0F	; 15
    1f9c:	93 e1       	ldi	r25, 0x13	; 19
    1f9e:	62 e0       	ldi	r22, 0x02	; 2
    1fa0:	0e 94 89 07 	call	0xf12	; 0xf12 <Timer_setCallBack>


	            g_timer2_overflow_count = 0;
    1fa4:	10 92 81 00 	sts	0x0081, r1
    1fa8:	10 92 80 00 	sts	0x0080, r1

	            while (g_timer2_overflow_count < 458){ /* 15 seconds */
    1fac:	80 91 80 00 	lds	r24, 0x0080
    1fb0:	90 91 81 00 	lds	r25, 0x0081
    1fb4:	31 e0       	ldi	r19, 0x01	; 1
    1fb6:	8a 3c       	cpi	r24, 0xCA	; 202
    1fb8:	93 07       	cpc	r25, r19
    1fba:	c0 f3       	brcs	.-16     	; 0x1fac <main+0xc0>

	            }

	            Timer_deInit(Timer2);
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	0e 94 0f 07 	call	0xe1e	; 0xe1e <Timer_deInit>

	            g_timer2_overflow_count = 0;
    1fc2:	10 92 81 00 	sts	0x0081, r1
    1fc6:	10 92 80 00 	sts	0x0080, r1

	            DcMotor_Rotate(CW, 0);
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	60 e0       	ldi	r22, 0x00	; 0
    1fce:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <DcMotor_Rotate>

	            if (PIR_getState() == LOGIC_HIGH)
    1fd2:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <PIR_getState>
    1fd6:	81 30       	cpi	r24, 0x01	; 1
    1fd8:	39 f4       	brne	.+14     	; 0x1fe8 <main+0xfc>
	            {
	            	UART_sendByte(7); /* hna lw el pir asht8l sa3tha htb3t 7 w el motor stop l7d ma yb3t 8*/
    1fda:	87 e0       	ldi	r24, 0x07	; 7
    1fdc:	0e 94 67 0d 	call	0x1ace	; 0x1ace <UART_sendByte>
	                while (PIR_getState() == LOGIC_HIGH);
    1fe0:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <PIR_getState>
    1fe4:	81 30       	cpi	r24, 0x01	; 1
    1fe6:	e1 f3       	breq	.-8      	; 0x1fe0 <main+0xf4>
	            }

	            UART_sendByte(8); /* hna hyb3yt 8 3lshan y2fl el babbb */
    1fe8:	88 e0       	ldi	r24, 0x08	; 8
    1fea:	0e 94 67 0d 	call	0x1ace	; 0x1ace <UART_sendByte>
    1fee:	9d cf       	rjmp	.-198    	; 0x1f2a <main+0x3e>
	            break;
case 4: /* Lock door */
    DcMotor_Rotate(A_CW, 100);
    1ff0:	82 e0       	ldi	r24, 0x02	; 2
    1ff2:	64 e6       	ldi	r22, 0x64	; 100
    1ff4:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <DcMotor_Rotate>

    Timer_init(&Timer_config);
    1ff8:	8f e6       	ldi	r24, 0x6F	; 111
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <Timer_init>
    Timer_setCallBack(Timer2_OverflowCallback, Timer2);
    2000:	8f e0       	ldi	r24, 0x0F	; 15
    2002:	93 e1       	ldi	r25, 0x13	; 19
    2004:	62 e0       	ldi	r22, 0x02	; 2
    2006:	0e 94 89 07 	call	0xf12	; 0xf12 <Timer_setCallBack>


    g_timer2_overflow_count = 0;
    200a:	10 92 81 00 	sts	0x0081, r1
    200e:	10 92 80 00 	sts	0x0080, r1

    while (g_timer2_overflow_count < 458); /*  15 seconds  */
    2012:	80 91 80 00 	lds	r24, 0x0080
    2016:	90 91 81 00 	lds	r25, 0x0081
    201a:	21 e0       	ldi	r18, 0x01	; 1
    201c:	8a 3c       	cpi	r24, 0xCA	; 202
    201e:	92 07       	cpc	r25, r18
    2020:	c0 f3       	brcs	.-16     	; 0x2012 <main+0x126>
    Timer_deInit(Timer2);
    2022:	82 e0       	ldi	r24, 0x02	; 2
    2024:	0e 94 0f 07 	call	0xe1e	; 0xe1e <Timer_deInit>

    g_timer2_overflow_count = 0;
    2028:	10 92 81 00 	sts	0x0081, r1
    202c:	10 92 80 00 	sts	0x0080, r1

    DcMotor_Rotate(A_CW, 0); /* lma hyb3t 8 sa3tha el pir hyb3t 4 3lshan y5osh el case diiii */
    2030:	82 e0       	ldi	r24, 0x02	; 2
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <DcMotor_Rotate>

    UART_sendByte(9); /* hna hwa el mafrood kda 5ls  */
    2038:	89 e0       	ldi	r24, 0x09	; 9
    203a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <UART_sendByte>
    203e:	75 cf       	rjmp	.-278    	; 0x1f2a <main+0x3e>

    break;

case 5: /* case el 3 marat */
    Timer_init(&Timer_config);
    2040:	8f e6       	ldi	r24, 0x6F	; 111
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <Timer_init>
    Timer_setCallBack(Timer2_OverflowCallback, Timer2);
    2048:	8f e0       	ldi	r24, 0x0F	; 15
    204a:	93 e1       	ldi	r25, 0x13	; 19
    204c:	62 e0       	ldi	r22, 0x02	; 2
    204e:	0e 94 89 07 	call	0xf12	; 0xf12 <Timer_setCallBack>


    g_timer2_overflow_count = 0;
    2052:	10 92 81 00 	sts	0x0081, r1
    2056:	10 92 80 00 	sts	0x0080, r1
    205a:	e8 c0       	rjmp	.+464    	; 0x222c <main+0x340>

    while (g_timer2_overflow_count < 1831) /* 60 seconds  */
    {
    	Buzzer_on();
    205c:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <Buzzer_on>
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	aa ef       	ldi	r26, 0xFA	; 250
    2066:	b3 e4       	ldi	r27, 0x43	; 67
    2068:	89 8f       	std	Y+25, r24	; 0x19
    206a:	9a 8f       	std	Y+26, r25	; 0x1a
    206c:	ab 8f       	std	Y+27, r26	; 0x1b
    206e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2070:	69 8d       	ldd	r22, Y+25	; 0x19
    2072:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2074:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2076:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	4a ef       	ldi	r20, 0xFA	; 250
    207e:	54 e4       	ldi	r21, 0x44	; 68
    2080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	8d 8b       	std	Y+21, r24	; 0x15
    208a:	9e 8b       	std	Y+22, r25	; 0x16
    208c:	af 8b       	std	Y+23, r26	; 0x17
    208e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2090:	6d 89       	ldd	r22, Y+21	; 0x15
    2092:	7e 89       	ldd	r23, Y+22	; 0x16
    2094:	8f 89       	ldd	r24, Y+23	; 0x17
    2096:	98 8d       	ldd	r25, Y+24	; 0x18
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e8       	ldi	r20, 0x80	; 128
    209e:	5f e3       	ldi	r21, 0x3F	; 63
    20a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20a4:	88 23       	and	r24, r24
    20a6:	2c f4       	brge	.+10     	; 0x20b2 <main+0x1c6>
		__ticks = 1;
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	9c 8b       	std	Y+20, r25	; 0x14
    20ae:	8b 8b       	std	Y+19, r24	; 0x13
    20b0:	3f c0       	rjmp	.+126    	; 0x2130 <main+0x244>
	else if (__tmp > 65535)
    20b2:	6d 89       	ldd	r22, Y+21	; 0x15
    20b4:	7e 89       	ldd	r23, Y+22	; 0x16
    20b6:	8f 89       	ldd	r24, Y+23	; 0x17
    20b8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	3f ef       	ldi	r19, 0xFF	; 255
    20be:	4f e7       	ldi	r20, 0x7F	; 127
    20c0:	57 e4       	ldi	r21, 0x47	; 71
    20c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20c6:	18 16       	cp	r1, r24
    20c8:	4c f5       	brge	.+82     	; 0x211c <main+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ca:	69 8d       	ldd	r22, Y+25	; 0x19
    20cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e2       	ldi	r20, 0x20	; 32
    20d8:	51 e4       	ldi	r21, 0x41	; 65
    20da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	bc 01       	movw	r22, r24
    20e4:	cd 01       	movw	r24, r26
    20e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	9c 8b       	std	Y+20, r25	; 0x14
    20f0:	8b 8b       	std	Y+19, r24	; 0x13
    20f2:	0f c0       	rjmp	.+30     	; 0x2112 <main+0x226>
    20f4:	88 ec       	ldi	r24, 0xC8	; 200
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9a 8b       	std	Y+18, r25	; 0x12
    20fa:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20fc:	89 89       	ldd	r24, Y+17	; 0x11
    20fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <main+0x214>
    2104:	9a 8b       	std	Y+18, r25	; 0x12
    2106:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2108:	8b 89       	ldd	r24, Y+19	; 0x13
    210a:	9c 89       	ldd	r25, Y+20	; 0x14
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	9c 8b       	std	Y+20, r25	; 0x14
    2110:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2112:	8b 89       	ldd	r24, Y+19	; 0x13
    2114:	9c 89       	ldd	r25, Y+20	; 0x14
    2116:	00 97       	sbiw	r24, 0x00	; 0
    2118:	69 f7       	brne	.-38     	; 0x20f4 <main+0x208>
    211a:	14 c0       	rjmp	.+40     	; 0x2144 <main+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211c:	6d 89       	ldd	r22, Y+21	; 0x15
    211e:	7e 89       	ldd	r23, Y+22	; 0x16
    2120:	8f 89       	ldd	r24, Y+23	; 0x17
    2122:	98 8d       	ldd	r25, Y+24	; 0x18
    2124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	9c 8b       	std	Y+20, r25	; 0x14
    212e:	8b 8b       	std	Y+19, r24	; 0x13
    2130:	8b 89       	ldd	r24, Y+19	; 0x13
    2132:	9c 89       	ldd	r25, Y+20	; 0x14
    2134:	98 8b       	std	Y+16, r25	; 0x10
    2136:	8f 87       	std	Y+15, r24	; 0x0f
    2138:	8f 85       	ldd	r24, Y+15	; 0x0f
    213a:	98 89       	ldd	r25, Y+16	; 0x10
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <main+0x250>
    2140:	98 8b       	std	Y+16, r25	; 0x10
    2142:	8f 87       	std	Y+15, r24	; 0x0f
    	_delay_ms(500);
    	Buzzer_off();
    2144:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <Buzzer_off>
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	aa ef       	ldi	r26, 0xFA	; 250
    214e:	b3 e4       	ldi	r27, 0x43	; 67
    2150:	8b 87       	std	Y+11, r24	; 0x0b
    2152:	9c 87       	std	Y+12, r25	; 0x0c
    2154:	ad 87       	std	Y+13, r26	; 0x0d
    2156:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2158:	6b 85       	ldd	r22, Y+11	; 0x0b
    215a:	7c 85       	ldd	r23, Y+12	; 0x0c
    215c:	8d 85       	ldd	r24, Y+13	; 0x0d
    215e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	4a ef       	ldi	r20, 0xFA	; 250
    2166:	54 e4       	ldi	r21, 0x44	; 68
    2168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	8f 83       	std	Y+7, r24	; 0x07
    2172:	98 87       	std	Y+8, r25	; 0x08
    2174:	a9 87       	std	Y+9, r26	; 0x09
    2176:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2178:	6f 81       	ldd	r22, Y+7	; 0x07
    217a:	78 85       	ldd	r23, Y+8	; 0x08
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e8       	ldi	r20, 0x80	; 128
    2186:	5f e3       	ldi	r21, 0x3F	; 63
    2188:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    218c:	88 23       	and	r24, r24
    218e:	2c f4       	brge	.+10     	; 0x219a <main+0x2ae>
		__ticks = 1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
    2198:	3f c0       	rjmp	.+126    	; 0x2218 <main+0x32c>
	else if (__tmp > 65535)
    219a:	6f 81       	ldd	r22, Y+7	; 0x07
    219c:	78 85       	ldd	r23, Y+8	; 0x08
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	3f ef       	ldi	r19, 0xFF	; 255
    21a6:	4f e7       	ldi	r20, 0x7F	; 127
    21a8:	57 e4       	ldi	r21, 0x47	; 71
    21aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ae:	18 16       	cp	r1, r24
    21b0:	4c f5       	brge	.+82     	; 0x2204 <main+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e2       	ldi	r20, 0x20	; 32
    21c0:	51 e4       	ldi	r21, 0x41	; 65
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	bc 01       	movw	r22, r24
    21cc:	cd 01       	movw	r24, r26
    21ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9e 83       	std	Y+6, r25	; 0x06
    21d8:	8d 83       	std	Y+5, r24	; 0x05
    21da:	0f c0       	rjmp	.+30     	; 0x21fa <main+0x30e>
    21dc:	88 ec       	ldi	r24, 0xC8	; 200
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	9c 83       	std	Y+4, r25	; 0x04
    21e2:	8b 83       	std	Y+3, r24	; 0x03
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	9c 81       	ldd	r25, Y+4	; 0x04
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <main+0x2fc>
    21ec:	9c 83       	std	Y+4, r25	; 0x04
    21ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f0:	8d 81       	ldd	r24, Y+5	; 0x05
    21f2:	9e 81       	ldd	r25, Y+6	; 0x06
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	69 f7       	brne	.-38     	; 0x21dc <main+0x2f0>
    2202:	14 c0       	rjmp	.+40     	; 0x222c <main+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2204:	6f 81       	ldd	r22, Y+7	; 0x07
    2206:	78 85       	ldd	r23, Y+8	; 0x08
    2208:	89 85       	ldd	r24, Y+9	; 0x09
    220a:	9a 85       	ldd	r25, Y+10	; 0x0a
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9e 83       	std	Y+6, r25	; 0x06
    2216:	8d 83       	std	Y+5, r24	; 0x05
    2218:	8d 81       	ldd	r24, Y+5	; 0x05
    221a:	9e 81       	ldd	r25, Y+6	; 0x06
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <main+0x338>
    2228:	9a 83       	std	Y+2, r25	; 0x02
    222a:	89 83       	std	Y+1, r24	; 0x01
    Timer_setCallBack(Timer2_OverflowCallback, Timer2);


    g_timer2_overflow_count = 0;

    while (g_timer2_overflow_count < 1831) /* 60 seconds  */
    222c:	80 91 80 00 	lds	r24, 0x0080
    2230:	90 91 81 00 	lds	r25, 0x0081
    2234:	37 e0       	ldi	r19, 0x07	; 7
    2236:	87 32       	cpi	r24, 0x27	; 39
    2238:	93 07       	cpc	r25, r19
    223a:	08 f4       	brcc	.+2      	; 0x223e <main+0x352>
    223c:	0f cf       	rjmp	.-482    	; 0x205c <main+0x170>
    	Buzzer_off();
    	_delay_ms(500);

    }

    Buzzer_off();
    223e:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <Buzzer_off>
    Timer_deInit(Timer2);
    2242:	82 e0       	ldi	r24, 0x02	; 2
    2244:	0e 94 0f 07 	call	0xe1e	; 0xe1e <Timer_deInit>
    UART_sendByte(9);
    2248:	89 e0       	ldi	r24, 0x09	; 9
    224a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <UART_sendByte>
    224e:	6d ce       	rjmp	.-806    	; 0x1f2a <main+0x3e>

00002250 <create_pass>:

/*=====================================================================================================
 * ----------------------------------------------------------------------------------------------------
 * ====================================================================================================
 */
void create_pass(void){
    2250:	0f 93       	push	r16
    2252:	1f 93       	push	r17
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	a0 97       	sbiw	r28, 0x20	; 32
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	cd bf       	out	0x3d, r28	; 61
uint8 pass1[pass_size];
uint8 pass2[pass_size];
uint8 match = 1;
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	8e 8b       	std	Y+22, r24	; 0x16

for(int i=0;i<pass_size;i++){
    226c:	1d 8a       	std	Y+21, r1	; 0x15
    226e:	1c 8a       	std	Y+20, r1	; 0x14
    2270:	10 c0       	rjmp	.+32     	; 0x2292 <create_pass+0x42>
	pass1[i]=UART_recieveByte();
    2272:	0c 89       	ldd	r16, Y+20	; 0x14
    2274:	1d 89       	ldd	r17, Y+21	; 0x15
    2276:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <UART_recieveByte>
    227a:	28 2f       	mov	r18, r24
    227c:	ce 01       	movw	r24, r28
    227e:	47 96       	adiw	r24, 0x17	; 23
    2280:	fc 01       	movw	r30, r24
    2282:	e0 0f       	add	r30, r16
    2284:	f1 1f       	adc	r31, r17
    2286:	20 83       	st	Z, r18
void create_pass(void){
uint8 pass1[pass_size];
uint8 pass2[pass_size];
uint8 match = 1;

for(int i=0;i<pass_size;i++){
    2288:	8c 89       	ldd	r24, Y+20	; 0x14
    228a:	9d 89       	ldd	r25, Y+21	; 0x15
    228c:	01 96       	adiw	r24, 0x01	; 1
    228e:	9d 8b       	std	Y+21, r25	; 0x15
    2290:	8c 8b       	std	Y+20, r24	; 0x14
    2292:	8c 89       	ldd	r24, Y+20	; 0x14
    2294:	9d 89       	ldd	r25, Y+21	; 0x15
    2296:	85 30       	cpi	r24, 0x05	; 5
    2298:	91 05       	cpc	r25, r1
    229a:	5c f3       	brlt	.-42     	; 0x2272 <create_pass+0x22>
	pass1[i]=UART_recieveByte();
}
for(int i=0;i<pass_size;i++){
    229c:	1b 8a       	std	Y+19, r1	; 0x13
    229e:	1a 8a       	std	Y+18, r1	; 0x12
    22a0:	10 c0       	rjmp	.+32     	; 0x22c2 <create_pass+0x72>
	pass2[i]=UART_recieveByte();
    22a2:	0a 89       	ldd	r16, Y+18	; 0x12
    22a4:	1b 89       	ldd	r17, Y+19	; 0x13
    22a6:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <UART_recieveByte>
    22aa:	28 2f       	mov	r18, r24
    22ac:	ce 01       	movw	r24, r28
    22ae:	4c 96       	adiw	r24, 0x1c	; 28
    22b0:	fc 01       	movw	r30, r24
    22b2:	e0 0f       	add	r30, r16
    22b4:	f1 1f       	adc	r31, r17
    22b6:	20 83       	st	Z, r18
uint8 match = 1;

for(int i=0;i<pass_size;i++){
	pass1[i]=UART_recieveByte();
}
for(int i=0;i<pass_size;i++){
    22b8:	8a 89       	ldd	r24, Y+18	; 0x12
    22ba:	9b 89       	ldd	r25, Y+19	; 0x13
    22bc:	01 96       	adiw	r24, 0x01	; 1
    22be:	9b 8b       	std	Y+19, r25	; 0x13
    22c0:	8a 8b       	std	Y+18, r24	; 0x12
    22c2:	8a 89       	ldd	r24, Y+18	; 0x12
    22c4:	9b 89       	ldd	r25, Y+19	; 0x13
    22c6:	85 30       	cpi	r24, 0x05	; 5
    22c8:	91 05       	cpc	r25, r1
    22ca:	5c f3       	brlt	.-42     	; 0x22a2 <create_pass+0x52>
	pass2[i]=UART_recieveByte();
}

for(int i=0;i<pass_size;i++)
    22cc:	19 8a       	std	Y+17, r1	; 0x11
    22ce:	18 8a       	std	Y+16, r1	; 0x10
    22d0:	18 c0       	rjmp	.+48     	; 0x2302 <create_pass+0xb2>
{

if(pass1[i]!=pass2[i]) {
    22d2:	28 89       	ldd	r18, Y+16	; 0x10
    22d4:	39 89       	ldd	r19, Y+17	; 0x11
    22d6:	ce 01       	movw	r24, r28
    22d8:	47 96       	adiw	r24, 0x17	; 23
    22da:	fc 01       	movw	r30, r24
    22dc:	e2 0f       	add	r30, r18
    22de:	f3 1f       	adc	r31, r19
    22e0:	40 81       	ld	r20, Z
    22e2:	28 89       	ldd	r18, Y+16	; 0x10
    22e4:	39 89       	ldd	r19, Y+17	; 0x11
    22e6:	ce 01       	movw	r24, r28
    22e8:	4c 96       	adiw	r24, 0x1c	; 28
    22ea:	fc 01       	movw	r30, r24
    22ec:	e2 0f       	add	r30, r18
    22ee:	f3 1f       	adc	r31, r19
    22f0:	80 81       	ld	r24, Z
    22f2:	48 17       	cp	r20, r24
    22f4:	09 f0       	breq	.+2      	; 0x22f8 <create_pass+0xa8>
match=0;
    22f6:	1e 8a       	std	Y+22, r1	; 0x16
}
for(int i=0;i<pass_size;i++){
	pass2[i]=UART_recieveByte();
}

for(int i=0;i<pass_size;i++)
    22f8:	88 89       	ldd	r24, Y+16	; 0x10
    22fa:	99 89       	ldd	r25, Y+17	; 0x11
    22fc:	01 96       	adiw	r24, 0x01	; 1
    22fe:	99 8b       	std	Y+17, r25	; 0x11
    2300:	88 8b       	std	Y+16, r24	; 0x10
    2302:	88 89       	ldd	r24, Y+16	; 0x10
    2304:	99 89       	ldd	r25, Y+17	; 0x11
    2306:	85 30       	cpi	r24, 0x05	; 5
    2308:	91 05       	cpc	r25, r1
    230a:	1c f3       	brlt	.-58     	; 0x22d2 <create_pass+0x82>
if(pass1[i]!=pass2[i]) {
match=0;
	}

}
if(match==1){
    230c:	8e 89       	ldd	r24, Y+22	; 0x16
    230e:	81 30       	cpi	r24, 0x01	; 1
    2310:	09 f0       	breq	.+2      	; 0x2314 <create_pass+0xc4>
    2312:	8f c0       	rjmp	.+286    	; 0x2432 <create_pass+0x1e2>
	 for (uint8 i = 0; i < pass_size; i++)// lw 7asl w pass 1= pass2 sa3tha 5zno f eeprom
    2314:	1f 86       	std	Y+15, r1	; 0x0f
    2316:	85 c0       	rjmp	.+266    	; 0x2422 <create_pass+0x1d2>
	        {
	            EEPROM_writeByte(0x0000 + i, pass1[i]);// searched
    2318:	8f 85       	ldd	r24, Y+15	; 0x0f
    231a:	48 2f       	mov	r20, r24
    231c:	50 e0       	ldi	r21, 0x00	; 0
    231e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	ce 01       	movw	r24, r28
    2326:	47 96       	adiw	r24, 0x17	; 23
    2328:	fc 01       	movw	r30, r24
    232a:	e2 0f       	add	r30, r18
    232c:	f3 1f       	adc	r31, r19
    232e:	20 81       	ld	r18, Z
    2330:	ca 01       	movw	r24, r20
    2332:	62 2f       	mov	r22, r18
    2334:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <EEPROM_writeByte>
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a0 e2       	ldi	r26, 0x20	; 32
    233e:	b1 e4       	ldi	r27, 0x41	; 65
    2340:	8b 87       	std	Y+11, r24	; 0x0b
    2342:	9c 87       	std	Y+12, r25	; 0x0c
    2344:	ad 87       	std	Y+13, r26	; 0x0d
    2346:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2348:	6b 85       	ldd	r22, Y+11	; 0x0b
    234a:	7c 85       	ldd	r23, Y+12	; 0x0c
    234c:	8d 85       	ldd	r24, Y+13	; 0x0d
    234e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	4a ef       	ldi	r20, 0xFA	; 250
    2356:	54 e4       	ldi	r21, 0x44	; 68
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	8f 83       	std	Y+7, r24	; 0x07
    2362:	98 87       	std	Y+8, r25	; 0x08
    2364:	a9 87       	std	Y+9, r26	; 0x09
    2366:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2368:	6f 81       	ldd	r22, Y+7	; 0x07
    236a:	78 85       	ldd	r23, Y+8	; 0x08
    236c:	89 85       	ldd	r24, Y+9	; 0x09
    236e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    237c:	88 23       	and	r24, r24
    237e:	2c f4       	brge	.+10     	; 0x238a <create_pass+0x13a>
		__ticks = 1;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	3f c0       	rjmp	.+126    	; 0x2408 <create_pass+0x1b8>
	else if (__tmp > 65535)
    238a:	6f 81       	ldd	r22, Y+7	; 0x07
    238c:	78 85       	ldd	r23, Y+8	; 0x08
    238e:	89 85       	ldd	r24, Y+9	; 0x09
    2390:	9a 85       	ldd	r25, Y+10	; 0x0a
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	3f ef       	ldi	r19, 0xFF	; 255
    2396:	4f e7       	ldi	r20, 0x7F	; 127
    2398:	57 e4       	ldi	r21, 0x47	; 71
    239a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    239e:	18 16       	cp	r1, r24
    23a0:	4c f5       	brge	.+82     	; 0x23f4 <create_pass+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e2       	ldi	r20, 0x20	; 32
    23b0:	51 e4       	ldi	r21, 0x41	; 65
    23b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9e 83       	std	Y+6, r25	; 0x06
    23c8:	8d 83       	std	Y+5, r24	; 0x05
    23ca:	0f c0       	rjmp	.+30     	; 0x23ea <create_pass+0x19a>
    23cc:	88 ec       	ldi	r24, 0xC8	; 200
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	9c 83       	std	Y+4, r25	; 0x04
    23d2:	8b 83       	std	Y+3, r24	; 0x03
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <create_pass+0x188>
    23dc:	9c 83       	std	Y+4, r25	; 0x04
    23de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e0:	8d 81       	ldd	r24, Y+5	; 0x05
    23e2:	9e 81       	ldd	r25, Y+6	; 0x06
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	9e 83       	std	Y+6, r25	; 0x06
    23e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ea:	8d 81       	ldd	r24, Y+5	; 0x05
    23ec:	9e 81       	ldd	r25, Y+6	; 0x06
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	69 f7       	brne	.-38     	; 0x23cc <create_pass+0x17c>
    23f2:	14 c0       	rjmp	.+40     	; 0x241c <create_pass+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f4:	6f 81       	ldd	r22, Y+7	; 0x07
    23f6:	78 85       	ldd	r23, Y+8	; 0x08
    23f8:	89 85       	ldd	r24, Y+9	; 0x09
    23fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	9e 83       	std	Y+6, r25	; 0x06
    2406:	8d 83       	std	Y+5, r24	; 0x05
    2408:	8d 81       	ldd	r24, Y+5	; 0x05
    240a:	9e 81       	ldd	r25, Y+6	; 0x06
    240c:	9a 83       	std	Y+2, r25	; 0x02
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	9a 81       	ldd	r25, Y+2	; 0x02
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <create_pass+0x1c4>
    2418:	9a 83       	std	Y+2, r25	; 0x02
    241a:	89 83       	std	Y+1, r24	; 0x01
match=0;
	}

}
if(match==1){
	 for (uint8 i = 0; i < pass_size; i++)// lw 7asl w pass 1= pass2 sa3tha 5zno f eeprom
    241c:	8f 85       	ldd	r24, Y+15	; 0x0f
    241e:	8f 5f       	subi	r24, 0xFF	; 255
    2420:	8f 87       	std	Y+15, r24	; 0x0f
    2422:	8f 85       	ldd	r24, Y+15	; 0x0f
    2424:	85 30       	cpi	r24, 0x05	; 5
    2426:	08 f4       	brcc	.+2      	; 0x242a <create_pass+0x1da>
    2428:	77 cf       	rjmp	.-274    	; 0x2318 <create_pass+0xc8>
	        {
	            EEPROM_writeByte(0x0000 + i, pass1[i]);// searched
	            _delay_ms(10);
	        }
	  UART_sendByte(0);
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <UART_sendByte>
    2430:	03 c0       	rjmp	.+6      	; 0x2438 <create_pass+0x1e8>
}
else
{
	  UART_sendByte(1);
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	0e 94 67 0d 	call	0x1ace	; 0x1ace <UART_sendByte>

}
}
    2438:	a0 96       	adiw	r28, 0x20	; 32
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	1f 91       	pop	r17
    244a:	0f 91       	pop	r16
    244c:	08 95       	ret

0000244e <check_pass>:
/*=====================================================================================================
 * ----------------------------------------------------------------------------------------------------
 * ====================================================================================================
 */
void check_pass(void){
    244e:	0f 93       	push	r16
    2450:	1f 93       	push	r17
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	6f 97       	sbiw	r28, 0x1f	; 31
    245c:	0f b6       	in	r0, 0x3f	; 63
    245e:	f8 94       	cli
    2460:	de bf       	out	0x3e, r29	; 62
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	cd bf       	out	0x3d, r28	; 61
uint8 pass_saved[pass_size];
uint8 new_pass[pass_size];
uint8 match=1;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	8d 8b       	std	Y+21, r24	; 0x15
for(int i=0;i<pass_size;i++){
    246a:	1c 8a       	std	Y+20, r1	; 0x14
    246c:	1b 8a       	std	Y+19, r1	; 0x13
    246e:	10 c0       	rjmp	.+32     	; 0x2490 <check_pass+0x42>
	new_pass[i]=UART_recieveByte();
    2470:	0b 89       	ldd	r16, Y+19	; 0x13
    2472:	1c 89       	ldd	r17, Y+20	; 0x14
    2474:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <UART_recieveByte>
    2478:	28 2f       	mov	r18, r24
    247a:	ce 01       	movw	r24, r28
    247c:	4b 96       	adiw	r24, 0x1b	; 27
    247e:	fc 01       	movw	r30, r24
    2480:	e0 0f       	add	r30, r16
    2482:	f1 1f       	adc	r31, r17
    2484:	20 83       	st	Z, r18
 */
void check_pass(void){
uint8 pass_saved[pass_size];
uint8 new_pass[pass_size];
uint8 match=1;
for(int i=0;i<pass_size;i++){
    2486:	8b 89       	ldd	r24, Y+19	; 0x13
    2488:	9c 89       	ldd	r25, Y+20	; 0x14
    248a:	01 96       	adiw	r24, 0x01	; 1
    248c:	9c 8b       	std	Y+20, r25	; 0x14
    248e:	8b 8b       	std	Y+19, r24	; 0x13
    2490:	8b 89       	ldd	r24, Y+19	; 0x13
    2492:	9c 89       	ldd	r25, Y+20	; 0x14
    2494:	85 30       	cpi	r24, 0x05	; 5
    2496:	91 05       	cpc	r25, r1
    2498:	5c f3       	brlt	.-42     	; 0x2470 <check_pass+0x22>
	new_pass[i]=UART_recieveByte();
}
// hna anta 3mlt call ll pass ely f el eeprom
for(int i=0;i<pass_size;i++){
    249a:	1a 8a       	std	Y+18, r1	; 0x12
    249c:	19 8a       	std	Y+17, r1	; 0x11
    249e:	84 c0       	rjmp	.+264    	; 0x25a8 <check_pass+0x15a>
	EEPROM_readByte(0x0000 + i, &pass_saved[i]);
    24a0:	49 89       	ldd	r20, Y+17	; 0x11
    24a2:	5a 89       	ldd	r21, Y+18	; 0x12
    24a4:	89 89       	ldd	r24, Y+17	; 0x11
    24a6:	9a 89       	ldd	r25, Y+18	; 0x12
    24a8:	9e 01       	movw	r18, r28
    24aa:	2a 5e       	subi	r18, 0xEA	; 234
    24ac:	3f 4f       	sbci	r19, 0xFF	; 255
    24ae:	28 0f       	add	r18, r24
    24b0:	39 1f       	adc	r19, r25
    24b2:	ca 01       	movw	r24, r20
    24b4:	b9 01       	movw	r22, r18
    24b6:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <EEPROM_readByte>
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	a0 e2       	ldi	r26, 0x20	; 32
    24c0:	b1 e4       	ldi	r27, 0x41	; 65
    24c2:	8b 87       	std	Y+11, r24	; 0x0b
    24c4:	9c 87       	std	Y+12, r25	; 0x0c
    24c6:	ad 87       	std	Y+13, r26	; 0x0d
    24c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    24cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	4a ef       	ldi	r20, 0xFA	; 250
    24d8:	54 e4       	ldi	r21, 0x44	; 68
    24da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	8f 83       	std	Y+7, r24	; 0x07
    24e4:	98 87       	std	Y+8, r25	; 0x08
    24e6:	a9 87       	std	Y+9, r26	; 0x09
    24e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ea:	6f 81       	ldd	r22, Y+7	; 0x07
    24ec:	78 85       	ldd	r23, Y+8	; 0x08
    24ee:	89 85       	ldd	r24, Y+9	; 0x09
    24f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e8       	ldi	r20, 0x80	; 128
    24f8:	5f e3       	ldi	r21, 0x3F	; 63
    24fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24fe:	88 23       	and	r24, r24
    2500:	2c f4       	brge	.+10     	; 0x250c <check_pass+0xbe>
		__ticks = 1;
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	9e 83       	std	Y+6, r25	; 0x06
    2508:	8d 83       	std	Y+5, r24	; 0x05
    250a:	3f c0       	rjmp	.+126    	; 0x258a <check_pass+0x13c>
	else if (__tmp > 65535)
    250c:	6f 81       	ldd	r22, Y+7	; 0x07
    250e:	78 85       	ldd	r23, Y+8	; 0x08
    2510:	89 85       	ldd	r24, Y+9	; 0x09
    2512:	9a 85       	ldd	r25, Y+10	; 0x0a
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	3f ef       	ldi	r19, 0xFF	; 255
    2518:	4f e7       	ldi	r20, 0x7F	; 127
    251a:	57 e4       	ldi	r21, 0x47	; 71
    251c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2520:	18 16       	cp	r1, r24
    2522:	4c f5       	brge	.+82     	; 0x2576 <check_pass+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2524:	6b 85       	ldd	r22, Y+11	; 0x0b
    2526:	7c 85       	ldd	r23, Y+12	; 0x0c
    2528:	8d 85       	ldd	r24, Y+13	; 0x0d
    252a:	9e 85       	ldd	r25, Y+14	; 0x0e
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 e2       	ldi	r20, 0x20	; 32
    2532:	51 e4       	ldi	r21, 0x41	; 65
    2534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	bc 01       	movw	r22, r24
    253e:	cd 01       	movw	r24, r26
    2540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	9e 83       	std	Y+6, r25	; 0x06
    254a:	8d 83       	std	Y+5, r24	; 0x05
    254c:	0f c0       	rjmp	.+30     	; 0x256c <check_pass+0x11e>
    254e:	88 ec       	ldi	r24, 0xC8	; 200
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9c 83       	std	Y+4, r25	; 0x04
    2554:	8b 83       	std	Y+3, r24	; 0x03
    2556:	8b 81       	ldd	r24, Y+3	; 0x03
    2558:	9c 81       	ldd	r25, Y+4	; 0x04
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	f1 f7       	brne	.-4      	; 0x255a <check_pass+0x10c>
    255e:	9c 83       	std	Y+4, r25	; 0x04
    2560:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2562:	8d 81       	ldd	r24, Y+5	; 0x05
    2564:	9e 81       	ldd	r25, Y+6	; 0x06
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	9e 83       	std	Y+6, r25	; 0x06
    256a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    256c:	8d 81       	ldd	r24, Y+5	; 0x05
    256e:	9e 81       	ldd	r25, Y+6	; 0x06
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	69 f7       	brne	.-38     	; 0x254e <check_pass+0x100>
    2574:	14 c0       	rjmp	.+40     	; 0x259e <check_pass+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2576:	6f 81       	ldd	r22, Y+7	; 0x07
    2578:	78 85       	ldd	r23, Y+8	; 0x08
    257a:	89 85       	ldd	r24, Y+9	; 0x09
    257c:	9a 85       	ldd	r25, Y+10	; 0x0a
    257e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	9e 83       	std	Y+6, r25	; 0x06
    2588:	8d 83       	std	Y+5, r24	; 0x05
    258a:	8d 81       	ldd	r24, Y+5	; 0x05
    258c:	9e 81       	ldd	r25, Y+6	; 0x06
    258e:	9a 83       	std	Y+2, r25	; 0x02
    2590:	89 83       	std	Y+1, r24	; 0x01
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	9a 81       	ldd	r25, Y+2	; 0x02
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <check_pass+0x148>
    259a:	9a 83       	std	Y+2, r25	; 0x02
    259c:	89 83       	std	Y+1, r24	; 0x01
uint8 match=1;
for(int i=0;i<pass_size;i++){
	new_pass[i]=UART_recieveByte();
}
// hna anta 3mlt call ll pass ely f el eeprom
for(int i=0;i<pass_size;i++){
    259e:	89 89       	ldd	r24, Y+17	; 0x11
    25a0:	9a 89       	ldd	r25, Y+18	; 0x12
    25a2:	01 96       	adiw	r24, 0x01	; 1
    25a4:	9a 8b       	std	Y+18, r25	; 0x12
    25a6:	89 8b       	std	Y+17, r24	; 0x11
    25a8:	89 89       	ldd	r24, Y+17	; 0x11
    25aa:	9a 89       	ldd	r25, Y+18	; 0x12
    25ac:	85 30       	cpi	r24, 0x05	; 5
    25ae:	91 05       	cpc	r25, r1
    25b0:	0c f4       	brge	.+2      	; 0x25b4 <check_pass+0x166>
    25b2:	76 cf       	rjmp	.-276    	; 0x24a0 <check_pass+0x52>
	EEPROM_readByte(0x0000 + i, &pass_saved[i]);
	 _delay_ms(10);
}
for(int i=0;i<pass_size;i++){
    25b4:	18 8a       	std	Y+16, r1	; 0x10
    25b6:	1f 86       	std	Y+15, r1	; 0x0f
    25b8:	18 c0       	rjmp	.+48     	; 0x25ea <check_pass+0x19c>
if (pass_saved[i]!=new_pass[i]){
    25ba:	2f 85       	ldd	r18, Y+15	; 0x0f
    25bc:	38 89       	ldd	r19, Y+16	; 0x10
    25be:	ce 01       	movw	r24, r28
    25c0:	46 96       	adiw	r24, 0x16	; 22
    25c2:	fc 01       	movw	r30, r24
    25c4:	e2 0f       	add	r30, r18
    25c6:	f3 1f       	adc	r31, r19
    25c8:	40 81       	ld	r20, Z
    25ca:	2f 85       	ldd	r18, Y+15	; 0x0f
    25cc:	38 89       	ldd	r19, Y+16	; 0x10
    25ce:	ce 01       	movw	r24, r28
    25d0:	4b 96       	adiw	r24, 0x1b	; 27
    25d2:	fc 01       	movw	r30, r24
    25d4:	e2 0f       	add	r30, r18
    25d6:	f3 1f       	adc	r31, r19
    25d8:	80 81       	ld	r24, Z
    25da:	48 17       	cp	r20, r24
    25dc:	09 f0       	breq	.+2      	; 0x25e0 <check_pass+0x192>
	match=0;
    25de:	1d 8a       	std	Y+21, r1	; 0x15
// hna anta 3mlt call ll pass ely f el eeprom
for(int i=0;i<pass_size;i++){
	EEPROM_readByte(0x0000 + i, &pass_saved[i]);
	 _delay_ms(10);
}
for(int i=0;i<pass_size;i++){
    25e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25e2:	98 89       	ldd	r25, Y+16	; 0x10
    25e4:	01 96       	adiw	r24, 0x01	; 1
    25e6:	98 8b       	std	Y+16, r25	; 0x10
    25e8:	8f 87       	std	Y+15, r24	; 0x0f
    25ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ec:	98 89       	ldd	r25, Y+16	; 0x10
    25ee:	85 30       	cpi	r24, 0x05	; 5
    25f0:	91 05       	cpc	r25, r1
    25f2:	1c f3       	brlt	.-58     	; 0x25ba <check_pass+0x16c>
	match=0;
}


}
if(match==1){
    25f4:	8d 89       	ldd	r24, Y+21	; 0x15
    25f6:	81 30       	cpi	r24, 0x01	; 1
    25f8:	21 f4       	brne	.+8      	; 0x2602 <check_pass+0x1b4>
	  UART_sendByte(0);
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	0e 94 67 0d 	call	0x1ace	; 0x1ace <UART_sendByte>
    2600:	03 c0       	rjmp	.+6      	; 0x2608 <check_pass+0x1ba>

}
else {
	  UART_sendByte(1);
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	0e 94 67 0d 	call	0x1ace	; 0x1ace <UART_sendByte>

}
}
    2608:	6f 96       	adiw	r28, 0x1f	; 31
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	cf 91       	pop	r28
    2616:	df 91       	pop	r29
    2618:	1f 91       	pop	r17
    261a:	0f 91       	pop	r16
    261c:	08 95       	ret

0000261e <Timer2_OverflowCallback>:
/*=====================================================================================================
 * ----------------------------------------------------------------------------------------------------
 * ====================================================================================================
 */
void Timer2_OverflowCallback(void){
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
	g_timer2_overflow_count++;
    2626:	80 91 80 00 	lds	r24, 0x0080
    262a:	90 91 81 00 	lds	r25, 0x0081
    262e:	01 96       	adiw	r24, 0x01	; 1
    2630:	90 93 81 00 	sts	0x0081, r25
    2634:	80 93 80 00 	sts	0x0080, r24
}
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <__mulsi3>:
    263e:	62 9f       	mul	r22, r18
    2640:	d0 01       	movw	r26, r0
    2642:	73 9f       	mul	r23, r19
    2644:	f0 01       	movw	r30, r0
    2646:	82 9f       	mul	r24, r18
    2648:	e0 0d       	add	r30, r0
    264a:	f1 1d       	adc	r31, r1
    264c:	64 9f       	mul	r22, r20
    264e:	e0 0d       	add	r30, r0
    2650:	f1 1d       	adc	r31, r1
    2652:	92 9f       	mul	r25, r18
    2654:	f0 0d       	add	r31, r0
    2656:	83 9f       	mul	r24, r19
    2658:	f0 0d       	add	r31, r0
    265a:	74 9f       	mul	r23, r20
    265c:	f0 0d       	add	r31, r0
    265e:	65 9f       	mul	r22, r21
    2660:	f0 0d       	add	r31, r0
    2662:	99 27       	eor	r25, r25
    2664:	72 9f       	mul	r23, r18
    2666:	b0 0d       	add	r27, r0
    2668:	e1 1d       	adc	r30, r1
    266a:	f9 1f       	adc	r31, r25
    266c:	63 9f       	mul	r22, r19
    266e:	b0 0d       	add	r27, r0
    2670:	e1 1d       	adc	r30, r1
    2672:	f9 1f       	adc	r31, r25
    2674:	bd 01       	movw	r22, r26
    2676:	cf 01       	movw	r24, r30
    2678:	11 24       	eor	r1, r1
    267a:	08 95       	ret

0000267c <__divmodhi4>:
    267c:	97 fb       	bst	r25, 7
    267e:	09 2e       	mov	r0, r25
    2680:	07 26       	eor	r0, r23
    2682:	0a d0       	rcall	.+20     	; 0x2698 <__divmodhi4_neg1>
    2684:	77 fd       	sbrc	r23, 7
    2686:	04 d0       	rcall	.+8      	; 0x2690 <__divmodhi4_neg2>
    2688:	2e d0       	rcall	.+92     	; 0x26e6 <__udivmodhi4>
    268a:	06 d0       	rcall	.+12     	; 0x2698 <__divmodhi4_neg1>
    268c:	00 20       	and	r0, r0
    268e:	1a f4       	brpl	.+6      	; 0x2696 <__divmodhi4_exit>

00002690 <__divmodhi4_neg2>:
    2690:	70 95       	com	r23
    2692:	61 95       	neg	r22
    2694:	7f 4f       	sbci	r23, 0xFF	; 255

00002696 <__divmodhi4_exit>:
    2696:	08 95       	ret

00002698 <__divmodhi4_neg1>:
    2698:	f6 f7       	brtc	.-4      	; 0x2696 <__divmodhi4_exit>
    269a:	90 95       	com	r25
    269c:	81 95       	neg	r24
    269e:	9f 4f       	sbci	r25, 0xFF	; 255
    26a0:	08 95       	ret

000026a2 <__udivmodsi4>:
    26a2:	a1 e2       	ldi	r26, 0x21	; 33
    26a4:	1a 2e       	mov	r1, r26
    26a6:	aa 1b       	sub	r26, r26
    26a8:	bb 1b       	sub	r27, r27
    26aa:	fd 01       	movw	r30, r26
    26ac:	0d c0       	rjmp	.+26     	; 0x26c8 <__udivmodsi4_ep>

000026ae <__udivmodsi4_loop>:
    26ae:	aa 1f       	adc	r26, r26
    26b0:	bb 1f       	adc	r27, r27
    26b2:	ee 1f       	adc	r30, r30
    26b4:	ff 1f       	adc	r31, r31
    26b6:	a2 17       	cp	r26, r18
    26b8:	b3 07       	cpc	r27, r19
    26ba:	e4 07       	cpc	r30, r20
    26bc:	f5 07       	cpc	r31, r21
    26be:	20 f0       	brcs	.+8      	; 0x26c8 <__udivmodsi4_ep>
    26c0:	a2 1b       	sub	r26, r18
    26c2:	b3 0b       	sbc	r27, r19
    26c4:	e4 0b       	sbc	r30, r20
    26c6:	f5 0b       	sbc	r31, r21

000026c8 <__udivmodsi4_ep>:
    26c8:	66 1f       	adc	r22, r22
    26ca:	77 1f       	adc	r23, r23
    26cc:	88 1f       	adc	r24, r24
    26ce:	99 1f       	adc	r25, r25
    26d0:	1a 94       	dec	r1
    26d2:	69 f7       	brne	.-38     	; 0x26ae <__udivmodsi4_loop>
    26d4:	60 95       	com	r22
    26d6:	70 95       	com	r23
    26d8:	80 95       	com	r24
    26da:	90 95       	com	r25
    26dc:	9b 01       	movw	r18, r22
    26de:	ac 01       	movw	r20, r24
    26e0:	bd 01       	movw	r22, r26
    26e2:	cf 01       	movw	r24, r30
    26e4:	08 95       	ret

000026e6 <__udivmodhi4>:
    26e6:	aa 1b       	sub	r26, r26
    26e8:	bb 1b       	sub	r27, r27
    26ea:	51 e1       	ldi	r21, 0x11	; 17
    26ec:	07 c0       	rjmp	.+14     	; 0x26fc <__udivmodhi4_ep>

000026ee <__udivmodhi4_loop>:
    26ee:	aa 1f       	adc	r26, r26
    26f0:	bb 1f       	adc	r27, r27
    26f2:	a6 17       	cp	r26, r22
    26f4:	b7 07       	cpc	r27, r23
    26f6:	10 f0       	brcs	.+4      	; 0x26fc <__udivmodhi4_ep>
    26f8:	a6 1b       	sub	r26, r22
    26fa:	b7 0b       	sbc	r27, r23

000026fc <__udivmodhi4_ep>:
    26fc:	88 1f       	adc	r24, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	5a 95       	dec	r21
    2702:	a9 f7       	brne	.-22     	; 0x26ee <__udivmodhi4_loop>
    2704:	80 95       	com	r24
    2706:	90 95       	com	r25
    2708:	bc 01       	movw	r22, r24
    270a:	cd 01       	movw	r24, r26
    270c:	08 95       	ret

0000270e <__prologue_saves__>:
    270e:	2f 92       	push	r2
    2710:	3f 92       	push	r3
    2712:	4f 92       	push	r4
    2714:	5f 92       	push	r5
    2716:	6f 92       	push	r6
    2718:	7f 92       	push	r7
    271a:	8f 92       	push	r8
    271c:	9f 92       	push	r9
    271e:	af 92       	push	r10
    2720:	bf 92       	push	r11
    2722:	cf 92       	push	r12
    2724:	df 92       	push	r13
    2726:	ef 92       	push	r14
    2728:	ff 92       	push	r15
    272a:	0f 93       	push	r16
    272c:	1f 93       	push	r17
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	ca 1b       	sub	r28, r26
    2738:	db 0b       	sbc	r29, r27
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	09 94       	ijmp

00002746 <__epilogue_restores__>:
    2746:	2a 88       	ldd	r2, Y+18	; 0x12
    2748:	39 88       	ldd	r3, Y+17	; 0x11
    274a:	48 88       	ldd	r4, Y+16	; 0x10
    274c:	5f 84       	ldd	r5, Y+15	; 0x0f
    274e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2750:	7d 84       	ldd	r7, Y+13	; 0x0d
    2752:	8c 84       	ldd	r8, Y+12	; 0x0c
    2754:	9b 84       	ldd	r9, Y+11	; 0x0b
    2756:	aa 84       	ldd	r10, Y+10	; 0x0a
    2758:	b9 84       	ldd	r11, Y+9	; 0x09
    275a:	c8 84       	ldd	r12, Y+8	; 0x08
    275c:	df 80       	ldd	r13, Y+7	; 0x07
    275e:	ee 80       	ldd	r14, Y+6	; 0x06
    2760:	fd 80       	ldd	r15, Y+5	; 0x05
    2762:	0c 81       	ldd	r16, Y+4	; 0x04
    2764:	1b 81       	ldd	r17, Y+3	; 0x03
    2766:	aa 81       	ldd	r26, Y+2	; 0x02
    2768:	b9 81       	ldd	r27, Y+1	; 0x01
    276a:	ce 0f       	add	r28, r30
    276c:	d1 1d       	adc	r29, r1
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	ed 01       	movw	r28, r26
    277a:	08 95       	ret

0000277c <_exit>:
    277c:	f8 94       	cli

0000277e <__stop_program>:
    277e:	ff cf       	rjmp	.-2      	; 0x277e <__stop_program>
