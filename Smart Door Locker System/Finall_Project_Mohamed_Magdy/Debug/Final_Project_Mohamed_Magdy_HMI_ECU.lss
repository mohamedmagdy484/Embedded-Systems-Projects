
Final_Project_Mohamed_Magdy_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003586  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  00003586  0000361a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008001ca  008001ca  00003784  2**0
                  ALLOC
  3 .stab         00003420  00000000  00000000  00003784  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a7f  00000000  00000000  00006ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008623  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008763  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000088d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a51c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b407  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c1b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c314  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c5a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cd6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__vector_4>
      14:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__vector_9>
      28:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__vector_10>
      2c:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3d       	cpi	r26, 0xD3	; 211
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c2 13 	call	0x2784	; 0x2784 <main>
      8a:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 45 1a 	jmp	0x348a	; 0x348a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 eb       	ldi	r26, 0xB3	; 179
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 45 1a 	jmp	0x348a	; 0x348a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 eb       	ldi	r24, 0xB3	; 179
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer_init>:
▪ Description: Function to initialize the Timer driver
▪ Inputs: pointer to the configuration structure with type Timer_ConfigType.
▪ Return: None
*/
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Timer_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <Timer_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
    switch(Config_Ptr->timer_ID)
     b56:	e9 81       	ldd	r30, Y+1	; 0x01
     b58:	fa 81       	ldd	r31, Y+2	; 0x02
     b5a:	84 81       	ldd	r24, Z+4	; 0x04
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3c 83       	std	Y+4, r19	; 0x04
     b62:	2b 83       	std	Y+3, r18	; 0x03
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <Timer_init+0x2a>
     b6e:	69 c0       	rjmp	.+210    	; 0xc42 <Timer_init+0xfc>
     b70:	2b 81       	ldd	r18, Y+3	; 0x03
     b72:	3c 81       	ldd	r19, Y+4	; 0x04
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	09 f4       	brne	.+2      	; 0xb7c <Timer_init+0x36>
     b7a:	b7 c0       	rjmp	.+366    	; 0xcea <Timer_init+0x1a4>
     b7c:	8b 81       	ldd	r24, Y+3	; 0x03
     b7e:	9c 81       	ldd	r25, Y+4	; 0x04
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	09 f0       	breq	.+2      	; 0xb86 <Timer_init+0x40>
     b84:	0f c1       	rjmp	.+542    	; 0xda4 <Timer_init+0x25e>
    {
    case Timer0:
        TCNT0 = (uint8) Config_Ptr->timer_InitialValue;
     b86:	a2 e5       	ldi	r26, 0x52	; 82
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e9 81       	ldd	r30, Y+1	; 0x01
     b8c:	fa 81       	ldd	r31, Y+2	; 0x02
     b8e:	80 81       	ld	r24, Z
     b90:	91 81       	ldd	r25, Z+1	; 0x01
     b92:	8c 93       	st	X, r24

        if(Config_Ptr->timer_mode == COMPARE_MODE)
     b94:	e9 81       	ldd	r30, Y+1	; 0x01
     b96:	fa 81       	ldd	r31, Y+2	; 0x02
     b98:	86 81       	ldd	r24, Z+6	; 0x06
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	21 f5       	brne	.+72     	; 0xbe6 <Timer_init+0xa0>
        {
            OCR0 = (uint8) Config_Ptr->timer_compare_MatchValue;
     b9e:	ac e5       	ldi	r26, 0x5C	; 92
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e9 81       	ldd	r30, Y+1	; 0x01
     ba4:	fa 81       	ldd	r31, Y+2	; 0x02
     ba6:	82 81       	ldd	r24, Z+2	; 0x02
     ba8:	93 81       	ldd	r25, Z+3	; 0x03
     baa:	8c 93       	st	X, r24
            SET_BIT(TIMSK, OCIE0);
     bac:	a9 e5       	ldi	r26, 0x59	; 89
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e9 e5       	ldi	r30, 0x59	; 89
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	82 60       	ori	r24, 0x02	; 2
     bb8:	8c 93       	st	X, r24
            SET_BIT(TCCR0, FOC0);
     bba:	a3 e5       	ldi	r26, 0x53	; 83
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e3 e5       	ldi	r30, 0x53	; 83
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	80 68       	ori	r24, 0x80	; 128
     bc6:	8c 93       	st	X, r24
            SET_BIT(TCCR0, WGM01);
     bc8:	a3 e5       	ldi	r26, 0x53	; 83
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e3 e5       	ldi	r30, 0x53	; 83
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	88 60       	ori	r24, 0x08	; 8
     bd4:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR0, WGM00);
     bd6:	a3 e5       	ldi	r26, 0x53	; 83
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e3 e5       	ldi	r30, 0x53	; 83
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	8f 7b       	andi	r24, 0xBF	; 191
     be2:	8c 93       	st	X, r24
     be4:	21 c0       	rjmp	.+66     	; 0xc28 <Timer_init+0xe2>
        }
        else if(Config_Ptr->timer_mode == NORMAL_MODE)
     be6:	e9 81       	ldd	r30, Y+1	; 0x01
     be8:	fa 81       	ldd	r31, Y+2	; 0x02
     bea:	86 81       	ldd	r24, Z+6	; 0x06
     bec:	88 23       	and	r24, r24
     bee:	e1 f4       	brne	.+56     	; 0xc28 <Timer_init+0xe2>
        {
            SET_BIT(TIMSK, TOIE0);
     bf0:	a9 e5       	ldi	r26, 0x59	; 89
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e9 e5       	ldi	r30, 0x59	; 89
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	81 60       	ori	r24, 0x01	; 1
     bfc:	8c 93       	st	X, r24
            SET_BIT(TCCR0, FOC0);
     bfe:	a3 e5       	ldi	r26, 0x53	; 83
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e3 e5       	ldi	r30, 0x53	; 83
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	80 68       	ori	r24, 0x80	; 128
     c0a:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR0, WGM00);
     c0c:	a3 e5       	ldi	r26, 0x53	; 83
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e3 e5       	ldi	r30, 0x53	; 83
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	8f 7b       	andi	r24, 0xBF	; 191
     c18:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR0, WGM01);
     c1a:	a3 e5       	ldi	r26, 0x53	; 83
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e3 e5       	ldi	r30, 0x53	; 83
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	87 7f       	andi	r24, 0xF7	; 247
     c26:	8c 93       	st	X, r24
        }

        TCCR0 |= (Config_Ptr->timer_clock & 0x07); // Set prescaler
     c28:	a3 e5       	ldi	r26, 0x53	; 83
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e3 e5       	ldi	r30, 0x53	; 83
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	98 2f       	mov	r25, r24
     c34:	e9 81       	ldd	r30, Y+1	; 0x01
     c36:	fa 81       	ldd	r31, Y+2	; 0x02
     c38:	85 81       	ldd	r24, Z+5	; 0x05
     c3a:	87 70       	andi	r24, 0x07	; 7
     c3c:	89 2b       	or	r24, r25
     c3e:	8c 93       	st	X, r24
     c40:	b1 c0       	rjmp	.+354    	; 0xda4 <Timer_init+0x25e>
        break;

    case Timer1:
        TCNT1 = Config_Ptr->timer_InitialValue;
     c42:	ac e4       	ldi	r26, 0x4C	; 76
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e9 81       	ldd	r30, Y+1	; 0x01
     c48:	fa 81       	ldd	r31, Y+2	; 0x02
     c4a:	80 81       	ld	r24, Z
     c4c:	91 81       	ldd	r25, Z+1	; 0x01
     c4e:	11 96       	adiw	r26, 0x01	; 1
     c50:	9c 93       	st	X, r25
     c52:	8e 93       	st	-X, r24

        if(Config_Ptr->timer_mode == COMPARE_MODE)
     c54:	e9 81       	ldd	r30, Y+1	; 0x01
     c56:	fa 81       	ldd	r31, Y+2	; 0x02
     c58:	86 81       	ldd	r24, Z+6	; 0x06
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	f9 f4       	brne	.+62     	; 0xc9c <Timer_init+0x156>
        {
            OCR1A = Config_Ptr->timer_compare_MatchValue;
     c5e:	aa e4       	ldi	r26, 0x4A	; 74
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e9 81       	ldd	r30, Y+1	; 0x01
     c64:	fa 81       	ldd	r31, Y+2	; 0x02
     c66:	82 81       	ldd	r24, Z+2	; 0x02
     c68:	93 81       	ldd	r25, Z+3	; 0x03
     c6a:	11 96       	adiw	r26, 0x01	; 1
     c6c:	9c 93       	st	X, r25
     c6e:	8e 93       	st	-X, r24
            SET_BIT(TIMSK, OCIE1A);
     c70:	a9 e5       	ldi	r26, 0x59	; 89
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e9 e5       	ldi	r30, 0x59	; 89
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	80 61       	ori	r24, 0x10	; 16
     c7c:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, FOC1A);
     c7e:	af e4       	ldi	r26, 0x4F	; 79
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	ef e4       	ldi	r30, 0x4F	; 79
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	88 60       	ori	r24, 0x08	; 8
     c8a:	8c 93       	st	X, r24
            TCCR1B |= (1 << WGM12);   // CTC Mode
     c8c:	ae e4       	ldi	r26, 0x4E	; 78
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	ee e4       	ldi	r30, 0x4E	; 78
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	88 60       	ori	r24, 0x08	; 8
     c98:	8c 93       	st	X, r24
     c9a:	1a c0       	rjmp	.+52     	; 0xcd0 <Timer_init+0x18a>
        }
        else if(Config_Ptr->timer_mode == NORMAL_MODE)
     c9c:	e9 81       	ldd	r30, Y+1	; 0x01
     c9e:	fa 81       	ldd	r31, Y+2	; 0x02
     ca0:	86 81       	ldd	r24, Z+6	; 0x06
     ca2:	88 23       	and	r24, r24
     ca4:	a9 f4       	brne	.+42     	; 0xcd0 <Timer_init+0x18a>
        {
            SET_BIT(TIMSK, TOIE1);
     ca6:	a9 e5       	ldi	r26, 0x59	; 89
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e9 e5       	ldi	r30, 0x59	; 89
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	84 60       	ori	r24, 0x04	; 4
     cb2:	8c 93       	st	X, r24
            SET_BIT(TCCR1A, FOC1A);
     cb4:	af e4       	ldi	r26, 0x4F	; 79
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	ef e4       	ldi	r30, 0x4F	; 79
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	88 60       	ori	r24, 0x08	; 8
     cc0:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR1B, WGM12); // Normal mode
     cc2:	ae e4       	ldi	r26, 0x4E	; 78
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ee e4       	ldi	r30, 0x4E	; 78
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	87 7f       	andi	r24, 0xF7	; 247
     cce:	8c 93       	st	X, r24
        }

        TCCR1B |= (Config_Ptr->timer_clock & 0x07);
     cd0:	ae e4       	ldi	r26, 0x4E	; 78
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ee e4       	ldi	r30, 0x4E	; 78
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	98 2f       	mov	r25, r24
     cdc:	e9 81       	ldd	r30, Y+1	; 0x01
     cde:	fa 81       	ldd	r31, Y+2	; 0x02
     ce0:	85 81       	ldd	r24, Z+5	; 0x05
     ce2:	87 70       	andi	r24, 0x07	; 7
     ce4:	89 2b       	or	r24, r25
     ce6:	8c 93       	st	X, r24
     ce8:	5d c0       	rjmp	.+186    	; 0xda4 <Timer_init+0x25e>
        break;

    case Timer2:
        TCNT2 = (uint8) Config_Ptr->timer_InitialValue;
     cea:	a4 e4       	ldi	r26, 0x44	; 68
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e9 81       	ldd	r30, Y+1	; 0x01
     cf0:	fa 81       	ldd	r31, Y+2	; 0x02
     cf2:	80 81       	ld	r24, Z
     cf4:	91 81       	ldd	r25, Z+1	; 0x01
     cf6:	8c 93       	st	X, r24

        if(Config_Ptr->timer_mode == COMPARE_MODE)
     cf8:	e9 81       	ldd	r30, Y+1	; 0x01
     cfa:	fa 81       	ldd	r31, Y+2	; 0x02
     cfc:	86 81       	ldd	r24, Z+6	; 0x06
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	21 f5       	brne	.+72     	; 0xd4a <Timer_init+0x204>
        {
            OCR2 = (uint8) Config_Ptr->timer_compare_MatchValue;
     d02:	a3 e4       	ldi	r26, 0x43	; 67
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e9 81       	ldd	r30, Y+1	; 0x01
     d08:	fa 81       	ldd	r31, Y+2	; 0x02
     d0a:	82 81       	ldd	r24, Z+2	; 0x02
     d0c:	93 81       	ldd	r25, Z+3	; 0x03
     d0e:	8c 93       	st	X, r24
            SET_BIT(TIMSK, OCIE2);
     d10:	a9 e5       	ldi	r26, 0x59	; 89
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e9 e5       	ldi	r30, 0x59	; 89
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	80 68       	ori	r24, 0x80	; 128
     d1c:	8c 93       	st	X, r24
            SET_BIT(TCCR2, FOC2);
     d1e:	a5 e4       	ldi	r26, 0x45	; 69
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e5 e4       	ldi	r30, 0x45	; 69
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	80 68       	ori	r24, 0x80	; 128
     d2a:	8c 93       	st	X, r24
            SET_BIT(TCCR2, WGM21);    // CTC mode
     d2c:	a5 e4       	ldi	r26, 0x45	; 69
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e5 e4       	ldi	r30, 0x45	; 69
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	88 60       	ori	r24, 0x08	; 8
     d38:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR2, WGM20);
     d3a:	a5 e4       	ldi	r26, 0x45	; 69
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e5 e4       	ldi	r30, 0x45	; 69
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	8f 7b       	andi	r24, 0xBF	; 191
     d46:	8c 93       	st	X, r24
     d48:	21 c0       	rjmp	.+66     	; 0xd8c <Timer_init+0x246>
        }
        else if(Config_Ptr->timer_mode == NORMAL_MODE)
     d4a:	e9 81       	ldd	r30, Y+1	; 0x01
     d4c:	fa 81       	ldd	r31, Y+2	; 0x02
     d4e:	86 81       	ldd	r24, Z+6	; 0x06
     d50:	88 23       	and	r24, r24
     d52:	e1 f4       	brne	.+56     	; 0xd8c <Timer_init+0x246>
        {
            SET_BIT(TIMSK, TOIE2);
     d54:	a9 e5       	ldi	r26, 0x59	; 89
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e9 e5       	ldi	r30, 0x59	; 89
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	80 64       	ori	r24, 0x40	; 64
     d60:	8c 93       	st	X, r24
            SET_BIT(TCCR2, FOC2);
     d62:	a5 e4       	ldi	r26, 0x45	; 69
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e5 e4       	ldi	r30, 0x45	; 69
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	80 68       	ori	r24, 0x80	; 128
     d6e:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR2, WGM20);  // Normal mode
     d70:	a5 e4       	ldi	r26, 0x45	; 69
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e5 e4       	ldi	r30, 0x45	; 69
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	8f 7b       	andi	r24, 0xBF	; 191
     d7c:	8c 93       	st	X, r24
            CLEAR_BIT(TCCR2, WGM21);
     d7e:	a5 e4       	ldi	r26, 0x45	; 69
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e5 e4       	ldi	r30, 0x45	; 69
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	87 7f       	andi	r24, 0xF7	; 247
     d8a:	8c 93       	st	X, r24
        }

        TCCR2 |= (Config_Ptr->timer_clock & 0x07);
     d8c:	a5 e4       	ldi	r26, 0x45	; 69
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e5 e4       	ldi	r30, 0x45	; 69
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	98 2f       	mov	r25, r24
     d98:	e9 81       	ldd	r30, Y+1	; 0x01
     d9a:	fa 81       	ldd	r31, Y+2	; 0x02
     d9c:	85 81       	ldd	r24, Z+5	; 0x05
     d9e:	87 70       	andi	r24, 0x07	; 7
     da0:	89 2b       	or	r24, r25
     da2:	8c 93       	st	X, r24
        break;


    }
}
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	08 95       	ret

00000db2 <Timer_deInit>:
▪ Description: Function to disable the Timer via Timer_ID.
▪ Inputs: Timer_ID
▪ Return: None
*/
void Timer_deInit(Timer_ID_Type timer_type)
{
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <Timer_deInit+0x6>
     db8:	0f 92       	push	r0
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	89 83       	std	Y+1, r24	; 0x01
    switch(timer_type)
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	3b 83       	std	Y+3, r19	; 0x03
     dc8:	2a 83       	std	Y+2, r18	; 0x02
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	9b 81       	ldd	r25, Y+3	; 0x03
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	91 05       	cpc	r25, r1
     dd2:	11 f1       	breq	.+68     	; 0xe18 <Timer_deInit+0x66>
     dd4:	2a 81       	ldd	r18, Y+2	; 0x02
     dd6:	3b 81       	ldd	r19, Y+3	; 0x03
     dd8:	22 30       	cpi	r18, 0x02	; 2
     dda:	31 05       	cpc	r19, r1
     ddc:	d1 f1       	breq	.+116    	; 0xe52 <Timer_deInit+0xa0>
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	9b 81       	ldd	r25, Y+3	; 0x03
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	09 f0       	breq	.+2      	; 0xde8 <Timer_deInit+0x36>
     de6:	4c c0       	rjmp	.+152    	; 0xe80 <Timer_deInit+0xce>
    {
    case Timer0:
        TCCR0 = 0;
     de8:	e3 e5       	ldi	r30, 0x53	; 83
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	10 82       	st	Z, r1
        TCNT0 = 0;
     dee:	e2 e5       	ldi	r30, 0x52	; 82
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	10 82       	st	Z, r1
        OCR0  = 0;
     df4:	ec e5       	ldi	r30, 0x5C	; 92
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	10 82       	st	Z, r1
        CLEAR_BIT(TIMSK, TOIE0);
     dfa:	a9 e5       	ldi	r26, 0x59	; 89
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e9 e5       	ldi	r30, 0x59	; 89
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8e 7f       	andi	r24, 0xFE	; 254
     e06:	8c 93       	st	X, r24
        CLEAR_BIT(TIMSK, OCIE0);
     e08:	a9 e5       	ldi	r26, 0x59	; 89
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e9 e5       	ldi	r30, 0x59	; 89
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	8d 7f       	andi	r24, 0xFD	; 253
     e14:	8c 93       	st	X, r24
     e16:	34 c0       	rjmp	.+104    	; 0xe80 <Timer_deInit+0xce>
        break;

    case Timer1:
        TCCR1A = 0;
     e18:	ef e4       	ldi	r30, 0x4F	; 79
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	10 82       	st	Z, r1
        TCCR1B = 0;
     e1e:	ee e4       	ldi	r30, 0x4E	; 78
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	10 82       	st	Z, r1
        TCNT1  = 0;
     e24:	ec e4       	ldi	r30, 0x4C	; 76
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	11 82       	std	Z+1, r1	; 0x01
     e2a:	10 82       	st	Z, r1
        OCR1A  = 0;
     e2c:	ea e4       	ldi	r30, 0x4A	; 74
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	11 82       	std	Z+1, r1	; 0x01
     e32:	10 82       	st	Z, r1
        CLEAR_BIT(TIMSK, TOIE1);
     e34:	a9 e5       	ldi	r26, 0x59	; 89
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e9 e5       	ldi	r30, 0x59	; 89
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	8b 7f       	andi	r24, 0xFB	; 251
     e40:	8c 93       	st	X, r24
        CLEAR_BIT(TIMSK, OCIE1A);
     e42:	a9 e5       	ldi	r26, 0x59	; 89
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e9 e5       	ldi	r30, 0x59	; 89
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 7e       	andi	r24, 0xEF	; 239
     e4e:	8c 93       	st	X, r24
     e50:	17 c0       	rjmp	.+46     	; 0xe80 <Timer_deInit+0xce>
        break;

    case Timer2:
        TCCR2 = 0;
     e52:	e5 e4       	ldi	r30, 0x45	; 69
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	10 82       	st	Z, r1
        TCNT2 = 0;
     e58:	e4 e4       	ldi	r30, 0x44	; 68
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	10 82       	st	Z, r1
        OCR2  = 0;
     e5e:	e3 e4       	ldi	r30, 0x43	; 67
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	10 82       	st	Z, r1
        CLEAR_BIT(TIMSK, TOIE2);
     e64:	a9 e5       	ldi	r26, 0x59	; 89
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e9 e5       	ldi	r30, 0x59	; 89
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	8f 7b       	andi	r24, 0xBF	; 191
     e70:	8c 93       	st	X, r24
        CLEAR_BIT(TIMSK, OCIE2);
     e72:	a9 e5       	ldi	r26, 0x59	; 89
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e9 e5       	ldi	r30, 0x59	; 89
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	8f 77       	andi	r24, 0x7F	; 127
     e7e:	8c 93       	st	X, r24


    }

    // Reset the callback pointer
    if(timer_type >= Timer0 && timer_type <= Timer2)
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	83 30       	cpi	r24, 0x03	; 3
     e84:	50 f4       	brcc	.+20     	; 0xe9a <Timer_deInit+0xe8>
    		{
    			g_callBackPtr[timer_type] = NULL_PTR;
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	fc 01       	movw	r30, r24
     e92:	e6 53       	subi	r30, 0x36	; 54
     e94:	fe 4f       	sbci	r31, 0xFE	; 254
     e96:	11 82       	std	Z+1, r1	; 0x01
     e98:	10 82       	st	Z, r1
    		}

}
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <Timer_setCallBack>:
Timer.
▪ Inputs: pointer to Call Back function and Timer Id you want to set The
Callback to it.
▪ Return: None
*/
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID ){
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	00 d0       	rcall	.+0      	; 0xeac <Timer_setCallBack+0x6>
     eac:	0f 92       	push	r0
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	6b 83       	std	Y+3, r22	; 0x03
	if(a_timer_ID >= Timer0 && a_timer_ID <= Timer2)
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	83 30       	cpi	r24, 0x03	; 3
     ebc:	60 f4       	brcc	.+24     	; 0xed6 <Timer_setCallBack+0x30>
		{
			g_callBackPtr[a_timer_ID] = a_ptr;
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	88 2f       	mov	r24, r24
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	29 81       	ldd	r18, Y+1	; 0x01
     ec6:	3a 81       	ldd	r19, Y+2	; 0x02
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	fc 01       	movw	r30, r24
     ece:	e6 53       	subi	r30, 0x36	; 54
     ed0:	fe 4f       	sbci	r31, 0xFE	; 254
     ed2:	31 83       	std	Z+1, r19	; 0x01
     ed4:	20 83       	st	Z, r18
		}
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <__vector_11>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[Timer0] != NULL_PTR)
     f0c:	80 91 ca 01 	lds	r24, 0x01CA
     f10:	90 91 cb 01 	lds	r25, 0x01CB
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	29 f0       	breq	.+10     	; 0xf22 <__vector_11+0x40>
	{
		(*g_callBackPtr[Timer0])();
     f18:	e0 91 ca 01 	lds	r30, 0x01CA
     f1c:	f0 91 cb 01 	lds	r31, 0x01CB
     f20:	09 95       	icall
	}
}
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	ff 91       	pop	r31
     f28:	ef 91       	pop	r30
     f2a:	bf 91       	pop	r27
     f2c:	af 91       	pop	r26
     f2e:	9f 91       	pop	r25
     f30:	8f 91       	pop	r24
     f32:	7f 91       	pop	r23
     f34:	6f 91       	pop	r22
     f36:	5f 91       	pop	r21
     f38:	4f 91       	pop	r20
     f3a:	3f 91       	pop	r19
     f3c:	2f 91       	pop	r18
     f3e:	0f 90       	pop	r0
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	0f 90       	pop	r0
     f44:	1f 90       	pop	r1
     f46:	18 95       	reti

00000f48 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     f48:	1f 92       	push	r1
     f4a:	0f 92       	push	r0
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	0f 92       	push	r0
     f50:	11 24       	eor	r1, r1
     f52:	2f 93       	push	r18
     f54:	3f 93       	push	r19
     f56:	4f 93       	push	r20
     f58:	5f 93       	push	r21
     f5a:	6f 93       	push	r22
     f5c:	7f 93       	push	r23
     f5e:	8f 93       	push	r24
     f60:	9f 93       	push	r25
     f62:	af 93       	push	r26
     f64:	bf 93       	push	r27
     f66:	ef 93       	push	r30
     f68:	ff 93       	push	r31
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[Timer0] != NULL_PTR)
     f72:	80 91 ca 01 	lds	r24, 0x01CA
     f76:	90 91 cb 01 	lds	r25, 0x01CB
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	29 f0       	breq	.+10     	; 0xf88 <__vector_10+0x40>
	{
		(*g_callBackPtr[Timer0])();
     f7e:	e0 91 ca 01 	lds	r30, 0x01CA
     f82:	f0 91 cb 01 	lds	r31, 0x01CB
     f86:	09 95       	icall
	}
}
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	ff 91       	pop	r31
     f8e:	ef 91       	pop	r30
     f90:	bf 91       	pop	r27
     f92:	af 91       	pop	r26
     f94:	9f 91       	pop	r25
     f96:	8f 91       	pop	r24
     f98:	7f 91       	pop	r23
     f9a:	6f 91       	pop	r22
     f9c:	5f 91       	pop	r21
     f9e:	4f 91       	pop	r20
     fa0:	3f 91       	pop	r19
     fa2:	2f 91       	pop	r18
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	0f 90       	pop	r0
     faa:	1f 90       	pop	r1
     fac:	18 95       	reti

00000fae <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     fae:	1f 92       	push	r1
     fb0:	0f 92       	push	r0
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	0f 92       	push	r0
     fb6:	11 24       	eor	r1, r1
     fb8:	2f 93       	push	r18
     fba:	3f 93       	push	r19
     fbc:	4f 93       	push	r20
     fbe:	5f 93       	push	r21
     fc0:	6f 93       	push	r22
     fc2:	7f 93       	push	r23
     fc4:	8f 93       	push	r24
     fc6:	9f 93       	push	r25
     fc8:	af 93       	push	r26
     fca:	bf 93       	push	r27
     fcc:	ef 93       	push	r30
     fce:	ff 93       	push	r31
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[Timer1] != NULL_PTR)
     fd8:	80 91 cc 01 	lds	r24, 0x01CC
     fdc:	90 91 cd 01 	lds	r25, 0x01CD
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	29 f0       	breq	.+10     	; 0xfee <__vector_9+0x40>
	{
		(*g_callBackPtr[Timer1])();
     fe4:	e0 91 cc 01 	lds	r30, 0x01CC
     fe8:	f0 91 cd 01 	lds	r31, 0x01CD
     fec:	09 95       	icall
	}
}
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	ff 91       	pop	r31
     ff4:	ef 91       	pop	r30
     ff6:	bf 91       	pop	r27
     ff8:	af 91       	pop	r26
     ffa:	9f 91       	pop	r25
     ffc:	8f 91       	pop	r24
     ffe:	7f 91       	pop	r23
    1000:	6f 91       	pop	r22
    1002:	5f 91       	pop	r21
    1004:	4f 91       	pop	r20
    1006:	3f 91       	pop	r19
    1008:	2f 91       	pop	r18
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	0f 90       	pop	r0
    1010:	1f 90       	pop	r1
    1012:	18 95       	reti

00001014 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1014:	1f 92       	push	r1
    1016:	0f 92       	push	r0
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	0f 92       	push	r0
    101c:	11 24       	eor	r1, r1
    101e:	2f 93       	push	r18
    1020:	3f 93       	push	r19
    1022:	4f 93       	push	r20
    1024:	5f 93       	push	r21
    1026:	6f 93       	push	r22
    1028:	7f 93       	push	r23
    102a:	8f 93       	push	r24
    102c:	9f 93       	push	r25
    102e:	af 93       	push	r26
    1030:	bf 93       	push	r27
    1032:	ef 93       	push	r30
    1034:	ff 93       	push	r31
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[Timer1] != NULL_PTR)
    103e:	80 91 cc 01 	lds	r24, 0x01CC
    1042:	90 91 cd 01 	lds	r25, 0x01CD
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	29 f0       	breq	.+10     	; 0x1054 <__vector_7+0x40>
	{
		(*g_callBackPtr[Timer1])();
    104a:	e0 91 cc 01 	lds	r30, 0x01CC
    104e:	f0 91 cd 01 	lds	r31, 0x01CD
    1052:	09 95       	icall
	}
}
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	ff 91       	pop	r31
    105a:	ef 91       	pop	r30
    105c:	bf 91       	pop	r27
    105e:	af 91       	pop	r26
    1060:	9f 91       	pop	r25
    1062:	8f 91       	pop	r24
    1064:	7f 91       	pop	r23
    1066:	6f 91       	pop	r22
    1068:	5f 91       	pop	r21
    106a:	4f 91       	pop	r20
    106c:	3f 91       	pop	r19
    106e:	2f 91       	pop	r18
    1070:	0f 90       	pop	r0
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	0f 90       	pop	r0
    1076:	1f 90       	pop	r1
    1078:	18 95       	reti

0000107a <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    107a:	1f 92       	push	r1
    107c:	0f 92       	push	r0
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	0f 92       	push	r0
    1082:	11 24       	eor	r1, r1
    1084:	2f 93       	push	r18
    1086:	3f 93       	push	r19
    1088:	4f 93       	push	r20
    108a:	5f 93       	push	r21
    108c:	6f 93       	push	r22
    108e:	7f 93       	push	r23
    1090:	8f 93       	push	r24
    1092:	9f 93       	push	r25
    1094:	af 93       	push	r26
    1096:	bf 93       	push	r27
    1098:	ef 93       	push	r30
    109a:	ff 93       	push	r31
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[Timer2] != NULL_PTR)
    10a4:	80 91 ce 01 	lds	r24, 0x01CE
    10a8:	90 91 cf 01 	lds	r25, 0x01CF
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	29 f0       	breq	.+10     	; 0x10ba <__vector_5+0x40>
	{
		(*g_callBackPtr[Timer2])();
    10b0:	e0 91 ce 01 	lds	r30, 0x01CE
    10b4:	f0 91 cf 01 	lds	r31, 0x01CF
    10b8:	09 95       	icall
	}
}
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	ff 91       	pop	r31
    10c0:	ef 91       	pop	r30
    10c2:	bf 91       	pop	r27
    10c4:	af 91       	pop	r26
    10c6:	9f 91       	pop	r25
    10c8:	8f 91       	pop	r24
    10ca:	7f 91       	pop	r23
    10cc:	6f 91       	pop	r22
    10ce:	5f 91       	pop	r21
    10d0:	4f 91       	pop	r20
    10d2:	3f 91       	pop	r19
    10d4:	2f 91       	pop	r18
    10d6:	0f 90       	pop	r0
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	0f 90       	pop	r0
    10dc:	1f 90       	pop	r1
    10de:	18 95       	reti

000010e0 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    10e0:	1f 92       	push	r1
    10e2:	0f 92       	push	r0
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	0f 92       	push	r0
    10e8:	11 24       	eor	r1, r1
    10ea:	2f 93       	push	r18
    10ec:	3f 93       	push	r19
    10ee:	4f 93       	push	r20
    10f0:	5f 93       	push	r21
    10f2:	6f 93       	push	r22
    10f4:	7f 93       	push	r23
    10f6:	8f 93       	push	r24
    10f8:	9f 93       	push	r25
    10fa:	af 93       	push	r26
    10fc:	bf 93       	push	r27
    10fe:	ef 93       	push	r30
    1100:	ff 93       	push	r31
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr[Timer2] != NULL_PTR)
    110a:	80 91 ce 01 	lds	r24, 0x01CE
    110e:	90 91 cf 01 	lds	r25, 0x01CF
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	29 f0       	breq	.+10     	; 0x1120 <__vector_4+0x40>
	{
		(*g_callBackPtr[Timer2])();
    1116:	e0 91 ce 01 	lds	r30, 0x01CE
    111a:	f0 91 cf 01 	lds	r31, 0x01CF
    111e:	09 95       	icall
	}
}
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	ff 91       	pop	r31
    1126:	ef 91       	pop	r30
    1128:	bf 91       	pop	r27
    112a:	af 91       	pop	r26
    112c:	9f 91       	pop	r25
    112e:	8f 91       	pop	r24
    1130:	7f 91       	pop	r23
    1132:	6f 91       	pop	r22
    1134:	5f 91       	pop	r21
    1136:	4f 91       	pop	r20
    1138:	3f 91       	pop	r19
    113a:	2f 91       	pop	r18
    113c:	0f 90       	pop	r0
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	0f 90       	pop	r0
    1142:	1f 90       	pop	r1
    1144:	18 95       	reti

00001146 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	00 d0       	rcall	.+0      	; 0x114c <GPIO_setupPinDirection+0x6>
    114c:	00 d0       	rcall	.+0      	; 0x114e <GPIO_setupPinDirection+0x8>
    114e:	0f 92       	push	r0
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	6a 83       	std	Y+2, r22	; 0x02
    1158:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	88 30       	cpi	r24, 0x08	; 8
    115e:	08 f0       	brcs	.+2      	; 0x1162 <GPIO_setupPinDirection+0x1c>
    1160:	d5 c0       	rjmp	.+426    	; 0x130c <GPIO_setupPinDirection+0x1c6>
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	84 30       	cpi	r24, 0x04	; 4
    1166:	08 f0       	brcs	.+2      	; 0x116a <GPIO_setupPinDirection+0x24>
    1168:	d1 c0       	rjmp	.+418    	; 0x130c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	3d 83       	std	Y+5, r19	; 0x05
    1172:	2c 83       	std	Y+4, r18	; 0x04
    1174:	8c 81       	ldd	r24, Y+4	; 0x04
    1176:	9d 81       	ldd	r25, Y+5	; 0x05
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	91 05       	cpc	r25, r1
    117c:	09 f4       	brne	.+2      	; 0x1180 <GPIO_setupPinDirection+0x3a>
    117e:	43 c0       	rjmp	.+134    	; 0x1206 <GPIO_setupPinDirection+0xc0>
    1180:	2c 81       	ldd	r18, Y+4	; 0x04
    1182:	3d 81       	ldd	r19, Y+5	; 0x05
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	2c f4       	brge	.+10     	; 0x1194 <GPIO_setupPinDirection+0x4e>
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	71 f0       	breq	.+28     	; 0x11ae <GPIO_setupPinDirection+0x68>
    1192:	bc c0       	rjmp	.+376    	; 0x130c <GPIO_setupPinDirection+0x1c6>
    1194:	2c 81       	ldd	r18, Y+4	; 0x04
    1196:	3d 81       	ldd	r19, Y+5	; 0x05
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	09 f4       	brne	.+2      	; 0x11a0 <GPIO_setupPinDirection+0x5a>
    119e:	5f c0       	rjmp	.+190    	; 0x125e <GPIO_setupPinDirection+0x118>
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	9d 81       	ldd	r25, Y+5	; 0x05
    11a4:	83 30       	cpi	r24, 0x03	; 3
    11a6:	91 05       	cpc	r25, r1
    11a8:	09 f4       	brne	.+2      	; 0x11ac <GPIO_setupPinDirection+0x66>
    11aa:	85 c0       	rjmp	.+266    	; 0x12b6 <GPIO_setupPinDirection+0x170>
    11ac:	af c0       	rjmp	.+350    	; 0x130c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	a1 f4       	brne	.+40     	; 0x11dc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    11b4:	aa e3       	ldi	r26, 0x3A	; 58
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	ea e3       	ldi	r30, 0x3A	; 58
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	48 2f       	mov	r20, r24
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 2e       	mov	r0, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <GPIO_setupPinDirection+0x8c>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	0a 94       	dec	r0
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <GPIO_setupPinDirection+0x88>
    11d6:	84 2b       	or	r24, r20
    11d8:	8c 93       	st	X, r24
    11da:	98 c0       	rjmp	.+304    	; 0x130c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    11dc:	aa e3       	ldi	r26, 0x3A	; 58
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	ea e3       	ldi	r30, 0x3A	; 58
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <GPIO_setupPinDirection+0xb4>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <GPIO_setupPinDirection+0xb0>
    11fe:	80 95       	com	r24
    1200:	84 23       	and	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	83 c0       	rjmp	.+262    	; 0x130c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	a1 f4       	brne	.+40     	; 0x1234 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    120c:	a7 e3       	ldi	r26, 0x37	; 55
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e7 e3       	ldi	r30, 0x37	; 55
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <GPIO_setupPinDirection+0xe4>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <GPIO_setupPinDirection+0xe0>
    122e:	84 2b       	or	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	6c c0       	rjmp	.+216    	; 0x130c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1234:	a7 e3       	ldi	r26, 0x37	; 55
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e7 e3       	ldi	r30, 0x37	; 55
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <GPIO_setupPinDirection+0x10c>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <GPIO_setupPinDirection+0x108>
    1256:	80 95       	com	r24
    1258:	84 23       	and	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	57 c0       	rjmp	.+174    	; 0x130c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	a1 f4       	brne	.+40     	; 0x128c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1264:	a4 e3       	ldi	r26, 0x34	; 52
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e4 e3       	ldi	r30, 0x34	; 52
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <GPIO_setupPinDirection+0x13c>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <GPIO_setupPinDirection+0x138>
    1286:	84 2b       	or	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	40 c0       	rjmp	.+128    	; 0x130c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    128c:	a4 e3       	ldi	r26, 0x34	; 52
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e4 e3       	ldi	r30, 0x34	; 52
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <GPIO_setupPinDirection+0x164>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <GPIO_setupPinDirection+0x160>
    12ae:	80 95       	com	r24
    12b0:	84 23       	and	r24, r20
    12b2:	8c 93       	st	X, r24
    12b4:	2b c0       	rjmp	.+86     	; 0x130c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	a1 f4       	brne	.+40     	; 0x12e4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    12bc:	a1 e3       	ldi	r26, 0x31	; 49
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e1 e3       	ldi	r30, 0x31	; 49
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	48 2f       	mov	r20, r24
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 2e       	mov	r0, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <GPIO_setupPinDirection+0x194>
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	0a 94       	dec	r0
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <GPIO_setupPinDirection+0x190>
    12de:	84 2b       	or	r24, r20
    12e0:	8c 93       	st	X, r24
    12e2:	14 c0       	rjmp	.+40     	; 0x130c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    12e4:	a1 e3       	ldi	r26, 0x31	; 49
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e1 e3       	ldi	r30, 0x31	; 49
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 2e       	mov	r0, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <GPIO_setupPinDirection+0x1bc>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	0a 94       	dec	r0
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <GPIO_setupPinDirection+0x1b8>
    1306:	80 95       	com	r24
    1308:	84 23       	and	r24, r20
    130a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	00 d0       	rcall	.+0      	; 0x1322 <GPIO_writePin+0x6>
    1322:	00 d0       	rcall	.+0      	; 0x1324 <GPIO_writePin+0x8>
    1324:	0f 92       	push	r0
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	6a 83       	std	Y+2, r22	; 0x02
    132e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	88 30       	cpi	r24, 0x08	; 8
    1334:	08 f0       	brcs	.+2      	; 0x1338 <GPIO_writePin+0x1c>
    1336:	d5 c0       	rjmp	.+426    	; 0x14e2 <GPIO_writePin+0x1c6>
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	84 30       	cpi	r24, 0x04	; 4
    133c:	08 f0       	brcs	.+2      	; 0x1340 <GPIO_writePin+0x24>
    133e:	d1 c0       	rjmp	.+418    	; 0x14e2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	3d 83       	std	Y+5, r19	; 0x05
    1348:	2c 83       	std	Y+4, r18	; 0x04
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	9d 81       	ldd	r25, Y+5	; 0x05
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	91 05       	cpc	r25, r1
    1352:	09 f4       	brne	.+2      	; 0x1356 <GPIO_writePin+0x3a>
    1354:	43 c0       	rjmp	.+134    	; 0x13dc <GPIO_writePin+0xc0>
    1356:	2c 81       	ldd	r18, Y+4	; 0x04
    1358:	3d 81       	ldd	r19, Y+5	; 0x05
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	2c f4       	brge	.+10     	; 0x136a <GPIO_writePin+0x4e>
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	9d 81       	ldd	r25, Y+5	; 0x05
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	71 f0       	breq	.+28     	; 0x1384 <GPIO_writePin+0x68>
    1368:	bc c0       	rjmp	.+376    	; 0x14e2 <GPIO_writePin+0x1c6>
    136a:	2c 81       	ldd	r18, Y+4	; 0x04
    136c:	3d 81       	ldd	r19, Y+5	; 0x05
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	09 f4       	brne	.+2      	; 0x1376 <GPIO_writePin+0x5a>
    1374:	5f c0       	rjmp	.+190    	; 0x1434 <GPIO_writePin+0x118>
    1376:	8c 81       	ldd	r24, Y+4	; 0x04
    1378:	9d 81       	ldd	r25, Y+5	; 0x05
    137a:	83 30       	cpi	r24, 0x03	; 3
    137c:	91 05       	cpc	r25, r1
    137e:	09 f4       	brne	.+2      	; 0x1382 <GPIO_writePin+0x66>
    1380:	85 c0       	rjmp	.+266    	; 0x148c <GPIO_writePin+0x170>
    1382:	af c0       	rjmp	.+350    	; 0x14e2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	81 30       	cpi	r24, 0x01	; 1
    1388:	a1 f4       	brne	.+40     	; 0x13b2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    138a:	ab e3       	ldi	r26, 0x3B	; 59
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	eb e3       	ldi	r30, 0x3B	; 59
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	48 2f       	mov	r20, r24
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 2e       	mov	r0, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <GPIO_writePin+0x8c>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	0a 94       	dec	r0
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <GPIO_writePin+0x88>
    13ac:	84 2b       	or	r24, r20
    13ae:	8c 93       	st	X, r24
    13b0:	98 c0       	rjmp	.+304    	; 0x14e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    13b2:	ab e3       	ldi	r26, 0x3B	; 59
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	eb e3       	ldi	r30, 0x3B	; 59
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <GPIO_writePin+0xb4>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <GPIO_writePin+0xb0>
    13d4:	80 95       	com	r24
    13d6:	84 23       	and	r24, r20
    13d8:	8c 93       	st	X, r24
    13da:	83 c0       	rjmp	.+262    	; 0x14e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	a1 f4       	brne	.+40     	; 0x140a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    13e2:	a8 e3       	ldi	r26, 0x38	; 56
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e8 e3       	ldi	r30, 0x38	; 56
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <GPIO_writePin+0xe4>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <GPIO_writePin+0xe0>
    1404:	84 2b       	or	r24, r20
    1406:	8c 93       	st	X, r24
    1408:	6c c0       	rjmp	.+216    	; 0x14e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    140a:	a8 e3       	ldi	r26, 0x38	; 56
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e8 e3       	ldi	r30, 0x38	; 56
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <GPIO_writePin+0x10c>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <GPIO_writePin+0x108>
    142c:	80 95       	com	r24
    142e:	84 23       	and	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	57 c0       	rjmp	.+174    	; 0x14e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	a1 f4       	brne	.+40     	; 0x1462 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    143a:	a5 e3       	ldi	r26, 0x35	; 53
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e5 e3       	ldi	r30, 0x35	; 53
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <GPIO_writePin+0x13c>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <GPIO_writePin+0x138>
    145c:	84 2b       	or	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	40 c0       	rjmp	.+128    	; 0x14e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1462:	a5 e3       	ldi	r26, 0x35	; 53
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e5 e3       	ldi	r30, 0x35	; 53
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 2e       	mov	r0, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <GPIO_writePin+0x164>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	0a 94       	dec	r0
    1482:	e2 f7       	brpl	.-8      	; 0x147c <GPIO_writePin+0x160>
    1484:	80 95       	com	r24
    1486:	84 23       	and	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	2b c0       	rjmp	.+86     	; 0x14e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	a1 f4       	brne	.+40     	; 0x14ba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1492:	a2 e3       	ldi	r26, 0x32	; 50
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e2 e3       	ldi	r30, 0x32	; 50
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <GPIO_writePin+0x194>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <GPIO_writePin+0x190>
    14b4:	84 2b       	or	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	14 c0       	rjmp	.+40     	; 0x14e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    14ba:	a2 e3       	ldi	r26, 0x32	; 50
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e2 e3       	ldi	r30, 0x32	; 50
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <GPIO_writePin+0x1bc>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <GPIO_writePin+0x1b8>
    14dc:	80 95       	com	r24
    14de:	84 23       	and	r24, r20
    14e0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <GPIO_readPin+0x6>
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <GPIO_readPin+0x8>
    14fa:	0f 92       	push	r0
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	8a 83       	std	Y+2, r24	; 0x02
    1502:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1504:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	88 30       	cpi	r24, 0x08	; 8
    150a:	08 f0       	brcs	.+2      	; 0x150e <GPIO_readPin+0x1c>
    150c:	84 c0       	rjmp	.+264    	; 0x1616 <GPIO_readPin+0x124>
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	84 30       	cpi	r24, 0x04	; 4
    1512:	08 f0       	brcs	.+2      	; 0x1516 <GPIO_readPin+0x24>
    1514:	80 c0       	rjmp	.+256    	; 0x1616 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	3d 83       	std	Y+5, r19	; 0x05
    151e:	2c 83       	std	Y+4, r18	; 0x04
    1520:	4c 81       	ldd	r20, Y+4	; 0x04
    1522:	5d 81       	ldd	r21, Y+5	; 0x05
    1524:	41 30       	cpi	r20, 0x01	; 1
    1526:	51 05       	cpc	r21, r1
    1528:	79 f1       	breq	.+94     	; 0x1588 <GPIO_readPin+0x96>
    152a:	8c 81       	ldd	r24, Y+4	; 0x04
    152c:	9d 81       	ldd	r25, Y+5	; 0x05
    152e:	82 30       	cpi	r24, 0x02	; 2
    1530:	91 05       	cpc	r25, r1
    1532:	34 f4       	brge	.+12     	; 0x1540 <GPIO_readPin+0x4e>
    1534:	2c 81       	ldd	r18, Y+4	; 0x04
    1536:	3d 81       	ldd	r19, Y+5	; 0x05
    1538:	21 15       	cp	r18, r1
    153a:	31 05       	cpc	r19, r1
    153c:	69 f0       	breq	.+26     	; 0x1558 <GPIO_readPin+0x66>
    153e:	6b c0       	rjmp	.+214    	; 0x1616 <GPIO_readPin+0x124>
    1540:	4c 81       	ldd	r20, Y+4	; 0x04
    1542:	5d 81       	ldd	r21, Y+5	; 0x05
    1544:	42 30       	cpi	r20, 0x02	; 2
    1546:	51 05       	cpc	r21, r1
    1548:	b9 f1       	breq	.+110    	; 0x15b8 <GPIO_readPin+0xc6>
    154a:	8c 81       	ldd	r24, Y+4	; 0x04
    154c:	9d 81       	ldd	r25, Y+5	; 0x05
    154e:	83 30       	cpi	r24, 0x03	; 3
    1550:	91 05       	cpc	r25, r1
    1552:	09 f4       	brne	.+2      	; 0x1556 <GPIO_readPin+0x64>
    1554:	49 c0       	rjmp	.+146    	; 0x15e8 <GPIO_readPin+0xf6>
    1556:	5f c0       	rjmp	.+190    	; 0x1616 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1558:	e9 e3       	ldi	r30, 0x39	; 57
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	a9 01       	movw	r20, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <GPIO_readPin+0x7e>
    156c:	55 95       	asr	r21
    156e:	47 95       	ror	r20
    1570:	8a 95       	dec	r24
    1572:	e2 f7       	brpl	.-8      	; 0x156c <GPIO_readPin+0x7a>
    1574:	ca 01       	movw	r24, r20
    1576:	81 70       	andi	r24, 0x01	; 1
    1578:	90 70       	andi	r25, 0x00	; 0
    157a:	88 23       	and	r24, r24
    157c:	19 f0       	breq	.+6      	; 0x1584 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	49 c0       	rjmp	.+146    	; 0x1616 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1584:	19 82       	std	Y+1, r1	; 0x01
    1586:	47 c0       	rjmp	.+142    	; 0x1616 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1588:	e6 e3       	ldi	r30, 0x36	; 54
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	88 2f       	mov	r24, r24
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	a9 01       	movw	r20, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <GPIO_readPin+0xae>
    159c:	55 95       	asr	r21
    159e:	47 95       	ror	r20
    15a0:	8a 95       	dec	r24
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <GPIO_readPin+0xaa>
    15a4:	ca 01       	movw	r24, r20
    15a6:	81 70       	andi	r24, 0x01	; 1
    15a8:	90 70       	andi	r25, 0x00	; 0
    15aa:	88 23       	and	r24, r24
    15ac:	19 f0       	breq	.+6      	; 0x15b4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	89 83       	std	Y+1, r24	; 0x01
    15b2:	31 c0       	rjmp	.+98     	; 0x1616 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15b4:	19 82       	std	Y+1, r1	; 0x01
    15b6:	2f c0       	rjmp	.+94     	; 0x1616 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    15b8:	e3 e3       	ldi	r30, 0x33	; 51
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	88 2f       	mov	r24, r24
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	a9 01       	movw	r20, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <GPIO_readPin+0xde>
    15cc:	55 95       	asr	r21
    15ce:	47 95       	ror	r20
    15d0:	8a 95       	dec	r24
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <GPIO_readPin+0xda>
    15d4:	ca 01       	movw	r24, r20
    15d6:	81 70       	andi	r24, 0x01	; 1
    15d8:	90 70       	andi	r25, 0x00	; 0
    15da:	88 23       	and	r24, r24
    15dc:	19 f0       	breq	.+6      	; 0x15e4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	19 c0       	rjmp	.+50     	; 0x1616 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15e4:	19 82       	std	Y+1, r1	; 0x01
    15e6:	17 c0       	rjmp	.+46     	; 0x1616 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    15e8:	e0 e3       	ldi	r30, 0x30	; 48
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	88 2f       	mov	r24, r24
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	a9 01       	movw	r20, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <GPIO_readPin+0x10e>
    15fc:	55 95       	asr	r21
    15fe:	47 95       	ror	r20
    1600:	8a 95       	dec	r24
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <GPIO_readPin+0x10a>
    1604:	ca 01       	movw	r24, r20
    1606:	81 70       	andi	r24, 0x01	; 1
    1608:	90 70       	andi	r25, 0x00	; 0
    160a:	88 23       	and	r24, r24
    160c:	19 f0       	breq	.+6      	; 0x1614 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	01 c0       	rjmp	.+2      	; 0x1616 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1614:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1616:	89 81       	ldd	r24, Y+1	; 0x01
}
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <GPIO_setupPortDirection+0x6>
    162e:	00 d0       	rcall	.+0      	; 0x1630 <GPIO_setupPortDirection+0x8>
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	84 30       	cpi	r24, 0x04	; 4
    163c:	90 f5       	brcc	.+100    	; 0x16a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	3c 83       	std	Y+4, r19	; 0x04
    1646:	2b 83       	std	Y+3, r18	; 0x03
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	91 05       	cpc	r25, r1
    1650:	d1 f0       	breq	.+52     	; 0x1686 <GPIO_setupPortDirection+0x5e>
    1652:	2b 81       	ldd	r18, Y+3	; 0x03
    1654:	3c 81       	ldd	r19, Y+4	; 0x04
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	2c f4       	brge	.+10     	; 0x1666 <GPIO_setupPortDirection+0x3e>
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	61 f0       	breq	.+24     	; 0x167c <GPIO_setupPortDirection+0x54>
    1664:	1e c0       	rjmp	.+60     	; 0x16a2 <GPIO_setupPortDirection+0x7a>
    1666:	2b 81       	ldd	r18, Y+3	; 0x03
    1668:	3c 81       	ldd	r19, Y+4	; 0x04
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	81 f0       	breq	.+32     	; 0x1690 <GPIO_setupPortDirection+0x68>
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	83 30       	cpi	r24, 0x03	; 3
    1676:	91 05       	cpc	r25, r1
    1678:	81 f0       	breq	.+32     	; 0x169a <GPIO_setupPortDirection+0x72>
    167a:	13 c0       	rjmp	.+38     	; 0x16a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    167c:	ea e3       	ldi	r30, 0x3A	; 58
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	80 83       	st	Z, r24
    1684:	0e c0       	rjmp	.+28     	; 0x16a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1686:	e7 e3       	ldi	r30, 0x37	; 55
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	80 83       	st	Z, r24
    168e:	09 c0       	rjmp	.+18     	; 0x16a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1690:	e4 e3       	ldi	r30, 0x34	; 52
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	80 83       	st	Z, r24
    1698:	04 c0       	rjmp	.+8      	; 0x16a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    169a:	e1 e3       	ldi	r30, 0x31	; 49
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <GPIO_writePort+0x6>
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <GPIO_writePort+0x8>
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	84 30       	cpi	r24, 0x04	; 4
    16c4:	90 f5       	brcc	.+100    	; 0x172a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	3c 83       	std	Y+4, r19	; 0x04
    16ce:	2b 83       	std	Y+3, r18	; 0x03
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	9c 81       	ldd	r25, Y+4	; 0x04
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	91 05       	cpc	r25, r1
    16d8:	d1 f0       	breq	.+52     	; 0x170e <GPIO_writePort+0x5e>
    16da:	2b 81       	ldd	r18, Y+3	; 0x03
    16dc:	3c 81       	ldd	r19, Y+4	; 0x04
    16de:	22 30       	cpi	r18, 0x02	; 2
    16e0:	31 05       	cpc	r19, r1
    16e2:	2c f4       	brge	.+10     	; 0x16ee <GPIO_writePort+0x3e>
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	9c 81       	ldd	r25, Y+4	; 0x04
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	61 f0       	breq	.+24     	; 0x1704 <GPIO_writePort+0x54>
    16ec:	1e c0       	rjmp	.+60     	; 0x172a <GPIO_writePort+0x7a>
    16ee:	2b 81       	ldd	r18, Y+3	; 0x03
    16f0:	3c 81       	ldd	r19, Y+4	; 0x04
    16f2:	22 30       	cpi	r18, 0x02	; 2
    16f4:	31 05       	cpc	r19, r1
    16f6:	81 f0       	breq	.+32     	; 0x1718 <GPIO_writePort+0x68>
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	9c 81       	ldd	r25, Y+4	; 0x04
    16fc:	83 30       	cpi	r24, 0x03	; 3
    16fe:	91 05       	cpc	r25, r1
    1700:	81 f0       	breq	.+32     	; 0x1722 <GPIO_writePort+0x72>
    1702:	13 c0       	rjmp	.+38     	; 0x172a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1704:	eb e3       	ldi	r30, 0x3B	; 59
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	80 83       	st	Z, r24
    170c:	0e c0       	rjmp	.+28     	; 0x172a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    170e:	e8 e3       	ldi	r30, 0x38	; 56
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	80 83       	st	Z, r24
    1716:	09 c0       	rjmp	.+18     	; 0x172a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1718:	e5 e3       	ldi	r30, 0x35	; 53
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	80 83       	st	Z, r24
    1720:	04 c0       	rjmp	.+8      	; 0x172a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1722:	e2 e3       	ldi	r30, 0x32	; 50
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	80 83       	st	Z, r24
			break;
		}
	}
}
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <GPIO_readPort+0x6>
    173e:	00 d0       	rcall	.+0      	; 0x1740 <GPIO_readPort+0x8>
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1746:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	84 30       	cpi	r24, 0x04	; 4
    174c:	90 f5       	brcc	.+100    	; 0x17b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	3c 83       	std	Y+4, r19	; 0x04
    1756:	2b 83       	std	Y+3, r18	; 0x03
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	91 05       	cpc	r25, r1
    1760:	d1 f0       	breq	.+52     	; 0x1796 <GPIO_readPort+0x5e>
    1762:	2b 81       	ldd	r18, Y+3	; 0x03
    1764:	3c 81       	ldd	r19, Y+4	; 0x04
    1766:	22 30       	cpi	r18, 0x02	; 2
    1768:	31 05       	cpc	r19, r1
    176a:	2c f4       	brge	.+10     	; 0x1776 <GPIO_readPort+0x3e>
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	61 f0       	breq	.+24     	; 0x178c <GPIO_readPort+0x54>
    1774:	1e c0       	rjmp	.+60     	; 0x17b2 <GPIO_readPort+0x7a>
    1776:	2b 81       	ldd	r18, Y+3	; 0x03
    1778:	3c 81       	ldd	r19, Y+4	; 0x04
    177a:	22 30       	cpi	r18, 0x02	; 2
    177c:	31 05       	cpc	r19, r1
    177e:	81 f0       	breq	.+32     	; 0x17a0 <GPIO_readPort+0x68>
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	83 30       	cpi	r24, 0x03	; 3
    1786:	91 05       	cpc	r25, r1
    1788:	81 f0       	breq	.+32     	; 0x17aa <GPIO_readPort+0x72>
    178a:	13 c0       	rjmp	.+38     	; 0x17b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    178c:	e9 e3       	ldi	r30, 0x39	; 57
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	0e c0       	rjmp	.+28     	; 0x17b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1796:	e6 e3       	ldi	r30, 0x36	; 54
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	09 c0       	rjmp	.+18     	; 0x17b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    17a0:	e3 e3       	ldi	r30, 0x33	; 51
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	04 c0       	rjmp	.+8      	; 0x17b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    17aa:	e0 e3       	ldi	r30, 0x30	; 48
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr){
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <UART_init+0x6>
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <UART_init+0x8>
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	9c 83       	std	Y+4, r25	; 0x04
    17d0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    17d2:	1a 82       	std	Y+2, r1	; 0x02
    17d4:	19 82       	std	Y+1, r1	; 0x01
//UCSRA DAH 3LSHAN EL DOUBLE SPEED MSH HT8ER 7AGA FEEEEH//
	UCSRA = (1<<U2X);
    17d6:	eb e2       	ldi	r30, 0x2B	; 43
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	82 e0       	ldi	r24, 0x02	; 2
    17dc:	80 83       	st	Z, r24
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
// hna UCSRB 3lshan tf3l el recive w el transmit only msh m7tag 7aga tany mnoooo//
	UCSRB = (1<<RXEN) | (1<<TXEN);
    17de:	ea e2       	ldi	r30, 0x2A	; 42
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	88 e1       	ldi	r24, 0x18	; 24
    17e4:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    17e6:	e0 e4       	ldi	r30, 0x40	; 64
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 e8       	ldi	r24, 0x80	; 128
    17ec:	80 83       	st	Z, r24

// Bit Data Mode



	if(Config_Ptr->bit_data == UART_5BIT_MODE){
    17ee:	eb 81       	ldd	r30, Y+3	; 0x03
    17f0:	fc 81       	ldd	r31, Y+4	; 0x04
    17f2:	80 81       	ld	r24, Z
    17f4:	88 23       	and	r24, r24
    17f6:	31 f1       	breq	.+76     	; 0x1844 <UART_init+0x82>

	}
	else if (Config_Ptr->bit_data == UART_6BIT_MODE) {
    17f8:	eb 81       	ldd	r30, Y+3	; 0x03
    17fa:	fc 81       	ldd	r31, Y+4	; 0x04
    17fc:	80 81       	ld	r24, Z
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	41 f4       	brne	.+16     	; 0x1812 <UART_init+0x50>
    UCSRC |= (1 << UCSZ0);
    1802:	a0 e4       	ldi	r26, 0x40	; 64
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e0 e4       	ldi	r30, 0x40	; 64
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	82 60       	ori	r24, 0x02	; 2
    180e:	8c 93       	st	X, r24
    1810:	19 c0       	rjmp	.+50     	; 0x1844 <UART_init+0x82>
}
else if (Config_Ptr->bit_data == UART_7BIT_MODE) {
    1812:	eb 81       	ldd	r30, Y+3	; 0x03
    1814:	fc 81       	ldd	r31, Y+4	; 0x04
    1816:	80 81       	ld	r24, Z
    1818:	82 30       	cpi	r24, 0x02	; 2
    181a:	41 f4       	brne	.+16     	; 0x182c <UART_init+0x6a>
    UCSRC |= (1 << UCSZ1);
    181c:	a0 e4       	ldi	r26, 0x40	; 64
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e0 e4       	ldi	r30, 0x40	; 64
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	84 60       	ori	r24, 0x04	; 4
    1828:	8c 93       	st	X, r24
    182a:	0c c0       	rjmp	.+24     	; 0x1844 <UART_init+0x82>
}
else if (Config_Ptr->bit_data == UART_8BIT_MODE) {
    182c:	eb 81       	ldd	r30, Y+3	; 0x03
    182e:	fc 81       	ldd	r31, Y+4	; 0x04
    1830:	80 81       	ld	r24, Z
    1832:	83 30       	cpi	r24, 0x03	; 3
    1834:	39 f4       	brne	.+14     	; 0x1844 <UART_init+0x82>
    UCSRC |= (1 << UCSZ0) | (1 << UCSZ1);
    1836:	a0 e4       	ldi	r26, 0x40	; 64
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e0 e4       	ldi	r30, 0x40	; 64
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	86 60       	ori	r24, 0x06	; 6
    1842:	8c 93       	st	X, r24
}

// Parity Mode
if (Config_Ptr->parity == odd) {
    1844:	eb 81       	ldd	r30, Y+3	; 0x03
    1846:	fc 81       	ldd	r31, Y+4	; 0x04
    1848:	81 81       	ldd	r24, Z+1	; 0x01
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	41 f4       	brne	.+16     	; 0x185e <UART_init+0x9c>
    UCSRC |= (1 << UPM1) | (1 << UPM0);
    184e:	a0 e4       	ldi	r26, 0x40	; 64
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e0 e4       	ldi	r30, 0x40	; 64
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	80 63       	ori	r24, 0x30	; 48
    185a:	8c 93       	st	X, r24
    185c:	0c c0       	rjmp	.+24     	; 0x1876 <UART_init+0xb4>
}
else if (Config_Ptr->parity == even) {
    185e:	eb 81       	ldd	r30, Y+3	; 0x03
    1860:	fc 81       	ldd	r31, Y+4	; 0x04
    1862:	81 81       	ldd	r24, Z+1	; 0x01
    1864:	82 30       	cpi	r24, 0x02	; 2
    1866:	39 f4       	brne	.+14     	; 0x1876 <UART_init+0xb4>
    UCSRC |= (1 << UPM1);
    1868:	a0 e4       	ldi	r26, 0x40	; 64
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e0 e4       	ldi	r30, 0x40	; 64
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	80 62       	ori	r24, 0x20	; 32
    1874:	8c 93       	st	X, r24
}
// Stop Bit

if (Config_Ptr->stop_bit == UART_TWO_STOP_BITS) {
    1876:	eb 81       	ldd	r30, Y+3	; 0x03
    1878:	fc 81       	ldd	r31, Y+4	; 0x04
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	82 30       	cpi	r24, 0x02	; 2
    187e:	39 f4       	brne	.+14     	; 0x188e <UART_init+0xcc>
    UCSRC |= (1 << USBS);
    1880:	a0 e4       	ldi	r26, 0x40	; 64
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e0 e4       	ldi	r30, 0x40	; 64
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	88 60       	ori	r24, 0x08	; 8
    188c:	8c 93       	st	X, r24




	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    188e:	eb 81       	ldd	r30, Y+3	; 0x03
    1890:	fc 81       	ldd	r31, Y+4	; 0x04
    1892:	83 81       	ldd	r24, Z+3	; 0x03
    1894:	94 81       	ldd	r25, Z+4	; 0x04
    1896:	a5 81       	ldd	r26, Z+5	; 0x05
    1898:	b6 81       	ldd	r27, Z+6	; 0x06
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	aa 1f       	adc	r26, r26
    18a0:	bb 1f       	adc	r27, r27
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	aa 1f       	adc	r26, r26
    18a8:	bb 1f       	adc	r27, r27
    18aa:	88 0f       	add	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	aa 1f       	adc	r26, r26
    18b0:	bb 1f       	adc	r27, r27
    18b2:	9c 01       	movw	r18, r24
    18b4:	ad 01       	movw	r20, r26
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	92 e1       	ldi	r25, 0x12	; 18
    18ba:	aa e7       	ldi	r26, 0x7A	; 122
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	bc 01       	movw	r22, r24
    18c0:	cd 01       	movw	r24, r26
    18c2:	0e 94 23 1a 	call	0x3446	; 0x3446 <__udivmodsi4>
    18c6:	da 01       	movw	r26, r20
    18c8:	c9 01       	movw	r24, r18
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	9a 83       	std	Y+2, r25	; 0x02
    18ce:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    18d0:	e0 e4       	ldi	r30, 0x40	; 64
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	9a 81       	ldd	r25, Y+2	; 0x02
    18d8:	89 2f       	mov	r24, r25
    18da:	99 27       	eor	r25, r25
    18dc:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    18de:	e9 e2       	ldi	r30, 0x29	; 41
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	80 83       	st	Z, r24
}
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	0f 92       	push	r0
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1900:	eb e2       	ldi	r30, 0x2B	; 43
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	88 2f       	mov	r24, r24
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	80 72       	andi	r24, 0x20	; 32
    190c:	90 70       	andi	r25, 0x00	; 0
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	b9 f3       	breq	.-18     	; 0x1900 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1912:	ec e2       	ldi	r30, 0x2C	; 44
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    192a:	eb e2       	ldi	r30, 0x2B	; 43
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	88 23       	and	r24, r24
    1932:	dc f7       	brge	.-10     	; 0x192a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    1934:	ec e2       	ldi	r30, 0x2C	; 44
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
}
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <UART_sendString+0x6>
    1946:	0f 92       	push	r0
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	9b 83       	std	Y+3, r25	; 0x03
    194e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1950:	19 82       	std	Y+1, r1	; 0x01
    1952:	0e c0       	rjmp	.+28     	; 0x1970 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	9b 81       	ldd	r25, Y+3	; 0x03
    195e:	fc 01       	movw	r30, r24
    1960:	e2 0f       	add	r30, r18
    1962:	f3 1f       	adc	r31, r19
    1964:	80 81       	ld	r24, Z
    1966:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <UART_sendByte>
		i++;
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	8f 5f       	subi	r24, 0xFF	; 255
    196e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	9b 81       	ldd	r25, Y+3	; 0x03
    197a:	fc 01       	movw	r30, r24
    197c:	e2 0f       	add	r30, r18
    197e:	f3 1f       	adc	r31, r19
    1980:	80 81       	ld	r24, Z
    1982:	88 23       	and	r24, r24
    1984:	39 f7       	brne	.-50     	; 0x1954 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	00 d0       	rcall	.+0      	; 0x199c <UART_receiveString+0xa>
    199c:	0f 92       	push	r0
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	9b 83       	std	Y+3, r25	; 0x03
    19a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    19a6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	9b 81       	ldd	r25, Y+3	; 0x03
    19b2:	8c 01       	movw	r16, r24
    19b4:	02 0f       	add	r16, r18
    19b6:	13 1f       	adc	r17, r19
    19b8:	0e 94 91 0c 	call	0x1922	; 0x1922 <UART_recieveByte>
    19bc:	f8 01       	movw	r30, r16
    19be:	80 83       	st	Z, r24
    19c0:	0f c0       	rjmp	.+30     	; 0x19e0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	8f 5f       	subi	r24, 0xFF	; 255
    19c6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	9b 81       	ldd	r25, Y+3	; 0x03
    19d2:	8c 01       	movw	r16, r24
    19d4:	02 0f       	add	r16, r18
    19d6:	13 1f       	adc	r17, r19
    19d8:	0e 94 91 0c 	call	0x1922	; 0x1922 <UART_recieveByte>
    19dc:	f8 01       	movw	r30, r16
    19de:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ea:	fc 01       	movw	r30, r24
    19ec:	e2 0f       	add	r30, r18
    19ee:	f3 1f       	adc	r31, r19
    19f0:	80 81       	ld	r24, Z
    19f2:	83 32       	cpi	r24, 0x23	; 35
    19f4:	31 f7       	brne	.-52     	; 0x19c2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1a00:	fc 01       	movw	r30, r24
    1a02:	e2 0f       	add	r30, r18
    1a04:	f3 1f       	adc	r31, r19
    1a06:	10 82       	st	Z, r1
}
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	08 95       	ret

00001a18 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	60 97       	sbiw	r28, 0x10	; 16
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	60 e0       	ldi	r22, 0x00	; 0
    1a30:	40 e0       	ldi	r20, 0x00	; 0
    1a32:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	61 e0       	ldi	r22, 0x01	; 1
    1a3a:	40 e0       	ldi	r20, 0x00	; 0
    1a3c:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	62 e0       	ldi	r22, 0x02	; 2
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	63 e0       	ldi	r22, 0x03	; 3
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	64 e0       	ldi	r22, 0x04	; 4
    1a58:	40 e0       	ldi	r20, 0x00	; 0
    1a5a:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	65 e0       	ldi	r22, 0x05	; 5
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	66 e0       	ldi	r22, 0x06	; 6
    1a6c:	40 e0       	ldi	r20, 0x00	; 0
    1a6e:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	67 e0       	ldi	r22, 0x07	; 7
    1a76:	40 e0       	ldi	r20, 0x00	; 0
    1a78:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1a7c:	1f 86       	std	Y+15, r1	; 0x0f
    1a7e:	ab c0       	rjmp	.+342    	; 0x1bd6 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1a94:	18 8a       	std	Y+16, r1	; 0x10
    1a96:	22 c0       	rjmp	.+68     	; 0x1adc <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1a98:	88 89       	ldd	r24, Y+16	; 0x10
    1a9a:	98 2f       	mov	r25, r24
    1a9c:	9c 5f       	subi	r25, 0xFC	; 252
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	69 2f       	mov	r22, r25
    1aa2:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <GPIO_readPin>
    1aa6:	88 23       	and	r24, r24
    1aa8:	b1 f4       	brne	.+44     	; 0x1ad6 <KEYPAD_getPressedKey+0xbe>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1aaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aac:	88 2f       	mov	r24, r24
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	98 2f       	mov	r25, r24
    1aba:	88 89       	ldd	r24, Y+16	; 0x10
    1abc:	89 0f       	add	r24, r25
    1abe:	8f 5f       	subi	r24, 0xFF	; 255
    1ac0:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1ac4:	60 96       	adiw	r28, 0x10	; 16
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1ad6:	88 89       	ldd	r24, Y+16	; 0x10
    1ad8:	8f 5f       	subi	r24, 0xFF	; 255
    1ada:	88 8b       	std	Y+16, r24	; 0x10
    1adc:	88 89       	ldd	r24, Y+16	; 0x10
    1ade:	84 30       	cpi	r24, 0x04	; 4
    1ae0:	d8 f2       	brcs	.-74     	; 0x1a98 <KEYPAD_getPressedKey+0x80>
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	a0 e2       	ldi	r26, 0x20	; 32
    1af2:	b1 e4       	ldi	r27, 0x41	; 65
    1af4:	8b 87       	std	Y+11, r24	; 0x0b
    1af6:	9c 87       	std	Y+12, r25	; 0x0c
    1af8:	ad 87       	std	Y+13, r26	; 0x0d
    1afa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	4a ef       	ldi	r20, 0xFA	; 250
    1b0a:	54 e4       	ldi	r21, 0x44	; 68
    1b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	8f 83       	std	Y+7, r24	; 0x07
    1b16:	98 87       	std	Y+8, r25	; 0x08
    1b18:	a9 87       	std	Y+9, r26	; 0x09
    1b1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1e:	78 85       	ldd	r23, Y+8	; 0x08
    1b20:	89 85       	ldd	r24, Y+9	; 0x09
    1b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e8       	ldi	r20, 0x80	; 128
    1b2a:	5f e3       	ldi	r21, 0x3F	; 63
    1b2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b30:	88 23       	and	r24, r24
    1b32:	2c f4       	brge	.+10     	; 0x1b3e <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	3f c0       	rjmp	.+126    	; 0x1bbc <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b40:	78 85       	ldd	r23, Y+8	; 0x08
    1b42:	89 85       	ldd	r24, Y+9	; 0x09
    1b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	3f ef       	ldi	r19, 0xFF	; 255
    1b4a:	4f e7       	ldi	r20, 0x7F	; 127
    1b4c:	57 e4       	ldi	r21, 0x47	; 71
    1b4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b52:	18 16       	cp	r1, r24
    1b54:	4c f5       	brge	.+82     	; 0x1ba8 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e2       	ldi	r20, 0x20	; 32
    1b64:	51 e4       	ldi	r21, 0x41	; 65
    1b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	bc 01       	movw	r22, r24
    1b70:	cd 01       	movw	r24, r26
    1b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9e 83       	std	Y+6, r25	; 0x06
    1b7c:	8d 83       	std	Y+5, r24	; 0x05
    1b7e:	0f c0       	rjmp	.+30     	; 0x1b9e <KEYPAD_getPressedKey+0x186>
    1b80:	88 ec       	ldi	r24, 0xC8	; 200
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	9c 83       	std	Y+4, r25	; 0x04
    1b86:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <KEYPAD_getPressedKey+0x174>
    1b90:	9c 83       	std	Y+4, r25	; 0x04
    1b92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b94:	8d 81       	ldd	r24, Y+5	; 0x05
    1b96:	9e 81       	ldd	r25, Y+6	; 0x06
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	69 f7       	brne	.-38     	; 0x1b80 <KEYPAD_getPressedKey+0x168>
    1ba6:	14 c0       	rjmp	.+40     	; 0x1bd0 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba8:	6f 81       	ldd	r22, Y+7	; 0x07
    1baa:	78 85       	ldd	r23, Y+8	; 0x08
    1bac:	89 85       	ldd	r24, Y+9	; 0x09
    1bae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	9e 83       	std	Y+6, r25	; 0x06
    1bba:	8d 83       	std	Y+5, r24	; 0x05
    1bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc0:	9a 83       	std	Y+2, r25	; 0x02
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <KEYPAD_getPressedKey+0x1b0>
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1bd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd2:	8f 5f       	subi	r24, 0xFF	; 255
    1bd4:	8f 87       	std	Y+15, r24	; 0x0f
    1bd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd8:	84 30       	cpi	r24, 0x04	; 4
    1bda:	08 f4       	brcc	.+2      	; 0x1bde <KEYPAD_getPressedKey+0x1c6>
    1bdc:	51 cf       	rjmp	.-350    	; 0x1a80 <KEYPAD_getPressedKey+0x68>
    1bde:	4e cf       	rjmp	.-356    	; 0x1a7c <KEYPAD_getPressedKey+0x64>

00001be0 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1bee:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	3c 83       	std	Y+4, r19	; 0x04
    1bf8:	2b 83       	std	Y+3, r18	; 0x03
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfe:	88 30       	cpi	r24, 0x08	; 8
    1c00:	91 05       	cpc	r25, r1
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1c04:	70 c0       	rjmp	.+224    	; 0x1ce6 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1c06:	2b 81       	ldd	r18, Y+3	; 0x03
    1c08:	3c 81       	ldd	r19, Y+4	; 0x04
    1c0a:	29 30       	cpi	r18, 0x09	; 9
    1c0c:	31 05       	cpc	r19, r1
    1c0e:	5c f5       	brge	.+86     	; 0x1c66 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	9c 81       	ldd	r25, Y+4	; 0x04
    1c14:	84 30       	cpi	r24, 0x04	; 4
    1c16:	91 05       	cpc	r25, r1
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1c1a:	59 c0       	rjmp	.+178    	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0xee>
    1c1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c20:	25 30       	cpi	r18, 0x05	; 5
    1c22:	31 05       	cpc	r19, r1
    1c24:	9c f4       	brge	.+38     	; 0x1c4c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2a:	82 30       	cpi	r24, 0x02	; 2
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1c30:	48 c0       	rjmp	.+144    	; 0x1cc2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1c32:	2b 81       	ldd	r18, Y+3	; 0x03
    1c34:	3c 81       	ldd	r19, Y+4	; 0x04
    1c36:	23 30       	cpi	r18, 0x03	; 3
    1c38:	31 05       	cpc	r19, r1
    1c3a:	0c f0       	brlt	.+2      	; 0x1c3e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1c3c:	45 c0       	rjmp	.+138    	; 0x1cc8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	9c 81       	ldd	r25, Y+4	; 0x04
    1c42:	81 30       	cpi	r24, 0x01	; 1
    1c44:	91 05       	cpc	r25, r1
    1c46:	09 f4       	brne	.+2      	; 0x1c4a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1c48:	39 c0       	rjmp	.+114    	; 0x1cbc <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1c4a:	67 c0       	rjmp	.+206    	; 0x1d1a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1c4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c50:	26 30       	cpi	r18, 0x06	; 6
    1c52:	31 05       	cpc	r19, r1
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1c56:	41 c0       	rjmp	.+130    	; 0x1cda <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	87 30       	cpi	r24, 0x07	; 7
    1c5e:	91 05       	cpc	r25, r1
    1c60:	0c f0       	brlt	.+2      	; 0x1c64 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1c62:	3e c0       	rjmp	.+124    	; 0x1ce0 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1c64:	37 c0       	rjmp	.+110    	; 0x1cd4 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1c66:	2b 81       	ldd	r18, Y+3	; 0x03
    1c68:	3c 81       	ldd	r19, Y+4	; 0x04
    1c6a:	2c 30       	cpi	r18, 0x0C	; 12
    1c6c:	31 05       	cpc	r19, r1
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1c70:	46 c0       	rjmp	.+140    	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	9c 81       	ldd	r25, Y+4	; 0x04
    1c76:	8d 30       	cpi	r24, 0x0D	; 13
    1c78:	91 05       	cpc	r25, r1
    1c7a:	5c f4       	brge	.+22     	; 0x1c92 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1c7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c80:	2a 30       	cpi	r18, 0x0A	; 10
    1c82:	31 05       	cpc	r19, r1
    1c84:	b1 f1       	breq	.+108    	; 0x1cf2 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8a:	8b 30       	cpi	r24, 0x0B	; 11
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	a4 f5       	brge	.+104    	; 0x1cf8 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1c90:	2d c0       	rjmp	.+90     	; 0x1cec <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1c92:	2b 81       	ldd	r18, Y+3	; 0x03
    1c94:	3c 81       	ldd	r19, Y+4	; 0x04
    1c96:	2e 30       	cpi	r18, 0x0E	; 14
    1c98:	31 05       	cpc	r19, r1
    1c9a:	b9 f1       	breq	.+110    	; 0x1d0a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca0:	8e 30       	cpi	r24, 0x0E	; 14
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	7c f1       	brlt	.+94     	; 0x1d04 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1ca6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca8:	3c 81       	ldd	r19, Y+4	; 0x04
    1caa:	2f 30       	cpi	r18, 0x0F	; 15
    1cac:	31 05       	cpc	r19, r1
    1cae:	79 f1       	breq	.+94     	; 0x1d0e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb4:	80 31       	cpi	r24, 0x10	; 16
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	69 f1       	breq	.+90     	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1cba:	2f c0       	rjmp	.+94     	; 0x1d1a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1cbc:	87 e0       	ldi	r24, 0x07	; 7
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	2e c0       	rjmp	.+92     	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1cc2:	88 e0       	ldi	r24, 0x08	; 8
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	2b c0       	rjmp	.+86     	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1cc8:	89 e0       	ldi	r24, 0x09	; 9
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	28 c0       	rjmp	.+80     	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1cce:	85 e2       	ldi	r24, 0x25	; 37
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	25 c0       	rjmp	.+74     	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1cd4:	84 e0       	ldi	r24, 0x04	; 4
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	22 c0       	rjmp	.+68     	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1cda:	85 e0       	ldi	r24, 0x05	; 5
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	1f c0       	rjmp	.+62     	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1ce0:	86 e0       	ldi	r24, 0x06	; 6
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	1c c0       	rjmp	.+56     	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1ce6:	8a e2       	ldi	r24, 0x2A	; 42
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	19 c0       	rjmp	.+50     	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	16 c0       	rjmp	.+44     	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1cf2:	82 e0       	ldi	r24, 0x02	; 2
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	13 c0       	rjmp	.+38     	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1cf8:	83 e0       	ldi	r24, 0x03	; 3
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	10 c0       	rjmp	.+32     	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1cfe:	8d e2       	ldi	r24, 0x2D	; 45
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	0d c0       	rjmp	.+26     	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1d04:	8d e0       	ldi	r24, 0x0D	; 13
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	0a c0       	rjmp	.+20     	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1d0a:	19 82       	std	Y+1, r1	; 0x01
    1d0c:	08 c0       	rjmp	.+16     	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1d0e:	8d e3       	ldi	r24, 0x3D	; 61
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	05 c0       	rjmp	.+10     	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1d14:	8b e2       	ldi	r24, 0x2B	; 43
    1d16:	89 83       	std	Y+1, r24	; 0x01
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	2e 97       	sbiw	r28, 0x0e	; 14
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1d42:	82 e0       	ldi	r24, 0x02	; 2
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	41 e0       	ldi	r20, 0x01	; 1
    1d48:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
    1d4e:	61 e0       	ldi	r22, 0x01	; 1
    1d50:	41 e0       	ldi	r20, 0x01	; 1
    1d52:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	a0 ea       	ldi	r26, 0xA0	; 160
    1d5c:	b1 e4       	ldi	r27, 0x41	; 65
    1d5e:	8b 87       	std	Y+11, r24	; 0x0b
    1d60:	9c 87       	std	Y+12, r25	; 0x0c
    1d62:	ad 87       	std	Y+13, r26	; 0x0d
    1d64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	4a ef       	ldi	r20, 0xFA	; 250
    1d74:	54 e4       	ldi	r21, 0x44	; 68
    1d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	8f 83       	std	Y+7, r24	; 0x07
    1d80:	98 87       	std	Y+8, r25	; 0x08
    1d82:	a9 87       	std	Y+9, r26	; 0x09
    1d84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d86:	6f 81       	ldd	r22, Y+7	; 0x07
    1d88:	78 85       	ldd	r23, Y+8	; 0x08
    1d8a:	89 85       	ldd	r24, Y+9	; 0x09
    1d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e8       	ldi	r20, 0x80	; 128
    1d94:	5f e3       	ldi	r21, 0x3F	; 63
    1d96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d9a:	88 23       	and	r24, r24
    1d9c:	2c f4       	brge	.+10     	; 0x1da8 <LCD_init+0x7a>
		__ticks = 1;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	9e 83       	std	Y+6, r25	; 0x06
    1da4:	8d 83       	std	Y+5, r24	; 0x05
    1da6:	3f c0       	rjmp	.+126    	; 0x1e26 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1da8:	6f 81       	ldd	r22, Y+7	; 0x07
    1daa:	78 85       	ldd	r23, Y+8	; 0x08
    1dac:	89 85       	ldd	r24, Y+9	; 0x09
    1dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	3f ef       	ldi	r19, 0xFF	; 255
    1db4:	4f e7       	ldi	r20, 0x7F	; 127
    1db6:	57 e4       	ldi	r21, 0x47	; 71
    1db8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dbc:	18 16       	cp	r1, r24
    1dbe:	4c f5       	brge	.+82     	; 0x1e12 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e2       	ldi	r20, 0x20	; 32
    1dce:	51 e4       	ldi	r21, 0x41	; 65
    1dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	bc 01       	movw	r22, r24
    1dda:	cd 01       	movw	r24, r26
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	9e 83       	std	Y+6, r25	; 0x06
    1de6:	8d 83       	std	Y+5, r24	; 0x05
    1de8:	0f c0       	rjmp	.+30     	; 0x1e08 <LCD_init+0xda>
    1dea:	88 ec       	ldi	r24, 0xC8	; 200
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9c 83       	std	Y+4, r25	; 0x04
    1df0:	8b 83       	std	Y+3, r24	; 0x03
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	9c 81       	ldd	r25, Y+4	; 0x04
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <LCD_init+0xc8>
    1dfa:	9c 83       	std	Y+4, r25	; 0x04
    1dfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1e00:	9e 81       	ldd	r25, Y+6	; 0x06
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	9e 83       	std	Y+6, r25	; 0x06
    1e06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e08:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	69 f7       	brne	.-38     	; 0x1dea <LCD_init+0xbc>
    1e10:	14 c0       	rjmp	.+40     	; 0x1e3a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e12:	6f 81       	ldd	r22, Y+7	; 0x07
    1e14:	78 85       	ldd	r23, Y+8	; 0x08
    1e16:	89 85       	ldd	r24, Y+9	; 0x09
    1e18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	9e 83       	std	Y+6, r25	; 0x06
    1e24:	8d 83       	std	Y+5, r24	; 0x05
    1e26:	8d 81       	ldd	r24, Y+5	; 0x05
    1e28:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2a:	9a 83       	std	Y+2, r25	; 0x02
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	9a 81       	ldd	r25, Y+2	; 0x02
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <LCD_init+0x104>
    1e36:	9a 83       	std	Y+2, r25	; 0x02
    1e38:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	6f ef       	ldi	r22, 0xFF	; 255
    1e3e:	0e 94 14 0b 	call	0x1628	; 0x1628 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1e42:	88 e3       	ldi	r24, 0x38	; 56
    1e44:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1e48:	8c e0       	ldi	r24, 0x0C	; 12
    1e4a:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <LCD_sendCommand>
}
    1e54:	2e 96       	adiw	r28, 0x0e	; 14
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	e9 97       	sbiw	r28, 0x39	; 57
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1e7c:	82 e0       	ldi	r24, 0x02	; 2
    1e7e:	60 e0       	ldi	r22, 0x00	; 0
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	a0 e8       	ldi	r26, 0x80	; 128
    1e8c:	bf e3       	ldi	r27, 0x3F	; 63
    1e8e:	8d ab       	std	Y+53, r24	; 0x35
    1e90:	9e ab       	std	Y+54, r25	; 0x36
    1e92:	af ab       	std	Y+55, r26	; 0x37
    1e94:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e96:	6d a9       	ldd	r22, Y+53	; 0x35
    1e98:	7e a9       	ldd	r23, Y+54	; 0x36
    1e9a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e9c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	4a ef       	ldi	r20, 0xFA	; 250
    1ea4:	54 e4       	ldi	r21, 0x44	; 68
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	89 ab       	std	Y+49, r24	; 0x31
    1eb0:	9a ab       	std	Y+50, r25	; 0x32
    1eb2:	ab ab       	std	Y+51, r26	; 0x33
    1eb4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1eb6:	69 a9       	ldd	r22, Y+49	; 0x31
    1eb8:	7a a9       	ldd	r23, Y+50	; 0x32
    1eba:	8b a9       	ldd	r24, Y+51	; 0x33
    1ebc:	9c a9       	ldd	r25, Y+52	; 0x34
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e8       	ldi	r20, 0x80	; 128
    1ec4:	5f e3       	ldi	r21, 0x3F	; 63
    1ec6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eca:	88 23       	and	r24, r24
    1ecc:	2c f4       	brge	.+10     	; 0x1ed8 <LCD_sendCommand+0x72>
		__ticks = 1;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	98 ab       	std	Y+48, r25	; 0x30
    1ed4:	8f a7       	std	Y+47, r24	; 0x2f
    1ed6:	3f c0       	rjmp	.+126    	; 0x1f56 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1ed8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eda:	7a a9       	ldd	r23, Y+50	; 0x32
    1edc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ede:	9c a9       	ldd	r25, Y+52	; 0x34
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	3f ef       	ldi	r19, 0xFF	; 255
    1ee4:	4f e7       	ldi	r20, 0x7F	; 127
    1ee6:	57 e4       	ldi	r21, 0x47	; 71
    1ee8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eec:	18 16       	cp	r1, r24
    1eee:	4c f5       	brge	.+82     	; 0x1f42 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ef2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ef4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ef6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e2       	ldi	r20, 0x20	; 32
    1efe:	51 e4       	ldi	r21, 0x41	; 65
    1f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	bc 01       	movw	r22, r24
    1f0a:	cd 01       	movw	r24, r26
    1f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	98 ab       	std	Y+48, r25	; 0x30
    1f16:	8f a7       	std	Y+47, r24	; 0x2f
    1f18:	0f c0       	rjmp	.+30     	; 0x1f38 <LCD_sendCommand+0xd2>
    1f1a:	88 ec       	ldi	r24, 0xC8	; 200
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	9e a7       	std	Y+46, r25	; 0x2e
    1f20:	8d a7       	std	Y+45, r24	; 0x2d
    1f22:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f24:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	f1 f7       	brne	.-4      	; 0x1f26 <LCD_sendCommand+0xc0>
    1f2a:	9e a7       	std	Y+46, r25	; 0x2e
    1f2c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f30:	98 a9       	ldd	r25, Y+48	; 0x30
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	98 ab       	std	Y+48, r25	; 0x30
    1f36:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f38:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f3a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	69 f7       	brne	.-38     	; 0x1f1a <LCD_sendCommand+0xb4>
    1f40:	14 c0       	rjmp	.+40     	; 0x1f6a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f42:	69 a9       	ldd	r22, Y+49	; 0x31
    1f44:	7a a9       	ldd	r23, Y+50	; 0x32
    1f46:	8b a9       	ldd	r24, Y+51	; 0x33
    1f48:	9c a9       	ldd	r25, Y+52	; 0x34
    1f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	98 ab       	std	Y+48, r25	; 0x30
    1f54:	8f a7       	std	Y+47, r24	; 0x2f
    1f56:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f58:	98 a9       	ldd	r25, Y+48	; 0x30
    1f5a:	9c a7       	std	Y+44, r25	; 0x2c
    1f5c:	8b a7       	std	Y+43, r24	; 0x2b
    1f5e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f60:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <LCD_sendCommand+0xfc>
    1f66:	9c a7       	std	Y+44, r25	; 0x2c
    1f68:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f6a:	82 e0       	ldi	r24, 0x02	; 2
    1f6c:	61 e0       	ldi	r22, 0x01	; 1
    1f6e:	41 e0       	ldi	r20, 0x01	; 1
    1f70:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	a0 e8       	ldi	r26, 0x80	; 128
    1f7a:	bf e3       	ldi	r27, 0x3F	; 63
    1f7c:	8f a3       	std	Y+39, r24	; 0x27
    1f7e:	98 a7       	std	Y+40, r25	; 0x28
    1f80:	a9 a7       	std	Y+41, r26	; 0x29
    1f82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f84:	6f a1       	ldd	r22, Y+39	; 0x27
    1f86:	78 a5       	ldd	r23, Y+40	; 0x28
    1f88:	89 a5       	ldd	r24, Y+41	; 0x29
    1f8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	4a ef       	ldi	r20, 0xFA	; 250
    1f92:	54 e4       	ldi	r21, 0x44	; 68
    1f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	8b a3       	std	Y+35, r24	; 0x23
    1f9e:	9c a3       	std	Y+36, r25	; 0x24
    1fa0:	ad a3       	std	Y+37, r26	; 0x25
    1fa2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fa4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa8:	8d a1       	ldd	r24, Y+37	; 0x25
    1faa:	9e a1       	ldd	r25, Y+38	; 0x26
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e8       	ldi	r20, 0x80	; 128
    1fb2:	5f e3       	ldi	r21, 0x3F	; 63
    1fb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fb8:	88 23       	and	r24, r24
    1fba:	2c f4       	brge	.+10     	; 0x1fc6 <LCD_sendCommand+0x160>
		__ticks = 1;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	9a a3       	std	Y+34, r25	; 0x22
    1fc2:	89 a3       	std	Y+33, r24	; 0x21
    1fc4:	3f c0       	rjmp	.+126    	; 0x2044 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1fc6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc8:	7c a1       	ldd	r23, Y+36	; 0x24
    1fca:	8d a1       	ldd	r24, Y+37	; 0x25
    1fcc:	9e a1       	ldd	r25, Y+38	; 0x26
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	3f ef       	ldi	r19, 0xFF	; 255
    1fd2:	4f e7       	ldi	r20, 0x7F	; 127
    1fd4:	57 e4       	ldi	r21, 0x47	; 71
    1fd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fda:	18 16       	cp	r1, r24
    1fdc:	4c f5       	brge	.+82     	; 0x2030 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fde:	6f a1       	ldd	r22, Y+39	; 0x27
    1fe0:	78 a5       	ldd	r23, Y+40	; 0x28
    1fe2:	89 a5       	ldd	r24, Y+41	; 0x29
    1fe4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e2       	ldi	r20, 0x20	; 32
    1fec:	51 e4       	ldi	r21, 0x41	; 65
    1fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	bc 01       	movw	r22, r24
    1ff8:	cd 01       	movw	r24, r26
    1ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	9a a3       	std	Y+34, r25	; 0x22
    2004:	89 a3       	std	Y+33, r24	; 0x21
    2006:	0f c0       	rjmp	.+30     	; 0x2026 <LCD_sendCommand+0x1c0>
    2008:	88 ec       	ldi	r24, 0xC8	; 200
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	98 a3       	std	Y+32, r25	; 0x20
    200e:	8f 8f       	std	Y+31, r24	; 0x1f
    2010:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2012:	98 a1       	ldd	r25, Y+32	; 0x20
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <LCD_sendCommand+0x1ae>
    2018:	98 a3       	std	Y+32, r25	; 0x20
    201a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201c:	89 a1       	ldd	r24, Y+33	; 0x21
    201e:	9a a1       	ldd	r25, Y+34	; 0x22
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	9a a3       	std	Y+34, r25	; 0x22
    2024:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2026:	89 a1       	ldd	r24, Y+33	; 0x21
    2028:	9a a1       	ldd	r25, Y+34	; 0x22
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	69 f7       	brne	.-38     	; 0x2008 <LCD_sendCommand+0x1a2>
    202e:	14 c0       	rjmp	.+40     	; 0x2058 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2030:	6b a1       	ldd	r22, Y+35	; 0x23
    2032:	7c a1       	ldd	r23, Y+36	; 0x24
    2034:	8d a1       	ldd	r24, Y+37	; 0x25
    2036:	9e a1       	ldd	r25, Y+38	; 0x26
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9a a3       	std	Y+34, r25	; 0x22
    2042:	89 a3       	std	Y+33, r24	; 0x21
    2044:	89 a1       	ldd	r24, Y+33	; 0x21
    2046:	9a a1       	ldd	r25, Y+34	; 0x22
    2048:	9e 8f       	std	Y+30, r25	; 0x1e
    204a:	8d 8f       	std	Y+29, r24	; 0x1d
    204c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    204e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <LCD_sendCommand+0x1ea>
    2054:	9e 8f       	std	Y+30, r25	; 0x1e
    2056:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	69 ad       	ldd	r22, Y+57	; 0x39
    205c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <GPIO_writePort>
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	a0 e8       	ldi	r26, 0x80	; 128
    2066:	bf e3       	ldi	r27, 0x3F	; 63
    2068:	89 8f       	std	Y+25, r24	; 0x19
    206a:	9a 8f       	std	Y+26, r25	; 0x1a
    206c:	ab 8f       	std	Y+27, r26	; 0x1b
    206e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2070:	69 8d       	ldd	r22, Y+25	; 0x19
    2072:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2074:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2076:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	4a ef       	ldi	r20, 0xFA	; 250
    207e:	54 e4       	ldi	r21, 0x44	; 68
    2080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	8d 8b       	std	Y+21, r24	; 0x15
    208a:	9e 8b       	std	Y+22, r25	; 0x16
    208c:	af 8b       	std	Y+23, r26	; 0x17
    208e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2090:	6d 89       	ldd	r22, Y+21	; 0x15
    2092:	7e 89       	ldd	r23, Y+22	; 0x16
    2094:	8f 89       	ldd	r24, Y+23	; 0x17
    2096:	98 8d       	ldd	r25, Y+24	; 0x18
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e8       	ldi	r20, 0x80	; 128
    209e:	5f e3       	ldi	r21, 0x3F	; 63
    20a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20a4:	88 23       	and	r24, r24
    20a6:	2c f4       	brge	.+10     	; 0x20b2 <LCD_sendCommand+0x24c>
		__ticks = 1;
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	9c 8b       	std	Y+20, r25	; 0x14
    20ae:	8b 8b       	std	Y+19, r24	; 0x13
    20b0:	3f c0       	rjmp	.+126    	; 0x2130 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    20b2:	6d 89       	ldd	r22, Y+21	; 0x15
    20b4:	7e 89       	ldd	r23, Y+22	; 0x16
    20b6:	8f 89       	ldd	r24, Y+23	; 0x17
    20b8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	3f ef       	ldi	r19, 0xFF	; 255
    20be:	4f e7       	ldi	r20, 0x7F	; 127
    20c0:	57 e4       	ldi	r21, 0x47	; 71
    20c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20c6:	18 16       	cp	r1, r24
    20c8:	4c f5       	brge	.+82     	; 0x211c <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ca:	69 8d       	ldd	r22, Y+25	; 0x19
    20cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e2       	ldi	r20, 0x20	; 32
    20d8:	51 e4       	ldi	r21, 0x41	; 65
    20da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	bc 01       	movw	r22, r24
    20e4:	cd 01       	movw	r24, r26
    20e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	9c 8b       	std	Y+20, r25	; 0x14
    20f0:	8b 8b       	std	Y+19, r24	; 0x13
    20f2:	0f c0       	rjmp	.+30     	; 0x2112 <LCD_sendCommand+0x2ac>
    20f4:	88 ec       	ldi	r24, 0xC8	; 200
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9a 8b       	std	Y+18, r25	; 0x12
    20fa:	89 8b       	std	Y+17, r24	; 0x11
    20fc:	89 89       	ldd	r24, Y+17	; 0x11
    20fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <LCD_sendCommand+0x29a>
    2104:	9a 8b       	std	Y+18, r25	; 0x12
    2106:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2108:	8b 89       	ldd	r24, Y+19	; 0x13
    210a:	9c 89       	ldd	r25, Y+20	; 0x14
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	9c 8b       	std	Y+20, r25	; 0x14
    2110:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2112:	8b 89       	ldd	r24, Y+19	; 0x13
    2114:	9c 89       	ldd	r25, Y+20	; 0x14
    2116:	00 97       	sbiw	r24, 0x00	; 0
    2118:	69 f7       	brne	.-38     	; 0x20f4 <LCD_sendCommand+0x28e>
    211a:	14 c0       	rjmp	.+40     	; 0x2144 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211c:	6d 89       	ldd	r22, Y+21	; 0x15
    211e:	7e 89       	ldd	r23, Y+22	; 0x16
    2120:	8f 89       	ldd	r24, Y+23	; 0x17
    2122:	98 8d       	ldd	r25, Y+24	; 0x18
    2124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	9c 8b       	std	Y+20, r25	; 0x14
    212e:	8b 8b       	std	Y+19, r24	; 0x13
    2130:	8b 89       	ldd	r24, Y+19	; 0x13
    2132:	9c 89       	ldd	r25, Y+20	; 0x14
    2134:	98 8b       	std	Y+16, r25	; 0x10
    2136:	8f 87       	std	Y+15, r24	; 0x0f
    2138:	8f 85       	ldd	r24, Y+15	; 0x0f
    213a:	98 89       	ldd	r25, Y+16	; 0x10
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <LCD_sendCommand+0x2d6>
    2140:	98 8b       	std	Y+16, r25	; 0x10
    2142:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2144:	82 e0       	ldi	r24, 0x02	; 2
    2146:	61 e0       	ldi	r22, 0x01	; 1
    2148:	40 e0       	ldi	r20, 0x00	; 0
    214a:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	a0 e8       	ldi	r26, 0x80	; 128
    2154:	bf e3       	ldi	r27, 0x3F	; 63
    2156:	8b 87       	std	Y+11, r24	; 0x0b
    2158:	9c 87       	std	Y+12, r25	; 0x0c
    215a:	ad 87       	std	Y+13, r26	; 0x0d
    215c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2160:	7c 85       	ldd	r23, Y+12	; 0x0c
    2162:	8d 85       	ldd	r24, Y+13	; 0x0d
    2164:	9e 85       	ldd	r25, Y+14	; 0x0e
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	4a ef       	ldi	r20, 0xFA	; 250
    216c:	54 e4       	ldi	r21, 0x44	; 68
    216e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	8f 83       	std	Y+7, r24	; 0x07
    2178:	98 87       	std	Y+8, r25	; 0x08
    217a:	a9 87       	std	Y+9, r26	; 0x09
    217c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    217e:	6f 81       	ldd	r22, Y+7	; 0x07
    2180:	78 85       	ldd	r23, Y+8	; 0x08
    2182:	89 85       	ldd	r24, Y+9	; 0x09
    2184:	9a 85       	ldd	r25, Y+10	; 0x0a
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e8       	ldi	r20, 0x80	; 128
    218c:	5f e3       	ldi	r21, 0x3F	; 63
    218e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2192:	88 23       	and	r24, r24
    2194:	2c f4       	brge	.+10     	; 0x21a0 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	9e 83       	std	Y+6, r25	; 0x06
    219c:	8d 83       	std	Y+5, r24	; 0x05
    219e:	3f c0       	rjmp	.+126    	; 0x221e <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    21a0:	6f 81       	ldd	r22, Y+7	; 0x07
    21a2:	78 85       	ldd	r23, Y+8	; 0x08
    21a4:	89 85       	ldd	r24, Y+9	; 0x09
    21a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	3f ef       	ldi	r19, 0xFF	; 255
    21ac:	4f e7       	ldi	r20, 0x7F	; 127
    21ae:	57 e4       	ldi	r21, 0x47	; 71
    21b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b4:	18 16       	cp	r1, r24
    21b6:	4c f5       	brge	.+82     	; 0x220a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    21bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21be:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e2       	ldi	r20, 0x20	; 32
    21c6:	51 e4       	ldi	r21, 0x41	; 65
    21c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	bc 01       	movw	r22, r24
    21d2:	cd 01       	movw	r24, r26
    21d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	9e 83       	std	Y+6, r25	; 0x06
    21de:	8d 83       	std	Y+5, r24	; 0x05
    21e0:	0f c0       	rjmp	.+30     	; 0x2200 <LCD_sendCommand+0x39a>
    21e2:	88 ec       	ldi	r24, 0xC8	; 200
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	9c 83       	std	Y+4, r25	; 0x04
    21e8:	8b 83       	std	Y+3, r24	; 0x03
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	9c 81       	ldd	r25, Y+4	; 0x04
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <LCD_sendCommand+0x388>
    21f2:	9c 83       	std	Y+4, r25	; 0x04
    21f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f6:	8d 81       	ldd	r24, Y+5	; 0x05
    21f8:	9e 81       	ldd	r25, Y+6	; 0x06
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	9e 83       	std	Y+6, r25	; 0x06
    21fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2200:	8d 81       	ldd	r24, Y+5	; 0x05
    2202:	9e 81       	ldd	r25, Y+6	; 0x06
    2204:	00 97       	sbiw	r24, 0x00	; 0
    2206:	69 f7       	brne	.-38     	; 0x21e2 <LCD_sendCommand+0x37c>
    2208:	14 c0       	rjmp	.+40     	; 0x2232 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220a:	6f 81       	ldd	r22, Y+7	; 0x07
    220c:	78 85       	ldd	r23, Y+8	; 0x08
    220e:	89 85       	ldd	r24, Y+9	; 0x09
    2210:	9a 85       	ldd	r25, Y+10	; 0x0a
    2212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
    221e:	8d 81       	ldd	r24, Y+5	; 0x05
    2220:	9e 81       	ldd	r25, Y+6	; 0x06
    2222:	9a 83       	std	Y+2, r25	; 0x02
    2224:	89 83       	std	Y+1, r24	; 0x01
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	9a 81       	ldd	r25, Y+2	; 0x02
    222a:	01 97       	sbiw	r24, 0x01	; 1
    222c:	f1 f7       	brne	.-4      	; 0x222a <LCD_sendCommand+0x3c4>
    222e:	9a 83       	std	Y+2, r25	; 0x02
    2230:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2232:	e9 96       	adiw	r28, 0x39	; 57
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	e9 97       	sbiw	r28, 0x39	; 57
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    225a:	82 e0       	ldi	r24, 0x02	; 2
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	41 e0       	ldi	r20, 0x01	; 1
    2260:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	a0 e8       	ldi	r26, 0x80	; 128
    226a:	bf e3       	ldi	r27, 0x3F	; 63
    226c:	8d ab       	std	Y+53, r24	; 0x35
    226e:	9e ab       	std	Y+54, r25	; 0x36
    2270:	af ab       	std	Y+55, r26	; 0x37
    2272:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2274:	6d a9       	ldd	r22, Y+53	; 0x35
    2276:	7e a9       	ldd	r23, Y+54	; 0x36
    2278:	8f a9       	ldd	r24, Y+55	; 0x37
    227a:	98 ad       	ldd	r25, Y+56	; 0x38
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	4a ef       	ldi	r20, 0xFA	; 250
    2282:	54 e4       	ldi	r21, 0x44	; 68
    2284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	89 ab       	std	Y+49, r24	; 0x31
    228e:	9a ab       	std	Y+50, r25	; 0x32
    2290:	ab ab       	std	Y+51, r26	; 0x33
    2292:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2294:	69 a9       	ldd	r22, Y+49	; 0x31
    2296:	7a a9       	ldd	r23, Y+50	; 0x32
    2298:	8b a9       	ldd	r24, Y+51	; 0x33
    229a:	9c a9       	ldd	r25, Y+52	; 0x34
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e8       	ldi	r20, 0x80	; 128
    22a2:	5f e3       	ldi	r21, 0x3F	; 63
    22a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a8:	88 23       	and	r24, r24
    22aa:	2c f4       	brge	.+10     	; 0x22b6 <LCD_displayCharacter+0x72>
		__ticks = 1;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	98 ab       	std	Y+48, r25	; 0x30
    22b2:	8f a7       	std	Y+47, r24	; 0x2f
    22b4:	3f c0       	rjmp	.+126    	; 0x2334 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    22b6:	69 a9       	ldd	r22, Y+49	; 0x31
    22b8:	7a a9       	ldd	r23, Y+50	; 0x32
    22ba:	8b a9       	ldd	r24, Y+51	; 0x33
    22bc:	9c a9       	ldd	r25, Y+52	; 0x34
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	3f ef       	ldi	r19, 0xFF	; 255
    22c2:	4f e7       	ldi	r20, 0x7F	; 127
    22c4:	57 e4       	ldi	r21, 0x47	; 71
    22c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ca:	18 16       	cp	r1, r24
    22cc:	4c f5       	brge	.+82     	; 0x2320 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ce:	6d a9       	ldd	r22, Y+53	; 0x35
    22d0:	7e a9       	ldd	r23, Y+54	; 0x36
    22d2:	8f a9       	ldd	r24, Y+55	; 0x37
    22d4:	98 ad       	ldd	r25, Y+56	; 0x38
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e2       	ldi	r20, 0x20	; 32
    22dc:	51 e4       	ldi	r21, 0x41	; 65
    22de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	98 ab       	std	Y+48, r25	; 0x30
    22f4:	8f a7       	std	Y+47, r24	; 0x2f
    22f6:	0f c0       	rjmp	.+30     	; 0x2316 <LCD_displayCharacter+0xd2>
    22f8:	88 ec       	ldi	r24, 0xC8	; 200
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9e a7       	std	Y+46, r25	; 0x2e
    22fe:	8d a7       	std	Y+45, r24	; 0x2d
    2300:	8d a5       	ldd	r24, Y+45	; 0x2d
    2302:	9e a5       	ldd	r25, Y+46	; 0x2e
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <LCD_displayCharacter+0xc0>
    2308:	9e a7       	std	Y+46, r25	; 0x2e
    230a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230c:	8f a5       	ldd	r24, Y+47	; 0x2f
    230e:	98 a9       	ldd	r25, Y+48	; 0x30
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	98 ab       	std	Y+48, r25	; 0x30
    2314:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2316:	8f a5       	ldd	r24, Y+47	; 0x2f
    2318:	98 a9       	ldd	r25, Y+48	; 0x30
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	69 f7       	brne	.-38     	; 0x22f8 <LCD_displayCharacter+0xb4>
    231e:	14 c0       	rjmp	.+40     	; 0x2348 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2320:	69 a9       	ldd	r22, Y+49	; 0x31
    2322:	7a a9       	ldd	r23, Y+50	; 0x32
    2324:	8b a9       	ldd	r24, Y+51	; 0x33
    2326:	9c a9       	ldd	r25, Y+52	; 0x34
    2328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	98 ab       	std	Y+48, r25	; 0x30
    2332:	8f a7       	std	Y+47, r24	; 0x2f
    2334:	8f a5       	ldd	r24, Y+47	; 0x2f
    2336:	98 a9       	ldd	r25, Y+48	; 0x30
    2338:	9c a7       	std	Y+44, r25	; 0x2c
    233a:	8b a7       	std	Y+43, r24	; 0x2b
    233c:	8b a5       	ldd	r24, Y+43	; 0x2b
    233e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	f1 f7       	brne	.-4      	; 0x2340 <LCD_displayCharacter+0xfc>
    2344:	9c a7       	std	Y+44, r25	; 0x2c
    2346:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2348:	82 e0       	ldi	r24, 0x02	; 2
    234a:	61 e0       	ldi	r22, 0x01	; 1
    234c:	41 e0       	ldi	r20, 0x01	; 1
    234e:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	a0 e8       	ldi	r26, 0x80	; 128
    2358:	bf e3       	ldi	r27, 0x3F	; 63
    235a:	8f a3       	std	Y+39, r24	; 0x27
    235c:	98 a7       	std	Y+40, r25	; 0x28
    235e:	a9 a7       	std	Y+41, r26	; 0x29
    2360:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2362:	6f a1       	ldd	r22, Y+39	; 0x27
    2364:	78 a5       	ldd	r23, Y+40	; 0x28
    2366:	89 a5       	ldd	r24, Y+41	; 0x29
    2368:	9a a5       	ldd	r25, Y+42	; 0x2a
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	4a ef       	ldi	r20, 0xFA	; 250
    2370:	54 e4       	ldi	r21, 0x44	; 68
    2372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	8b a3       	std	Y+35, r24	; 0x23
    237c:	9c a3       	std	Y+36, r25	; 0x24
    237e:	ad a3       	std	Y+37, r26	; 0x25
    2380:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2382:	6b a1       	ldd	r22, Y+35	; 0x23
    2384:	7c a1       	ldd	r23, Y+36	; 0x24
    2386:	8d a1       	ldd	r24, Y+37	; 0x25
    2388:	9e a1       	ldd	r25, Y+38	; 0x26
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e8       	ldi	r20, 0x80	; 128
    2390:	5f e3       	ldi	r21, 0x3F	; 63
    2392:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2396:	88 23       	and	r24, r24
    2398:	2c f4       	brge	.+10     	; 0x23a4 <LCD_displayCharacter+0x160>
		__ticks = 1;
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9a a3       	std	Y+34, r25	; 0x22
    23a0:	89 a3       	std	Y+33, r24	; 0x21
    23a2:	3f c0       	rjmp	.+126    	; 0x2422 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    23a4:	6b a1       	ldd	r22, Y+35	; 0x23
    23a6:	7c a1       	ldd	r23, Y+36	; 0x24
    23a8:	8d a1       	ldd	r24, Y+37	; 0x25
    23aa:	9e a1       	ldd	r25, Y+38	; 0x26
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	3f ef       	ldi	r19, 0xFF	; 255
    23b0:	4f e7       	ldi	r20, 0x7F	; 127
    23b2:	57 e4       	ldi	r21, 0x47	; 71
    23b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b8:	18 16       	cp	r1, r24
    23ba:	4c f5       	brge	.+82     	; 0x240e <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23bc:	6f a1       	ldd	r22, Y+39	; 0x27
    23be:	78 a5       	ldd	r23, Y+40	; 0x28
    23c0:	89 a5       	ldd	r24, Y+41	; 0x29
    23c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e2       	ldi	r20, 0x20	; 32
    23ca:	51 e4       	ldi	r21, 0x41	; 65
    23cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	bc 01       	movw	r22, r24
    23d6:	cd 01       	movw	r24, r26
    23d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	9a a3       	std	Y+34, r25	; 0x22
    23e2:	89 a3       	std	Y+33, r24	; 0x21
    23e4:	0f c0       	rjmp	.+30     	; 0x2404 <LCD_displayCharacter+0x1c0>
    23e6:	88 ec       	ldi	r24, 0xC8	; 200
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	98 a3       	std	Y+32, r25	; 0x20
    23ec:	8f 8f       	std	Y+31, r24	; 0x1f
    23ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23f0:	98 a1       	ldd	r25, Y+32	; 0x20
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <LCD_displayCharacter+0x1ae>
    23f6:	98 a3       	std	Y+32, r25	; 0x20
    23f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fa:	89 a1       	ldd	r24, Y+33	; 0x21
    23fc:	9a a1       	ldd	r25, Y+34	; 0x22
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	9a a3       	std	Y+34, r25	; 0x22
    2402:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2404:	89 a1       	ldd	r24, Y+33	; 0x21
    2406:	9a a1       	ldd	r25, Y+34	; 0x22
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	69 f7       	brne	.-38     	; 0x23e6 <LCD_displayCharacter+0x1a2>
    240c:	14 c0       	rjmp	.+40     	; 0x2436 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240e:	6b a1       	ldd	r22, Y+35	; 0x23
    2410:	7c a1       	ldd	r23, Y+36	; 0x24
    2412:	8d a1       	ldd	r24, Y+37	; 0x25
    2414:	9e a1       	ldd	r25, Y+38	; 0x26
    2416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	9a a3       	std	Y+34, r25	; 0x22
    2420:	89 a3       	std	Y+33, r24	; 0x21
    2422:	89 a1       	ldd	r24, Y+33	; 0x21
    2424:	9a a1       	ldd	r25, Y+34	; 0x22
    2426:	9e 8f       	std	Y+30, r25	; 0x1e
    2428:	8d 8f       	std	Y+29, r24	; 0x1d
    242a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    242c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <LCD_displayCharacter+0x1ea>
    2432:	9e 8f       	std	Y+30, r25	; 0x1e
    2434:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	69 ad       	ldd	r22, Y+57	; 0x39
    243a:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <GPIO_writePort>
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	a0 e8       	ldi	r26, 0x80	; 128
    2444:	bf e3       	ldi	r27, 0x3F	; 63
    2446:	89 8f       	std	Y+25, r24	; 0x19
    2448:	9a 8f       	std	Y+26, r25	; 0x1a
    244a:	ab 8f       	std	Y+27, r26	; 0x1b
    244c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244e:	69 8d       	ldd	r22, Y+25	; 0x19
    2450:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2452:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2454:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	4a ef       	ldi	r20, 0xFA	; 250
    245c:	54 e4       	ldi	r21, 0x44	; 68
    245e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	8d 8b       	std	Y+21, r24	; 0x15
    2468:	9e 8b       	std	Y+22, r25	; 0x16
    246a:	af 8b       	std	Y+23, r26	; 0x17
    246c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    246e:	6d 89       	ldd	r22, Y+21	; 0x15
    2470:	7e 89       	ldd	r23, Y+22	; 0x16
    2472:	8f 89       	ldd	r24, Y+23	; 0x17
    2474:	98 8d       	ldd	r25, Y+24	; 0x18
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 e8       	ldi	r20, 0x80	; 128
    247c:	5f e3       	ldi	r21, 0x3F	; 63
    247e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2482:	88 23       	and	r24, r24
    2484:	2c f4       	brge	.+10     	; 0x2490 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	9c 8b       	std	Y+20, r25	; 0x14
    248c:	8b 8b       	std	Y+19, r24	; 0x13
    248e:	3f c0       	rjmp	.+126    	; 0x250e <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2490:	6d 89       	ldd	r22, Y+21	; 0x15
    2492:	7e 89       	ldd	r23, Y+22	; 0x16
    2494:	8f 89       	ldd	r24, Y+23	; 0x17
    2496:	98 8d       	ldd	r25, Y+24	; 0x18
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	3f ef       	ldi	r19, 0xFF	; 255
    249c:	4f e7       	ldi	r20, 0x7F	; 127
    249e:	57 e4       	ldi	r21, 0x47	; 71
    24a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24a4:	18 16       	cp	r1, r24
    24a6:	4c f5       	brge	.+82     	; 0x24fa <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a8:	69 8d       	ldd	r22, Y+25	; 0x19
    24aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e2       	ldi	r20, 0x20	; 32
    24b6:	51 e4       	ldi	r21, 0x41	; 65
    24b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	bc 01       	movw	r22, r24
    24c2:	cd 01       	movw	r24, r26
    24c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	9c 8b       	std	Y+20, r25	; 0x14
    24ce:	8b 8b       	std	Y+19, r24	; 0x13
    24d0:	0f c0       	rjmp	.+30     	; 0x24f0 <LCD_displayCharacter+0x2ac>
    24d2:	88 ec       	ldi	r24, 0xC8	; 200
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	9a 8b       	std	Y+18, r25	; 0x12
    24d8:	89 8b       	std	Y+17, r24	; 0x11
    24da:	89 89       	ldd	r24, Y+17	; 0x11
    24dc:	9a 89       	ldd	r25, Y+18	; 0x12
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	f1 f7       	brne	.-4      	; 0x24de <LCD_displayCharacter+0x29a>
    24e2:	9a 8b       	std	Y+18, r25	; 0x12
    24e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e6:	8b 89       	ldd	r24, Y+19	; 0x13
    24e8:	9c 89       	ldd	r25, Y+20	; 0x14
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	9c 8b       	std	Y+20, r25	; 0x14
    24ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f0:	8b 89       	ldd	r24, Y+19	; 0x13
    24f2:	9c 89       	ldd	r25, Y+20	; 0x14
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	69 f7       	brne	.-38     	; 0x24d2 <LCD_displayCharacter+0x28e>
    24f8:	14 c0       	rjmp	.+40     	; 0x2522 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fa:	6d 89       	ldd	r22, Y+21	; 0x15
    24fc:	7e 89       	ldd	r23, Y+22	; 0x16
    24fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2500:	98 8d       	ldd	r25, Y+24	; 0x18
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	9c 8b       	std	Y+20, r25	; 0x14
    250c:	8b 8b       	std	Y+19, r24	; 0x13
    250e:	8b 89       	ldd	r24, Y+19	; 0x13
    2510:	9c 89       	ldd	r25, Y+20	; 0x14
    2512:	98 8b       	std	Y+16, r25	; 0x10
    2514:	8f 87       	std	Y+15, r24	; 0x0f
    2516:	8f 85       	ldd	r24, Y+15	; 0x0f
    2518:	98 89       	ldd	r25, Y+16	; 0x10
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <LCD_displayCharacter+0x2d6>
    251e:	98 8b       	std	Y+16, r25	; 0x10
    2520:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2522:	82 e0       	ldi	r24, 0x02	; 2
    2524:	61 e0       	ldi	r22, 0x01	; 1
    2526:	40 e0       	ldi	r20, 0x00	; 0
    2528:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	a0 e8       	ldi	r26, 0x80	; 128
    2532:	bf e3       	ldi	r27, 0x3F	; 63
    2534:	8b 87       	std	Y+11, r24	; 0x0b
    2536:	9c 87       	std	Y+12, r25	; 0x0c
    2538:	ad 87       	std	Y+13, r26	; 0x0d
    253a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253c:	6b 85       	ldd	r22, Y+11	; 0x0b
    253e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2540:	8d 85       	ldd	r24, Y+13	; 0x0d
    2542:	9e 85       	ldd	r25, Y+14	; 0x0e
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	4a ef       	ldi	r20, 0xFA	; 250
    254a:	54 e4       	ldi	r21, 0x44	; 68
    254c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	8f 83       	std	Y+7, r24	; 0x07
    2556:	98 87       	std	Y+8, r25	; 0x08
    2558:	a9 87       	std	Y+9, r26	; 0x09
    255a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    255c:	6f 81       	ldd	r22, Y+7	; 0x07
    255e:	78 85       	ldd	r23, Y+8	; 0x08
    2560:	89 85       	ldd	r24, Y+9	; 0x09
    2562:	9a 85       	ldd	r25, Y+10	; 0x0a
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e8       	ldi	r20, 0x80	; 128
    256a:	5f e3       	ldi	r21, 0x3F	; 63
    256c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2570:	88 23       	and	r24, r24
    2572:	2c f4       	brge	.+10     	; 0x257e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	9e 83       	std	Y+6, r25	; 0x06
    257a:	8d 83       	std	Y+5, r24	; 0x05
    257c:	3f c0       	rjmp	.+126    	; 0x25fc <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    257e:	6f 81       	ldd	r22, Y+7	; 0x07
    2580:	78 85       	ldd	r23, Y+8	; 0x08
    2582:	89 85       	ldd	r24, Y+9	; 0x09
    2584:	9a 85       	ldd	r25, Y+10	; 0x0a
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	3f ef       	ldi	r19, 0xFF	; 255
    258a:	4f e7       	ldi	r20, 0x7F	; 127
    258c:	57 e4       	ldi	r21, 0x47	; 71
    258e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2592:	18 16       	cp	r1, r24
    2594:	4c f5       	brge	.+82     	; 0x25e8 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2596:	6b 85       	ldd	r22, Y+11	; 0x0b
    2598:	7c 85       	ldd	r23, Y+12	; 0x0c
    259a:	8d 85       	ldd	r24, Y+13	; 0x0d
    259c:	9e 85       	ldd	r25, Y+14	; 0x0e
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e2       	ldi	r20, 0x20	; 32
    25a4:	51 e4       	ldi	r21, 0x41	; 65
    25a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	bc 01       	movw	r22, r24
    25b0:	cd 01       	movw	r24, r26
    25b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	9e 83       	std	Y+6, r25	; 0x06
    25bc:	8d 83       	std	Y+5, r24	; 0x05
    25be:	0f c0       	rjmp	.+30     	; 0x25de <LCD_displayCharacter+0x39a>
    25c0:	88 ec       	ldi	r24, 0xC8	; 200
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	9c 83       	std	Y+4, r25	; 0x04
    25c6:	8b 83       	std	Y+3, r24	; 0x03
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	9c 81       	ldd	r25, Y+4	; 0x04
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <LCD_displayCharacter+0x388>
    25d0:	9c 83       	std	Y+4, r25	; 0x04
    25d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d4:	8d 81       	ldd	r24, Y+5	; 0x05
    25d6:	9e 81       	ldd	r25, Y+6	; 0x06
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	9e 83       	std	Y+6, r25	; 0x06
    25dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25de:	8d 81       	ldd	r24, Y+5	; 0x05
    25e0:	9e 81       	ldd	r25, Y+6	; 0x06
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	69 f7       	brne	.-38     	; 0x25c0 <LCD_displayCharacter+0x37c>
    25e6:	14 c0       	rjmp	.+40     	; 0x2610 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ea:	78 85       	ldd	r23, Y+8	; 0x08
    25ec:	89 85       	ldd	r24, Y+9	; 0x09
    25ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	9e 83       	std	Y+6, r25	; 0x06
    25fa:	8d 83       	std	Y+5, r24	; 0x05
    25fc:	8d 81       	ldd	r24, Y+5	; 0x05
    25fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2600:	9a 83       	std	Y+2, r25	; 0x02
    2602:	89 83       	std	Y+1, r24	; 0x01
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	9a 81       	ldd	r25, Y+2	; 0x02
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <LCD_displayCharacter+0x3c4>
    260c:	9a 83       	std	Y+2, r25	; 0x02
    260e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2610:	e9 96       	adiw	r28, 0x39	; 57
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	cd bf       	out	0x3d, r28	; 61
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	08 95       	ret

00002622 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2622:	df 93       	push	r29
    2624:	cf 93       	push	r28
    2626:	00 d0       	rcall	.+0      	; 0x2628 <LCD_displayString+0x6>
    2628:	0f 92       	push	r0
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	9b 83       	std	Y+3, r25	; 0x03
    2630:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2632:	19 82       	std	Y+1, r1	; 0x01
    2634:	0e c0       	rjmp	.+28     	; 0x2652 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	28 2f       	mov	r18, r24
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	8a 81       	ldd	r24, Y+2	; 0x02
    263e:	9b 81       	ldd	r25, Y+3	; 0x03
    2640:	fc 01       	movw	r30, r24
    2642:	e2 0f       	add	r30, r18
    2644:	f3 1f       	adc	r31, r19
    2646:	80 81       	ld	r24, Z
    2648:	0e 94 22 11 	call	0x2244	; 0x2244 <LCD_displayCharacter>
		i++;
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	8f 5f       	subi	r24, 0xFF	; 255
    2650:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	28 2f       	mov	r18, r24
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	9b 81       	ldd	r25, Y+3	; 0x03
    265c:	fc 01       	movw	r30, r24
    265e:	e2 0f       	add	r30, r18
    2660:	f3 1f       	adc	r31, r19
    2662:	80 81       	ld	r24, Z
    2664:	88 23       	and	r24, r24
    2666:	39 f7       	brne	.-50     	; 0x2636 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	08 95       	ret

00002674 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	00 d0       	rcall	.+0      	; 0x267a <LCD_moveCursor+0x6>
    267a:	00 d0       	rcall	.+0      	; 0x267c <LCD_moveCursor+0x8>
    267c:	0f 92       	push	r0
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
    2682:	8a 83       	std	Y+2, r24	; 0x02
    2684:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	28 2f       	mov	r18, r24
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	3d 83       	std	Y+5, r19	; 0x05
    268e:	2c 83       	std	Y+4, r18	; 0x04
    2690:	8c 81       	ldd	r24, Y+4	; 0x04
    2692:	9d 81       	ldd	r25, Y+5	; 0x05
    2694:	81 30       	cpi	r24, 0x01	; 1
    2696:	91 05       	cpc	r25, r1
    2698:	c1 f0       	breq	.+48     	; 0x26ca <LCD_moveCursor+0x56>
    269a:	2c 81       	ldd	r18, Y+4	; 0x04
    269c:	3d 81       	ldd	r19, Y+5	; 0x05
    269e:	22 30       	cpi	r18, 0x02	; 2
    26a0:	31 05       	cpc	r19, r1
    26a2:	2c f4       	brge	.+10     	; 0x26ae <LCD_moveCursor+0x3a>
    26a4:	8c 81       	ldd	r24, Y+4	; 0x04
    26a6:	9d 81       	ldd	r25, Y+5	; 0x05
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	61 f0       	breq	.+24     	; 0x26c4 <LCD_moveCursor+0x50>
    26ac:	19 c0       	rjmp	.+50     	; 0x26e0 <LCD_moveCursor+0x6c>
    26ae:	2c 81       	ldd	r18, Y+4	; 0x04
    26b0:	3d 81       	ldd	r19, Y+5	; 0x05
    26b2:	22 30       	cpi	r18, 0x02	; 2
    26b4:	31 05       	cpc	r19, r1
    26b6:	69 f0       	breq	.+26     	; 0x26d2 <LCD_moveCursor+0x5e>
    26b8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ba:	9d 81       	ldd	r25, Y+5	; 0x05
    26bc:	83 30       	cpi	r24, 0x03	; 3
    26be:	91 05       	cpc	r25, r1
    26c0:	61 f0       	breq	.+24     	; 0x26da <LCD_moveCursor+0x66>
    26c2:	0e c0       	rjmp	.+28     	; 0x26e0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	89 83       	std	Y+1, r24	; 0x01
    26c8:	0b c0       	rjmp	.+22     	; 0x26e0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    26ca:	8b 81       	ldd	r24, Y+3	; 0x03
    26cc:	80 5c       	subi	r24, 0xC0	; 192
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	07 c0       	rjmp	.+14     	; 0x26e0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    26d2:	8b 81       	ldd	r24, Y+3	; 0x03
    26d4:	80 5f       	subi	r24, 0xF0	; 240
    26d6:	89 83       	std	Y+1, r24	; 0x01
    26d8:	03 c0       	rjmp	.+6      	; 0x26e0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	80 5b       	subi	r24, 0xB0	; 176
    26de:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	80 68       	ori	r24, 0x80	; 128
    26e4:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <LCD_sendCommand>
}
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	00 d0       	rcall	.+0      	; 0x26fe <LCD_displayStringRowColumn+0x6>
    26fe:	00 d0       	rcall	.+0      	; 0x2700 <LCD_displayStringRowColumn+0x8>
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	89 83       	std	Y+1, r24	; 0x01
    2706:	6a 83       	std	Y+2, r22	; 0x02
    2708:	5c 83       	std	Y+4, r21	; 0x04
    270a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	6a 81       	ldd	r22, Y+2	; 0x02
    2710:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	9c 81       	ldd	r25, Y+4	; 0x04
    2718:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_displayString>
}
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	62 97       	sbiw	r28, 0x12	; 18
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	de bf       	out	0x3e, r29	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
    273e:	9a 8b       	std	Y+18, r25	; 0x12
    2740:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2742:	89 89       	ldd	r24, Y+17	; 0x11
    2744:	9a 89       	ldd	r25, Y+18	; 0x12
    2746:	9e 01       	movw	r18, r28
    2748:	2f 5f       	subi	r18, 0xFF	; 255
    274a:	3f 4f       	sbci	r19, 0xFF	; 255
    274c:	b9 01       	movw	r22, r18
    274e:	4a e0       	ldi	r20, 0x0A	; 10
    2750:	50 e0       	ldi	r21, 0x00	; 0
    2752:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <itoa>
   LCD_displayString(buff); /* Display the string */
    2756:	ce 01       	movw	r24, r28
    2758:	01 96       	adiw	r24, 0x01	; 1
    275a:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_displayString>
}
    275e:	62 96       	adiw	r28, 0x12	; 18
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	f8 94       	cli
    2764:	de bf       	out	0x3e, r29	; 62
    2766:	0f be       	out	0x3f, r0	; 63
    2768:	cd bf       	out	0x3d, r28	; 61
    276a:	cf 91       	pop	r28
    276c:	df 91       	pop	r29
    276e:	08 95       	ret

00002770 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2770:	df 93       	push	r29
    2772:	cf 93       	push	r28
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <LCD_sendCommand>
}
    277e:	cf 91       	pop	r28
    2780:	df 91       	pop	r29
    2782:	08 95       	ret

00002784 <main>:





int main(void){
    2784:	df 93       	push	r29
    2786:	cf 93       	push	r28
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
    278c:	ae 97       	sbiw	r28, 0x2e	; 46
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	de bf       	out	0x3e, r29	; 62
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	cd bf       	out	0x3d, r28	; 61
// initalize the harware and ecu
	UART_init(&UART_Config);
    2798:	8b eb       	ldi	r24, 0xBB	; 187
    279a:	91 e0       	ldi	r25, 0x01	; 1
    279c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_init>
	Timer_init(&Timer_config);
    27a0:	82 ec       	ldi	r24, 0xC2	; 194
    27a2:	91 e0       	ldi	r25, 0x01	; 1
    27a4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer_init>
	Timer_setCallBack(Timer0_OverflowCallback, 0);
    27a8:	83 e1       	ldi	r24, 0x13	; 19
    27aa:	9a e1       	ldi	r25, 0x1A	; 26
    27ac:	60 e0       	ldi	r22, 0x00	; 0
    27ae:	0e 94 53 07 	call	0xea6	; 0xea6 <Timer_setCallBack>
	LCD_init();
    27b2:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <LCD_init>
    LCD_displayString(" Mohamed Magdy");
    27b6:	80 e6       	ldi	r24, 0x60	; 96
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_displayString>
    LCD_moveCursor(1,1);
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	61 e0       	ldi	r22, 0x01	; 1
    27c2:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_moveCursor>
    LCD_displayString("thanks Edges");
    27c6:	8f e6       	ldi	r24, 0x6F	; 111
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_displayString>
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	90 e4       	ldi	r25, 0x40	; 64
    27d2:	ac e9       	ldi	r26, 0x9C	; 156
    27d4:	b5 e4       	ldi	r27, 0x45	; 69
    27d6:	8f a3       	std	Y+39, r24	; 0x27
    27d8:	98 a7       	std	Y+40, r25	; 0x28
    27da:	a9 a7       	std	Y+41, r26	; 0x29
    27dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27de:	6f a1       	ldd	r22, Y+39	; 0x27
    27e0:	78 a5       	ldd	r23, Y+40	; 0x28
    27e2:	89 a5       	ldd	r24, Y+41	; 0x29
    27e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	4a ef       	ldi	r20, 0xFA	; 250
    27ec:	54 e4       	ldi	r21, 0x44	; 68
    27ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	8b a3       	std	Y+35, r24	; 0x23
    27f8:	9c a3       	std	Y+36, r25	; 0x24
    27fa:	ad a3       	std	Y+37, r26	; 0x25
    27fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2800:	7c a1       	ldd	r23, Y+36	; 0x24
    2802:	8d a1       	ldd	r24, Y+37	; 0x25
    2804:	9e a1       	ldd	r25, Y+38	; 0x26
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	40 e8       	ldi	r20, 0x80	; 128
    280c:	5f e3       	ldi	r21, 0x3F	; 63
    280e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2812:	88 23       	and	r24, r24
    2814:	2c f4       	brge	.+10     	; 0x2820 <main+0x9c>
		__ticks = 1;
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	9a a3       	std	Y+34, r25	; 0x22
    281c:	89 a3       	std	Y+33, r24	; 0x21
    281e:	3f c0       	rjmp	.+126    	; 0x289e <main+0x11a>
	else if (__tmp > 65535)
    2820:	6b a1       	ldd	r22, Y+35	; 0x23
    2822:	7c a1       	ldd	r23, Y+36	; 0x24
    2824:	8d a1       	ldd	r24, Y+37	; 0x25
    2826:	9e a1       	ldd	r25, Y+38	; 0x26
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	3f ef       	ldi	r19, 0xFF	; 255
    282c:	4f e7       	ldi	r20, 0x7F	; 127
    282e:	57 e4       	ldi	r21, 0x47	; 71
    2830:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2834:	18 16       	cp	r1, r24
    2836:	4c f5       	brge	.+82     	; 0x288a <main+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2838:	6f a1       	ldd	r22, Y+39	; 0x27
    283a:	78 a5       	ldd	r23, Y+40	; 0x28
    283c:	89 a5       	ldd	r24, Y+41	; 0x29
    283e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e2       	ldi	r20, 0x20	; 32
    2846:	51 e4       	ldi	r21, 0x41	; 65
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	9a a3       	std	Y+34, r25	; 0x22
    285e:	89 a3       	std	Y+33, r24	; 0x21
    2860:	0f c0       	rjmp	.+30     	; 0x2880 <main+0xfc>
    2862:	88 ec       	ldi	r24, 0xC8	; 200
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	98 a3       	std	Y+32, r25	; 0x20
    2868:	8f 8f       	std	Y+31, r24	; 0x1f
    286a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    286c:	98 a1       	ldd	r25, Y+32	; 0x20
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	f1 f7       	brne	.-4      	; 0x286e <main+0xea>
    2872:	98 a3       	std	Y+32, r25	; 0x20
    2874:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2876:	89 a1       	ldd	r24, Y+33	; 0x21
    2878:	9a a1       	ldd	r25, Y+34	; 0x22
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	9a a3       	std	Y+34, r25	; 0x22
    287e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2880:	89 a1       	ldd	r24, Y+33	; 0x21
    2882:	9a a1       	ldd	r25, Y+34	; 0x22
    2884:	00 97       	sbiw	r24, 0x00	; 0
    2886:	69 f7       	brne	.-38     	; 0x2862 <main+0xde>
    2888:	14 c0       	rjmp	.+40     	; 0x28b2 <main+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288a:	6b a1       	ldd	r22, Y+35	; 0x23
    288c:	7c a1       	ldd	r23, Y+36	; 0x24
    288e:	8d a1       	ldd	r24, Y+37	; 0x25
    2890:	9e a1       	ldd	r25, Y+38	; 0x26
    2892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	9a a3       	std	Y+34, r25	; 0x22
    289c:	89 a3       	std	Y+33, r24	; 0x21
    289e:	89 a1       	ldd	r24, Y+33	; 0x21
    28a0:	9a a1       	ldd	r25, Y+34	; 0x22
    28a2:	9e 8f       	std	Y+30, r25	; 0x1e
    28a4:	8d 8f       	std	Y+29, r24	; 0x1d
    28a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	f1 f7       	brne	.-4      	; 0x28aa <main+0x126>
    28ae:	9e 8f       	std	Y+30, r25	; 0x1e
    28b0:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(5000);
    LCD_clearScreen();
    28b2:	0e 94 b8 13 	call	0x2770	; 0x2770 <LCD_clearScreen>



	sei(); /* Enables global interrupts */
    28b6:	78 94       	sei
	uint8 select=0,sensor=0xFF;
    28b8:	1c a6       	std	Y+44, r1	; 0x2c
    28ba:	8f ef       	ldi	r24, 0xFF	; 255
    28bc:	8b a7       	std	Y+43, r24	; 0x2b
    28be:	02 c0       	rjmp	.+4      	; 0x28c4 <main+0x140>
			/* 3LASHN HWA BA5OD INPUT MSH OUTPUT*/
// hna atna lazm ykono el 2 pass zy b3d 3lshan tbd2 tsht8l
while(g_matched_passwords!=1){
	Create_pass();
    28c0:	0e 94 80 17 	call	0x2f00	; 0x2f00 <Create_pass>

	sei(); /* Enables global interrupts */
	uint8 select=0,sensor=0xFF;
			/* 3LASHN HWA BA5OD INPUT MSH OUTPUT*/
// hna atna lazm ykono el 2 pass zy b3d 3lshan tbd2 tsht8l
while(g_matched_passwords!=1){
    28c4:	80 91 d2 01 	lds	r24, 0x01D2
    28c8:	81 30       	cpi	r24, 0x01	; 1
    28ca:	d1 f7       	brne	.-12     	; 0x28c0 <main+0x13c>
 * ==========================================================================================================
 */


while(1){
	        LCD_clearScreen();
    28cc:	0e 94 b8 13 	call	0x2770	; 0x2770 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    28d0:	2c e7       	ldi	r18, 0x7C	; 124
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	60 e0       	ldi	r22, 0x00	; 0
    28d8:	a9 01       	movw	r20, r18
    28da:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    28de:	2a e8       	ldi	r18, 0x8A	; 138
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	60 e0       	ldi	r22, 0x00	; 0
    28e6:	a9 01       	movw	r20, r18
    28e8:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_displayStringRowColumn>
  select=KEYPAD_getPressedKey();
    28ec:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <KEYPAD_getPressedKey>
    28f0:	8c a7       	std	Y+44, r24	; 0x2c
switch(select){
    28f2:	8c a5       	ldd	r24, Y+44	; 0x2c
    28f4:	28 2f       	mov	r18, r24
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	3e a7       	std	Y+46, r19	; 0x2e
    28fa:	2d a7       	std	Y+45, r18	; 0x2d
    28fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    28fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2900:	8b 32       	cpi	r24, 0x2B	; 43
    2902:	91 05       	cpc	r25, r1
    2904:	39 f0       	breq	.+14     	; 0x2914 <main+0x190>
    2906:	2d a5       	ldd	r18, Y+45	; 0x2d
    2908:	3e a5       	ldd	r19, Y+46	; 0x2e
    290a:	2d 32       	cpi	r18, 0x2D	; 45
    290c:	31 05       	cpc	r19, r1
    290e:	09 f4       	brne	.+2      	; 0x2912 <main+0x18e>
    2910:	c3 c0       	rjmp	.+390    	; 0x2a98 <main+0x314>
    2912:	dc cf       	rjmp	.-72     	; 0x28cc <main+0x148>
 *    -------------------------------------------DOOR------------------------------------------------------
 * ==========================================================================================================
 */

case'+':
	 if(pass_checker() == pass_true){
    2914:	0e 94 39 19 	call	0x3272	; 0x3272 <pass_checker>
    2918:	81 30       	cpi	r24, 0x01	; 1
    291a:	c1 f6       	brne	.-80     	; 0x28cc <main+0x148>
	        UART_sendByte(3);
    291c:	83 e0       	ldi	r24, 0x03	; 3
    291e:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <UART_sendByte>
	        LCD_clearScreen();
    2922:	0e 94 b8 13 	call	0x2770	; 0x2770 <LCD_clearScreen>
	        LCD_displayStringRowColumn(0,0,"DOOR Unlocking");
    2926:	2a e9       	ldi	r18, 0x9A	; 154
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	60 e0       	ldi	r22, 0x00	; 0
    292e:	a9 01       	movw	r20, r18
    2930:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_displayStringRowColumn>
	        LCD_moveCursor(1,0);
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	60 e0       	ldi	r22, 0x00	; 0
    2938:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_moveCursor>
	        LCD_displayString("Pls Wait...");
    293c:	89 ea       	ldi	r24, 0xA9	; 169
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_displayString>

	        sensor = UART_recieveByte();
    2944:	0e 94 91 0c 	call	0x1922	; 0x1922 <UART_recieveByte>
    2948:	8b a7       	std	Y+43, r24	; 0x2b

	        if(sensor == 7){
    294a:	8b a5       	ldd	r24, Y+43	; 0x2b
    294c:	87 30       	cpi	r24, 0x07	; 7
    294e:	89 f4       	brne	.+34     	; 0x2972 <main+0x1ee>
	            LCD_clearScreen();
    2950:	0e 94 b8 13 	call	0x2770	; 0x2770 <LCD_clearScreen>
	            LCD_displayString("Wait for people");
    2954:	85 eb       	ldi	r24, 0xB5	; 181
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_displayString>
	            LCD_moveCursor(1,0);
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	60 e0       	ldi	r22, 0x00	; 0
    2960:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_moveCursor>
	            LCD_displayString("Entering");
    2964:	85 ec       	ldi	r24, 0xC5	; 197
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_displayString>
	            sensor = UART_recieveByte();
    296c:	0e 94 91 0c 	call	0x1922	; 0x1922 <UART_recieveByte>
    2970:	8b a7       	std	Y+43, r24	; 0x2b
	        }

	        if(sensor == 8){
    2972:	8b a5       	ldd	r24, Y+43	; 0x2b
    2974:	88 30       	cpi	r24, 0x08	; 8
    2976:	49 f4       	brne	.+18     	; 0x298a <main+0x206>
	            UART_sendByte(4);
    2978:	84 e0       	ldi	r24, 0x04	; 4
    297a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <UART_sendByte>
	            LCD_clearScreen();
    297e:	0e 94 b8 13 	call	0x2770	; 0x2770 <LCD_clearScreen>
	            LCD_displayString("Door is locking");
    2982:	8e ec       	ldi	r24, 0xCE	; 206
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_displayString>
	        }

	        while(UART_recieveByte() != 9);
    298a:	0e 94 91 0c 	call	0x1922	; 0x1922 <UART_recieveByte>
    298e:	89 30       	cpi	r24, 0x09	; 9
    2990:	e1 f7       	brne	.-8      	; 0x298a <main+0x206>
	        LCD_clearScreen();
    2992:	0e 94 b8 13 	call	0x2770	; 0x2770 <LCD_clearScreen>
	        LCD_displayStringRowColumn(0,0,"Door locked!");
    2996:	2e ed       	ldi	r18, 0xDE	; 222
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	60 e0       	ldi	r22, 0x00	; 0
    299e:	a9 01       	movw	r20, r18
    29a0:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_displayStringRowColumn>
	        LCD_displayStringRowColumn(1,0,"Returning...");
    29a4:	2b ee       	ldi	r18, 0xEB	; 235
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	60 e0       	ldi	r22, 0x00	; 0
    29ac:	a9 01       	movw	r20, r18
    29ae:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_displayStringRowColumn>
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	90 e6       	ldi	r25, 0x60	; 96
    29b6:	aa e6       	ldi	r26, 0x6A	; 106
    29b8:	b6 e4       	ldi	r27, 0x46	; 70
    29ba:	89 8f       	std	Y+25, r24	; 0x19
    29bc:	9a 8f       	std	Y+26, r25	; 0x1a
    29be:	ab 8f       	std	Y+27, r26	; 0x1b
    29c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c2:	69 8d       	ldd	r22, Y+25	; 0x19
    29c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	4a ef       	ldi	r20, 0xFA	; 250
    29d0:	54 e4       	ldi	r21, 0x44	; 68
    29d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	8d 8b       	std	Y+21, r24	; 0x15
    29dc:	9e 8b       	std	Y+22, r25	; 0x16
    29de:	af 8b       	std	Y+23, r26	; 0x17
    29e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29e2:	6d 89       	ldd	r22, Y+21	; 0x15
    29e4:	7e 89       	ldd	r23, Y+22	; 0x16
    29e6:	8f 89       	ldd	r24, Y+23	; 0x17
    29e8:	98 8d       	ldd	r25, Y+24	; 0x18
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e8       	ldi	r20, 0x80	; 128
    29f0:	5f e3       	ldi	r21, 0x3F	; 63
    29f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f6:	88 23       	and	r24, r24
    29f8:	2c f4       	brge	.+10     	; 0x2a04 <main+0x280>
		__ticks = 1;
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	9c 8b       	std	Y+20, r25	; 0x14
    2a00:	8b 8b       	std	Y+19, r24	; 0x13
    2a02:	3f c0       	rjmp	.+126    	; 0x2a82 <main+0x2fe>
	else if (__tmp > 65535)
    2a04:	6d 89       	ldd	r22, Y+21	; 0x15
    2a06:	7e 89       	ldd	r23, Y+22	; 0x16
    2a08:	8f 89       	ldd	r24, Y+23	; 0x17
    2a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	3f ef       	ldi	r19, 0xFF	; 255
    2a10:	4f e7       	ldi	r20, 0x7F	; 127
    2a12:	57 e4       	ldi	r21, 0x47	; 71
    2a14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a18:	18 16       	cp	r1, r24
    2a1a:	4c f5       	brge	.+82     	; 0x2a6e <main+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 e2       	ldi	r20, 0x20	; 32
    2a2a:	51 e4       	ldi	r21, 0x41	; 65
    2a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	bc 01       	movw	r22, r24
    2a36:	cd 01       	movw	r24, r26
    2a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	9c 8b       	std	Y+20, r25	; 0x14
    2a42:	8b 8b       	std	Y+19, r24	; 0x13
    2a44:	0f c0       	rjmp	.+30     	; 0x2a64 <main+0x2e0>
    2a46:	88 ec       	ldi	r24, 0xC8	; 200
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	9a 8b       	std	Y+18, r25	; 0x12
    2a4c:	89 8b       	std	Y+17, r24	; 0x11
    2a4e:	89 89       	ldd	r24, Y+17	; 0x11
    2a50:	9a 89       	ldd	r25, Y+18	; 0x12
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <main+0x2ce>
    2a56:	9a 8b       	std	Y+18, r25	; 0x12
    2a58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	9c 8b       	std	Y+20, r25	; 0x14
    2a62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a64:	8b 89       	ldd	r24, Y+19	; 0x13
    2a66:	9c 89       	ldd	r25, Y+20	; 0x14
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	69 f7       	brne	.-38     	; 0x2a46 <main+0x2c2>
    2a6c:	2f cf       	rjmp	.-418    	; 0x28cc <main+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a70:	7e 89       	ldd	r23, Y+22	; 0x16
    2a72:	8f 89       	ldd	r24, Y+23	; 0x17
    2a74:	98 8d       	ldd	r25, Y+24	; 0x18
    2a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9c 8b       	std	Y+20, r25	; 0x14
    2a80:	8b 8b       	std	Y+19, r24	; 0x13
    2a82:	8b 89       	ldd	r24, Y+19	; 0x13
    2a84:	9c 89       	ldd	r25, Y+20	; 0x14
    2a86:	98 8b       	std	Y+16, r25	; 0x10
    2a88:	8f 87       	std	Y+15, r24	; 0x0f
    2a8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a8c:	98 89       	ldd	r25, Y+16	; 0x10
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <main+0x30a>
    2a92:	98 8b       	std	Y+16, r25	; 0x10
    2a94:	8f 87       	std	Y+15, r24	; 0x0f
    2a96:	1a cf       	rjmp	.-460    	; 0x28cc <main+0x148>
/*===========================================================================================================
 * ------------------------------------------- CHANGE PASS -------------------------------------------------
 * ==========================================================================================================
 */
case'-':
	if(pass_checker()==pass_true){
    2a98:	0e 94 39 19 	call	0x3272	; 0x3272 <pass_checker>
    2a9c:	81 30       	cpi	r24, 0x01	; 1
    2a9e:	09 f0       	breq	.+2      	; 0x2aa2 <main+0x31e>
    2aa0:	85 c0       	rjmp	.+266    	; 0x2bac <main+0x428>
		g_matched_passwords = 0;
    2aa2:	10 92 d2 01 	sts	0x01D2, r1
		LCD_clearScreen();
    2aa6:	0e 94 b8 13 	call	0x2770	; 0x2770 <LCD_clearScreen>
		LCD_displayString("Change password");
    2aaa:	88 ef       	ldi	r24, 0xF8	; 248
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_displayString>
		LCD_moveCursor(1,0);
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	60 e0       	ldi	r22, 0x00	; 0
    2ab6:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_moveCursor>
		LCD_displayString("    Process");
    2aba:	88 e0       	ldi	r24, 0x08	; 8
    2abc:	91 e0       	ldi	r25, 0x01	; 1
    2abe:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_displayString>
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	af ea       	ldi	r26, 0xAF	; 175
    2ac8:	b3 e4       	ldi	r27, 0x43	; 67
    2aca:	8b 87       	std	Y+11, r24	; 0x0b
    2acc:	9c 87       	std	Y+12, r25	; 0x0c
    2ace:	ad 87       	std	Y+13, r26	; 0x0d
    2ad0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	4a ef       	ldi	r20, 0xFA	; 250
    2ae0:	54 e4       	ldi	r21, 0x44	; 68
    2ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	8f 83       	std	Y+7, r24	; 0x07
    2aec:	98 87       	std	Y+8, r25	; 0x08
    2aee:	a9 87       	std	Y+9, r26	; 0x09
    2af0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2af2:	6f 81       	ldd	r22, Y+7	; 0x07
    2af4:	78 85       	ldd	r23, Y+8	; 0x08
    2af6:	89 85       	ldd	r24, Y+9	; 0x09
    2af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	40 e8       	ldi	r20, 0x80	; 128
    2b00:	5f e3       	ldi	r21, 0x3F	; 63
    2b02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b06:	88 23       	and	r24, r24
    2b08:	2c f4       	brge	.+10     	; 0x2b14 <main+0x390>
		__ticks = 1;
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	9e 83       	std	Y+6, r25	; 0x06
    2b10:	8d 83       	std	Y+5, r24	; 0x05
    2b12:	3f c0       	rjmp	.+126    	; 0x2b92 <main+0x40e>
	else if (__tmp > 65535)
    2b14:	6f 81       	ldd	r22, Y+7	; 0x07
    2b16:	78 85       	ldd	r23, Y+8	; 0x08
    2b18:	89 85       	ldd	r24, Y+9	; 0x09
    2b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	3f ef       	ldi	r19, 0xFF	; 255
    2b20:	4f e7       	ldi	r20, 0x7F	; 127
    2b22:	57 e4       	ldi	r21, 0x47	; 71
    2b24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b28:	18 16       	cp	r1, r24
    2b2a:	4c f5       	brge	.+82     	; 0x2b7e <main+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e2       	ldi	r20, 0x20	; 32
    2b3a:	51 e4       	ldi	r21, 0x41	; 65
    2b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	bc 01       	movw	r22, r24
    2b46:	cd 01       	movw	r24, r26
    2b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	9e 83       	std	Y+6, r25	; 0x06
    2b52:	8d 83       	std	Y+5, r24	; 0x05
    2b54:	0f c0       	rjmp	.+30     	; 0x2b74 <main+0x3f0>
    2b56:	88 ec       	ldi	r24, 0xC8	; 200
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	9c 83       	std	Y+4, r25	; 0x04
    2b5c:	8b 83       	std	Y+3, r24	; 0x03
    2b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b60:	9c 81       	ldd	r25, Y+4	; 0x04
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	f1 f7       	brne	.-4      	; 0x2b62 <main+0x3de>
    2b66:	9c 83       	std	Y+4, r25	; 0x04
    2b68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	9e 83       	std	Y+6, r25	; 0x06
    2b72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b74:	8d 81       	ldd	r24, Y+5	; 0x05
    2b76:	9e 81       	ldd	r25, Y+6	; 0x06
    2b78:	00 97       	sbiw	r24, 0x00	; 0
    2b7a:	69 f7       	brne	.-38     	; 0x2b56 <main+0x3d2>
    2b7c:	17 c0       	rjmp	.+46     	; 0x2bac <main+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b80:	78 85       	ldd	r23, Y+8	; 0x08
    2b82:	89 85       	ldd	r24, Y+9	; 0x09
    2b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	9e 83       	std	Y+6, r25	; 0x06
    2b90:	8d 83       	std	Y+5, r24	; 0x05
    2b92:	8d 81       	ldd	r24, Y+5	; 0x05
    2b94:	9e 81       	ldd	r25, Y+6	; 0x06
    2b96:	9a 83       	std	Y+2, r25	; 0x02
    2b98:	89 83       	std	Y+1, r24	; 0x01
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	f1 f7       	brne	.-4      	; 0x2b9e <main+0x41a>
    2ba2:	9a 83       	std	Y+2, r25	; 0x02
    2ba4:	89 83       	std	Y+1, r24	; 0x01
    2ba6:	02 c0       	rjmp	.+4      	; 0x2bac <main+0x428>
	    _delay_ms(350);

	}
	while(g_matched_passwords != 1){
		Create_pass();
    2ba8:	0e 94 80 17 	call	0x2f00	; 0x2f00 <Create_pass>
		LCD_moveCursor(1,0);
		LCD_displayString("    Process");
	    _delay_ms(350);

	}
	while(g_matched_passwords != 1){
    2bac:	80 91 d2 01 	lds	r24, 0x01D2
    2bb0:	81 30       	cpi	r24, 0x01	; 1
    2bb2:	d1 f7       	brne	.-12     	; 0x2ba8 <main+0x424>
    2bb4:	8b ce       	rjmp	.-746    	; 0x28cc <main+0x148>

00002bb6 <Enter_pass_send>:
}
/*----------------------------------------------------------------------------------------------------------------------
 * Function to enter a password and send it to the control ecu
 * ---------------------------------------------------------------------------------------------------------------------
 */
void Enter_pass_send(uint8*pass){
    2bb6:	df 93       	push	r29
    2bb8:	cf 93       	push	r28
    2bba:	cd b7       	in	r28, 0x3d	; 61
    2bbc:	de b7       	in	r29, 0x3e	; 62
    2bbe:	e0 97       	sbiw	r28, 0x30	; 48
    2bc0:	0f b6       	in	r0, 0x3f	; 63
    2bc2:	f8 94       	cli
    2bc4:	de bf       	out	0x3e, r29	; 62
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	cd bf       	out	0x3d, r28	; 61
    2bca:	98 ab       	std	Y+48, r25	; 0x30
    2bcc:	8f a7       	std	Y+47, r24	; 0x2f
	uint8 i=0;
    2bce:	1e a6       	std	Y+46, r1	; 0x2e
    2bd0:	fb c0       	rjmp	.+502    	; 0x2dc8 <Enter_pass_send+0x212>
	while(i<pass_size){
		uint8 enterd_key = KEYPAD_getPressedKey();
    2bd2:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <KEYPAD_getPressedKey>
    2bd6:	8d a7       	std	Y+45, r24	; 0x2d
if(enterd_key >= 0 && enterd_key <= 9){
    2bd8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bda:	8a 30       	cpi	r24, 0x0A	; 10
    2bdc:	08 f0       	brcs	.+2      	; 0x2be0 <Enter_pass_send+0x2a>
    2bde:	82 c0       	rjmp	.+260    	; 0x2ce4 <Enter_pass_send+0x12e>
	pass[i]=enterd_key;
    2be0:	8e a5       	ldd	r24, Y+46	; 0x2e
    2be2:	28 2f       	mov	r18, r24
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2be8:	98 a9       	ldd	r25, Y+48	; 0x30
    2bea:	fc 01       	movw	r30, r24
    2bec:	e2 0f       	add	r30, r18
    2bee:	f3 1f       	adc	r31, r19
    2bf0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bf2:	80 83       	st	Z, r24
	LCD_displayCharacter('*');
    2bf4:	8a e2       	ldi	r24, 0x2A	; 42
    2bf6:	0e 94 22 11 	call	0x2244	; 0x2244 <LCD_displayCharacter>
	 i++;
    2bfa:	8e a5       	ldd	r24, Y+46	; 0x2e
    2bfc:	8f 5f       	subi	r24, 0xFF	; 255
    2bfe:	8e a7       	std	Y+46, r24	; 0x2e
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	a6 e9       	ldi	r26, 0x96	; 150
    2c06:	b3 e4       	ldi	r27, 0x43	; 67
    2c08:	8f a3       	std	Y+39, r24	; 0x27
    2c0a:	98 a7       	std	Y+40, r25	; 0x28
    2c0c:	a9 a7       	std	Y+41, r26	; 0x29
    2c0e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c10:	6f a1       	ldd	r22, Y+39	; 0x27
    2c12:	78 a5       	ldd	r23, Y+40	; 0x28
    2c14:	89 a5       	ldd	r24, Y+41	; 0x29
    2c16:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	4a ef       	ldi	r20, 0xFA	; 250
    2c1e:	54 e4       	ldi	r21, 0x44	; 68
    2c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	8b a3       	std	Y+35, r24	; 0x23
    2c2a:	9c a3       	std	Y+36, r25	; 0x24
    2c2c:	ad a3       	std	Y+37, r26	; 0x25
    2c2e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c30:	6b a1       	ldd	r22, Y+35	; 0x23
    2c32:	7c a1       	ldd	r23, Y+36	; 0x24
    2c34:	8d a1       	ldd	r24, Y+37	; 0x25
    2c36:	9e a1       	ldd	r25, Y+38	; 0x26
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	40 e8       	ldi	r20, 0x80	; 128
    2c3e:	5f e3       	ldi	r21, 0x3F	; 63
    2c40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c44:	88 23       	and	r24, r24
    2c46:	2c f4       	brge	.+10     	; 0x2c52 <Enter_pass_send+0x9c>
		__ticks = 1;
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	9a a3       	std	Y+34, r25	; 0x22
    2c4e:	89 a3       	std	Y+33, r24	; 0x21
    2c50:	3f c0       	rjmp	.+126    	; 0x2cd0 <Enter_pass_send+0x11a>
	else if (__tmp > 65535)
    2c52:	6b a1       	ldd	r22, Y+35	; 0x23
    2c54:	7c a1       	ldd	r23, Y+36	; 0x24
    2c56:	8d a1       	ldd	r24, Y+37	; 0x25
    2c58:	9e a1       	ldd	r25, Y+38	; 0x26
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	3f ef       	ldi	r19, 0xFF	; 255
    2c5e:	4f e7       	ldi	r20, 0x7F	; 127
    2c60:	57 e4       	ldi	r21, 0x47	; 71
    2c62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c66:	18 16       	cp	r1, r24
    2c68:	4c f5       	brge	.+82     	; 0x2cbc <Enter_pass_send+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c6a:	6f a1       	ldd	r22, Y+39	; 0x27
    2c6c:	78 a5       	ldd	r23, Y+40	; 0x28
    2c6e:	89 a5       	ldd	r24, Y+41	; 0x29
    2c70:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	40 e2       	ldi	r20, 0x20	; 32
    2c78:	51 e4       	ldi	r21, 0x41	; 65
    2c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	bc 01       	movw	r22, r24
    2c84:	cd 01       	movw	r24, r26
    2c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	9a a3       	std	Y+34, r25	; 0x22
    2c90:	89 a3       	std	Y+33, r24	; 0x21
    2c92:	0f c0       	rjmp	.+30     	; 0x2cb2 <Enter_pass_send+0xfc>
    2c94:	88 ec       	ldi	r24, 0xC8	; 200
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	98 a3       	std	Y+32, r25	; 0x20
    2c9a:	8f 8f       	std	Y+31, r24	; 0x1f
    2c9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c9e:	98 a1       	ldd	r25, Y+32	; 0x20
    2ca0:	01 97       	sbiw	r24, 0x01	; 1
    2ca2:	f1 f7       	brne	.-4      	; 0x2ca0 <Enter_pass_send+0xea>
    2ca4:	98 a3       	std	Y+32, r25	; 0x20
    2ca6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca8:	89 a1       	ldd	r24, Y+33	; 0x21
    2caa:	9a a1       	ldd	r25, Y+34	; 0x22
    2cac:	01 97       	sbiw	r24, 0x01	; 1
    2cae:	9a a3       	std	Y+34, r25	; 0x22
    2cb0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb2:	89 a1       	ldd	r24, Y+33	; 0x21
    2cb4:	9a a1       	ldd	r25, Y+34	; 0x22
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	69 f7       	brne	.-38     	; 0x2c94 <Enter_pass_send+0xde>
    2cba:	14 c0       	rjmp	.+40     	; 0x2ce4 <Enter_pass_send+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cbc:	6b a1       	ldd	r22, Y+35	; 0x23
    2cbe:	7c a1       	ldd	r23, Y+36	; 0x24
    2cc0:	8d a1       	ldd	r24, Y+37	; 0x25
    2cc2:	9e a1       	ldd	r25, Y+38	; 0x26
    2cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	9a a3       	std	Y+34, r25	; 0x22
    2cce:	89 a3       	std	Y+33, r24	; 0x21
    2cd0:	89 a1       	ldd	r24, Y+33	; 0x21
    2cd2:	9a a1       	ldd	r25, Y+34	; 0x22
    2cd4:	9e 8f       	std	Y+30, r25	; 0x1e
    2cd6:	8d 8f       	std	Y+29, r24	; 0x1d
    2cd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cda:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	f1 f7       	brne	.-4      	; 0x2cdc <Enter_pass_send+0x126>
    2ce0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ce2:	8d 8f       	std	Y+29, r24	; 0x1d
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	a6 e9       	ldi	r26, 0x96	; 150
    2cea:	b3 e4       	ldi	r27, 0x43	; 67
    2cec:	89 8f       	std	Y+25, r24	; 0x19
    2cee:	9a 8f       	std	Y+26, r25	; 0x1a
    2cf0:	ab 8f       	std	Y+27, r26	; 0x1b
    2cf2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf4:	69 8d       	ldd	r22, Y+25	; 0x19
    2cf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	4a ef       	ldi	r20, 0xFA	; 250
    2d02:	54 e4       	ldi	r21, 0x44	; 68
    2d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	8d 8b       	std	Y+21, r24	; 0x15
    2d0e:	9e 8b       	std	Y+22, r25	; 0x16
    2d10:	af 8b       	std	Y+23, r26	; 0x17
    2d12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d14:	6d 89       	ldd	r22, Y+21	; 0x15
    2d16:	7e 89       	ldd	r23, Y+22	; 0x16
    2d18:	8f 89       	ldd	r24, Y+23	; 0x17
    2d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	40 e8       	ldi	r20, 0x80	; 128
    2d22:	5f e3       	ldi	r21, 0x3F	; 63
    2d24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d28:	88 23       	and	r24, r24
    2d2a:	2c f4       	brge	.+10     	; 0x2d36 <Enter_pass_send+0x180>
		__ticks = 1;
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	9c 8b       	std	Y+20, r25	; 0x14
    2d32:	8b 8b       	std	Y+19, r24	; 0x13
    2d34:	3f c0       	rjmp	.+126    	; 0x2db4 <Enter_pass_send+0x1fe>
	else if (__tmp > 65535)
    2d36:	6d 89       	ldd	r22, Y+21	; 0x15
    2d38:	7e 89       	ldd	r23, Y+22	; 0x16
    2d3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	3f ef       	ldi	r19, 0xFF	; 255
    2d42:	4f e7       	ldi	r20, 0x7F	; 127
    2d44:	57 e4       	ldi	r21, 0x47	; 71
    2d46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d4a:	18 16       	cp	r1, r24
    2d4c:	4c f5       	brge	.+82     	; 0x2da0 <Enter_pass_send+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d4e:	69 8d       	ldd	r22, Y+25	; 0x19
    2d50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	40 e2       	ldi	r20, 0x20	; 32
    2d5c:	51 e4       	ldi	r21, 0x41	; 65
    2d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	bc 01       	movw	r22, r24
    2d68:	cd 01       	movw	r24, r26
    2d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	9c 8b       	std	Y+20, r25	; 0x14
    2d74:	8b 8b       	std	Y+19, r24	; 0x13
    2d76:	0f c0       	rjmp	.+30     	; 0x2d96 <Enter_pass_send+0x1e0>
    2d78:	88 ec       	ldi	r24, 0xC8	; 200
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	9a 8b       	std	Y+18, r25	; 0x12
    2d7e:	89 8b       	std	Y+17, r24	; 0x11
    2d80:	89 89       	ldd	r24, Y+17	; 0x11
    2d82:	9a 89       	ldd	r25, Y+18	; 0x12
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	f1 f7       	brne	.-4      	; 0x2d84 <Enter_pass_send+0x1ce>
    2d88:	9a 8b       	std	Y+18, r25	; 0x12
    2d8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	9c 8b       	std	Y+20, r25	; 0x14
    2d94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d96:	8b 89       	ldd	r24, Y+19	; 0x13
    2d98:	9c 89       	ldd	r25, Y+20	; 0x14
    2d9a:	00 97       	sbiw	r24, 0x00	; 0
    2d9c:	69 f7       	brne	.-38     	; 0x2d78 <Enter_pass_send+0x1c2>
    2d9e:	14 c0       	rjmp	.+40     	; 0x2dc8 <Enter_pass_send+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da0:	6d 89       	ldd	r22, Y+21	; 0x15
    2da2:	7e 89       	ldd	r23, Y+22	; 0x16
    2da4:	8f 89       	ldd	r24, Y+23	; 0x17
    2da6:	98 8d       	ldd	r25, Y+24	; 0x18
    2da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	9c 8b       	std	Y+20, r25	; 0x14
    2db2:	8b 8b       	std	Y+19, r24	; 0x13
    2db4:	8b 89       	ldd	r24, Y+19	; 0x13
    2db6:	9c 89       	ldd	r25, Y+20	; 0x14
    2db8:	98 8b       	std	Y+16, r25	; 0x10
    2dba:	8f 87       	std	Y+15, r24	; 0x0f
    2dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dbe:	98 89       	ldd	r25, Y+16	; 0x10
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	f1 f7       	brne	.-4      	; 0x2dc0 <Enter_pass_send+0x20a>
    2dc4:	98 8b       	std	Y+16, r25	; 0x10
    2dc6:	8f 87       	std	Y+15, r24	; 0x0f
 * Function to enter a password and send it to the control ecu
 * ---------------------------------------------------------------------------------------------------------------------
 */
void Enter_pass_send(uint8*pass){
	uint8 i=0;
	while(i<pass_size){
    2dc8:	8e a5       	ldd	r24, Y+46	; 0x2e
    2dca:	85 30       	cpi	r24, 0x05	; 5
    2dcc:	08 f4       	brcc	.+2      	; 0x2dd0 <Enter_pass_send+0x21a>
    2dce:	01 cf       	rjmp	.-510    	; 0x2bd2 <Enter_pass_send+0x1c>
    2dd0:	72 c0       	rjmp	.+228    	; 0x2eb6 <Enter_pass_send+0x300>

}
_delay_ms(300);

	}
  while(KEYPAD_getPressedKey()!=Enter_Key){
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	aa ef       	ldi	r26, 0xFA	; 250
    2dd8:	b3 e4       	ldi	r27, 0x43	; 67
    2dda:	8b 87       	std	Y+11, r24	; 0x0b
    2ddc:	9c 87       	std	Y+12, r25	; 0x0c
    2dde:	ad 87       	std	Y+13, r26	; 0x0d
    2de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2de4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2de6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2de8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	4a ef       	ldi	r20, 0xFA	; 250
    2df0:	54 e4       	ldi	r21, 0x44	; 68
    2df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	8f 83       	std	Y+7, r24	; 0x07
    2dfc:	98 87       	std	Y+8, r25	; 0x08
    2dfe:	a9 87       	std	Y+9, r26	; 0x09
    2e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e02:	6f 81       	ldd	r22, Y+7	; 0x07
    2e04:	78 85       	ldd	r23, Y+8	; 0x08
    2e06:	89 85       	ldd	r24, Y+9	; 0x09
    2e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	40 e8       	ldi	r20, 0x80	; 128
    2e10:	5f e3       	ldi	r21, 0x3F	; 63
    2e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e16:	88 23       	and	r24, r24
    2e18:	2c f4       	brge	.+10     	; 0x2e24 <Enter_pass_send+0x26e>
		__ticks = 1;
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	9e 83       	std	Y+6, r25	; 0x06
    2e20:	8d 83       	std	Y+5, r24	; 0x05
    2e22:	3f c0       	rjmp	.+126    	; 0x2ea2 <Enter_pass_send+0x2ec>
	else if (__tmp > 65535)
    2e24:	6f 81       	ldd	r22, Y+7	; 0x07
    2e26:	78 85       	ldd	r23, Y+8	; 0x08
    2e28:	89 85       	ldd	r24, Y+9	; 0x09
    2e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	3f ef       	ldi	r19, 0xFF	; 255
    2e30:	4f e7       	ldi	r20, 0x7F	; 127
    2e32:	57 e4       	ldi	r21, 0x47	; 71
    2e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e38:	18 16       	cp	r1, r24
    2e3a:	4c f5       	brge	.+82     	; 0x2e8e <Enter_pass_send+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	40 e2       	ldi	r20, 0x20	; 32
    2e4a:	51 e4       	ldi	r21, 0x41	; 65
    2e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	bc 01       	movw	r22, r24
    2e56:	cd 01       	movw	r24, r26
    2e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	9e 83       	std	Y+6, r25	; 0x06
    2e62:	8d 83       	std	Y+5, r24	; 0x05
    2e64:	0f c0       	rjmp	.+30     	; 0x2e84 <Enter_pass_send+0x2ce>
    2e66:	88 ec       	ldi	r24, 0xC8	; 200
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	9c 83       	std	Y+4, r25	; 0x04
    2e6c:	8b 83       	std	Y+3, r24	; 0x03
    2e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e70:	9c 81       	ldd	r25, Y+4	; 0x04
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	f1 f7       	brne	.-4      	; 0x2e72 <Enter_pass_send+0x2bc>
    2e76:	9c 83       	std	Y+4, r25	; 0x04
    2e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e7e:	01 97       	sbiw	r24, 0x01	; 1
    2e80:	9e 83       	std	Y+6, r25	; 0x06
    2e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e84:	8d 81       	ldd	r24, Y+5	; 0x05
    2e86:	9e 81       	ldd	r25, Y+6	; 0x06
    2e88:	00 97       	sbiw	r24, 0x00	; 0
    2e8a:	69 f7       	brne	.-38     	; 0x2e66 <Enter_pass_send+0x2b0>
    2e8c:	14 c0       	rjmp	.+40     	; 0x2eb6 <Enter_pass_send+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e90:	78 85       	ldd	r23, Y+8	; 0x08
    2e92:	89 85       	ldd	r24, Y+9	; 0x09
    2e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	9e 83       	std	Y+6, r25	; 0x06
    2ea0:	8d 83       	std	Y+5, r24	; 0x05
    2ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea6:	9a 83       	std	Y+2, r25	; 0x02
    2ea8:	89 83       	std	Y+1, r24	; 0x01
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	9a 81       	ldd	r25, Y+2	; 0x02
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	f1 f7       	brne	.-4      	; 0x2eae <Enter_pass_send+0x2f8>
    2eb2:	9a 83       	std	Y+2, r25	; 0x02
    2eb4:	89 83       	std	Y+1, r24	; 0x01
    2eb6:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <KEYPAD_getPressedKey>
    2eba:	8d 33       	cpi	r24, 0x3D	; 61
    2ebc:	09 f0       	breq	.+2      	; 0x2ec0 <Enter_pass_send+0x30a>
    2ebe:	89 cf       	rjmp	.-238    	; 0x2dd2 <Enter_pass_send+0x21c>
	  _delay_ms(500);
  }

	for(int j=0;j<pass_size;j++){
    2ec0:	1c a6       	std	Y+44, r1	; 0x2c
    2ec2:	1b a6       	std	Y+43, r1	; 0x2b
    2ec4:	0f c0       	rjmp	.+30     	; 0x2ee4 <Enter_pass_send+0x32e>
		UART_sendByte(pass[j]);
    2ec6:	2b a5       	ldd	r18, Y+43	; 0x2b
    2ec8:	3c a5       	ldd	r19, Y+44	; 0x2c
    2eca:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ecc:	98 a9       	ldd	r25, Y+48	; 0x30
    2ece:	fc 01       	movw	r30, r24
    2ed0:	e2 0f       	add	r30, r18
    2ed2:	f3 1f       	adc	r31, r19
    2ed4:	80 81       	ld	r24, Z
    2ed6:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <UART_sendByte>
	}
  while(KEYPAD_getPressedKey()!=Enter_Key){
	  _delay_ms(500);
  }

	for(int j=0;j<pass_size;j++){
    2eda:	8b a5       	ldd	r24, Y+43	; 0x2b
    2edc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ede:	01 96       	adiw	r24, 0x01	; 1
    2ee0:	9c a7       	std	Y+44, r25	; 0x2c
    2ee2:	8b a7       	std	Y+43, r24	; 0x2b
    2ee4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ee6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ee8:	85 30       	cpi	r24, 0x05	; 5
    2eea:	91 05       	cpc	r25, r1
    2eec:	64 f3       	brlt	.-40     	; 0x2ec6 <Enter_pass_send+0x310>
		UART_sendByte(pass[j]);
	}

}
    2eee:	e0 96       	adiw	r28, 0x30	; 48
    2ef0:	0f b6       	in	r0, 0x3f	; 63
    2ef2:	f8 94       	cli
    2ef4:	de bf       	out	0x3e, r29	; 62
    2ef6:	0f be       	out	0x3f, r0	; 63
    2ef8:	cd bf       	out	0x3d, r28	; 61
    2efa:	cf 91       	pop	r28
    2efc:	df 91       	pop	r29
    2efe:	08 95       	ret

00002f00 <Create_pass>:

/*----------------------------------------------------------------------------------------------------------------------
 * function to create a password hd5l el pass b3deen hda5lo tany to verify kol dah f el CONTROL ECU lw kano s7 hy3ml send
 * ---------------------------------------------------------------------------------------------------------------------
 */
void Create_pass(void){
    2f00:	df 93       	push	r29
    2f02:	cf 93       	push	r28
    2f04:	cd b7       	in	r28, 0x3d	; 61
    2f06:	de b7       	in	r29, 0x3e	; 62
    2f08:	e4 97       	sbiw	r28, 0x34	; 52
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	f8 94       	cli
    2f0e:	de bf       	out	0x3e, r29	; 62
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	cd bf       	out	0x3d, r28	; 61
	uint8 pass1[pass_size];
	uint8 pass2[pass_size];
	LCD_clearScreen();
    2f14:	0e 94 b8 13 	call	0x2770	; 0x2770 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"DOOR LOCKER SYS.");
    2f18:	24 e1       	ldi	r18, 0x14	; 20
    2f1a:	31 e0       	ldi	r19, 0x01	; 1
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	60 e0       	ldi	r22, 0x00	; 0
    2f20:	a9 01       	movw	r20, r18
    2f22:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_displayStringRowColumn>
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	aa e7       	ldi	r26, 0x7A	; 122
    2f2c:	b4 e4       	ldi	r27, 0x44	; 68
    2f2e:	8f a3       	std	Y+39, r24	; 0x27
    2f30:	98 a7       	std	Y+40, r25	; 0x28
    2f32:	a9 a7       	std	Y+41, r26	; 0x29
    2f34:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f36:	6f a1       	ldd	r22, Y+39	; 0x27
    2f38:	78 a5       	ldd	r23, Y+40	; 0x28
    2f3a:	89 a5       	ldd	r24, Y+41	; 0x29
    2f3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	4a ef       	ldi	r20, 0xFA	; 250
    2f44:	54 e4       	ldi	r21, 0x44	; 68
    2f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	8b a3       	std	Y+35, r24	; 0x23
    2f50:	9c a3       	std	Y+36, r25	; 0x24
    2f52:	ad a3       	std	Y+37, r26	; 0x25
    2f54:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f56:	6b a1       	ldd	r22, Y+35	; 0x23
    2f58:	7c a1       	ldd	r23, Y+36	; 0x24
    2f5a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f5c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	40 e8       	ldi	r20, 0x80	; 128
    2f64:	5f e3       	ldi	r21, 0x3F	; 63
    2f66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f6a:	88 23       	and	r24, r24
    2f6c:	2c f4       	brge	.+10     	; 0x2f78 <Create_pass+0x78>
		__ticks = 1;
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	9a a3       	std	Y+34, r25	; 0x22
    2f74:	89 a3       	std	Y+33, r24	; 0x21
    2f76:	3f c0       	rjmp	.+126    	; 0x2ff6 <Create_pass+0xf6>
	else if (__tmp > 65535)
    2f78:	6b a1       	ldd	r22, Y+35	; 0x23
    2f7a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f7c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f7e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	3f ef       	ldi	r19, 0xFF	; 255
    2f84:	4f e7       	ldi	r20, 0x7F	; 127
    2f86:	57 e4       	ldi	r21, 0x47	; 71
    2f88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f8c:	18 16       	cp	r1, r24
    2f8e:	4c f5       	brge	.+82     	; 0x2fe2 <Create_pass+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f90:	6f a1       	ldd	r22, Y+39	; 0x27
    2f92:	78 a5       	ldd	r23, Y+40	; 0x28
    2f94:	89 a5       	ldd	r24, Y+41	; 0x29
    2f96:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e2       	ldi	r20, 0x20	; 32
    2f9e:	51 e4       	ldi	r21, 0x41	; 65
    2fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	bc 01       	movw	r22, r24
    2faa:	cd 01       	movw	r24, r26
    2fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	9a a3       	std	Y+34, r25	; 0x22
    2fb6:	89 a3       	std	Y+33, r24	; 0x21
    2fb8:	0f c0       	rjmp	.+30     	; 0x2fd8 <Create_pass+0xd8>
    2fba:	88 ec       	ldi	r24, 0xC8	; 200
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	98 a3       	std	Y+32, r25	; 0x20
    2fc0:	8f 8f       	std	Y+31, r24	; 0x1f
    2fc2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fc4:	98 a1       	ldd	r25, Y+32	; 0x20
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	f1 f7       	brne	.-4      	; 0x2fc6 <Create_pass+0xc6>
    2fca:	98 a3       	std	Y+32, r25	; 0x20
    2fcc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fce:	89 a1       	ldd	r24, Y+33	; 0x21
    2fd0:	9a a1       	ldd	r25, Y+34	; 0x22
    2fd2:	01 97       	sbiw	r24, 0x01	; 1
    2fd4:	9a a3       	std	Y+34, r25	; 0x22
    2fd6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd8:	89 a1       	ldd	r24, Y+33	; 0x21
    2fda:	9a a1       	ldd	r25, Y+34	; 0x22
    2fdc:	00 97       	sbiw	r24, 0x00	; 0
    2fde:	69 f7       	brne	.-38     	; 0x2fba <Create_pass+0xba>
    2fe0:	14 c0       	rjmp	.+40     	; 0x300a <Create_pass+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe2:	6b a1       	ldd	r22, Y+35	; 0x23
    2fe4:	7c a1       	ldd	r23, Y+36	; 0x24
    2fe6:	8d a1       	ldd	r24, Y+37	; 0x25
    2fe8:	9e a1       	ldd	r25, Y+38	; 0x26
    2fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	9a a3       	std	Y+34, r25	; 0x22
    2ff4:	89 a3       	std	Y+33, r24	; 0x21
    2ff6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ff8:	9a a1       	ldd	r25, Y+34	; 0x22
    2ffa:	9e 8f       	std	Y+30, r25	; 0x1e
    2ffc:	8d 8f       	std	Y+29, r24	; 0x1d
    2ffe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3000:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	f1 f7       	brne	.-4      	; 0x3002 <Create_pass+0x102>
    3006:	9e 8f       	std	Y+30, r25	; 0x1e
    3008:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	LCD_clearScreen();
    300a:	0e 94 b8 13 	call	0x2770	; 0x2770 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Pls Enter Pass:");
    300e:	25 e2       	ldi	r18, 0x25	; 37
    3010:	31 e0       	ldi	r19, 0x01	; 1
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	60 e0       	ldi	r22, 0x00	; 0
    3016:	a9 01       	movw	r20, r18
    3018:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	60 e0       	ldi	r22, 0x00	; 0
    3020:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_moveCursor>
	UART_sendByte(1);
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <UART_sendByte>
	Enter_pass_send(pass1);
    302a:	ce 01       	movw	r24, r28
    302c:	8b 96       	adiw	r24, 0x2b	; 43
    302e:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <Enter_pass_send>
	LCD_clearScreen();
    3032:	0e 94 b8 13 	call	0x2770	; 0x2770 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Pls Renter Pass:");
    3036:	25 e3       	ldi	r18, 0x35	; 53
    3038:	31 e0       	ldi	r19, 0x01	; 1
    303a:	80 e0       	ldi	r24, 0x00	; 0
    303c:	60 e0       	ldi	r22, 0x00	; 0
    303e:	a9 01       	movw	r20, r18
    3040:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	60 e0       	ldi	r22, 0x00	; 0
    3048:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_moveCursor>
	LCD_displayString("same pass:");
    304c:	86 e4       	ldi	r24, 0x46	; 70
    304e:	91 e0       	ldi	r25, 0x01	; 1
    3050:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_displayString>
	LCD_moveCursor(1,10);
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	6a e0       	ldi	r22, 0x0A	; 10
    3058:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_moveCursor>
	Enter_pass_send(pass2);
    305c:	ce 01       	movw	r24, r28
    305e:	c0 96       	adiw	r24, 0x30	; 48
    3060:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <Enter_pass_send>
	if(UART_recieveByte() == 0){
    3064:	0e 94 91 0c 	call	0x1922	; 0x1922 <UART_recieveByte>
    3068:	88 23       	and	r24, r24
    306a:	21 f4       	brne	.+8      	; 0x3074 <Create_pass+0x174>
		g_matched_passwords=1;
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	80 93 d2 01 	sts	0x01D2, r24
    3072:	f6 c0       	rjmp	.+492    	; 0x3260 <Create_pass+0x360>
	}
	else{	LCD_clearScreen();
    3074:	0e 94 b8 13 	call	0x2770	; 0x2770 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Pass Not Match");
    3078:	21 e5       	ldi	r18, 0x51	; 81
    307a:	31 e0       	ldi	r19, 0x01	; 1
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	60 e0       	ldi	r22, 0x00	; 0
    3080:	a9 01       	movw	r20, r18
    3082:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_displayStringRowColumn>
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	aa ef       	ldi	r26, 0xFA	; 250
    308c:	b3 e4       	ldi	r27, 0x43	; 67
    308e:	89 8f       	std	Y+25, r24	; 0x19
    3090:	9a 8f       	std	Y+26, r25	; 0x1a
    3092:	ab 8f       	std	Y+27, r26	; 0x1b
    3094:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3096:	69 8d       	ldd	r22, Y+25	; 0x19
    3098:	7a 8d       	ldd	r23, Y+26	; 0x1a
    309a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    309c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	4a ef       	ldi	r20, 0xFA	; 250
    30a4:	54 e4       	ldi	r21, 0x44	; 68
    30a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	8d 8b       	std	Y+21, r24	; 0x15
    30b0:	9e 8b       	std	Y+22, r25	; 0x16
    30b2:	af 8b       	std	Y+23, r26	; 0x17
    30b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30b6:	6d 89       	ldd	r22, Y+21	; 0x15
    30b8:	7e 89       	ldd	r23, Y+22	; 0x16
    30ba:	8f 89       	ldd	r24, Y+23	; 0x17
    30bc:	98 8d       	ldd	r25, Y+24	; 0x18
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e8       	ldi	r20, 0x80	; 128
    30c4:	5f e3       	ldi	r21, 0x3F	; 63
    30c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30ca:	88 23       	and	r24, r24
    30cc:	2c f4       	brge	.+10     	; 0x30d8 <Create_pass+0x1d8>
		__ticks = 1;
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	9c 8b       	std	Y+20, r25	; 0x14
    30d4:	8b 8b       	std	Y+19, r24	; 0x13
    30d6:	3f c0       	rjmp	.+126    	; 0x3156 <Create_pass+0x256>
	else if (__tmp > 65535)
    30d8:	6d 89       	ldd	r22, Y+21	; 0x15
    30da:	7e 89       	ldd	r23, Y+22	; 0x16
    30dc:	8f 89       	ldd	r24, Y+23	; 0x17
    30de:	98 8d       	ldd	r25, Y+24	; 0x18
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	3f ef       	ldi	r19, 0xFF	; 255
    30e4:	4f e7       	ldi	r20, 0x7F	; 127
    30e6:	57 e4       	ldi	r21, 0x47	; 71
    30e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ec:	18 16       	cp	r1, r24
    30ee:	4c f5       	brge	.+82     	; 0x3142 <Create_pass+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f0:	69 8d       	ldd	r22, Y+25	; 0x19
    30f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	40 e2       	ldi	r20, 0x20	; 32
    30fe:	51 e4       	ldi	r21, 0x41	; 65
    3100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	bc 01       	movw	r22, r24
    310a:	cd 01       	movw	r24, r26
    310c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	9c 8b       	std	Y+20, r25	; 0x14
    3116:	8b 8b       	std	Y+19, r24	; 0x13
    3118:	0f c0       	rjmp	.+30     	; 0x3138 <Create_pass+0x238>
    311a:	88 ec       	ldi	r24, 0xC8	; 200
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	9a 8b       	std	Y+18, r25	; 0x12
    3120:	89 8b       	std	Y+17, r24	; 0x11
    3122:	89 89       	ldd	r24, Y+17	; 0x11
    3124:	9a 89       	ldd	r25, Y+18	; 0x12
    3126:	01 97       	sbiw	r24, 0x01	; 1
    3128:	f1 f7       	brne	.-4      	; 0x3126 <Create_pass+0x226>
    312a:	9a 8b       	std	Y+18, r25	; 0x12
    312c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    312e:	8b 89       	ldd	r24, Y+19	; 0x13
    3130:	9c 89       	ldd	r25, Y+20	; 0x14
    3132:	01 97       	sbiw	r24, 0x01	; 1
    3134:	9c 8b       	std	Y+20, r25	; 0x14
    3136:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3138:	8b 89       	ldd	r24, Y+19	; 0x13
    313a:	9c 89       	ldd	r25, Y+20	; 0x14
    313c:	00 97       	sbiw	r24, 0x00	; 0
    313e:	69 f7       	brne	.-38     	; 0x311a <Create_pass+0x21a>
    3140:	14 c0       	rjmp	.+40     	; 0x316a <Create_pass+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3142:	6d 89       	ldd	r22, Y+21	; 0x15
    3144:	7e 89       	ldd	r23, Y+22	; 0x16
    3146:	8f 89       	ldd	r24, Y+23	; 0x17
    3148:	98 8d       	ldd	r25, Y+24	; 0x18
    314a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	9c 8b       	std	Y+20, r25	; 0x14
    3154:	8b 8b       	std	Y+19, r24	; 0x13
    3156:	8b 89       	ldd	r24, Y+19	; 0x13
    3158:	9c 89       	ldd	r25, Y+20	; 0x14
    315a:	98 8b       	std	Y+16, r25	; 0x10
    315c:	8f 87       	std	Y+15, r24	; 0x0f
    315e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3160:	98 89       	ldd	r25, Y+16	; 0x10
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	f1 f7       	brne	.-4      	; 0x3162 <Create_pass+0x262>
    3166:	98 8b       	std	Y+16, r25	; 0x10
    3168:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	LCD_displayStringRowColumn(1,0,"Try again");
    316a:	20 e6       	ldi	r18, 0x60	; 96
    316c:	31 e0       	ldi	r19, 0x01	; 1
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	60 e0       	ldi	r22, 0x00	; 0
    3172:	a9 01       	movw	r20, r18
    3174:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_displayStringRowColumn>
	g_matched_passwords = 0;
    3178:	10 92 d2 01 	sts	0x01D2, r1
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	af ea       	ldi	r26, 0xAF	; 175
    3182:	b3 e4       	ldi	r27, 0x43	; 67
    3184:	8b 87       	std	Y+11, r24	; 0x0b
    3186:	9c 87       	std	Y+12, r25	; 0x0c
    3188:	ad 87       	std	Y+13, r26	; 0x0d
    318a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    318c:	6b 85       	ldd	r22, Y+11	; 0x0b
    318e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3190:	8d 85       	ldd	r24, Y+13	; 0x0d
    3192:	9e 85       	ldd	r25, Y+14	; 0x0e
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	4a ef       	ldi	r20, 0xFA	; 250
    319a:	54 e4       	ldi	r21, 0x44	; 68
    319c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	8f 83       	std	Y+7, r24	; 0x07
    31a6:	98 87       	std	Y+8, r25	; 0x08
    31a8:	a9 87       	std	Y+9, r26	; 0x09
    31aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31ac:	6f 81       	ldd	r22, Y+7	; 0x07
    31ae:	78 85       	ldd	r23, Y+8	; 0x08
    31b0:	89 85       	ldd	r24, Y+9	; 0x09
    31b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 e8       	ldi	r20, 0x80	; 128
    31ba:	5f e3       	ldi	r21, 0x3F	; 63
    31bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31c0:	88 23       	and	r24, r24
    31c2:	2c f4       	brge	.+10     	; 0x31ce <Create_pass+0x2ce>
		__ticks = 1;
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	9e 83       	std	Y+6, r25	; 0x06
    31ca:	8d 83       	std	Y+5, r24	; 0x05
    31cc:	3f c0       	rjmp	.+126    	; 0x324c <Create_pass+0x34c>
	else if (__tmp > 65535)
    31ce:	6f 81       	ldd	r22, Y+7	; 0x07
    31d0:	78 85       	ldd	r23, Y+8	; 0x08
    31d2:	89 85       	ldd	r24, Y+9	; 0x09
    31d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	3f ef       	ldi	r19, 0xFF	; 255
    31da:	4f e7       	ldi	r20, 0x7F	; 127
    31dc:	57 e4       	ldi	r21, 0x47	; 71
    31de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31e2:	18 16       	cp	r1, r24
    31e4:	4c f5       	brge	.+82     	; 0x3238 <Create_pass+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	40 e2       	ldi	r20, 0x20	; 32
    31f4:	51 e4       	ldi	r21, 0x41	; 65
    31f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	bc 01       	movw	r22, r24
    3200:	cd 01       	movw	r24, r26
    3202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	9e 83       	std	Y+6, r25	; 0x06
    320c:	8d 83       	std	Y+5, r24	; 0x05
    320e:	0f c0       	rjmp	.+30     	; 0x322e <Create_pass+0x32e>
    3210:	88 ec       	ldi	r24, 0xC8	; 200
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	9c 83       	std	Y+4, r25	; 0x04
    3216:	8b 83       	std	Y+3, r24	; 0x03
    3218:	8b 81       	ldd	r24, Y+3	; 0x03
    321a:	9c 81       	ldd	r25, Y+4	; 0x04
    321c:	01 97       	sbiw	r24, 0x01	; 1
    321e:	f1 f7       	brne	.-4      	; 0x321c <Create_pass+0x31c>
    3220:	9c 83       	std	Y+4, r25	; 0x04
    3222:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3224:	8d 81       	ldd	r24, Y+5	; 0x05
    3226:	9e 81       	ldd	r25, Y+6	; 0x06
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	9e 83       	std	Y+6, r25	; 0x06
    322c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    322e:	8d 81       	ldd	r24, Y+5	; 0x05
    3230:	9e 81       	ldd	r25, Y+6	; 0x06
    3232:	00 97       	sbiw	r24, 0x00	; 0
    3234:	69 f7       	brne	.-38     	; 0x3210 <Create_pass+0x310>
    3236:	14 c0       	rjmp	.+40     	; 0x3260 <Create_pass+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3238:	6f 81       	ldd	r22, Y+7	; 0x07
    323a:	78 85       	ldd	r23, Y+8	; 0x08
    323c:	89 85       	ldd	r24, Y+9	; 0x09
    323e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	9e 83       	std	Y+6, r25	; 0x06
    324a:	8d 83       	std	Y+5, r24	; 0x05
    324c:	8d 81       	ldd	r24, Y+5	; 0x05
    324e:	9e 81       	ldd	r25, Y+6	; 0x06
    3250:	9a 83       	std	Y+2, r25	; 0x02
    3252:	89 83       	std	Y+1, r24	; 0x01
    3254:	89 81       	ldd	r24, Y+1	; 0x01
    3256:	9a 81       	ldd	r25, Y+2	; 0x02
    3258:	01 97       	sbiw	r24, 0x01	; 1
    325a:	f1 f7       	brne	.-4      	; 0x3258 <Create_pass+0x358>
    325c:	9a 83       	std	Y+2, r25	; 0x02
    325e:	89 83       	std	Y+1, r24	; 0x01





}
    3260:	e4 96       	adiw	r28, 0x34	; 52
    3262:	0f b6       	in	r0, 0x3f	; 63
    3264:	f8 94       	cli
    3266:	de bf       	out	0x3e, r29	; 62
    3268:	0f be       	out	0x3f, r0	; 63
    326a:	cd bf       	out	0x3d, r28	; 61
    326c:	cf 91       	pop	r28
    326e:	df 91       	pop	r29
    3270:	08 95       	ret

00003272 <pass_checker>:
/*=======================================================================================================================
 * el function dy b2a 3lshan t3ml verify ll pass ely anta md5lo for 1 2 and 3 times w b3den lw lsa 8lt t3ml wait 1 minute
 *=======================================================================================================================
 */
uint8 pass_checker(void){
    3272:	df 93       	push	r29
    3274:	cf 93       	push	r28
    3276:	cd b7       	in	r28, 0x3d	; 61
    3278:	de b7       	in	r29, 0x3e	; 62
    327a:	67 97       	sbiw	r28, 0x17	; 23
    327c:	0f b6       	in	r0, 0x3f	; 63
    327e:	f8 94       	cli
    3280:	de bf       	out	0x3e, r29	; 62
    3282:	0f be       	out	0x3f, r0	; 63
    3284:	cd bf       	out	0x3d, r28	; 61
uint8 pass_check[pass_size];// array ll pass ely ht3ml check 3leh fe el control ecu
uint8 incorrect_pass_counter=0,incorrect_flag=0;
    3286:	19 8a       	std	Y+17, r1	; 0x11
    3288:	18 8a       	std	Y+16, r1	; 0x10
incorrect_flag=1;// hna anta awl m7
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	88 8b       	std	Y+16, r24	; 0x10
    328e:	bc c0       	rjmp	.+376    	; 0x3408 <pass_checker+0x196>
while(incorrect_flag==1){// dy awl mra 3lshan td5l el pass
	    LCD_clearScreen();
    3290:	0e 94 b8 13 	call	0x2770	; 0x2770 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Please Enter ");
    3294:	2a e6       	ldi	r18, 0x6A	; 106
    3296:	31 e0       	ldi	r19, 0x01	; 1
    3298:	80 e0       	ldi	r24, 0x00	; 0
    329a:	60 e0       	ldi	r22, 0x00	; 0
    329c:	a9 01       	movw	r20, r18
    329e:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_displayStringRowColumn>
		LCD_moveCursor(1,0);
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	60 e0       	ldi	r22, 0x00	; 0
    32a6:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_moveCursor>
		LCD_displayString("saved pass:");
    32aa:	88 e7       	ldi	r24, 0x78	; 120
    32ac:	91 e0       	ldi	r25, 0x01	; 1
    32ae:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_displayString>
		UART_sendByte(2);//
    32b2:	82 e0       	ldi	r24, 0x02	; 2
    32b4:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <UART_sendByte>
		Enter_pass_send(pass_check);
    32b8:	ce 01       	movw	r24, r28
    32ba:	42 96       	adiw	r24, 0x12	; 18
    32bc:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <Enter_pass_send>
uint8 after_check=UART_recieveByte();// astna el rd mn el control ecu
    32c0:	0e 94 91 0c 	call	0x1922	; 0x1922 <UART_recieveByte>
    32c4:	8f 87       	std	Y+15, r24	; 0x0f
if(after_check==0){// lw tl3o zy ba3d yb2a tmam
    32c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32c8:	88 23       	and	r24, r24
    32ca:	29 f4       	brne	.+10     	; 0x32d6 <pass_checker+0x64>
	incorrect_pass_counter=0;
    32cc:	19 8a       	std	Y+17, r1	; 0x11
	incorrect_flag=0;
    32ce:	18 8a       	std	Y+16, r1	; 0x10
	return pass_true;
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	8f 8b       	std	Y+23, r24	; 0x17
    32d4:	9e c0       	rjmp	.+316    	; 0x3412 <pass_checker+0x1a0>
}// hna zawd el counter l7d 3 w law wsl 3nd el mara el 3 sa3tha system locked

incorrect_pass_counter++;
    32d6:	89 89       	ldd	r24, Y+17	; 0x11
    32d8:	8f 5f       	subi	r24, 0xFF	; 255
    32da:	89 8b       	std	Y+17, r24	; 0x11
LCD_clearScreen();
    32dc:	0e 94 b8 13 	call	0x2770	; 0x2770 <LCD_clearScreen>
LCD_displayString("Incorrect pass");
    32e0:	84 e8       	ldi	r24, 0x84	; 132
    32e2:	91 e0       	ldi	r25, 0x01	; 1
    32e4:	0e 94 11 13 	call	0x2622	; 0x2622 <LCD_displayString>
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	aa ef       	ldi	r26, 0xFA	; 250
    32ee:	b3 e4       	ldi	r27, 0x43	; 67
    32f0:	8b 87       	std	Y+11, r24	; 0x0b
    32f2:	9c 87       	std	Y+12, r25	; 0x0c
    32f4:	ad 87       	std	Y+13, r26	; 0x0d
    32f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    32fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    32fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	4a ef       	ldi	r20, 0xFA	; 250
    3306:	54 e4       	ldi	r21, 0x44	; 68
    3308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330c:	dc 01       	movw	r26, r24
    330e:	cb 01       	movw	r24, r22
    3310:	8f 83       	std	Y+7, r24	; 0x07
    3312:	98 87       	std	Y+8, r25	; 0x08
    3314:	a9 87       	std	Y+9, r26	; 0x09
    3316:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3318:	6f 81       	ldd	r22, Y+7	; 0x07
    331a:	78 85       	ldd	r23, Y+8	; 0x08
    331c:	89 85       	ldd	r24, Y+9	; 0x09
    331e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	40 e8       	ldi	r20, 0x80	; 128
    3326:	5f e3       	ldi	r21, 0x3F	; 63
    3328:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    332c:	88 23       	and	r24, r24
    332e:	2c f4       	brge	.+10     	; 0x333a <pass_checker+0xc8>
		__ticks = 1;
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	9e 83       	std	Y+6, r25	; 0x06
    3336:	8d 83       	std	Y+5, r24	; 0x05
    3338:	3f c0       	rjmp	.+126    	; 0x33b8 <pass_checker+0x146>
	else if (__tmp > 65535)
    333a:	6f 81       	ldd	r22, Y+7	; 0x07
    333c:	78 85       	ldd	r23, Y+8	; 0x08
    333e:	89 85       	ldd	r24, Y+9	; 0x09
    3340:	9a 85       	ldd	r25, Y+10	; 0x0a
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	3f ef       	ldi	r19, 0xFF	; 255
    3346:	4f e7       	ldi	r20, 0x7F	; 127
    3348:	57 e4       	ldi	r21, 0x47	; 71
    334a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    334e:	18 16       	cp	r1, r24
    3350:	4c f5       	brge	.+82     	; 0x33a4 <pass_checker+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3352:	6b 85       	ldd	r22, Y+11	; 0x0b
    3354:	7c 85       	ldd	r23, Y+12	; 0x0c
    3356:	8d 85       	ldd	r24, Y+13	; 0x0d
    3358:	9e 85       	ldd	r25, Y+14	; 0x0e
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	40 e2       	ldi	r20, 0x20	; 32
    3360:	51 e4       	ldi	r21, 0x41	; 65
    3362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	bc 01       	movw	r22, r24
    336c:	cd 01       	movw	r24, r26
    336e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3372:	dc 01       	movw	r26, r24
    3374:	cb 01       	movw	r24, r22
    3376:	9e 83       	std	Y+6, r25	; 0x06
    3378:	8d 83       	std	Y+5, r24	; 0x05
    337a:	0f c0       	rjmp	.+30     	; 0x339a <pass_checker+0x128>
    337c:	88 ec       	ldi	r24, 0xC8	; 200
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	9c 83       	std	Y+4, r25	; 0x04
    3382:	8b 83       	std	Y+3, r24	; 0x03
    3384:	8b 81       	ldd	r24, Y+3	; 0x03
    3386:	9c 81       	ldd	r25, Y+4	; 0x04
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	f1 f7       	brne	.-4      	; 0x3388 <pass_checker+0x116>
    338c:	9c 83       	std	Y+4, r25	; 0x04
    338e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3390:	8d 81       	ldd	r24, Y+5	; 0x05
    3392:	9e 81       	ldd	r25, Y+6	; 0x06
    3394:	01 97       	sbiw	r24, 0x01	; 1
    3396:	9e 83       	std	Y+6, r25	; 0x06
    3398:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339a:	8d 81       	ldd	r24, Y+5	; 0x05
    339c:	9e 81       	ldd	r25, Y+6	; 0x06
    339e:	00 97       	sbiw	r24, 0x00	; 0
    33a0:	69 f7       	brne	.-38     	; 0x337c <pass_checker+0x10a>
    33a2:	14 c0       	rjmp	.+40     	; 0x33cc <pass_checker+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a4:	6f 81       	ldd	r22, Y+7	; 0x07
    33a6:	78 85       	ldd	r23, Y+8	; 0x08
    33a8:	89 85       	ldd	r24, Y+9	; 0x09
    33aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b0:	dc 01       	movw	r26, r24
    33b2:	cb 01       	movw	r24, r22
    33b4:	9e 83       	std	Y+6, r25	; 0x06
    33b6:	8d 83       	std	Y+5, r24	; 0x05
    33b8:	8d 81       	ldd	r24, Y+5	; 0x05
    33ba:	9e 81       	ldd	r25, Y+6	; 0x06
    33bc:	9a 83       	std	Y+2, r25	; 0x02
    33be:	89 83       	std	Y+1, r24	; 0x01
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
    33c2:	9a 81       	ldd	r25, Y+2	; 0x02
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	f1 f7       	brne	.-4      	; 0x33c4 <pass_checker+0x152>
    33c8:	9a 83       	std	Y+2, r25	; 0x02
    33ca:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(500);
if(incorrect_pass_counter==3){
    33cc:	89 89       	ldd	r24, Y+17	; 0x11
    33ce:	83 30       	cpi	r24, 0x03	; 3
    33d0:	d9 f4       	brne	.+54     	; 0x3408 <pass_checker+0x196>
    UART_sendByte(5);
    33d2:	85 e0       	ldi	r24, 0x05	; 5
    33d4:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <UART_sendByte>
	LCD_clearScreen();
    33d8:	0e 94 b8 13 	call	0x2770	; 0x2770 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"System Locked ");
    33dc:	23 e9       	ldi	r18, 0x93	; 147
    33de:	31 e0       	ldi	r19, 0x01	; 1
    33e0:	80 e0       	ldi	r24, 0x00	; 0
    33e2:	60 e0       	ldi	r22, 0x00	; 0
    33e4:	a9 01       	movw	r20, r18
    33e6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Wait for 1 Min. ");
    33ea:	22 ea       	ldi	r18, 0xA2	; 162
    33ec:	31 e0       	ldi	r19, 0x01	; 1
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	60 e0       	ldi	r22, 0x00	; 0
    33f2:	a9 01       	movw	r20, r18
    33f4:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_displayStringRowColumn>
	while(UART_recieveByte()!=9);
    33f8:	0e 94 91 0c 	call	0x1922	; 0x1922 <UART_recieveByte>
    33fc:	89 30       	cpi	r24, 0x09	; 9
    33fe:	e1 f7       	brne	.-8      	; 0x33f8 <pass_checker+0x186>
	incorrect_pass_counter=0;
    3400:	19 8a       	std	Y+17, r1	; 0x11
	incorrect_flag=0;
    3402:	18 8a       	std	Y+16, r1	; 0x10
return pass_false;
    3404:	1f 8a       	std	Y+23, r1	; 0x17
    3406:	05 c0       	rjmp	.+10     	; 0x3412 <pass_checker+0x1a0>
 */
uint8 pass_checker(void){
uint8 pass_check[pass_size];// array ll pass ely ht3ml check 3leh fe el control ecu
uint8 incorrect_pass_counter=0,incorrect_flag=0;
incorrect_flag=1;// hna anta awl m7
while(incorrect_flag==1){// dy awl mra 3lshan td5l el pass
    3408:	88 89       	ldd	r24, Y+16	; 0x10
    340a:	81 30       	cpi	r24, 0x01	; 1
    340c:	09 f4       	brne	.+2      	; 0x3410 <pass_checker+0x19e>
    340e:	40 cf       	rjmp	.-384    	; 0x3290 <pass_checker+0x1e>
	incorrect_flag=0;
return pass_false;
}

}
return pass_false;
    3410:	1f 8a       	std	Y+23, r1	; 0x17
    3412:	8f 89       	ldd	r24, Y+23	; 0x17
}
    3414:	67 96       	adiw	r28, 0x17	; 23
    3416:	0f b6       	in	r0, 0x3f	; 63
    3418:	f8 94       	cli
    341a:	de bf       	out	0x3e, r29	; 62
    341c:	0f be       	out	0x3f, r0	; 63
    341e:	cd bf       	out	0x3d, r28	; 61
    3420:	cf 91       	pop	r28
    3422:	df 91       	pop	r29
    3424:	08 95       	ret

00003426 <Timer0_OverflowCallback>:
 *====================================================================================================================
 */


void Timer0_OverflowCallback(void)
{
    3426:	df 93       	push	r29
    3428:	cf 93       	push	r28
    342a:	cd b7       	in	r28, 0x3d	; 61
    342c:	de b7       	in	r29, 0x3e	; 62
	g_timer0_overflow_count++;
    342e:	80 91 d0 01 	lds	r24, 0x01D0
    3432:	90 91 d1 01 	lds	r25, 0x01D1
    3436:	01 96       	adiw	r24, 0x01	; 1
    3438:	90 93 d1 01 	sts	0x01D1, r25
    343c:	80 93 d0 01 	sts	0x01D0, r24
}
    3440:	cf 91       	pop	r28
    3442:	df 91       	pop	r29
    3444:	08 95       	ret

00003446 <__udivmodsi4>:
    3446:	a1 e2       	ldi	r26, 0x21	; 33
    3448:	1a 2e       	mov	r1, r26
    344a:	aa 1b       	sub	r26, r26
    344c:	bb 1b       	sub	r27, r27
    344e:	fd 01       	movw	r30, r26
    3450:	0d c0       	rjmp	.+26     	; 0x346c <__udivmodsi4_ep>

00003452 <__udivmodsi4_loop>:
    3452:	aa 1f       	adc	r26, r26
    3454:	bb 1f       	adc	r27, r27
    3456:	ee 1f       	adc	r30, r30
    3458:	ff 1f       	adc	r31, r31
    345a:	a2 17       	cp	r26, r18
    345c:	b3 07       	cpc	r27, r19
    345e:	e4 07       	cpc	r30, r20
    3460:	f5 07       	cpc	r31, r21
    3462:	20 f0       	brcs	.+8      	; 0x346c <__udivmodsi4_ep>
    3464:	a2 1b       	sub	r26, r18
    3466:	b3 0b       	sbc	r27, r19
    3468:	e4 0b       	sbc	r30, r20
    346a:	f5 0b       	sbc	r31, r21

0000346c <__udivmodsi4_ep>:
    346c:	66 1f       	adc	r22, r22
    346e:	77 1f       	adc	r23, r23
    3470:	88 1f       	adc	r24, r24
    3472:	99 1f       	adc	r25, r25
    3474:	1a 94       	dec	r1
    3476:	69 f7       	brne	.-38     	; 0x3452 <__udivmodsi4_loop>
    3478:	60 95       	com	r22
    347a:	70 95       	com	r23
    347c:	80 95       	com	r24
    347e:	90 95       	com	r25
    3480:	9b 01       	movw	r18, r22
    3482:	ac 01       	movw	r20, r24
    3484:	bd 01       	movw	r22, r26
    3486:	cf 01       	movw	r24, r30
    3488:	08 95       	ret

0000348a <__prologue_saves__>:
    348a:	2f 92       	push	r2
    348c:	3f 92       	push	r3
    348e:	4f 92       	push	r4
    3490:	5f 92       	push	r5
    3492:	6f 92       	push	r6
    3494:	7f 92       	push	r7
    3496:	8f 92       	push	r8
    3498:	9f 92       	push	r9
    349a:	af 92       	push	r10
    349c:	bf 92       	push	r11
    349e:	cf 92       	push	r12
    34a0:	df 92       	push	r13
    34a2:	ef 92       	push	r14
    34a4:	ff 92       	push	r15
    34a6:	0f 93       	push	r16
    34a8:	1f 93       	push	r17
    34aa:	cf 93       	push	r28
    34ac:	df 93       	push	r29
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62
    34b2:	ca 1b       	sub	r28, r26
    34b4:	db 0b       	sbc	r29, r27
    34b6:	0f b6       	in	r0, 0x3f	; 63
    34b8:	f8 94       	cli
    34ba:	de bf       	out	0x3e, r29	; 62
    34bc:	0f be       	out	0x3f, r0	; 63
    34be:	cd bf       	out	0x3d, r28	; 61
    34c0:	09 94       	ijmp

000034c2 <__epilogue_restores__>:
    34c2:	2a 88       	ldd	r2, Y+18	; 0x12
    34c4:	39 88       	ldd	r3, Y+17	; 0x11
    34c6:	48 88       	ldd	r4, Y+16	; 0x10
    34c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    34ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    34cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    34ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    34d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    34d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    34d4:	b9 84       	ldd	r11, Y+9	; 0x09
    34d6:	c8 84       	ldd	r12, Y+8	; 0x08
    34d8:	df 80       	ldd	r13, Y+7	; 0x07
    34da:	ee 80       	ldd	r14, Y+6	; 0x06
    34dc:	fd 80       	ldd	r15, Y+5	; 0x05
    34de:	0c 81       	ldd	r16, Y+4	; 0x04
    34e0:	1b 81       	ldd	r17, Y+3	; 0x03
    34e2:	aa 81       	ldd	r26, Y+2	; 0x02
    34e4:	b9 81       	ldd	r27, Y+1	; 0x01
    34e6:	ce 0f       	add	r28, r30
    34e8:	d1 1d       	adc	r29, r1
    34ea:	0f b6       	in	r0, 0x3f	; 63
    34ec:	f8 94       	cli
    34ee:	de bf       	out	0x3e, r29	; 62
    34f0:	0f be       	out	0x3f, r0	; 63
    34f2:	cd bf       	out	0x3d, r28	; 61
    34f4:	ed 01       	movw	r28, r26
    34f6:	08 95       	ret

000034f8 <itoa>:
    34f8:	fb 01       	movw	r30, r22
    34fa:	9f 01       	movw	r18, r30
    34fc:	e8 94       	clt
    34fe:	42 30       	cpi	r20, 0x02	; 2
    3500:	c4 f0       	brlt	.+48     	; 0x3532 <itoa+0x3a>
    3502:	45 32       	cpi	r20, 0x25	; 37
    3504:	b4 f4       	brge	.+44     	; 0x3532 <itoa+0x3a>
    3506:	4a 30       	cpi	r20, 0x0A	; 10
    3508:	29 f4       	brne	.+10     	; 0x3514 <itoa+0x1c>
    350a:	97 fb       	bst	r25, 7
    350c:	1e f4       	brtc	.+6      	; 0x3514 <itoa+0x1c>
    350e:	90 95       	com	r25
    3510:	81 95       	neg	r24
    3512:	9f 4f       	sbci	r25, 0xFF	; 255
    3514:	64 2f       	mov	r22, r20
    3516:	77 27       	eor	r23, r23
    3518:	0e 94 ad 1a 	call	0x355a	; 0x355a <__udivmodhi4>
    351c:	80 5d       	subi	r24, 0xD0	; 208
    351e:	8a 33       	cpi	r24, 0x3A	; 58
    3520:	0c f0       	brlt	.+2      	; 0x3524 <itoa+0x2c>
    3522:	89 5d       	subi	r24, 0xD9	; 217
    3524:	81 93       	st	Z+, r24
    3526:	cb 01       	movw	r24, r22
    3528:	00 97       	sbiw	r24, 0x00	; 0
    352a:	a1 f7       	brne	.-24     	; 0x3514 <itoa+0x1c>
    352c:	16 f4       	brtc	.+4      	; 0x3532 <itoa+0x3a>
    352e:	5d e2       	ldi	r21, 0x2D	; 45
    3530:	51 93       	st	Z+, r21
    3532:	10 82       	st	Z, r1
    3534:	c9 01       	movw	r24, r18
    3536:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <strrev>

0000353a <strrev>:
    353a:	dc 01       	movw	r26, r24
    353c:	fc 01       	movw	r30, r24
    353e:	67 2f       	mov	r22, r23
    3540:	71 91       	ld	r23, Z+
    3542:	77 23       	and	r23, r23
    3544:	e1 f7       	brne	.-8      	; 0x353e <strrev+0x4>
    3546:	32 97       	sbiw	r30, 0x02	; 2
    3548:	04 c0       	rjmp	.+8      	; 0x3552 <strrev+0x18>
    354a:	7c 91       	ld	r23, X
    354c:	6d 93       	st	X+, r22
    354e:	70 83       	st	Z, r23
    3550:	62 91       	ld	r22, -Z
    3552:	ae 17       	cp	r26, r30
    3554:	bf 07       	cpc	r27, r31
    3556:	c8 f3       	brcs	.-14     	; 0x354a <strrev+0x10>
    3558:	08 95       	ret

0000355a <__udivmodhi4>:
    355a:	aa 1b       	sub	r26, r26
    355c:	bb 1b       	sub	r27, r27
    355e:	51 e1       	ldi	r21, 0x11	; 17
    3560:	07 c0       	rjmp	.+14     	; 0x3570 <__udivmodhi4_ep>

00003562 <__udivmodhi4_loop>:
    3562:	aa 1f       	adc	r26, r26
    3564:	bb 1f       	adc	r27, r27
    3566:	a6 17       	cp	r26, r22
    3568:	b7 07       	cpc	r27, r23
    356a:	10 f0       	brcs	.+4      	; 0x3570 <__udivmodhi4_ep>
    356c:	a6 1b       	sub	r26, r22
    356e:	b7 0b       	sbc	r27, r23

00003570 <__udivmodhi4_ep>:
    3570:	88 1f       	adc	r24, r24
    3572:	99 1f       	adc	r25, r25
    3574:	5a 95       	dec	r21
    3576:	a9 f7       	brne	.-22     	; 0x3562 <__udivmodhi4_loop>
    3578:	80 95       	com	r24
    357a:	90 95       	com	r25
    357c:	bc 01       	movw	r22, r24
    357e:	cd 01       	movw	r24, r26
    3580:	08 95       	ret

00003582 <_exit>:
    3582:	f8 94       	cli

00003584 <__stop_program>:
    3584:	ff cf       	rjmp	.-2      	; 0x3584 <__stop_program>
