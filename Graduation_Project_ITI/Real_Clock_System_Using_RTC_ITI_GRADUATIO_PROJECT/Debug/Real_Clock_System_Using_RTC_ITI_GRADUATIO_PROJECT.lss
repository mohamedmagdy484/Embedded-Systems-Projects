
Real_Clock_System_Using_RTC_ITI_GRADUATIO_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002bc  00800060  00002dba  00002e4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  0080031c  0080031c  0000310a  2**0
                  ALLOC
  3 .stab         00005d00  00000000  00000000  0000310c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e0f  00000000  00000000  00008e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  0000ac1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000012e  00000000  00000000  0000acfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000015d2  00000000  00000000  0000ae29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bbb  00000000  00000000  0000c3fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bac  00000000  00000000  0000cfb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000100  00000000  00000000  0000db64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000289  00000000  00000000  0000dc64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007d6  00000000  00000000  0000deed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e6c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 31       	cpi	r26, 0x1C	; 28
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	ac e1       	ldi	r26, 0x1C	; 28
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 33       	cpi	r26, 0x3F	; 63
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3d 11 	call	0x227a	; 0x227a <main>
      8a:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_fpadd_parts>:
      92:	a0 e0       	ldi	r26, 0x00	; 0
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__prologue_saves__>
      9e:	dc 01       	movw	r26, r24
      a0:	2b 01       	movw	r4, r22
      a2:	fa 01       	movw	r30, r20
      a4:	9c 91       	ld	r25, X
      a6:	92 30       	cpi	r25, 0x02	; 2
      a8:	08 f4       	brcc	.+2      	; 0xac <_fpadd_parts+0x1a>
      aa:	39 c1       	rjmp	.+626    	; 0x31e <_fpadd_parts+0x28c>
      ac:	eb 01       	movw	r28, r22
      ae:	88 81       	ld	r24, Y
      b0:	82 30       	cpi	r24, 0x02	; 2
      b2:	08 f4       	brcc	.+2      	; 0xb6 <_fpadd_parts+0x24>
      b4:	33 c1       	rjmp	.+614    	; 0x31c <_fpadd_parts+0x28a>
      b6:	94 30       	cpi	r25, 0x04	; 4
      b8:	69 f4       	brne	.+26     	; 0xd4 <_fpadd_parts+0x42>
      ba:	84 30       	cpi	r24, 0x04	; 4
      bc:	09 f0       	breq	.+2      	; 0xc0 <_fpadd_parts+0x2e>
      be:	2f c1       	rjmp	.+606    	; 0x31e <_fpadd_parts+0x28c>
      c0:	11 96       	adiw	r26, 0x01	; 1
      c2:	9c 91       	ld	r25, X
      c4:	11 97       	sbiw	r26, 0x01	; 1
      c6:	89 81       	ldd	r24, Y+1	; 0x01
      c8:	98 17       	cp	r25, r24
      ca:	09 f4       	brne	.+2      	; 0xce <_fpadd_parts+0x3c>
      cc:	28 c1       	rjmp	.+592    	; 0x31e <_fpadd_parts+0x28c>
      ce:	af e0       	ldi	r26, 0x0F	; 15
      d0:	b2 e0       	ldi	r27, 0x02	; 2
      d2:	25 c1       	rjmp	.+586    	; 0x31e <_fpadd_parts+0x28c>
      d4:	84 30       	cpi	r24, 0x04	; 4
      d6:	09 f4       	brne	.+2      	; 0xda <_fpadd_parts+0x48>
      d8:	21 c1       	rjmp	.+578    	; 0x31c <_fpadd_parts+0x28a>
      da:	82 30       	cpi	r24, 0x02	; 2
      dc:	a9 f4       	brne	.+42     	; 0x108 <_fpadd_parts+0x76>
      de:	92 30       	cpi	r25, 0x02	; 2
      e0:	09 f0       	breq	.+2      	; 0xe4 <_fpadd_parts+0x52>
      e2:	1d c1       	rjmp	.+570    	; 0x31e <_fpadd_parts+0x28c>
      e4:	9a 01       	movw	r18, r20
      e6:	ad 01       	movw	r20, r26
      e8:	88 e0       	ldi	r24, 0x08	; 8
      ea:	ea 01       	movw	r28, r20
      ec:	09 90       	ld	r0, Y+
      ee:	ae 01       	movw	r20, r28
      f0:	e9 01       	movw	r28, r18
      f2:	09 92       	st	Y+, r0
      f4:	9e 01       	movw	r18, r28
      f6:	81 50       	subi	r24, 0x01	; 1
      f8:	c1 f7       	brne	.-16     	; 0xea <_fpadd_parts+0x58>
      fa:	e2 01       	movw	r28, r4
      fc:	89 81       	ldd	r24, Y+1	; 0x01
      fe:	11 96       	adiw	r26, 0x01	; 1
     100:	9c 91       	ld	r25, X
     102:	89 23       	and	r24, r25
     104:	81 83       	std	Z+1, r24	; 0x01
     106:	08 c1       	rjmp	.+528    	; 0x318 <_fpadd_parts+0x286>
     108:	92 30       	cpi	r25, 0x02	; 2
     10a:	09 f4       	brne	.+2      	; 0x10e <_fpadd_parts+0x7c>
     10c:	07 c1       	rjmp	.+526    	; 0x31c <_fpadd_parts+0x28a>
     10e:	12 96       	adiw	r26, 0x02	; 2
     110:	2d 90       	ld	r2, X+
     112:	3c 90       	ld	r3, X
     114:	13 97       	sbiw	r26, 0x03	; 3
     116:	eb 01       	movw	r28, r22
     118:	8a 81       	ldd	r24, Y+2	; 0x02
     11a:	9b 81       	ldd	r25, Y+3	; 0x03
     11c:	14 96       	adiw	r26, 0x04	; 4
     11e:	ad 90       	ld	r10, X+
     120:	bd 90       	ld	r11, X+
     122:	cd 90       	ld	r12, X+
     124:	dc 90       	ld	r13, X
     126:	17 97       	sbiw	r26, 0x07	; 7
     128:	ec 80       	ldd	r14, Y+4	; 0x04
     12a:	fd 80       	ldd	r15, Y+5	; 0x05
     12c:	0e 81       	ldd	r16, Y+6	; 0x06
     12e:	1f 81       	ldd	r17, Y+7	; 0x07
     130:	91 01       	movw	r18, r2
     132:	28 1b       	sub	r18, r24
     134:	39 0b       	sbc	r19, r25
     136:	b9 01       	movw	r22, r18
     138:	37 ff       	sbrs	r19, 7
     13a:	04 c0       	rjmp	.+8      	; 0x144 <_fpadd_parts+0xb2>
     13c:	66 27       	eor	r22, r22
     13e:	77 27       	eor	r23, r23
     140:	62 1b       	sub	r22, r18
     142:	73 0b       	sbc	r23, r19
     144:	60 32       	cpi	r22, 0x20	; 32
     146:	71 05       	cpc	r23, r1
     148:	0c f0       	brlt	.+2      	; 0x14c <_fpadd_parts+0xba>
     14a:	61 c0       	rjmp	.+194    	; 0x20e <_fpadd_parts+0x17c>
     14c:	12 16       	cp	r1, r18
     14e:	13 06       	cpc	r1, r19
     150:	6c f5       	brge	.+90     	; 0x1ac <_fpadd_parts+0x11a>
     152:	37 01       	movw	r6, r14
     154:	48 01       	movw	r8, r16
     156:	06 2e       	mov	r0, r22
     158:	04 c0       	rjmp	.+8      	; 0x162 <_fpadd_parts+0xd0>
     15a:	96 94       	lsr	r9
     15c:	87 94       	ror	r8
     15e:	77 94       	ror	r7
     160:	67 94       	ror	r6
     162:	0a 94       	dec	r0
     164:	d2 f7       	brpl	.-12     	; 0x15a <_fpadd_parts+0xc8>
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	40 e0       	ldi	r20, 0x00	; 0
     16c:	50 e0       	ldi	r21, 0x00	; 0
     16e:	04 c0       	rjmp	.+8      	; 0x178 <_fpadd_parts+0xe6>
     170:	22 0f       	add	r18, r18
     172:	33 1f       	adc	r19, r19
     174:	44 1f       	adc	r20, r20
     176:	55 1f       	adc	r21, r21
     178:	6a 95       	dec	r22
     17a:	d2 f7       	brpl	.-12     	; 0x170 <_fpadd_parts+0xde>
     17c:	21 50       	subi	r18, 0x01	; 1
     17e:	30 40       	sbci	r19, 0x00	; 0
     180:	40 40       	sbci	r20, 0x00	; 0
     182:	50 40       	sbci	r21, 0x00	; 0
     184:	2e 21       	and	r18, r14
     186:	3f 21       	and	r19, r15
     188:	40 23       	and	r20, r16
     18a:	51 23       	and	r21, r17
     18c:	21 15       	cp	r18, r1
     18e:	31 05       	cpc	r19, r1
     190:	41 05       	cpc	r20, r1
     192:	51 05       	cpc	r21, r1
     194:	21 f0       	breq	.+8      	; 0x19e <_fpadd_parts+0x10c>
     196:	21 e0       	ldi	r18, 0x01	; 1
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e0       	ldi	r20, 0x00	; 0
     19c:	50 e0       	ldi	r21, 0x00	; 0
     19e:	79 01       	movw	r14, r18
     1a0:	8a 01       	movw	r16, r20
     1a2:	e6 28       	or	r14, r6
     1a4:	f7 28       	or	r15, r7
     1a6:	08 29       	or	r16, r8
     1a8:	19 29       	or	r17, r9
     1aa:	3c c0       	rjmp	.+120    	; 0x224 <_fpadd_parts+0x192>
     1ac:	23 2b       	or	r18, r19
     1ae:	d1 f1       	breq	.+116    	; 0x224 <_fpadd_parts+0x192>
     1b0:	26 0e       	add	r2, r22
     1b2:	37 1e       	adc	r3, r23
     1b4:	35 01       	movw	r6, r10
     1b6:	46 01       	movw	r8, r12
     1b8:	06 2e       	mov	r0, r22
     1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <_fpadd_parts+0x132>
     1bc:	96 94       	lsr	r9
     1be:	87 94       	ror	r8
     1c0:	77 94       	ror	r7
     1c2:	67 94       	ror	r6
     1c4:	0a 94       	dec	r0
     1c6:	d2 f7       	brpl	.-12     	; 0x1bc <_fpadd_parts+0x12a>
     1c8:	21 e0       	ldi	r18, 0x01	; 1
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	04 c0       	rjmp	.+8      	; 0x1da <_fpadd_parts+0x148>
     1d2:	22 0f       	add	r18, r18
     1d4:	33 1f       	adc	r19, r19
     1d6:	44 1f       	adc	r20, r20
     1d8:	55 1f       	adc	r21, r21
     1da:	6a 95       	dec	r22
     1dc:	d2 f7       	brpl	.-12     	; 0x1d2 <_fpadd_parts+0x140>
     1de:	21 50       	subi	r18, 0x01	; 1
     1e0:	30 40       	sbci	r19, 0x00	; 0
     1e2:	40 40       	sbci	r20, 0x00	; 0
     1e4:	50 40       	sbci	r21, 0x00	; 0
     1e6:	2a 21       	and	r18, r10
     1e8:	3b 21       	and	r19, r11
     1ea:	4c 21       	and	r20, r12
     1ec:	5d 21       	and	r21, r13
     1ee:	21 15       	cp	r18, r1
     1f0:	31 05       	cpc	r19, r1
     1f2:	41 05       	cpc	r20, r1
     1f4:	51 05       	cpc	r21, r1
     1f6:	21 f0       	breq	.+8      	; 0x200 <_fpadd_parts+0x16e>
     1f8:	21 e0       	ldi	r18, 0x01	; 1
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	40 e0       	ldi	r20, 0x00	; 0
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	59 01       	movw	r10, r18
     202:	6a 01       	movw	r12, r20
     204:	a6 28       	or	r10, r6
     206:	b7 28       	or	r11, r7
     208:	c8 28       	or	r12, r8
     20a:	d9 28       	or	r13, r9
     20c:	0b c0       	rjmp	.+22     	; 0x224 <_fpadd_parts+0x192>
     20e:	82 15       	cp	r24, r2
     210:	93 05       	cpc	r25, r3
     212:	2c f0       	brlt	.+10     	; 0x21e <_fpadd_parts+0x18c>
     214:	1c 01       	movw	r2, r24
     216:	aa 24       	eor	r10, r10
     218:	bb 24       	eor	r11, r11
     21a:	65 01       	movw	r12, r10
     21c:	03 c0       	rjmp	.+6      	; 0x224 <_fpadd_parts+0x192>
     21e:	ee 24       	eor	r14, r14
     220:	ff 24       	eor	r15, r15
     222:	87 01       	movw	r16, r14
     224:	11 96       	adiw	r26, 0x01	; 1
     226:	9c 91       	ld	r25, X
     228:	d2 01       	movw	r26, r4
     22a:	11 96       	adiw	r26, 0x01	; 1
     22c:	8c 91       	ld	r24, X
     22e:	98 17       	cp	r25, r24
     230:	09 f4       	brne	.+2      	; 0x234 <_fpadd_parts+0x1a2>
     232:	45 c0       	rjmp	.+138    	; 0x2be <_fpadd_parts+0x22c>
     234:	99 23       	and	r25, r25
     236:	39 f0       	breq	.+14     	; 0x246 <_fpadd_parts+0x1b4>
     238:	a8 01       	movw	r20, r16
     23a:	97 01       	movw	r18, r14
     23c:	2a 19       	sub	r18, r10
     23e:	3b 09       	sbc	r19, r11
     240:	4c 09       	sbc	r20, r12
     242:	5d 09       	sbc	r21, r13
     244:	06 c0       	rjmp	.+12     	; 0x252 <_fpadd_parts+0x1c0>
     246:	a6 01       	movw	r20, r12
     248:	95 01       	movw	r18, r10
     24a:	2e 19       	sub	r18, r14
     24c:	3f 09       	sbc	r19, r15
     24e:	40 0b       	sbc	r20, r16
     250:	51 0b       	sbc	r21, r17
     252:	57 fd       	sbrc	r21, 7
     254:	08 c0       	rjmp	.+16     	; 0x266 <_fpadd_parts+0x1d4>
     256:	11 82       	std	Z+1, r1	; 0x01
     258:	33 82       	std	Z+3, r3	; 0x03
     25a:	22 82       	std	Z+2, r2	; 0x02
     25c:	24 83       	std	Z+4, r18	; 0x04
     25e:	35 83       	std	Z+5, r19	; 0x05
     260:	46 83       	std	Z+6, r20	; 0x06
     262:	57 83       	std	Z+7, r21	; 0x07
     264:	1d c0       	rjmp	.+58     	; 0x2a0 <_fpadd_parts+0x20e>
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	81 83       	std	Z+1, r24	; 0x01
     26a:	33 82       	std	Z+3, r3	; 0x03
     26c:	22 82       	std	Z+2, r2	; 0x02
     26e:	88 27       	eor	r24, r24
     270:	99 27       	eor	r25, r25
     272:	dc 01       	movw	r26, r24
     274:	82 1b       	sub	r24, r18
     276:	93 0b       	sbc	r25, r19
     278:	a4 0b       	sbc	r26, r20
     27a:	b5 0b       	sbc	r27, r21
     27c:	84 83       	std	Z+4, r24	; 0x04
     27e:	95 83       	std	Z+5, r25	; 0x05
     280:	a6 83       	std	Z+6, r26	; 0x06
     282:	b7 83       	std	Z+7, r27	; 0x07
     284:	0d c0       	rjmp	.+26     	; 0x2a0 <_fpadd_parts+0x20e>
     286:	22 0f       	add	r18, r18
     288:	33 1f       	adc	r19, r19
     28a:	44 1f       	adc	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	24 83       	std	Z+4, r18	; 0x04
     290:	35 83       	std	Z+5, r19	; 0x05
     292:	46 83       	std	Z+6, r20	; 0x06
     294:	57 83       	std	Z+7, r21	; 0x07
     296:	82 81       	ldd	r24, Z+2	; 0x02
     298:	93 81       	ldd	r25, Z+3	; 0x03
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	93 83       	std	Z+3, r25	; 0x03
     29e:	82 83       	std	Z+2, r24	; 0x02
     2a0:	24 81       	ldd	r18, Z+4	; 0x04
     2a2:	35 81       	ldd	r19, Z+5	; 0x05
     2a4:	46 81       	ldd	r20, Z+6	; 0x06
     2a6:	57 81       	ldd	r21, Z+7	; 0x07
     2a8:	da 01       	movw	r26, r20
     2aa:	c9 01       	movw	r24, r18
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	a1 09       	sbc	r26, r1
     2b0:	b1 09       	sbc	r27, r1
     2b2:	8f 5f       	subi	r24, 0xFF	; 255
     2b4:	9f 4f       	sbci	r25, 0xFF	; 255
     2b6:	af 4f       	sbci	r26, 0xFF	; 255
     2b8:	bf 43       	sbci	r27, 0x3F	; 63
     2ba:	28 f3       	brcs	.-54     	; 0x286 <_fpadd_parts+0x1f4>
     2bc:	0b c0       	rjmp	.+22     	; 0x2d4 <_fpadd_parts+0x242>
     2be:	91 83       	std	Z+1, r25	; 0x01
     2c0:	33 82       	std	Z+3, r3	; 0x03
     2c2:	22 82       	std	Z+2, r2	; 0x02
     2c4:	ea 0c       	add	r14, r10
     2c6:	fb 1c       	adc	r15, r11
     2c8:	0c 1d       	adc	r16, r12
     2ca:	1d 1d       	adc	r17, r13
     2cc:	e4 82       	std	Z+4, r14	; 0x04
     2ce:	f5 82       	std	Z+5, r15	; 0x05
     2d0:	06 83       	std	Z+6, r16	; 0x06
     2d2:	17 83       	std	Z+7, r17	; 0x07
     2d4:	83 e0       	ldi	r24, 0x03	; 3
     2d6:	80 83       	st	Z, r24
     2d8:	24 81       	ldd	r18, Z+4	; 0x04
     2da:	35 81       	ldd	r19, Z+5	; 0x05
     2dc:	46 81       	ldd	r20, Z+6	; 0x06
     2de:	57 81       	ldd	r21, Z+7	; 0x07
     2e0:	57 ff       	sbrs	r21, 7
     2e2:	1a c0       	rjmp	.+52     	; 0x318 <_fpadd_parts+0x286>
     2e4:	c9 01       	movw	r24, r18
     2e6:	aa 27       	eor	r26, r26
     2e8:	97 fd       	sbrc	r25, 7
     2ea:	a0 95       	com	r26
     2ec:	ba 2f       	mov	r27, r26
     2ee:	81 70       	andi	r24, 0x01	; 1
     2f0:	90 70       	andi	r25, 0x00	; 0
     2f2:	a0 70       	andi	r26, 0x00	; 0
     2f4:	b0 70       	andi	r27, 0x00	; 0
     2f6:	56 95       	lsr	r21
     2f8:	47 95       	ror	r20
     2fa:	37 95       	ror	r19
     2fc:	27 95       	ror	r18
     2fe:	82 2b       	or	r24, r18
     300:	93 2b       	or	r25, r19
     302:	a4 2b       	or	r26, r20
     304:	b5 2b       	or	r27, r21
     306:	84 83       	std	Z+4, r24	; 0x04
     308:	95 83       	std	Z+5, r25	; 0x05
     30a:	a6 83       	std	Z+6, r26	; 0x06
     30c:	b7 83       	std	Z+7, r27	; 0x07
     30e:	82 81       	ldd	r24, Z+2	; 0x02
     310:	93 81       	ldd	r25, Z+3	; 0x03
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	93 83       	std	Z+3, r25	; 0x03
     316:	82 83       	std	Z+2, r24	; 0x02
     318:	df 01       	movw	r26, r30
     31a:	01 c0       	rjmp	.+2      	; 0x31e <_fpadd_parts+0x28c>
     31c:	d2 01       	movw	r26, r4
     31e:	cd 01       	movw	r24, r26
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	e2 e1       	ldi	r30, 0x12	; 18
     326:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__epilogue_restores__>

0000032a <__subsf3>:
     32a:	a0 e2       	ldi	r26, 0x20	; 32
     32c:	b0 e0       	ldi	r27, 0x00	; 0
     32e:	eb e9       	ldi	r30, 0x9B	; 155
     330:	f1 e0       	ldi	r31, 0x01	; 1
     332:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__prologue_saves__+0x18>
     336:	69 83       	std	Y+1, r22	; 0x01
     338:	7a 83       	std	Y+2, r23	; 0x02
     33a:	8b 83       	std	Y+3, r24	; 0x03
     33c:	9c 83       	std	Y+4, r25	; 0x04
     33e:	2d 83       	std	Y+5, r18	; 0x05
     340:	3e 83       	std	Y+6, r19	; 0x06
     342:	4f 83       	std	Y+7, r20	; 0x07
     344:	58 87       	std	Y+8, r21	; 0x08
     346:	e9 e0       	ldi	r30, 0x09	; 9
     348:	ee 2e       	mov	r14, r30
     34a:	f1 2c       	mov	r15, r1
     34c:	ec 0e       	add	r14, r28
     34e:	fd 1e       	adc	r15, r29
     350:	ce 01       	movw	r24, r28
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	b7 01       	movw	r22, r14
     356:	0e 94 c3 04 	call	0x986	; 0x986 <__unpack_f>
     35a:	8e 01       	movw	r16, r28
     35c:	0f 5e       	subi	r16, 0xEF	; 239
     35e:	1f 4f       	sbci	r17, 0xFF	; 255
     360:	ce 01       	movw	r24, r28
     362:	05 96       	adiw	r24, 0x05	; 5
     364:	b8 01       	movw	r22, r16
     366:	0e 94 c3 04 	call	0x986	; 0x986 <__unpack_f>
     36a:	8a 89       	ldd	r24, Y+18	; 0x12
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	89 27       	eor	r24, r25
     370:	8a 8b       	std	Y+18, r24	; 0x12
     372:	c7 01       	movw	r24, r14
     374:	b8 01       	movw	r22, r16
     376:	ae 01       	movw	r20, r28
     378:	47 5e       	subi	r20, 0xE7	; 231
     37a:	5f 4f       	sbci	r21, 0xFF	; 255
     37c:	0e 94 49 00 	call	0x92	; 0x92 <_fpadd_parts>
     380:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__pack_f>
     384:	a0 96       	adiw	r28, 0x20	; 32
     386:	e6 e0       	ldi	r30, 0x06	; 6
     388:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__epilogue_restores__+0x18>

0000038c <__addsf3>:
     38c:	a0 e2       	ldi	r26, 0x20	; 32
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	ec ec       	ldi	r30, 0xCC	; 204
     392:	f1 e0       	ldi	r31, 0x01	; 1
     394:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__prologue_saves__+0x18>
     398:	69 83       	std	Y+1, r22	; 0x01
     39a:	7a 83       	std	Y+2, r23	; 0x02
     39c:	8b 83       	std	Y+3, r24	; 0x03
     39e:	9c 83       	std	Y+4, r25	; 0x04
     3a0:	2d 83       	std	Y+5, r18	; 0x05
     3a2:	3e 83       	std	Y+6, r19	; 0x06
     3a4:	4f 83       	std	Y+7, r20	; 0x07
     3a6:	58 87       	std	Y+8, r21	; 0x08
     3a8:	f9 e0       	ldi	r31, 0x09	; 9
     3aa:	ef 2e       	mov	r14, r31
     3ac:	f1 2c       	mov	r15, r1
     3ae:	ec 0e       	add	r14, r28
     3b0:	fd 1e       	adc	r15, r29
     3b2:	ce 01       	movw	r24, r28
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	b7 01       	movw	r22, r14
     3b8:	0e 94 c3 04 	call	0x986	; 0x986 <__unpack_f>
     3bc:	8e 01       	movw	r16, r28
     3be:	0f 5e       	subi	r16, 0xEF	; 239
     3c0:	1f 4f       	sbci	r17, 0xFF	; 255
     3c2:	ce 01       	movw	r24, r28
     3c4:	05 96       	adiw	r24, 0x05	; 5
     3c6:	b8 01       	movw	r22, r16
     3c8:	0e 94 c3 04 	call	0x986	; 0x986 <__unpack_f>
     3cc:	c7 01       	movw	r24, r14
     3ce:	b8 01       	movw	r22, r16
     3d0:	ae 01       	movw	r20, r28
     3d2:	47 5e       	subi	r20, 0xE7	; 231
     3d4:	5f 4f       	sbci	r21, 0xFF	; 255
     3d6:	0e 94 49 00 	call	0x92	; 0x92 <_fpadd_parts>
     3da:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__pack_f>
     3de:	a0 96       	adiw	r28, 0x20	; 32
     3e0:	e6 e0       	ldi	r30, 0x06	; 6
     3e2:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__epilogue_restores__+0x18>

000003e6 <__mulsf3>:
     3e6:	a0 e2       	ldi	r26, 0x20	; 32
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	e9 ef       	ldi	r30, 0xF9	; 249
     3ec:	f1 e0       	ldi	r31, 0x01	; 1
     3ee:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__prologue_saves__>
     3f2:	69 83       	std	Y+1, r22	; 0x01
     3f4:	7a 83       	std	Y+2, r23	; 0x02
     3f6:	8b 83       	std	Y+3, r24	; 0x03
     3f8:	9c 83       	std	Y+4, r25	; 0x04
     3fa:	2d 83       	std	Y+5, r18	; 0x05
     3fc:	3e 83       	std	Y+6, r19	; 0x06
     3fe:	4f 83       	std	Y+7, r20	; 0x07
     400:	58 87       	std	Y+8, r21	; 0x08
     402:	ce 01       	movw	r24, r28
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	be 01       	movw	r22, r28
     408:	67 5f       	subi	r22, 0xF7	; 247
     40a:	7f 4f       	sbci	r23, 0xFF	; 255
     40c:	0e 94 c3 04 	call	0x986	; 0x986 <__unpack_f>
     410:	ce 01       	movw	r24, r28
     412:	05 96       	adiw	r24, 0x05	; 5
     414:	be 01       	movw	r22, r28
     416:	6f 5e       	subi	r22, 0xEF	; 239
     418:	7f 4f       	sbci	r23, 0xFF	; 255
     41a:	0e 94 c3 04 	call	0x986	; 0x986 <__unpack_f>
     41e:	99 85       	ldd	r25, Y+9	; 0x09
     420:	92 30       	cpi	r25, 0x02	; 2
     422:	88 f0       	brcs	.+34     	; 0x446 <__mulsf3+0x60>
     424:	89 89       	ldd	r24, Y+17	; 0x11
     426:	82 30       	cpi	r24, 0x02	; 2
     428:	c8 f0       	brcs	.+50     	; 0x45c <__mulsf3+0x76>
     42a:	94 30       	cpi	r25, 0x04	; 4
     42c:	19 f4       	brne	.+6      	; 0x434 <__mulsf3+0x4e>
     42e:	82 30       	cpi	r24, 0x02	; 2
     430:	51 f4       	brne	.+20     	; 0x446 <__mulsf3+0x60>
     432:	04 c0       	rjmp	.+8      	; 0x43c <__mulsf3+0x56>
     434:	84 30       	cpi	r24, 0x04	; 4
     436:	29 f4       	brne	.+10     	; 0x442 <__mulsf3+0x5c>
     438:	92 30       	cpi	r25, 0x02	; 2
     43a:	81 f4       	brne	.+32     	; 0x45c <__mulsf3+0x76>
     43c:	8f e0       	ldi	r24, 0x0F	; 15
     43e:	92 e0       	ldi	r25, 0x02	; 2
     440:	c6 c0       	rjmp	.+396    	; 0x5ce <__mulsf3+0x1e8>
     442:	92 30       	cpi	r25, 0x02	; 2
     444:	49 f4       	brne	.+18     	; 0x458 <__mulsf3+0x72>
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	9a 85       	ldd	r25, Y+10	; 0x0a
     44a:	8a 89       	ldd	r24, Y+18	; 0x12
     44c:	98 13       	cpse	r25, r24
     44e:	21 e0       	ldi	r18, 0x01	; 1
     450:	2a 87       	std	Y+10, r18	; 0x0a
     452:	ce 01       	movw	r24, r28
     454:	09 96       	adiw	r24, 0x09	; 9
     456:	bb c0       	rjmp	.+374    	; 0x5ce <__mulsf3+0x1e8>
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	49 f4       	brne	.+18     	; 0x46e <__mulsf3+0x88>
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	9a 85       	ldd	r25, Y+10	; 0x0a
     460:	8a 89       	ldd	r24, Y+18	; 0x12
     462:	98 13       	cpse	r25, r24
     464:	21 e0       	ldi	r18, 0x01	; 1
     466:	2a 8b       	std	Y+18, r18	; 0x12
     468:	ce 01       	movw	r24, r28
     46a:	41 96       	adiw	r24, 0x11	; 17
     46c:	b0 c0       	rjmp	.+352    	; 0x5ce <__mulsf3+0x1e8>
     46e:	2d 84       	ldd	r2, Y+13	; 0x0d
     470:	3e 84       	ldd	r3, Y+14	; 0x0e
     472:	4f 84       	ldd	r4, Y+15	; 0x0f
     474:	58 88       	ldd	r5, Y+16	; 0x10
     476:	6d 88       	ldd	r6, Y+21	; 0x15
     478:	7e 88       	ldd	r7, Y+22	; 0x16
     47a:	8f 88       	ldd	r8, Y+23	; 0x17
     47c:	98 8c       	ldd	r9, Y+24	; 0x18
     47e:	ee 24       	eor	r14, r14
     480:	ff 24       	eor	r15, r15
     482:	87 01       	movw	r16, r14
     484:	aa 24       	eor	r10, r10
     486:	bb 24       	eor	r11, r11
     488:	65 01       	movw	r12, r10
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	e0 e0       	ldi	r30, 0x00	; 0
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	c1 01       	movw	r24, r2
     498:	81 70       	andi	r24, 0x01	; 1
     49a:	90 70       	andi	r25, 0x00	; 0
     49c:	89 2b       	or	r24, r25
     49e:	e9 f0       	breq	.+58     	; 0x4da <__mulsf3+0xf4>
     4a0:	e6 0c       	add	r14, r6
     4a2:	f7 1c       	adc	r15, r7
     4a4:	08 1d       	adc	r16, r8
     4a6:	19 1d       	adc	r17, r9
     4a8:	9a 01       	movw	r18, r20
     4aa:	ab 01       	movw	r20, r22
     4ac:	2a 0d       	add	r18, r10
     4ae:	3b 1d       	adc	r19, r11
     4b0:	4c 1d       	adc	r20, r12
     4b2:	5d 1d       	adc	r21, r13
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	a0 e0       	ldi	r26, 0x00	; 0
     4ba:	b0 e0       	ldi	r27, 0x00	; 0
     4bc:	e6 14       	cp	r14, r6
     4be:	f7 04       	cpc	r15, r7
     4c0:	08 05       	cpc	r16, r8
     4c2:	19 05       	cpc	r17, r9
     4c4:	20 f4       	brcc	.+8      	; 0x4ce <__mulsf3+0xe8>
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	a0 e0       	ldi	r26, 0x00	; 0
     4cc:	b0 e0       	ldi	r27, 0x00	; 0
     4ce:	ba 01       	movw	r22, r20
     4d0:	a9 01       	movw	r20, r18
     4d2:	48 0f       	add	r20, r24
     4d4:	59 1f       	adc	r21, r25
     4d6:	6a 1f       	adc	r22, r26
     4d8:	7b 1f       	adc	r23, r27
     4da:	aa 0c       	add	r10, r10
     4dc:	bb 1c       	adc	r11, r11
     4de:	cc 1c       	adc	r12, r12
     4e0:	dd 1c       	adc	r13, r13
     4e2:	97 fe       	sbrs	r9, 7
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <__mulsf3+0x110>
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	a0 e0       	ldi	r26, 0x00	; 0
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	a8 2a       	or	r10, r24
     4f0:	b9 2a       	or	r11, r25
     4f2:	ca 2a       	or	r12, r26
     4f4:	db 2a       	or	r13, r27
     4f6:	31 96       	adiw	r30, 0x01	; 1
     4f8:	e0 32       	cpi	r30, 0x20	; 32
     4fa:	f1 05       	cpc	r31, r1
     4fc:	49 f0       	breq	.+18     	; 0x510 <__mulsf3+0x12a>
     4fe:	66 0c       	add	r6, r6
     500:	77 1c       	adc	r7, r7
     502:	88 1c       	adc	r8, r8
     504:	99 1c       	adc	r9, r9
     506:	56 94       	lsr	r5
     508:	47 94       	ror	r4
     50a:	37 94       	ror	r3
     50c:	27 94       	ror	r2
     50e:	c3 cf       	rjmp	.-122    	; 0x496 <__mulsf3+0xb0>
     510:	fa 85       	ldd	r31, Y+10	; 0x0a
     512:	ea 89       	ldd	r30, Y+18	; 0x12
     514:	2b 89       	ldd	r18, Y+19	; 0x13
     516:	3c 89       	ldd	r19, Y+20	; 0x14
     518:	8b 85       	ldd	r24, Y+11	; 0x0b
     51a:	9c 85       	ldd	r25, Y+12	; 0x0c
     51c:	28 0f       	add	r18, r24
     51e:	39 1f       	adc	r19, r25
     520:	2e 5f       	subi	r18, 0xFE	; 254
     522:	3f 4f       	sbci	r19, 0xFF	; 255
     524:	17 c0       	rjmp	.+46     	; 0x554 <__mulsf3+0x16e>
     526:	ca 01       	movw	r24, r20
     528:	81 70       	andi	r24, 0x01	; 1
     52a:	90 70       	andi	r25, 0x00	; 0
     52c:	89 2b       	or	r24, r25
     52e:	61 f0       	breq	.+24     	; 0x548 <__mulsf3+0x162>
     530:	16 95       	lsr	r17
     532:	07 95       	ror	r16
     534:	f7 94       	ror	r15
     536:	e7 94       	ror	r14
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	a0 e0       	ldi	r26, 0x00	; 0
     53e:	b0 e8       	ldi	r27, 0x80	; 128
     540:	e8 2a       	or	r14, r24
     542:	f9 2a       	or	r15, r25
     544:	0a 2b       	or	r16, r26
     546:	1b 2b       	or	r17, r27
     548:	76 95       	lsr	r23
     54a:	67 95       	ror	r22
     54c:	57 95       	ror	r21
     54e:	47 95       	ror	r20
     550:	2f 5f       	subi	r18, 0xFF	; 255
     552:	3f 4f       	sbci	r19, 0xFF	; 255
     554:	77 fd       	sbrc	r23, 7
     556:	e7 cf       	rjmp	.-50     	; 0x526 <__mulsf3+0x140>
     558:	0c c0       	rjmp	.+24     	; 0x572 <__mulsf3+0x18c>
     55a:	44 0f       	add	r20, r20
     55c:	55 1f       	adc	r21, r21
     55e:	66 1f       	adc	r22, r22
     560:	77 1f       	adc	r23, r23
     562:	17 fd       	sbrc	r17, 7
     564:	41 60       	ori	r20, 0x01	; 1
     566:	ee 0c       	add	r14, r14
     568:	ff 1c       	adc	r15, r15
     56a:	00 1f       	adc	r16, r16
     56c:	11 1f       	adc	r17, r17
     56e:	21 50       	subi	r18, 0x01	; 1
     570:	30 40       	sbci	r19, 0x00	; 0
     572:	40 30       	cpi	r20, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	59 07       	cpc	r21, r25
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	69 07       	cpc	r22, r25
     57c:	90 e4       	ldi	r25, 0x40	; 64
     57e:	79 07       	cpc	r23, r25
     580:	60 f3       	brcs	.-40     	; 0x55a <__mulsf3+0x174>
     582:	2b 8f       	std	Y+27, r18	; 0x1b
     584:	3c 8f       	std	Y+28, r19	; 0x1c
     586:	db 01       	movw	r26, r22
     588:	ca 01       	movw	r24, r20
     58a:	8f 77       	andi	r24, 0x7F	; 127
     58c:	90 70       	andi	r25, 0x00	; 0
     58e:	a0 70       	andi	r26, 0x00	; 0
     590:	b0 70       	andi	r27, 0x00	; 0
     592:	80 34       	cpi	r24, 0x40	; 64
     594:	91 05       	cpc	r25, r1
     596:	a1 05       	cpc	r26, r1
     598:	b1 05       	cpc	r27, r1
     59a:	61 f4       	brne	.+24     	; 0x5b4 <__mulsf3+0x1ce>
     59c:	47 fd       	sbrc	r20, 7
     59e:	0a c0       	rjmp	.+20     	; 0x5b4 <__mulsf3+0x1ce>
     5a0:	e1 14       	cp	r14, r1
     5a2:	f1 04       	cpc	r15, r1
     5a4:	01 05       	cpc	r16, r1
     5a6:	11 05       	cpc	r17, r1
     5a8:	29 f0       	breq	.+10     	; 0x5b4 <__mulsf3+0x1ce>
     5aa:	40 5c       	subi	r20, 0xC0	; 192
     5ac:	5f 4f       	sbci	r21, 0xFF	; 255
     5ae:	6f 4f       	sbci	r22, 0xFF	; 255
     5b0:	7f 4f       	sbci	r23, 0xFF	; 255
     5b2:	40 78       	andi	r20, 0x80	; 128
     5b4:	1a 8e       	std	Y+26, r1	; 0x1a
     5b6:	fe 17       	cp	r31, r30
     5b8:	11 f0       	breq	.+4      	; 0x5be <__mulsf3+0x1d8>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	8a 8f       	std	Y+26, r24	; 0x1a
     5be:	4d 8f       	std	Y+29, r20	; 0x1d
     5c0:	5e 8f       	std	Y+30, r21	; 0x1e
     5c2:	6f 8f       	std	Y+31, r22	; 0x1f
     5c4:	78 a3       	std	Y+32, r23	; 0x20
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	89 8f       	std	Y+25, r24	; 0x19
     5ca:	ce 01       	movw	r24, r28
     5cc:	49 96       	adiw	r24, 0x19	; 25
     5ce:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__pack_f>
     5d2:	a0 96       	adiw	r28, 0x20	; 32
     5d4:	e2 e1       	ldi	r30, 0x12	; 18
     5d6:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__epilogue_restores__>

000005da <__floatsisf>:
     5da:	a8 e0       	ldi	r26, 0x08	; 8
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e3 ef       	ldi	r30, 0xF3	; 243
     5e0:	f2 e0       	ldi	r31, 0x02	; 2
     5e2:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__prologue_saves__+0x12>
     5e6:	9b 01       	movw	r18, r22
     5e8:	ac 01       	movw	r20, r24
     5ea:	83 e0       	ldi	r24, 0x03	; 3
     5ec:	89 83       	std	Y+1, r24	; 0x01
     5ee:	da 01       	movw	r26, r20
     5f0:	c9 01       	movw	r24, r18
     5f2:	88 27       	eor	r24, r24
     5f4:	b7 fd       	sbrc	r27, 7
     5f6:	83 95       	inc	r24
     5f8:	99 27       	eor	r25, r25
     5fa:	aa 27       	eor	r26, r26
     5fc:	bb 27       	eor	r27, r27
     5fe:	b8 2e       	mov	r11, r24
     600:	21 15       	cp	r18, r1
     602:	31 05       	cpc	r19, r1
     604:	41 05       	cpc	r20, r1
     606:	51 05       	cpc	r21, r1
     608:	19 f4       	brne	.+6      	; 0x610 <__floatsisf+0x36>
     60a:	82 e0       	ldi	r24, 0x02	; 2
     60c:	89 83       	std	Y+1, r24	; 0x01
     60e:	3a c0       	rjmp	.+116    	; 0x684 <__floatsisf+0xaa>
     610:	88 23       	and	r24, r24
     612:	a9 f0       	breq	.+42     	; 0x63e <__floatsisf+0x64>
     614:	20 30       	cpi	r18, 0x00	; 0
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	38 07       	cpc	r19, r24
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	48 07       	cpc	r20, r24
     61e:	80 e8       	ldi	r24, 0x80	; 128
     620:	58 07       	cpc	r21, r24
     622:	29 f4       	brne	.+10     	; 0x62e <__floatsisf+0x54>
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	9f ec       	ldi	r25, 0xCF	; 207
     62c:	30 c0       	rjmp	.+96     	; 0x68e <__floatsisf+0xb4>
     62e:	ee 24       	eor	r14, r14
     630:	ff 24       	eor	r15, r15
     632:	87 01       	movw	r16, r14
     634:	e2 1a       	sub	r14, r18
     636:	f3 0a       	sbc	r15, r19
     638:	04 0b       	sbc	r16, r20
     63a:	15 0b       	sbc	r17, r21
     63c:	02 c0       	rjmp	.+4      	; 0x642 <__floatsisf+0x68>
     63e:	79 01       	movw	r14, r18
     640:	8a 01       	movw	r16, r20
     642:	8e e1       	ldi	r24, 0x1E	; 30
     644:	c8 2e       	mov	r12, r24
     646:	d1 2c       	mov	r13, r1
     648:	dc 82       	std	Y+4, r13	; 0x04
     64a:	cb 82       	std	Y+3, r12	; 0x03
     64c:	ed 82       	std	Y+5, r14	; 0x05
     64e:	fe 82       	std	Y+6, r15	; 0x06
     650:	0f 83       	std	Y+7, r16	; 0x07
     652:	18 87       	std	Y+8, r17	; 0x08
     654:	c8 01       	movw	r24, r16
     656:	b7 01       	movw	r22, r14
     658:	0e 94 9f 03 	call	0x73e	; 0x73e <__clzsi2>
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	18 16       	cp	r1, r24
     660:	19 06       	cpc	r1, r25
     662:	84 f4       	brge	.+32     	; 0x684 <__floatsisf+0xaa>
     664:	08 2e       	mov	r0, r24
     666:	04 c0       	rjmp	.+8      	; 0x670 <__floatsisf+0x96>
     668:	ee 0c       	add	r14, r14
     66a:	ff 1c       	adc	r15, r15
     66c:	00 1f       	adc	r16, r16
     66e:	11 1f       	adc	r17, r17
     670:	0a 94       	dec	r0
     672:	d2 f7       	brpl	.-12     	; 0x668 <__floatsisf+0x8e>
     674:	ed 82       	std	Y+5, r14	; 0x05
     676:	fe 82       	std	Y+6, r15	; 0x06
     678:	0f 83       	std	Y+7, r16	; 0x07
     67a:	18 87       	std	Y+8, r17	; 0x08
     67c:	c8 1a       	sub	r12, r24
     67e:	d9 0a       	sbc	r13, r25
     680:	dc 82       	std	Y+4, r13	; 0x04
     682:	cb 82       	std	Y+3, r12	; 0x03
     684:	ba 82       	std	Y+2, r11	; 0x02
     686:	ce 01       	movw	r24, r28
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__pack_f>
     68e:	28 96       	adiw	r28, 0x08	; 8
     690:	e9 e0       	ldi	r30, 0x09	; 9
     692:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__epilogue_restores__+0x12>

00000696 <__fixsfsi>:
     696:	ac e0       	ldi	r26, 0x0C	; 12
     698:	b0 e0       	ldi	r27, 0x00	; 0
     69a:	e1 e5       	ldi	r30, 0x51	; 81
     69c:	f3 e0       	ldi	r31, 0x03	; 3
     69e:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__prologue_saves__+0x20>
     6a2:	69 83       	std	Y+1, r22	; 0x01
     6a4:	7a 83       	std	Y+2, r23	; 0x02
     6a6:	8b 83       	std	Y+3, r24	; 0x03
     6a8:	9c 83       	std	Y+4, r25	; 0x04
     6aa:	ce 01       	movw	r24, r28
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	be 01       	movw	r22, r28
     6b0:	6b 5f       	subi	r22, 0xFB	; 251
     6b2:	7f 4f       	sbci	r23, 0xFF	; 255
     6b4:	0e 94 c3 04 	call	0x986	; 0x986 <__unpack_f>
     6b8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ba:	82 30       	cpi	r24, 0x02	; 2
     6bc:	61 f1       	breq	.+88     	; 0x716 <__fixsfsi+0x80>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	50 f1       	brcs	.+84     	; 0x716 <__fixsfsi+0x80>
     6c2:	84 30       	cpi	r24, 0x04	; 4
     6c4:	21 f4       	brne	.+8      	; 0x6ce <__fixsfsi+0x38>
     6c6:	8e 81       	ldd	r24, Y+6	; 0x06
     6c8:	88 23       	and	r24, r24
     6ca:	51 f1       	breq	.+84     	; 0x720 <__fixsfsi+0x8a>
     6cc:	2e c0       	rjmp	.+92     	; 0x72a <__fixsfsi+0x94>
     6ce:	2f 81       	ldd	r18, Y+7	; 0x07
     6d0:	38 85       	ldd	r19, Y+8	; 0x08
     6d2:	37 fd       	sbrc	r19, 7
     6d4:	20 c0       	rjmp	.+64     	; 0x716 <__fixsfsi+0x80>
     6d6:	6e 81       	ldd	r22, Y+6	; 0x06
     6d8:	2f 31       	cpi	r18, 0x1F	; 31
     6da:	31 05       	cpc	r19, r1
     6dc:	1c f0       	brlt	.+6      	; 0x6e4 <__fixsfsi+0x4e>
     6de:	66 23       	and	r22, r22
     6e0:	f9 f0       	breq	.+62     	; 0x720 <__fixsfsi+0x8a>
     6e2:	23 c0       	rjmp	.+70     	; 0x72a <__fixsfsi+0x94>
     6e4:	8e e1       	ldi	r24, 0x1E	; 30
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	82 1b       	sub	r24, r18
     6ea:	93 0b       	sbc	r25, r19
     6ec:	29 85       	ldd	r18, Y+9	; 0x09
     6ee:	3a 85       	ldd	r19, Y+10	; 0x0a
     6f0:	4b 85       	ldd	r20, Y+11	; 0x0b
     6f2:	5c 85       	ldd	r21, Y+12	; 0x0c
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <__fixsfsi+0x68>
     6f6:	56 95       	lsr	r21
     6f8:	47 95       	ror	r20
     6fa:	37 95       	ror	r19
     6fc:	27 95       	ror	r18
     6fe:	8a 95       	dec	r24
     700:	d2 f7       	brpl	.-12     	; 0x6f6 <__fixsfsi+0x60>
     702:	66 23       	and	r22, r22
     704:	b1 f0       	breq	.+44     	; 0x732 <__fixsfsi+0x9c>
     706:	50 95       	com	r21
     708:	40 95       	com	r20
     70a:	30 95       	com	r19
     70c:	21 95       	neg	r18
     70e:	3f 4f       	sbci	r19, 0xFF	; 255
     710:	4f 4f       	sbci	r20, 0xFF	; 255
     712:	5f 4f       	sbci	r21, 0xFF	; 255
     714:	0e c0       	rjmp	.+28     	; 0x732 <__fixsfsi+0x9c>
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	09 c0       	rjmp	.+18     	; 0x732 <__fixsfsi+0x9c>
     720:	2f ef       	ldi	r18, 0xFF	; 255
     722:	3f ef       	ldi	r19, 0xFF	; 255
     724:	4f ef       	ldi	r20, 0xFF	; 255
     726:	5f e7       	ldi	r21, 0x7F	; 127
     728:	04 c0       	rjmp	.+8      	; 0x732 <__fixsfsi+0x9c>
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	50 e8       	ldi	r21, 0x80	; 128
     732:	b9 01       	movw	r22, r18
     734:	ca 01       	movw	r24, r20
     736:	2c 96       	adiw	r28, 0x0c	; 12
     738:	e2 e0       	ldi	r30, 0x02	; 2
     73a:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__epilogue_restores__+0x20>

0000073e <__clzsi2>:
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	7b 01       	movw	r14, r22
     748:	8c 01       	movw	r16, r24
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	e8 16       	cp	r14, r24
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	f8 06       	cpc	r15, r24
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	08 07       	cpc	r16, r24
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	18 07       	cpc	r17, r24
     75a:	88 f4       	brcc	.+34     	; 0x77e <__clzsi2+0x40>
     75c:	8f ef       	ldi	r24, 0xFF	; 255
     75e:	e8 16       	cp	r14, r24
     760:	f1 04       	cpc	r15, r1
     762:	01 05       	cpc	r16, r1
     764:	11 05       	cpc	r17, r1
     766:	31 f0       	breq	.+12     	; 0x774 <__clzsi2+0x36>
     768:	28 f0       	brcs	.+10     	; 0x774 <__clzsi2+0x36>
     76a:	88 e0       	ldi	r24, 0x08	; 8
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	a0 e0       	ldi	r26, 0x00	; 0
     770:	b0 e0       	ldi	r27, 0x00	; 0
     772:	17 c0       	rjmp	.+46     	; 0x7a2 <__clzsi2+0x64>
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	a0 e0       	ldi	r26, 0x00	; 0
     77a:	b0 e0       	ldi	r27, 0x00	; 0
     77c:	12 c0       	rjmp	.+36     	; 0x7a2 <__clzsi2+0x64>
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	e8 16       	cp	r14, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	f8 06       	cpc	r15, r24
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	08 07       	cpc	r16, r24
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	18 07       	cpc	r17, r24
     78e:	28 f0       	brcs	.+10     	; 0x79a <__clzsi2+0x5c>
     790:	88 e1       	ldi	r24, 0x18	; 24
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	a0 e0       	ldi	r26, 0x00	; 0
     796:	b0 e0       	ldi	r27, 0x00	; 0
     798:	04 c0       	rjmp	.+8      	; 0x7a2 <__clzsi2+0x64>
     79a:	80 e1       	ldi	r24, 0x10	; 16
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	a0 e0       	ldi	r26, 0x00	; 0
     7a0:	b0 e0       	ldi	r27, 0x00	; 0
     7a2:	20 e2       	ldi	r18, 0x20	; 32
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	28 1b       	sub	r18, r24
     7ac:	39 0b       	sbc	r19, r25
     7ae:	4a 0b       	sbc	r20, r26
     7b0:	5b 0b       	sbc	r21, r27
     7b2:	04 c0       	rjmp	.+8      	; 0x7bc <__clzsi2+0x7e>
     7b4:	16 95       	lsr	r17
     7b6:	07 95       	ror	r16
     7b8:	f7 94       	ror	r15
     7ba:	e7 94       	ror	r14
     7bc:	8a 95       	dec	r24
     7be:	d2 f7       	brpl	.-12     	; 0x7b4 <__clzsi2+0x76>
     7c0:	f7 01       	movw	r30, r14
     7c2:	e9 5e       	subi	r30, 0xE9	; 233
     7c4:	fd 4f       	sbci	r31, 0xFD	; 253
     7c6:	80 81       	ld	r24, Z
     7c8:	28 1b       	sub	r18, r24
     7ca:	31 09       	sbc	r19, r1
     7cc:	41 09       	sbc	r20, r1
     7ce:	51 09       	sbc	r21, r1
     7d0:	c9 01       	movw	r24, r18
     7d2:	1f 91       	pop	r17
     7d4:	0f 91       	pop	r16
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	08 95       	ret

000007dc <__pack_f>:
     7dc:	df 92       	push	r13
     7de:	ef 92       	push	r14
     7e0:	ff 92       	push	r15
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	fc 01       	movw	r30, r24
     7e8:	e4 80       	ldd	r14, Z+4	; 0x04
     7ea:	f5 80       	ldd	r15, Z+5	; 0x05
     7ec:	06 81       	ldd	r16, Z+6	; 0x06
     7ee:	17 81       	ldd	r17, Z+7	; 0x07
     7f0:	d1 80       	ldd	r13, Z+1	; 0x01
     7f2:	80 81       	ld	r24, Z
     7f4:	82 30       	cpi	r24, 0x02	; 2
     7f6:	48 f4       	brcc	.+18     	; 0x80a <__pack_f+0x2e>
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	a0 e1       	ldi	r26, 0x10	; 16
     7fe:	b0 e0       	ldi	r27, 0x00	; 0
     800:	e8 2a       	or	r14, r24
     802:	f9 2a       	or	r15, r25
     804:	0a 2b       	or	r16, r26
     806:	1b 2b       	or	r17, r27
     808:	a5 c0       	rjmp	.+330    	; 0x954 <__stack+0xf5>
     80a:	84 30       	cpi	r24, 0x04	; 4
     80c:	09 f4       	brne	.+2      	; 0x810 <__pack_f+0x34>
     80e:	9f c0       	rjmp	.+318    	; 0x94e <__stack+0xef>
     810:	82 30       	cpi	r24, 0x02	; 2
     812:	21 f4       	brne	.+8      	; 0x81c <__pack_f+0x40>
     814:	ee 24       	eor	r14, r14
     816:	ff 24       	eor	r15, r15
     818:	87 01       	movw	r16, r14
     81a:	05 c0       	rjmp	.+10     	; 0x826 <__pack_f+0x4a>
     81c:	e1 14       	cp	r14, r1
     81e:	f1 04       	cpc	r15, r1
     820:	01 05       	cpc	r16, r1
     822:	11 05       	cpc	r17, r1
     824:	19 f4       	brne	.+6      	; 0x82c <__pack_f+0x50>
     826:	e0 e0       	ldi	r30, 0x00	; 0
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	96 c0       	rjmp	.+300    	; 0x958 <__stack+0xf9>
     82c:	62 81       	ldd	r22, Z+2	; 0x02
     82e:	73 81       	ldd	r23, Z+3	; 0x03
     830:	9f ef       	ldi	r25, 0xFF	; 255
     832:	62 38       	cpi	r22, 0x82	; 130
     834:	79 07       	cpc	r23, r25
     836:	0c f0       	brlt	.+2      	; 0x83a <__pack_f+0x5e>
     838:	5b c0       	rjmp	.+182    	; 0x8f0 <__stack+0x91>
     83a:	22 e8       	ldi	r18, 0x82	; 130
     83c:	3f ef       	ldi	r19, 0xFF	; 255
     83e:	26 1b       	sub	r18, r22
     840:	37 0b       	sbc	r19, r23
     842:	2a 31       	cpi	r18, 0x1A	; 26
     844:	31 05       	cpc	r19, r1
     846:	2c f0       	brlt	.+10     	; 0x852 <__pack_f+0x76>
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	2a c0       	rjmp	.+84     	; 0x8a6 <__stack+0x47>
     852:	b8 01       	movw	r22, r16
     854:	a7 01       	movw	r20, r14
     856:	02 2e       	mov	r0, r18
     858:	04 c0       	rjmp	.+8      	; 0x862 <__stack+0x3>
     85a:	76 95       	lsr	r23
     85c:	67 95       	ror	r22
     85e:	57 95       	ror	r21
     860:	47 95       	ror	r20
     862:	0a 94       	dec	r0
     864:	d2 f7       	brpl	.-12     	; 0x85a <__pack_f+0x7e>
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	a0 e0       	ldi	r26, 0x00	; 0
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	04 c0       	rjmp	.+8      	; 0x878 <__stack+0x19>
     870:	88 0f       	add	r24, r24
     872:	99 1f       	adc	r25, r25
     874:	aa 1f       	adc	r26, r26
     876:	bb 1f       	adc	r27, r27
     878:	2a 95       	dec	r18
     87a:	d2 f7       	brpl	.-12     	; 0x870 <__stack+0x11>
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	a1 09       	sbc	r26, r1
     880:	b1 09       	sbc	r27, r1
     882:	8e 21       	and	r24, r14
     884:	9f 21       	and	r25, r15
     886:	a0 23       	and	r26, r16
     888:	b1 23       	and	r27, r17
     88a:	00 97       	sbiw	r24, 0x00	; 0
     88c:	a1 05       	cpc	r26, r1
     88e:	b1 05       	cpc	r27, r1
     890:	21 f0       	breq	.+8      	; 0x89a <__stack+0x3b>
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	a0 e0       	ldi	r26, 0x00	; 0
     898:	b0 e0       	ldi	r27, 0x00	; 0
     89a:	9a 01       	movw	r18, r20
     89c:	ab 01       	movw	r20, r22
     89e:	28 2b       	or	r18, r24
     8a0:	39 2b       	or	r19, r25
     8a2:	4a 2b       	or	r20, r26
     8a4:	5b 2b       	or	r21, r27
     8a6:	da 01       	movw	r26, r20
     8a8:	c9 01       	movw	r24, r18
     8aa:	8f 77       	andi	r24, 0x7F	; 127
     8ac:	90 70       	andi	r25, 0x00	; 0
     8ae:	a0 70       	andi	r26, 0x00	; 0
     8b0:	b0 70       	andi	r27, 0x00	; 0
     8b2:	80 34       	cpi	r24, 0x40	; 64
     8b4:	91 05       	cpc	r25, r1
     8b6:	a1 05       	cpc	r26, r1
     8b8:	b1 05       	cpc	r27, r1
     8ba:	39 f4       	brne	.+14     	; 0x8ca <__stack+0x6b>
     8bc:	27 ff       	sbrs	r18, 7
     8be:	09 c0       	rjmp	.+18     	; 0x8d2 <__stack+0x73>
     8c0:	20 5c       	subi	r18, 0xC0	; 192
     8c2:	3f 4f       	sbci	r19, 0xFF	; 255
     8c4:	4f 4f       	sbci	r20, 0xFF	; 255
     8c6:	5f 4f       	sbci	r21, 0xFF	; 255
     8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <__stack+0x73>
     8ca:	21 5c       	subi	r18, 0xC1	; 193
     8cc:	3f 4f       	sbci	r19, 0xFF	; 255
     8ce:	4f 4f       	sbci	r20, 0xFF	; 255
     8d0:	5f 4f       	sbci	r21, 0xFF	; 255
     8d2:	e0 e0       	ldi	r30, 0x00	; 0
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	20 30       	cpi	r18, 0x00	; 0
     8d8:	a0 e0       	ldi	r26, 0x00	; 0
     8da:	3a 07       	cpc	r19, r26
     8dc:	a0 e0       	ldi	r26, 0x00	; 0
     8de:	4a 07       	cpc	r20, r26
     8e0:	a0 e4       	ldi	r26, 0x40	; 64
     8e2:	5a 07       	cpc	r21, r26
     8e4:	10 f0       	brcs	.+4      	; 0x8ea <__stack+0x8b>
     8e6:	e1 e0       	ldi	r30, 0x01	; 1
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	79 01       	movw	r14, r18
     8ec:	8a 01       	movw	r16, r20
     8ee:	27 c0       	rjmp	.+78     	; 0x93e <__stack+0xdf>
     8f0:	60 38       	cpi	r22, 0x80	; 128
     8f2:	71 05       	cpc	r23, r1
     8f4:	64 f5       	brge	.+88     	; 0x94e <__stack+0xef>
     8f6:	fb 01       	movw	r30, r22
     8f8:	e1 58       	subi	r30, 0x81	; 129
     8fa:	ff 4f       	sbci	r31, 0xFF	; 255
     8fc:	d8 01       	movw	r26, r16
     8fe:	c7 01       	movw	r24, r14
     900:	8f 77       	andi	r24, 0x7F	; 127
     902:	90 70       	andi	r25, 0x00	; 0
     904:	a0 70       	andi	r26, 0x00	; 0
     906:	b0 70       	andi	r27, 0x00	; 0
     908:	80 34       	cpi	r24, 0x40	; 64
     90a:	91 05       	cpc	r25, r1
     90c:	a1 05       	cpc	r26, r1
     90e:	b1 05       	cpc	r27, r1
     910:	39 f4       	brne	.+14     	; 0x920 <__stack+0xc1>
     912:	e7 fe       	sbrs	r14, 7
     914:	0d c0       	rjmp	.+26     	; 0x930 <__stack+0xd1>
     916:	80 e4       	ldi	r24, 0x40	; 64
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	a0 e0       	ldi	r26, 0x00	; 0
     91c:	b0 e0       	ldi	r27, 0x00	; 0
     91e:	04 c0       	rjmp	.+8      	; 0x928 <__stack+0xc9>
     920:	8f e3       	ldi	r24, 0x3F	; 63
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	e8 0e       	add	r14, r24
     92a:	f9 1e       	adc	r15, r25
     92c:	0a 1f       	adc	r16, r26
     92e:	1b 1f       	adc	r17, r27
     930:	17 ff       	sbrs	r17, 7
     932:	05 c0       	rjmp	.+10     	; 0x93e <__stack+0xdf>
     934:	16 95       	lsr	r17
     936:	07 95       	ror	r16
     938:	f7 94       	ror	r15
     93a:	e7 94       	ror	r14
     93c:	31 96       	adiw	r30, 0x01	; 1
     93e:	87 e0       	ldi	r24, 0x07	; 7
     940:	16 95       	lsr	r17
     942:	07 95       	ror	r16
     944:	f7 94       	ror	r15
     946:	e7 94       	ror	r14
     948:	8a 95       	dec	r24
     94a:	d1 f7       	brne	.-12     	; 0x940 <__stack+0xe1>
     94c:	05 c0       	rjmp	.+10     	; 0x958 <__stack+0xf9>
     94e:	ee 24       	eor	r14, r14
     950:	ff 24       	eor	r15, r15
     952:	87 01       	movw	r16, r14
     954:	ef ef       	ldi	r30, 0xFF	; 255
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	6e 2f       	mov	r22, r30
     95a:	67 95       	ror	r22
     95c:	66 27       	eor	r22, r22
     95e:	67 95       	ror	r22
     960:	90 2f       	mov	r25, r16
     962:	9f 77       	andi	r25, 0x7F	; 127
     964:	d7 94       	ror	r13
     966:	dd 24       	eor	r13, r13
     968:	d7 94       	ror	r13
     96a:	8e 2f       	mov	r24, r30
     96c:	86 95       	lsr	r24
     96e:	49 2f       	mov	r20, r25
     970:	46 2b       	or	r20, r22
     972:	58 2f       	mov	r21, r24
     974:	5d 29       	or	r21, r13
     976:	b7 01       	movw	r22, r14
     978:	ca 01       	movw	r24, r20
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	df 90       	pop	r13
     984:	08 95       	ret

00000986 <__unpack_f>:
     986:	fc 01       	movw	r30, r24
     988:	db 01       	movw	r26, r22
     98a:	40 81       	ld	r20, Z
     98c:	51 81       	ldd	r21, Z+1	; 0x01
     98e:	22 81       	ldd	r18, Z+2	; 0x02
     990:	62 2f       	mov	r22, r18
     992:	6f 77       	andi	r22, 0x7F	; 127
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	22 1f       	adc	r18, r18
     998:	22 27       	eor	r18, r18
     99a:	22 1f       	adc	r18, r18
     99c:	93 81       	ldd	r25, Z+3	; 0x03
     99e:	89 2f       	mov	r24, r25
     9a0:	88 0f       	add	r24, r24
     9a2:	82 2b       	or	r24, r18
     9a4:	28 2f       	mov	r18, r24
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	99 1f       	adc	r25, r25
     9aa:	99 27       	eor	r25, r25
     9ac:	99 1f       	adc	r25, r25
     9ae:	11 96       	adiw	r26, 0x01	; 1
     9b0:	9c 93       	st	X, r25
     9b2:	11 97       	sbiw	r26, 0x01	; 1
     9b4:	21 15       	cp	r18, r1
     9b6:	31 05       	cpc	r19, r1
     9b8:	a9 f5       	brne	.+106    	; 0xa24 <__unpack_f+0x9e>
     9ba:	41 15       	cp	r20, r1
     9bc:	51 05       	cpc	r21, r1
     9be:	61 05       	cpc	r22, r1
     9c0:	71 05       	cpc	r23, r1
     9c2:	11 f4       	brne	.+4      	; 0x9c8 <__unpack_f+0x42>
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	37 c0       	rjmp	.+110    	; 0xa36 <__unpack_f+0xb0>
     9c8:	82 e8       	ldi	r24, 0x82	; 130
     9ca:	9f ef       	ldi	r25, 0xFF	; 255
     9cc:	13 96       	adiw	r26, 0x03	; 3
     9ce:	9c 93       	st	X, r25
     9d0:	8e 93       	st	-X, r24
     9d2:	12 97       	sbiw	r26, 0x02	; 2
     9d4:	9a 01       	movw	r18, r20
     9d6:	ab 01       	movw	r20, r22
     9d8:	67 e0       	ldi	r22, 0x07	; 7
     9da:	22 0f       	add	r18, r18
     9dc:	33 1f       	adc	r19, r19
     9de:	44 1f       	adc	r20, r20
     9e0:	55 1f       	adc	r21, r21
     9e2:	6a 95       	dec	r22
     9e4:	d1 f7       	brne	.-12     	; 0x9da <__unpack_f+0x54>
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	8c 93       	st	X, r24
     9ea:	0d c0       	rjmp	.+26     	; 0xa06 <__unpack_f+0x80>
     9ec:	22 0f       	add	r18, r18
     9ee:	33 1f       	adc	r19, r19
     9f0:	44 1f       	adc	r20, r20
     9f2:	55 1f       	adc	r21, r21
     9f4:	12 96       	adiw	r26, 0x02	; 2
     9f6:	8d 91       	ld	r24, X+
     9f8:	9c 91       	ld	r25, X
     9fa:	13 97       	sbiw	r26, 0x03	; 3
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	13 96       	adiw	r26, 0x03	; 3
     a00:	9c 93       	st	X, r25
     a02:	8e 93       	st	-X, r24
     a04:	12 97       	sbiw	r26, 0x02	; 2
     a06:	20 30       	cpi	r18, 0x00	; 0
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	38 07       	cpc	r19, r24
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	48 07       	cpc	r20, r24
     a10:	80 e4       	ldi	r24, 0x40	; 64
     a12:	58 07       	cpc	r21, r24
     a14:	58 f3       	brcs	.-42     	; 0x9ec <__unpack_f+0x66>
     a16:	14 96       	adiw	r26, 0x04	; 4
     a18:	2d 93       	st	X+, r18
     a1a:	3d 93       	st	X+, r19
     a1c:	4d 93       	st	X+, r20
     a1e:	5c 93       	st	X, r21
     a20:	17 97       	sbiw	r26, 0x07	; 7
     a22:	08 95       	ret
     a24:	2f 3f       	cpi	r18, 0xFF	; 255
     a26:	31 05       	cpc	r19, r1
     a28:	79 f4       	brne	.+30     	; 0xa48 <__unpack_f+0xc2>
     a2a:	41 15       	cp	r20, r1
     a2c:	51 05       	cpc	r21, r1
     a2e:	61 05       	cpc	r22, r1
     a30:	71 05       	cpc	r23, r1
     a32:	19 f4       	brne	.+6      	; 0xa3a <__unpack_f+0xb4>
     a34:	84 e0       	ldi	r24, 0x04	; 4
     a36:	8c 93       	st	X, r24
     a38:	08 95       	ret
     a3a:	64 ff       	sbrs	r22, 4
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <__unpack_f+0xbe>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	8c 93       	st	X, r24
     a42:	12 c0       	rjmp	.+36     	; 0xa68 <__unpack_f+0xe2>
     a44:	1c 92       	st	X, r1
     a46:	10 c0       	rjmp	.+32     	; 0xa68 <__unpack_f+0xe2>
     a48:	2f 57       	subi	r18, 0x7F	; 127
     a4a:	30 40       	sbci	r19, 0x00	; 0
     a4c:	13 96       	adiw	r26, 0x03	; 3
     a4e:	3c 93       	st	X, r19
     a50:	2e 93       	st	-X, r18
     a52:	12 97       	sbiw	r26, 0x02	; 2
     a54:	83 e0       	ldi	r24, 0x03	; 3
     a56:	8c 93       	st	X, r24
     a58:	87 e0       	ldi	r24, 0x07	; 7
     a5a:	44 0f       	add	r20, r20
     a5c:	55 1f       	adc	r21, r21
     a5e:	66 1f       	adc	r22, r22
     a60:	77 1f       	adc	r23, r23
     a62:	8a 95       	dec	r24
     a64:	d1 f7       	brne	.-12     	; 0xa5a <__unpack_f+0xd4>
     a66:	70 64       	ori	r23, 0x40	; 64
     a68:	14 96       	adiw	r26, 0x04	; 4
     a6a:	4d 93       	st	X+, r20
     a6c:	5d 93       	st	X+, r21
     a6e:	6d 93       	st	X+, r22
     a70:	7c 93       	st	X, r23
     a72:	17 97       	sbiw	r26, 0x07	; 7
     a74:	08 95       	ret

00000a76 <Increment_decrementHours>:

	_delay_ms(1000);
	LCD_clearScreen();
	returnMainWindow = 1;
}
void Increment_decrementHours(uint8 inc_dec){
     a76:	90 91 3d 03 	lds	r25, 0x033D
	if (inc_dec == INC)
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	39 f4       	brne	.+14     	; 0xa8c <Increment_decrementHours+0x16>
		hours = (hours == 23) ? 0 : hours + 1;
     a7e:	97 31       	cpi	r25, 0x17	; 23
     a80:	11 f4       	brne	.+4      	; 0xa86 <Increment_decrementHours+0x10>
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	09 c0       	rjmp	.+18     	; 0xa98 <Increment_decrementHours+0x22>
     a86:	89 2f       	mov	r24, r25
     a88:	8f 5f       	subi	r24, 0xFF	; 255
     a8a:	06 c0       	rjmp	.+12     	; 0xa98 <Increment_decrementHours+0x22>
	else
		hours = (hours == 0) ? 23 : hours - 1;
     a8c:	99 23       	and	r25, r25
     a8e:	11 f4       	brne	.+4      	; 0xa94 <Increment_decrementHours+0x1e>
     a90:	87 e1       	ldi	r24, 0x17	; 23
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <Increment_decrementHours+0x22>
     a94:	89 2f       	mov	r24, r25
     a96:	81 50       	subi	r24, 0x01	; 1
     a98:	80 93 3d 03 	sts	0x033D, r24
     a9c:	08 95       	ret

00000a9e <Increment_decrementMins>:
}

void Increment_decrementMins(uint8 inc_dec){
     a9e:	90 91 3c 03 	lds	r25, 0x033C
	if (inc_dec == INC)
     aa2:	81 30       	cpi	r24, 0x01	; 1
     aa4:	39 f4       	brne	.+14     	; 0xab4 <Increment_decrementMins+0x16>
		mins = (mins == 59) ? 0 : mins + 1;
     aa6:	9b 33       	cpi	r25, 0x3B	; 59
     aa8:	11 f4       	brne	.+4      	; 0xaae <Increment_decrementMins+0x10>
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	09 c0       	rjmp	.+18     	; 0xac0 <Increment_decrementMins+0x22>
     aae:	89 2f       	mov	r24, r25
     ab0:	8f 5f       	subi	r24, 0xFF	; 255
     ab2:	06 c0       	rjmp	.+12     	; 0xac0 <Increment_decrementMins+0x22>
	else
		mins = (mins == 0) ? 59 : mins - 1;
     ab4:	99 23       	and	r25, r25
     ab6:	11 f4       	brne	.+4      	; 0xabc <Increment_decrementMins+0x1e>
     ab8:	8b e3       	ldi	r24, 0x3B	; 59
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <Increment_decrementMins+0x22>
     abc:	89 2f       	mov	r24, r25
     abe:	81 50       	subi	r24, 0x01	; 1
     ac0:	80 93 3c 03 	sts	0x033C, r24
     ac4:	08 95       	ret

00000ac6 <Alarm_reset>:




void Alarm_reset(void){
	alarm_flag = 0;
     ac6:	10 92 1c 03 	sts	0x031C, r1
	hoursModification = 1;
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	80 93 17 03 	sts	0x0317, r24
	is_Stopped = 0;
     ad0:	10 92 1d 03 	sts	0x031D, r1
	is_snoozed = 0;
     ad4:	10 92 1e 03 	sts	0x031E, r1
	returnMainWindow = 0;
     ad8:	10 92 1f 03 	sts	0x031F, r1

}
     adc:	08 95       	ret

00000ade <Check_Alarm>:
}




void Check_Alarm(){
     ade:	1f 93       	push	r17
	uint8 hr = RTC_getHour();
     ae0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <RTC_getHour>
     ae4:	18 2f       	mov	r17, r24
	uint8 min = RTC_getMinute();
     ae6:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <RTC_getMinute>
     aea:	28 2f       	mov	r18, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     aec:	80 e6       	ldi	r24, 0x60	; 96
     aee:	9a ee       	ldi	r25, 0xEA	; 234
     af0:	01 97       	sbiw	r24, 0x01	; 1
     af2:	f1 f7       	brne	.-4      	; 0xaf0 <Check_Alarm+0x12>
	_delay_ms(30);

	if (hr == hours && min == mins && is_Stopped == 1) {
     af4:	80 91 3d 03 	lds	r24, 0x033D
     af8:	18 17       	cp	r17, r24
     afa:	d9 f5       	brne	.+118    	; 0xb72 <Check_Alarm+0x94>
     afc:	80 91 3c 03 	lds	r24, 0x033C
     b00:	28 17       	cp	r18, r24
     b02:	b9 f5       	brne	.+110    	; 0xb72 <Check_Alarm+0x94>
     b04:	80 91 1d 03 	lds	r24, 0x031D
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	99 f5       	brne	.+102    	; 0xb72 <Check_Alarm+0x94>
		GPIO_writePin(PORTD_ID, PIN0_ID, 1); // Alarm ON
     b0c:	83 e0       	ldi	r24, 0x03	; 3
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	41 e0       	ldi	r20, 0x01	; 1
     b12:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>

		while (1) {
			LCD_displayStringRowColumn(0, 0, "Alarm Ringing   ");
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	40 e6       	ldi	r20, 0x60	; 96
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "      STOP      ");
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	41 e7       	ldi	r20, 0x71	; 113
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>

			if (GPIO_readPin(PORTB_ID, PIN3_ID) == 0) {  // Stop pressed
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	63 e0       	ldi	r22, 0x03	; 3
     b32:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <GPIO_readPin>
     b36:	88 23       	and	r24, r24
     b38:	71 f7       	brne	.-36     	; 0xb16 <Check_Alarm+0x38>
				is_Stopped = 0;
     b3a:	10 92 1d 03 	sts	0x031D, r1
     b3e:	80 e6       	ldi	r24, 0x60	; 96
     b40:	9a ee       	ldi	r25, 0xEA	; 234
     b42:	01 97       	sbiw	r24, 0x01	; 1
     b44:	f1 f7       	brne	.-4      	; 0xb42 <Check_Alarm+0x64>
				_delay_ms(30);
				LCD_clearScreen();
     b46:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
				returnMainWindow = 1;
     b4a:	11 e0       	ldi	r17, 0x01	; 1
     b4c:	10 93 1f 03 	sts	0x031F, r17
				break;
			}
		}

		GPIO_writePin(PORTD_ID, PIN0_ID, 0); // Alarm OFF
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
		LCD_clearScreen();
     b5a:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>




void Alarm_reset(void){
	alarm_flag = 0;
     b5e:	10 92 1c 03 	sts	0x031C, r1
	hoursModification = 1;
     b62:	10 93 17 03 	sts	0x0317, r17
	is_Stopped = 0;
     b66:	10 92 1d 03 	sts	0x031D, r1
	is_snoozed = 0;
     b6a:	10 92 1e 03 	sts	0x031E, r1
	returnMainWindow = 0;
     b6e:	10 92 1f 03 	sts	0x031F, r1
		GPIO_writePin(PORTD_ID, PIN0_ID, 0); // Alarm OFF
		LCD_clearScreen();
		returnMainWindow = 1;
		Alarm_reset();
	}
}
     b72:	1f 91       	pop	r17
     b74:	08 95       	ret

00000b76 <Show_time>:
	else
		mins = (mins == 0) ? 59 : mins - 1;
}

void Show_time(){
	LCD_moveCursor(0, 11);
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	6b e0       	ldi	r22, 0x0B	; 11
     b7a:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>

	if (hours < 10)
     b7e:	80 91 3d 03 	lds	r24, 0x033D
     b82:	8a 30       	cpi	r24, 0x0A	; 10
     b84:	18 f4       	brcc	.+6      	; 0xb8c <Show_time+0x16>
		LCD_displayCharacter('0');
     b86:	80 e3       	ldi	r24, 0x30	; 48
     b88:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
	LCD_intgerToString(hours);
     b8c:	80 91 3d 03 	lds	r24, 0x033D
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
	LCD_displayCharacter(':');
     b96:	8a e3       	ldi	r24, 0x3A	; 58
     b98:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>

	if (mins < 10)
     b9c:	80 91 3c 03 	lds	r24, 0x033C
     ba0:	8a 30       	cpi	r24, 0x0A	; 10
     ba2:	18 f4       	brcc	.+6      	; 0xbaa <Show_time+0x34>
		LCD_displayCharacter('0');
     ba4:	80 e3       	ldi	r24, 0x30	; 48
     ba6:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
	LCD_intgerToString(mins);
     baa:	80 91 3c 03 	lds	r24, 0x033C
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
}
     bb4:	08 95       	ret

00000bb6 <get_time>:
uint8 hoursModification = 1;
uint8 is_Stopped = 0;
uint8 is_snoozed = 0;
uint8 returnMainWindow = 0;

void get_time(uint8 h, uint8 m){
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	18 2f       	mov	r17, r24
     bbc:	06 2f       	mov	r16, r22
	LCD_clearScreen();
     bbe:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
	hours = h;
     bc2:	10 93 3d 03 	sts	0x033D, r17
	mins = m;
     bc6:	00 93 3c 03 	sts	0x033C, r16
	LCD_displayStringRowColumn(0, 0, "Alarm Set: ");
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	42 e8       	ldi	r20, 0x82	; 130
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(0,11, "HH:MM");
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	6b e0       	ldi	r22, 0x0B	; 11
     bda:	4e e8       	ldi	r20, 0x8E	; 142
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>

	if (hours < 10)
     be2:	80 91 3d 03 	lds	r24, 0x033D
     be6:	8a 30       	cpi	r24, 0x0A	; 10
     be8:	20 f4       	brcc	.+8      	; 0xbf2 <get_time+0x3c>
		LCD_intgerToString(0);
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
	LCD_intgerToString(hours);
     bf2:	80 91 3d 03 	lds	r24, 0x033D
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
	LCD_displayCharacter(':');
     bfc:	8a e3       	ldi	r24, 0x3A	; 58
     bfe:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
	if (mins < 10)
     c02:	80 91 3c 03 	lds	r24, 0x033C
     c06:	8a 30       	cpi	r24, 0x0A	; 10
     c08:	20 f4       	brcc	.+8      	; 0xc12 <get_time+0x5c>
		LCD_intgerToString(0);
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
	LCD_intgerToString(mins);
     c12:	80 91 3c 03 	lds	r24, 0x033C
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
}
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	08 95       	ret

00000c22 <Set_Alarm>:

void Set_Alarm(uint8* h, uint8* m){
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	fc 01       	movw	r30, r24
     c2a:	db 01       	movw	r26, r22
	*h = hours;
     c2c:	80 91 3d 03 	lds	r24, 0x033D
     c30:	80 83       	st	Z, r24
	*m = mins;
     c32:	80 91 3c 03 	lds	r24, 0x033C
     c36:	8c 93       	st	X, r24

	uint8 rtc_hr = RTC_getHour();
     c38:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <RTC_getHour>
     c3c:	f8 2e       	mov	r15, r24
	uint8 rtc_min = RTC_getMinute();
     c3e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <RTC_getMinute>
     c42:	28 2f       	mov	r18, r24
     c44:	e0 e6       	ldi	r30, 0x60	; 96
     c46:	fa ee       	ldi	r31, 0xEA	; 234
     c48:	31 97       	sbiw	r30, 0x01	; 1
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <Set_Alarm+0x26>
	_delay_ms(30);

	uint8 hours_difference, mins_difference;

	if (mins >= rtc_min) {
     c4c:	80 91 3c 03 	lds	r24, 0x033C
     c50:	82 17       	cp	r24, r18
     c52:	18 f0       	brcs	.+6      	; 0xc5a <Set_Alarm+0x38>
		mins_difference = mins - rtc_min;
     c54:	08 2f       	mov	r16, r24
     c56:	02 1b       	sub	r16, r18
     c58:	0c c0       	rjmp	.+24     	; 0xc72 <Set_Alarm+0x50>
	} else {
		mins_difference = (mins + 60) - rtc_min;
		hours = (hours == 0) ? 23 : hours - 1;
     c5a:	90 91 3d 03 	lds	r25, 0x033D
     c5e:	99 23       	and	r25, r25
     c60:	11 f4       	brne	.+4      	; 0xc66 <Set_Alarm+0x44>
     c62:	97 e1       	ldi	r25, 0x17	; 23
     c64:	01 c0       	rjmp	.+2      	; 0xc68 <Set_Alarm+0x46>
     c66:	91 50       	subi	r25, 0x01	; 1
	uint8 hours_difference, mins_difference;

	if (mins >= rtc_min) {
		mins_difference = mins - rtc_min;
	} else {
		mins_difference = (mins + 60) - rtc_min;
     c68:	08 2f       	mov	r16, r24
     c6a:	04 5c       	subi	r16, 0xC4	; 196
     c6c:	02 1b       	sub	r16, r18
		hours = (hours == 0) ? 23 : hours - 1;
     c6e:	90 93 3d 03 	sts	0x033D, r25
	}

	if (hours >= rtc_hr) {
     c72:	80 91 3d 03 	lds	r24, 0x033D
     c76:	8f 15       	cp	r24, r15
     c78:	10 f0       	brcs	.+4      	; 0xc7e <Set_Alarm+0x5c>
		hours_difference = hours - rtc_hr;
     c7a:	18 2f       	mov	r17, r24
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <Set_Alarm+0x60>
	} else {
		hours_difference = (hours + 24) - rtc_hr;
     c7e:	18 2f       	mov	r17, r24
     c80:	18 5e       	subi	r17, 0xE8	; 232
     c82:	1f 19       	sub	r17, r15
	}

	LCD_clearScreen();
     c84:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "It Will Ring in");
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	44 e9       	ldi	r20, 0x94	; 148
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>

	LCD_moveCursor(1, 0);
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
	LCD_intgerToString(hours_difference);
     c9c:	81 2f       	mov	r24, r17
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
	LCD_displayString(" Hrs");
     ca4:	84 ea       	ldi	r24, 0xA4	; 164
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>

	LCD_moveCursor(1, 8);
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	68 e0       	ldi	r22, 0x08	; 8
     cb0:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
	LCD_intgerToString(mins_difference);
     cb4:	80 2f       	mov	r24, r16
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
	LCD_displayString(" Min");
     cbc:	89 ea       	ldi	r24, 0xA9	; 169
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
     cc4:	80 e1       	ldi	r24, 0x10	; 16
     cc6:	97 e2       	ldi	r25, 0x27	; 39
     cc8:	28 ec       	ldi	r18, 0xC8	; 200
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	f9 01       	movw	r30, r18
     cce:	31 97       	sbiw	r30, 0x01	; 1
     cd0:	f1 f7       	brne	.-4      	; 0xcce <Set_Alarm+0xac>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd4:	d9 f7       	brne	.-10     	; 0xccc <Set_Alarm+0xaa>

	_delay_ms(1000);
	LCD_clearScreen();
     cd6:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
	returnMainWindow = 1;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	80 93 1f 03 	sts	0x031F, r24
}
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	08 95       	ret

00000ce8 <Timer2_init>:
	}
}

// ---------------- Timer2 for 1-sec tick ----------------
void Timer2_init(void) {
	TCCR2 = (1 << WGM21) | (1 << CS22) | (1 << CS21) | (1 << CS20); // CTC mode, 1024 prescaler
     ce8:	8f e0       	ldi	r24, 0x0F	; 15
     cea:	85 bd       	out	0x25, r24	; 37
	OCR2 = 125;             // ~1s at 8MHz with 1024 prescaler
     cec:	8d e7       	ldi	r24, 0x7D	; 125
     cee:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2);  // Enable compare match
     cf0:	89 b7       	in	r24, 0x39	; 57
     cf2:	80 68       	ori	r24, 0x80	; 128
     cf4:	89 bf       	out	0x39, r24	; 57
	TCNT2 = 0;
     cf6:	14 bc       	out	0x24, r1	; 36
	// Enable countdown
}
     cf8:	08 95       	ret

00000cfa <reset_countdown>:
        break;
    }
    return 0; // still editing
}
void reset_countdown(void) {
	hour = 0;
     cfa:	10 92 20 03 	sts	0x0320, r1
	min = 0;
     cfe:	10 92 21 03 	sts	0x0321, r1
	sec = 0;
     d02:	10 92 22 03 	sts	0x0322, r1
	countdown_done_flag = 0;
     d06:	10 92 23 03 	sts	0x0323, r1
	intrupt = 0;
     d0a:	10 92 25 03 	sts	0x0325, r1
	Buzzer_off();
     d0e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Buzzer_off>
}
     d12:	08 95       	ret

00000d14 <move_countdown>:
	}}

// ---------------- Time setting mode ----------------
uint8_t move_countdown(void)
{
    if (!(PINB & (1<<0))) { moverr = (moverr+ 1) % LOGF; }
     d14:	b0 99       	sbic	0x16, 0	; 22
     d16:	0a c0       	rjmp	.+20     	; 0xd2c <move_countdown+0x18>
     d18:	80 91 24 03 	lds	r24, 0x0324
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	63 e0       	ldi	r22, 0x03	; 3
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	0e 94 ab 13 	call	0x2756	; 0x2756 <__divmodhi4>
     d28:	80 93 24 03 	sts	0x0324, r24
    if (!(PINB & (1<<3))) { moverr = 10; }
     d2c:	b3 99       	sbic	0x16, 3	; 22
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <move_countdown+0x22>
     d30:	8a e0       	ldi	r24, 0x0A	; 10
     d32:	80 93 24 03 	sts	0x0324, r24
    if (!(PINB & (1<<4))) { moverr = 11; }  // <-- PB4 for exit
     d36:	b4 99       	sbic	0x16, 4	; 22
     d38:	03 c0       	rjmp	.+6      	; 0xd40 <move_countdown+0x2c>
     d3a:	8b e0       	ldi	r24, 0x0B	; 11
     d3c:	80 93 24 03 	sts	0x0324, r24

    switch(moverr) {
     d40:	80 91 24 03 	lds	r24, 0x0324
     d44:	82 30       	cpi	r24, 0x02	; 2
     d46:	09 f4       	brne	.+2      	; 0xd4a <move_countdown+0x36>
     d48:	97 c0       	rjmp	.+302    	; 0xe78 <move_countdown+0x164>
     d4a:	83 30       	cpi	r24, 0x03	; 3
     d4c:	30 f4       	brcc	.+12     	; 0xd5a <move_countdown+0x46>
     d4e:	88 23       	and	r24, r24
     d50:	59 f0       	breq	.+22     	; 0xd68 <move_countdown+0x54>
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	09 f0       	breq	.+2      	; 0xd58 <move_countdown+0x44>
     d56:	fa c0       	rjmp	.+500    	; 0xf4c <move_countdown+0x238>
     d58:	4b c0       	rjmp	.+150    	; 0xdf0 <move_countdown+0xdc>
     d5a:	8a 30       	cpi	r24, 0x0A	; 10
     d5c:	09 f4       	brne	.+2      	; 0xd60 <move_countdown+0x4c>
     d5e:	d0 c0       	rjmp	.+416    	; 0xf00 <move_countdown+0x1ec>
     d60:	8b 30       	cpi	r24, 0x0B	; 11
     d62:	09 f0       	breq	.+2      	; 0xd66 <move_countdown+0x52>
     d64:	f3 c0       	rjmp	.+486    	; 0xf4c <move_countdown+0x238>
     d66:	e3 c0       	rjmp	.+454    	; 0xf2e <move_countdown+0x21a>
    case HOURF:
        if(!(PINB & (1<<1))){ hour = (hour + 1) % 24; }
     d68:	b1 99       	sbic	0x16, 1	; 22
     d6a:	0a c0       	rjmp	.+20     	; 0xd80 <move_countdown+0x6c>
     d6c:	80 91 20 03 	lds	r24, 0x0320
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	68 e1       	ldi	r22, 0x18	; 24
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	0e 94 ab 13 	call	0x2756	; 0x2756 <__divmodhi4>
     d7c:	80 93 20 03 	sts	0x0320, r24
        if(!(PINB & (1<<2))){ hour = (hour == 0) ? 23 : hour - 1; }
     d80:	b2 99       	sbic	0x16, 2	; 22
     d82:	0b c0       	rjmp	.+22     	; 0xd9a <move_countdown+0x86>
     d84:	80 91 20 03 	lds	r24, 0x0320
     d88:	88 23       	and	r24, r24
     d8a:	11 f4       	brne	.+4      	; 0xd90 <move_countdown+0x7c>
     d8c:	87 e1       	ldi	r24, 0x17	; 23
     d8e:	03 c0       	rjmp	.+6      	; 0xd96 <move_countdown+0x82>
     d90:	80 91 20 03 	lds	r24, 0x0320
     d94:	81 50       	subi	r24, 0x01	; 1
     d96:	80 93 20 03 	sts	0x0320, r24
        LCD_moveCursor(0,6); LCD_displayString("  ");
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	66 e0       	ldi	r22, 0x06	; 6
     d9e:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
     da2:	8e ea       	ldi	r24, 0xAE	; 174
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
     daa:	8c ed       	ldi	r24, 0xDC	; 220
     dac:	95 e0       	ldi	r25, 0x05	; 5
     dae:	28 ec       	ldi	r18, 0xC8	; 200
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	f9 01       	movw	r30, r18
     db4:	31 97       	sbiw	r30, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <move_countdown+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dba:	d9 f7       	brne	.-10     	; 0xdb2 <move_countdown+0x9e>
        _delay_ms(150);
        LCD_moveCursor(0,6);
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	66 e0       	ldi	r22, 0x06	; 6
     dc0:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
        if(hour < 10){ LCD_displayCharacter('0'); }
     dc4:	80 91 20 03 	lds	r24, 0x0320
     dc8:	8a 30       	cpi	r24, 0x0A	; 10
     dca:	18 f4       	brcc	.+6      	; 0xdd2 <move_countdown+0xbe>
     dcc:	80 e3       	ldi	r24, 0x30	; 48
     dce:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
        LCD_intgerToString(hour);
     dd2:	80 91 20 03 	lds	r24, 0x0320
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
     ddc:	8c ed       	ldi	r24, 0xDC	; 220
     dde:	95 e0       	ldi	r25, 0x05	; 5
     de0:	28 ec       	ldi	r18, 0xC8	; 200
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	f9 01       	movw	r30, r18
     de6:	31 97       	sbiw	r30, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <move_countdown+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dec:	d9 f7       	brne	.-10     	; 0xde4 <move_countdown+0xd0>
     dee:	ae c0       	rjmp	.+348    	; 0xf4c <move_countdown+0x238>
        _delay_ms(150);
        break;

    case MINUTEF:
        if(!(PINB & (1<<1))){ min = (min + 1) % 60; }
     df0:	b1 99       	sbic	0x16, 1	; 22
     df2:	0a c0       	rjmp	.+20     	; 0xe08 <move_countdown+0xf4>
     df4:	80 91 21 03 	lds	r24, 0x0321
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	6c e3       	ldi	r22, 0x3C	; 60
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	0e 94 ab 13 	call	0x2756	; 0x2756 <__divmodhi4>
     e04:	80 93 21 03 	sts	0x0321, r24
        if(!(PINB & (1<<2))){ min = (min == 0) ? 59 : min - 1; }
     e08:	b2 99       	sbic	0x16, 2	; 22
     e0a:	0b c0       	rjmp	.+22     	; 0xe22 <move_countdown+0x10e>
     e0c:	80 91 21 03 	lds	r24, 0x0321
     e10:	88 23       	and	r24, r24
     e12:	11 f4       	brne	.+4      	; 0xe18 <move_countdown+0x104>
     e14:	8b e3       	ldi	r24, 0x3B	; 59
     e16:	03 c0       	rjmp	.+6      	; 0xe1e <move_countdown+0x10a>
     e18:	80 91 21 03 	lds	r24, 0x0321
     e1c:	81 50       	subi	r24, 0x01	; 1
     e1e:	80 93 21 03 	sts	0x0321, r24
        LCD_moveCursor(0,9); LCD_displayString("  ");
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	69 e0       	ldi	r22, 0x09	; 9
     e26:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
     e2a:	8e ea       	ldi	r24, 0xAE	; 174
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
     e32:	8c ed       	ldi	r24, 0xDC	; 220
     e34:	95 e0       	ldi	r25, 0x05	; 5
     e36:	28 ec       	ldi	r18, 0xC8	; 200
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	f9 01       	movw	r30, r18
     e3c:	31 97       	sbiw	r30, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <move_countdown+0x128>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e40:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e42:	d9 f7       	brne	.-10     	; 0xe3a <move_countdown+0x126>
        _delay_ms(150);
        LCD_moveCursor(0,9);
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	69 e0       	ldi	r22, 0x09	; 9
     e48:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
        if(min < 10){ LCD_displayCharacter('0'); }
     e4c:	80 91 21 03 	lds	r24, 0x0321
     e50:	8a 30       	cpi	r24, 0x0A	; 10
     e52:	18 f4       	brcc	.+6      	; 0xe5a <move_countdown+0x146>
     e54:	80 e3       	ldi	r24, 0x30	; 48
     e56:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
        LCD_intgerToString(min);
     e5a:	80 91 21 03 	lds	r24, 0x0321
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
     e64:	8c ed       	ldi	r24, 0xDC	; 220
     e66:	95 e0       	ldi	r25, 0x05	; 5
     e68:	28 ec       	ldi	r18, 0xC8	; 200
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	f9 01       	movw	r30, r18
     e6e:	31 97       	sbiw	r30, 0x01	; 1
     e70:	f1 f7       	brne	.-4      	; 0xe6e <move_countdown+0x15a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e72:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e74:	d9 f7       	brne	.-10     	; 0xe6c <move_countdown+0x158>
     e76:	6a c0       	rjmp	.+212    	; 0xf4c <move_countdown+0x238>
        _delay_ms(150);
        break;

    case SECONDF:
        if(!(PINB & (1<<1))){ sec = (sec + 1) % 60; }
     e78:	b1 99       	sbic	0x16, 1	; 22
     e7a:	0a c0       	rjmp	.+20     	; 0xe90 <move_countdown+0x17c>
     e7c:	80 91 22 03 	lds	r24, 0x0322
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	6c e3       	ldi	r22, 0x3C	; 60
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	0e 94 ab 13 	call	0x2756	; 0x2756 <__divmodhi4>
     e8c:	80 93 22 03 	sts	0x0322, r24
        if(!(PINB & (1<<2))){ sec = (sec == 0) ? 59 : sec - 1; }
     e90:	b2 99       	sbic	0x16, 2	; 22
     e92:	0b c0       	rjmp	.+22     	; 0xeaa <move_countdown+0x196>
     e94:	80 91 22 03 	lds	r24, 0x0322
     e98:	88 23       	and	r24, r24
     e9a:	11 f4       	brne	.+4      	; 0xea0 <move_countdown+0x18c>
     e9c:	8b e3       	ldi	r24, 0x3B	; 59
     e9e:	03 c0       	rjmp	.+6      	; 0xea6 <move_countdown+0x192>
     ea0:	80 91 22 03 	lds	r24, 0x0322
     ea4:	81 50       	subi	r24, 0x01	; 1
     ea6:	80 93 22 03 	sts	0x0322, r24
        LCD_moveCursor(0,12); LCD_displayString("  ");
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	6c e0       	ldi	r22, 0x0C	; 12
     eae:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
     eb2:	8e ea       	ldi	r24, 0xAE	; 174
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
     eba:	8c ed       	ldi	r24, 0xDC	; 220
     ebc:	95 e0       	ldi	r25, 0x05	; 5
     ebe:	28 ec       	ldi	r18, 0xC8	; 200
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	f9 01       	movw	r30, r18
     ec4:	31 97       	sbiw	r30, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <move_countdown+0x1b0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eca:	d9 f7       	brne	.-10     	; 0xec2 <move_countdown+0x1ae>
        _delay_ms(150);
        LCD_moveCursor(0,12);
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	6c e0       	ldi	r22, 0x0C	; 12
     ed0:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
        if(sec < 10){ LCD_displayCharacter('0'); }
     ed4:	80 91 22 03 	lds	r24, 0x0322
     ed8:	8a 30       	cpi	r24, 0x0A	; 10
     eda:	18 f4       	brcc	.+6      	; 0xee2 <move_countdown+0x1ce>
     edc:	80 e3       	ldi	r24, 0x30	; 48
     ede:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
        LCD_intgerToString(sec);
     ee2:	80 91 22 03 	lds	r24, 0x0322
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
     eec:	8c ed       	ldi	r24, 0xDC	; 220
     eee:	95 e0       	ldi	r25, 0x05	; 5
     ef0:	28 ec       	ldi	r18, 0xC8	; 200
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	f9 01       	movw	r30, r18
     ef6:	31 97       	sbiw	r30, 0x01	; 1
     ef8:	f1 f7       	brne	.-4      	; 0xef6 <move_countdown+0x1e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     efa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     efc:	d9 f7       	brne	.-10     	; 0xef4 <move_countdown+0x1e0>
     efe:	26 c0       	rjmp	.+76     	; 0xf4c <move_countdown+0x238>
        _delay_ms(150);
        break;

    case 10:  // Done setting
        LCD_clearScreen();
     f00:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
        LCD_displayStringRowColumn(0, 1, "Set Completed.");
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	61 e0       	ldi	r22, 0x01	; 1
     f08:	41 eb       	ldi	r20, 0xB1	; 177
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
     f10:	80 e1       	ldi	r24, 0x10	; 16
     f12:	97 e2       	ldi	r25, 0x27	; 39
     f14:	28 ec       	ldi	r18, 0xC8	; 200
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	f9 01       	movw	r30, r18
     f1a:	31 97       	sbiw	r30, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <move_countdown+0x206>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f1e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f20:	d9 f7       	brne	.-10     	; 0xf18 <move_countdown+0x204>
        _delay_ms(1000);
        LCD_clearScreen();
     f22:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
        moverr = HOURF;
     f26:	10 92 24 03 	sts	0x0324, r1
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	08 95       	ret
        return 1;  // finished
        break;

    case 11:  // Exit back to menu
        LCD_clearScreen();
     f2e:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
        moverr = HOURF;
     f32:	10 92 24 03 	sts	0x0324, r1
     f36:	88 e8       	ldi	r24, 0x88	; 136
     f38:	93 e1       	ldi	r25, 0x13	; 19
     f3a:	28 ec       	ldi	r18, 0xC8	; 200
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	f9 01       	movw	r30, r18
     f40:	31 97       	sbiw	r30, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <move_countdown+0x22c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f44:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f46:	d9 f7       	brne	.-10     	; 0xf3e <move_countdown+0x22a>
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	08 95       	ret
     f4c:	80 e0       	ldi	r24, 0x00	; 0
        _delay_ms(500);
        return 2;  // exit to main menu
        break;
    }
    return 0; // still editing
}
     f4e:	08 95       	ret

00000f50 <Timer_countDown>:
#define MINUTEF  1
#define SECONDF  2
#define LOGF     3
// ---------------- Countdown logic ----------------
void Timer_countDown(void) {
	if (!intrupt || countdown_done_flag) return;  // only count if active
     f50:	80 91 25 03 	lds	r24, 0x0325
     f54:	88 23       	and	r24, r24
     f56:	a9 f1       	breq	.+106    	; 0xfc2 <Timer_countDown+0x72>
     f58:	80 91 23 03 	lds	r24, 0x0323
     f5c:	88 23       	and	r24, r24
     f5e:	89 f5       	brne	.+98     	; 0xfc2 <Timer_countDown+0x72>

	if (sec > 0) sec--;
     f60:	80 91 22 03 	lds	r24, 0x0322
     f64:	88 23       	and	r24, r24
     f66:	21 f0       	breq	.+8      	; 0xf70 <Timer_countDown+0x20>
     f68:	80 91 22 03 	lds	r24, 0x0322
     f6c:	81 50       	subi	r24, 0x01	; 1
     f6e:	17 c0       	rjmp	.+46     	; 0xf9e <Timer_countDown+0x4e>
	else {
		if (min > 0) {
     f70:	80 91 21 03 	lds	r24, 0x0321
     f74:	88 23       	and	r24, r24
     f76:	39 f0       	breq	.+14     	; 0xf86 <Timer_countDown+0x36>
			min--; sec = 59;
     f78:	80 91 21 03 	lds	r24, 0x0321
     f7c:	81 50       	subi	r24, 0x01	; 1
     f7e:	80 93 21 03 	sts	0x0321, r24
     f82:	8b e3       	ldi	r24, 0x3B	; 59
     f84:	0c c0       	rjmp	.+24     	; 0xf9e <Timer_countDown+0x4e>
		} else {
			if (hour > 0) {
     f86:	80 91 20 03 	lds	r24, 0x0320
     f8a:	88 23       	and	r24, r24
     f8c:	59 f0       	breq	.+22     	; 0xfa4 <Timer_countDown+0x54>
				hour--; min = 59; sec = 59;
     f8e:	80 91 20 03 	lds	r24, 0x0320
     f92:	81 50       	subi	r24, 0x01	; 1
     f94:	80 93 20 03 	sts	0x0320, r24
     f98:	8b e3       	ldi	r24, 0x3B	; 59
     f9a:	80 93 21 03 	sts	0x0321, r24
     f9e:	80 93 22 03 	sts	0x0322, r24
     fa2:	08 95       	ret
			} else {
				// Finished
				sec = min = hour = 0;
     fa4:	10 92 20 03 	sts	0x0320, r1
     fa8:	80 91 20 03 	lds	r24, 0x0320
     fac:	80 93 21 03 	sts	0x0321, r24
     fb0:	80 91 21 03 	lds	r24, 0x0321
     fb4:	80 93 22 03 	sts	0x0322, r24
				countdown_done_flag = 1;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	80 93 23 03 	sts	0x0323, r24
				Buzzer_on();
     fbe:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <Buzzer_on>
     fc2:	08 95       	ret

00000fc4 <__vector_4>:
	TCNT2 = 0;
	// Enable countdown
}

// Timer2 ISR -> call countdown
ISR(TIMER2_COMP_vect) {
     fc4:	1f 92       	push	r1
     fc6:	0f 92       	push	r0
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	0f 92       	push	r0
     fcc:	11 24       	eor	r1, r1
     fce:	2f 93       	push	r18
     fd0:	3f 93       	push	r19
     fd2:	4f 93       	push	r20
     fd4:	5f 93       	push	r21
     fd6:	6f 93       	push	r22
     fd8:	7f 93       	push	r23
     fda:	8f 93       	push	r24
     fdc:	9f 93       	push	r25
     fde:	af 93       	push	r26
     fe0:	bf 93       	push	r27
     fe2:	ef 93       	push	r30
     fe4:	ff 93       	push	r31
	tick_count++;
     fe6:	80 91 26 03 	lds	r24, 0x0326
     fea:	90 91 27 03 	lds	r25, 0x0327
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	90 93 27 03 	sts	0x0327, r25
     ff4:	80 93 26 03 	sts	0x0326, r24
	if (tick_count >= 62) {  // ~62 × 16ms ≈ 1 sec
     ff8:	80 91 26 03 	lds	r24, 0x0326
     ffc:	90 91 27 03 	lds	r25, 0x0327
    1000:	ce 97       	sbiw	r24, 0x3e	; 62
    1002:	30 f0       	brcs	.+12     	; 0x1010 <__vector_4+0x4c>
		tick_count = 0;
    1004:	10 92 27 03 	sts	0x0327, r1
    1008:	10 92 26 03 	sts	0x0326, r1
		Timer_countDown();
    100c:	0e 94 a8 07 	call	0xf50	; 0xf50 <Timer_countDown>
	}}
    1010:	ff 91       	pop	r31
    1012:	ef 91       	pop	r30
    1014:	bf 91       	pop	r27
    1016:	af 91       	pop	r26
    1018:	9f 91       	pop	r25
    101a:	8f 91       	pop	r24
    101c:	7f 91       	pop	r23
    101e:	6f 91       	pop	r22
    1020:	5f 91       	pop	r21
    1022:	4f 91       	pop	r20
    1024:	3f 91       	pop	r19
    1026:	2f 91       	pop	r18
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	0f 90       	pop	r0
    102e:	1f 90       	pop	r1
    1030:	18 95       	reti

00001032 <select_buttons>:

}
void select_buttons(void){

	// clock mode
	if(!(PINB & (1<<CLOCK))){
    1032:	b0 99       	sbic	0x16, 0	; 22
    1034:	03 c0       	rjmp	.+6      	; 0x103c <select_buttons+0xa>
		mode=1;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	80 93 3a 03 	sts	0x033A, r24
	}
	// alarm
	if(!(PINB & (1<<Alarm))){
    103c:	b1 99       	sbic	0x16, 1	; 22
    103e:	03 c0       	rjmp	.+6      	; 0x1046 <select_buttons+0x14>
		mode=2;
    1040:	82 e0       	ldi	r24, 0x02	; 2
    1042:	80 93 3a 03 	sts	0x033A, r24
	}
	// stopwatch
	if(!(PINB & (1<<StopWatch))){
    1046:	b2 99       	sbic	0x16, 2	; 22
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <select_buttons+0x1e>
		mode=3;
    104a:	83 e0       	ldi	r24, 0x03	; 3
    104c:	80 93 3a 03 	sts	0x033A, r24
	}
	//CD
	if(!(PINB & (1<<CD))){
    1050:	b3 99       	sbic	0x16, 3	; 22
    1052:	03 c0       	rjmp	.+6      	; 0x105a <select_buttons+0x28>
		mode=4;
    1054:	84 e0       	ldi	r24, 0x04	; 4
    1056:	80 93 3a 03 	sts	0x033A, r24
    105a:	08 95       	ret

0000105c <Exit_mode>:

}


uint8 Exit_mode(void){
	if(!(PINB & (1<<BACK_Exit))){
    105c:	b4 9b       	sbis	0x16, 4	; 22
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <Exit_mode+0x8>
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	08 95       	ret
    1064:	84 ef       	ldi	r24, 0xF4	; 244
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	28 ec       	ldi	r18, 0xC8	; 200
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	f9 01       	movw	r30, r18
    106e:	31 97       	sbiw	r30, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <Exit_mode+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1072:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1074:	d9 f7       	brne	.-10     	; 0x106c <Exit_mode+0x10>
		_delay_ms(50);
		if(!(PINB & (1<<BACK_Exit))){
    1076:	86 b3       	in	r24, 0x16	; 22
    1078:	82 95       	swap	r24
    107a:	8f 70       	andi	r24, 0x0F	; 15
    107c:	80 95       	com	r24
    107e:	81 70       	andi	r24, 0x01	; 1

	}
	return 0;


}
    1080:	08 95       	ret

00001082 <button_init>:

}


void button_init(void){
	DDRB=0X00;
    1082:	17 ba       	out	0x17, r1	; 23
	PORTB=0X3F;
    1084:	8f e3       	ldi	r24, 0x3F	; 63
    1086:	88 bb       	out	0x18, r24	; 24
	DDRA|=(1<<7);
    1088:	d7 9a       	sbi	0x1a, 7	; 26
	PORTA&=(1<<7);
    108a:	8b b3       	in	r24, 0x1b	; 27
    108c:	80 78       	andi	r24, 0x80	; 128
    108e:	8b bb       	out	0x1b, r24	; 27
	DDRB|=(1<<6);
    1090:	be 9a       	sbi	0x17, 6	; 23
	PORTB&=~(1<<6);
    1092:	c6 98       	cbi	0x18, 6	; 24

}
    1094:	08 95       	ret

00001096 <set_1st_diplay_void>:



}
void set_1st_diplay_void(void){
	LCD_displayStringRowColumn(0, 0, "Time: HH:MM:SS");
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	40 ec       	ldi	r20, 0xC0	; 192
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Date: DD/MM/YY  ");
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	4f ec       	ldi	r20, 0xCF	; 207
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
}
    10ae:	08 95       	ret

000010b0 <clock_mode_display>:


}
void clock_mode_display(void){

	LCD_displayStringRowColumn(0,0,"1-DISPLAY ");
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	40 ee       	ldi	r20, 0xE0	; 224
    10b6:	50 e0       	ldi	r21, 0x00	; 0
    10b8:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"2-SET");
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	4b ee       	ldi	r20, 0xEB	; 235
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,7,"3_12-Hr ");
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	67 e0       	ldi	r22, 0x07	; 7
    10cc:	41 ef       	ldi	r20, 0xF1	; 241
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>



}
    10d4:	08 95       	ret

000010d6 <clock_display>:
void clock_display(void){
	LCD_displayStringRowColumn(0,0,"Time: ");
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	4a ef       	ldi	r20, 0xFA	; 250
    10dc:	50 e0       	ldi	r21, 0x00	; 0
    10de:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
	LCD_moveCursor(0,6);
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	66 e0       	ldi	r22, 0x06	; 6
    10e6:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>

	if(RTC_getHour() < 10){
    10ea:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <RTC_getHour>
    10ee:	8a 30       	cpi	r24, 0x0A	; 10
    10f0:	18 f4       	brcc	.+6      	; 0x10f8 <clock_display+0x22>
		LCD_displayCharacter('0');
    10f2:	80 e3       	ldi	r24, 0x30	; 48
    10f4:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
		LCD_intgerToString(RTC_getHour());
	}
	else{
		LCD_intgerToString(RTC_getHour());
    10f8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <RTC_getHour>
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>


	}
	LCD_displayString(":");
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>

	if(RTC_getMinute() < 10){
    110a:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <RTC_getMinute>
    110e:	8a 30       	cpi	r24, 0x0A	; 10
    1110:	18 f4       	brcc	.+6      	; 0x1118 <clock_display+0x42>
		LCD_displayCharacter('0');
    1112:	80 e3       	ldi	r24, 0x30	; 48
    1114:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
		LCD_intgerToString(RTC_getMinute());
	}
	else{
		LCD_intgerToString(RTC_getMinute());
    1118:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <RTC_getMinute>
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>


	}
	LCD_displayString(":");
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>

	if(RTC_getSecond() < 10){
    112a:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <RTC_getSecond>
    112e:	8a 30       	cpi	r24, 0x0A	; 10
    1130:	18 f4       	brcc	.+6      	; 0x1138 <clock_display+0x62>
		LCD_displayCharacter('0');
    1132:	80 e3       	ldi	r24, 0x30	; 48
    1134:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
		LCD_intgerToString(RTC_getSecond());
	}
	else{
		LCD_intgerToString(RTC_getSecond());
    1138:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <RTC_getSecond>
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
    1142:	08 95       	ret

00001144 <update>:



void update (void){

	if (hour == 23 && min == 59 && sec == 59) {
    1144:	80 91 29 03 	lds	r24, 0x0329
    1148:	87 31       	cpi	r24, 0x17	; 23
    114a:	09 f0       	breq	.+2      	; 0x114e <update+0xa>
    114c:	55 c0       	rjmp	.+170    	; 0x11f8 <update+0xb4>
    114e:	80 91 2a 03 	lds	r24, 0x032A
    1152:	8b 33       	cpi	r24, 0x3B	; 59
    1154:	09 f0       	breq	.+2      	; 0x1158 <update+0x14>
    1156:	50 c0       	rjmp	.+160    	; 0x11f8 <update+0xb4>
    1158:	80 91 2b 03 	lds	r24, 0x032B
    115c:	8b 33       	cpi	r24, 0x3B	; 59
    115e:	09 f0       	breq	.+2      	; 0x1162 <update+0x1e>
    1160:	4b c0       	rjmp	.+150    	; 0x11f8 <update+0xb4>
		day++;
    1162:	e0 91 2c 03 	lds	r30, 0x032C
    1166:	ef 5f       	subi	r30, 0xFF	; 255
    1168:	e0 93 2c 03 	sts	0x032C, r30

		uint8 daysInMonth;
		switch(month) {
    116c:	40 91 2d 03 	lds	r20, 0x032D
    1170:	46 30       	cpi	r20, 0x06	; 6
    1172:	69 f0       	breq	.+26     	; 0x118e <update+0x4a>
    1174:	47 30       	cpi	r20, 0x07	; 7
    1176:	28 f4       	brcc	.+10     	; 0x1182 <update+0x3e>
    1178:	42 30       	cpi	r20, 0x02	; 2
    117a:	59 f0       	breq	.+22     	; 0x1192 <update+0x4e>
    117c:	44 30       	cpi	r20, 0x04	; 4
    117e:	29 f4       	brne	.+10     	; 0x118a <update+0x46>
    1180:	06 c0       	rjmp	.+12     	; 0x118e <update+0x4a>
    1182:	49 30       	cpi	r20, 0x09	; 9
    1184:	21 f0       	breq	.+8      	; 0x118e <update+0x4a>
    1186:	4b 30       	cpi	r20, 0x0B	; 11
    1188:	11 f0       	breq	.+4      	; 0x118e <update+0x4a>
    118a:	8f e1       	ldi	r24, 0x1F	; 31
    118c:	1b c0       	rjmp	.+54     	; 0x11c4 <update+0x80>
    118e:	8e e1       	ldi	r24, 0x1E	; 30
    1190:	19 c0       	rjmp	.+50     	; 0x11c4 <update+0x80>
		case 4: case 6: case 9: case 11:
			daysInMonth = 30;
			break;
		case 2:
			if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
    1192:	50 91 2e 03 	lds	r21, 0x032E
    1196:	25 2f       	mov	r18, r21
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	c9 01       	movw	r24, r18
    119c:	83 70       	andi	r24, 0x03	; 3
    119e:	90 70       	andi	r25, 0x00	; 0
    11a0:	89 2b       	or	r24, r25
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <update+0x6c>
    11a4:	85 2f       	mov	r24, r21
    11a6:	64 e6       	ldi	r22, 0x64	; 100
    11a8:	0e 94 9f 13 	call	0x273e	; 0x273e <__udivmodqi4>
    11ac:	99 23       	and	r25, r25
    11ae:	49 f4       	brne	.+18     	; 0x11c2 <update+0x7e>
    11b0:	c9 01       	movw	r24, r18
    11b2:	60 e9       	ldi	r22, 0x90	; 144
    11b4:	71 e0       	ldi	r23, 0x01	; 1
    11b6:	0e 94 ab 13 	call	0x2756	; 0x2756 <__divmodhi4>
    11ba:	89 2b       	or	r24, r25
    11bc:	11 f0       	breq	.+4      	; 0x11c2 <update+0x7e>
    11be:	8c e1       	ldi	r24, 0x1C	; 28
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <update+0x80>
    11c2:	8d e1       	ldi	r24, 0x1D	; 29
			break;
		default:
			daysInMonth = 31;
		}

		if (day > daysInMonth) {
    11c4:	8e 17       	cp	r24, r30
    11c6:	80 f4       	brcc	.+32     	; 0x11e8 <update+0xa4>
			day = 1;
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	90 93 2c 03 	sts	0x032C, r25
			month++;
    11ce:	84 2f       	mov	r24, r20
    11d0:	8f 5f       	subi	r24, 0xFF	; 255
    11d2:	80 93 2d 03 	sts	0x032D, r24

			if (month > 12) {
    11d6:	8d 30       	cpi	r24, 0x0D	; 13
    11d8:	38 f0       	brcs	.+14     	; 0x11e8 <update+0xa4>
				month = 1;
    11da:	90 93 2d 03 	sts	0x032D, r25
				year++;
    11de:	80 91 2e 03 	lds	r24, 0x032E
    11e2:	8f 5f       	subi	r24, 0xFF	; 255
    11e4:	80 93 2e 03 	sts	0x032E, r24
			}
		}

		RTC_setDate(day, month, year);
    11e8:	80 91 2c 03 	lds	r24, 0x032C
    11ec:	60 91 2d 03 	lds	r22, 0x032D
    11f0:	40 91 2e 03 	lds	r20, 0x032E
    11f4:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <RTC_setDate>
    11f8:	08 95       	ret

000011fa <select_mode>:
static uint8 year=0;
uint8 temp;
uint8 last_read=255;

void select_mode(void){
	LCD_clearScreen();
    11fa:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,2,"Select Mode");
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	62 e0       	ldi	r22, 0x02	; 2
    1202:	43 e0       	ldi	r20, 0x03	; 3
    1204:	51 e0       	ldi	r21, 0x01	; 1
    1206:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
    120a:	88 e9       	ldi	r24, 0x98	; 152
    120c:	9a e3       	ldi	r25, 0x3A	; 58
    120e:	28 ec       	ldi	r18, 0xC8	; 200
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	f9 01       	movw	r30, r18
    1214:	31 97       	sbiw	r30, 0x01	; 1
    1216:	f1 f7       	brne	.-4      	; 0x1214 <select_mode+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1218:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    121a:	d9 f7       	brne	.-10     	; 0x1212 <select_mode+0x18>
	_delay_ms(1500);
	LCD_clearScreen();
    121c:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>

	LCD_displayStringRowColumn(0,0,"1-Clock");
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	4f e0       	ldi	r20, 0x0F	; 15
    1226:	51 e0       	ldi	r21, 0x01	; 1
    1228:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(0,8,"2-Alarm");
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	68 e0       	ldi	r22, 0x08	; 8
    1230:	47 e1       	ldi	r20, 0x17	; 23
    1232:	51 e0       	ldi	r21, 0x01	; 1
    1234:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"3-StopWatch");
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	4f e1       	ldi	r20, 0x1F	; 31
    123e:	51 e0       	ldi	r21, 0x01	; 1
    1240:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,12,"4-CD");
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	6c e0       	ldi	r22, 0x0C	; 12
    1248:	4b e2       	ldi	r20, 0x2B	; 43
    124a:	51 e0       	ldi	r21, 0x01	; 1
    124c:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>

}
    1250:	08 95       	ret

00001252 <move>:
	LCD_displayStringRowColumn(0, 0, "Time: HH:MM:SS");
	LCD_displayStringRowColumn(1, 0, "Date: DD/MM/YY  ");
}

uint8 move(void){
	if (!(PINB & (1<<0))) {
    1252:	b0 99       	sbic	0x16, 0	; 22
    1254:	0a c0       	rjmp	.+20     	; 0x126a <move+0x18>
		mover = (mover+ 1) % LOGF;
    1256:	80 91 28 03 	lds	r24, 0x0328
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	66 e0       	ldi	r22, 0x06	; 6
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	0e 94 ab 13 	call	0x2756	; 0x2756 <__divmodhi4>
    1266:	80 93 28 03 	sts	0x0328, r24
	}
	if(!(PINB & (1<<3))){
    126a:	b3 99       	sbic	0x16, 3	; 22
    126c:	03 c0       	rjmp	.+6      	; 0x1274 <move+0x22>
		mover=10;
    126e:	8a e0       	ldi	r24, 0x0A	; 10
    1270:	80 93 28 03 	sts	0x0328, r24
	}
	switch(mover){
    1274:	80 91 28 03 	lds	r24, 0x0328
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	09 f4       	brne	.+2      	; 0x127e <move+0x2c>
    127c:	d6 c0       	rjmp	.+428    	; 0x142a <move+0x1d8>
    127e:	84 30       	cpi	r24, 0x04	; 4
    1280:	38 f4       	brcc	.+14     	; 0x1290 <move+0x3e>
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	09 f4       	brne	.+2      	; 0x1288 <move+0x36>
    1286:	4f c0       	rjmp	.+158    	; 0x1326 <move+0xd4>
    1288:	82 30       	cpi	r24, 0x02	; 2
    128a:	08 f0       	brcs	.+2      	; 0x128e <move+0x3c>
    128c:	8d c0       	rjmp	.+282    	; 0x13a8 <move+0x156>
    128e:	0a c0       	rjmp	.+20     	; 0x12a4 <move+0x52>
    1290:	85 30       	cpi	r24, 0x05	; 5
    1292:	09 f4       	brne	.+2      	; 0x1296 <move+0x44>
    1294:	4e c1       	rjmp	.+668    	; 0x1532 <move+0x2e0>
    1296:	85 30       	cpi	r24, 0x05	; 5
    1298:	08 f4       	brcc	.+2      	; 0x129c <move+0x4a>
    129a:	09 c1       	rjmp	.+530    	; 0x14ae <move+0x25c>
    129c:	8a 30       	cpi	r24, 0x0A	; 10
    129e:	09 f0       	breq	.+2      	; 0x12a2 <move+0x50>
    12a0:	bd c1       	rjmp	.+890    	; 0x161c <move+0x3ca>
    12a2:	88 c1       	rjmp	.+784    	; 0x15b4 <move+0x362>
	case HOURF:

		if(!(PINB & (1<<1))){
    12a4:	b1 99       	sbic	0x16, 1	; 22
    12a6:	09 c0       	rjmp	.+18     	; 0x12ba <move+0x68>
			hour++;
    12a8:	80 91 29 03 	lds	r24, 0x0329
    12ac:	8f 5f       	subi	r24, 0xFF	; 255
    12ae:	80 93 29 03 	sts	0x0329, r24
			if(hour > 23){
    12b2:	88 31       	cpi	r24, 0x18	; 24
    12b4:	10 f0       	brcs	.+4      	; 0x12ba <move+0x68>
				hour = 0;
    12b6:	10 92 29 03 	sts	0x0329, r1
			}
		}
		if(!(PINB & (1<<2))){
    12ba:	b2 99       	sbic	0x16, 2	; 22
    12bc:	09 c0       	rjmp	.+18     	; 0x12d0 <move+0x7e>
			if(hour == 0){
    12be:	80 91 29 03 	lds	r24, 0x0329
    12c2:	88 23       	and	r24, r24
    12c4:	11 f4       	brne	.+4      	; 0x12ca <move+0x78>
				hour = 23;
    12c6:	87 e1       	ldi	r24, 0x17	; 23
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <move+0x7a>
			}
			else {
				hour--;
    12ca:	81 50       	subi	r24, 0x01	; 1
    12cc:	80 93 29 03 	sts	0x0329, r24
			}
		}
		LCD_moveCursor(0,6);
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	66 e0       	ldi	r22, 0x06	; 6
    12d4:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
		LCD_displayString("  ");
    12d8:	80 e3       	ldi	r24, 0x30	; 48
    12da:	91 e0       	ldi	r25, 0x01	; 1
    12dc:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
    12e0:	8c ed       	ldi	r24, 0xDC	; 220
    12e2:	95 e0       	ldi	r25, 0x05	; 5
    12e4:	28 ec       	ldi	r18, 0xC8	; 200
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	f9 01       	movw	r30, r18
    12ea:	31 97       	sbiw	r30, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <move+0x98>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f0:	d9 f7       	brne	.-10     	; 0x12e8 <move+0x96>

		_delay_ms(150);

		LCD_moveCursor(0,6);
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	66 e0       	ldi	r22, 0x06	; 6
    12f6:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
		if(hour < 10){
    12fa:	80 91 29 03 	lds	r24, 0x0329
    12fe:	8a 30       	cpi	r24, 0x0A	; 10
    1300:	18 f4       	brcc	.+6      	; 0x1308 <move+0xb6>
			LCD_displayCharacter('0');
    1302:	80 e3       	ldi	r24, 0x30	; 48
    1304:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
		}

		LCD_intgerToString(hour);
    1308:	80 91 29 03 	lds	r24, 0x0329
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
    1312:	8c ed       	ldi	r24, 0xDC	; 220
    1314:	95 e0       	ldi	r25, 0x05	; 5
    1316:	28 ec       	ldi	r18, 0xC8	; 200
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	31 97       	sbiw	r30, 0x01	; 1
    131e:	f1 f7       	brne	.-4      	; 0x131c <move+0xca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1320:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1322:	d9 f7       	brne	.-10     	; 0x131a <move+0xc8>
    1324:	7b c1       	rjmp	.+758    	; 0x161c <move+0x3ca>
		_delay_ms(150);
		break;
	case MINUTEF:
		if(!(PINB & (1<<1))){
    1326:	b1 99       	sbic	0x16, 1	; 22
    1328:	09 c0       	rjmp	.+18     	; 0x133c <move+0xea>
			min++;
    132a:	80 91 2a 03 	lds	r24, 0x032A
    132e:	8f 5f       	subi	r24, 0xFF	; 255
    1330:	80 93 2a 03 	sts	0x032A, r24
			if(min > 59){
    1334:	8c 33       	cpi	r24, 0x3C	; 60
    1336:	10 f0       	brcs	.+4      	; 0x133c <move+0xea>
				min = 0;
    1338:	10 92 2a 03 	sts	0x032A, r1
			}
		}
		if(!(PINB & (1<<2))){
    133c:	b2 99       	sbic	0x16, 2	; 22
    133e:	09 c0       	rjmp	.+18     	; 0x1352 <move+0x100>
			if(min == 0){
    1340:	80 91 2a 03 	lds	r24, 0x032A
    1344:	88 23       	and	r24, r24
    1346:	11 f4       	brne	.+4      	; 0x134c <move+0xfa>
				min = 59;
    1348:	8b e3       	ldi	r24, 0x3B	; 59
    134a:	01 c0       	rjmp	.+2      	; 0x134e <move+0xfc>
			}
			else {
				min--;
    134c:	81 50       	subi	r24, 0x01	; 1
    134e:	80 93 2a 03 	sts	0x032A, r24
			}
		}
		LCD_moveCursor(0, 9);    // مكان الدقيقة
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	69 e0       	ldi	r22, 0x09	; 9
    1356:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
		LCD_displayString("  ");
    135a:	80 e3       	ldi	r24, 0x30	; 48
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
    1362:	8c ed       	ldi	r24, 0xDC	; 220
    1364:	95 e0       	ldi	r25, 0x05	; 5
    1366:	28 ec       	ldi	r18, 0xC8	; 200
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	f9 01       	movw	r30, r18
    136c:	31 97       	sbiw	r30, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <move+0x11a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1370:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1372:	d9 f7       	brne	.-10     	; 0x136a <move+0x118>
		_delay_ms(150);
		LCD_moveCursor(0, 9);
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	69 e0       	ldi	r22, 0x09	; 9
    1378:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
		if(min < 10){
    137c:	80 91 2a 03 	lds	r24, 0x032A
    1380:	8a 30       	cpi	r24, 0x0A	; 10
    1382:	18 f4       	brcc	.+6      	; 0x138a <move+0x138>
			LCD_displayCharacter('0');
    1384:	80 e3       	ldi	r24, 0x30	; 48
    1386:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>

		}
		LCD_intgerToString(min);
    138a:	80 91 2a 03 	lds	r24, 0x032A
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
    1394:	8c ed       	ldi	r24, 0xDC	; 220
    1396:	95 e0       	ldi	r25, 0x05	; 5
    1398:	28 ec       	ldi	r18, 0xC8	; 200
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	f9 01       	movw	r30, r18
    139e:	31 97       	sbiw	r30, 0x01	; 1
    13a0:	f1 f7       	brne	.-4      	; 0x139e <move+0x14c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a4:	d9 f7       	brne	.-10     	; 0x139c <move+0x14a>
    13a6:	3a c1       	rjmp	.+628    	; 0x161c <move+0x3ca>
		_delay_ms(150);


		break;
	case SECONDF:
		if(!(PINB & (1<<1))){
    13a8:	b1 99       	sbic	0x16, 1	; 22
    13aa:	09 c0       	rjmp	.+18     	; 0x13be <move+0x16c>
			sec++;
    13ac:	80 91 2b 03 	lds	r24, 0x032B
    13b0:	8f 5f       	subi	r24, 0xFF	; 255
    13b2:	80 93 2b 03 	sts	0x032B, r24
			if(sec > 59){
    13b6:	8c 33       	cpi	r24, 0x3C	; 60
    13b8:	10 f0       	brcs	.+4      	; 0x13be <move+0x16c>
				sec = 0;
    13ba:	10 92 2b 03 	sts	0x032B, r1
			}
		}
		if(!(PINB & (1<<2))){
    13be:	b2 99       	sbic	0x16, 2	; 22
    13c0:	09 c0       	rjmp	.+18     	; 0x13d4 <move+0x182>
			if(sec == 0){
    13c2:	80 91 2b 03 	lds	r24, 0x032B
    13c6:	88 23       	and	r24, r24
    13c8:	11 f4       	brne	.+4      	; 0x13ce <move+0x17c>
				sec = 59;
    13ca:	8b e3       	ldi	r24, 0x3B	; 59
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <move+0x17e>
			}
			else {
				sec--;
    13ce:	81 50       	subi	r24, 0x01	; 1
    13d0:	80 93 2b 03 	sts	0x032B, r24
			}
		}
		LCD_moveCursor(0, 12);   // مكان الثانية
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	6c e0       	ldi	r22, 0x0C	; 12
    13d8:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
		LCD_displayString("  ");
    13dc:	80 e3       	ldi	r24, 0x30	; 48
    13de:	91 e0       	ldi	r25, 0x01	; 1
    13e0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
    13e4:	8c ed       	ldi	r24, 0xDC	; 220
    13e6:	95 e0       	ldi	r25, 0x05	; 5
    13e8:	28 ec       	ldi	r18, 0xC8	; 200
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	f9 01       	movw	r30, r18
    13ee:	31 97       	sbiw	r30, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <move+0x19c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f4:	d9 f7       	brne	.-10     	; 0x13ec <move+0x19a>
		_delay_ms(150);
		LCD_moveCursor(0, 12);
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	6c e0       	ldi	r22, 0x0C	; 12
    13fa:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
		if(sec < 10){
    13fe:	80 91 2b 03 	lds	r24, 0x032B
    1402:	8a 30       	cpi	r24, 0x0A	; 10
    1404:	18 f4       	brcc	.+6      	; 0x140c <move+0x1ba>
			LCD_displayCharacter('0');
    1406:	80 e3       	ldi	r24, 0x30	; 48
    1408:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>

		}
		LCD_intgerToString(sec);
    140c:	80 91 2b 03 	lds	r24, 0x032B
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
    1416:	8c ed       	ldi	r24, 0xDC	; 220
    1418:	95 e0       	ldi	r25, 0x05	; 5
    141a:	28 ec       	ldi	r18, 0xC8	; 200
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	f9 01       	movw	r30, r18
    1420:	31 97       	sbiw	r30, 0x01	; 1
    1422:	f1 f7       	brne	.-4      	; 0x1420 <move+0x1ce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1424:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1426:	d9 f7       	brne	.-10     	; 0x141e <move+0x1cc>
    1428:	f9 c0       	rjmp	.+498    	; 0x161c <move+0x3ca>
		_delay_ms(150);
		break;
	case DAYF:
		if(!(PINB & (1<<1))){
    142a:	b1 99       	sbic	0x16, 1	; 22
    142c:	0a c0       	rjmp	.+20     	; 0x1442 <move+0x1f0>
			day++;
    142e:	80 91 2c 03 	lds	r24, 0x032C
    1432:	8f 5f       	subi	r24, 0xFF	; 255
    1434:	80 93 2c 03 	sts	0x032C, r24
			if(day > 31){
    1438:	80 32       	cpi	r24, 0x20	; 32
    143a:	18 f0       	brcs	.+6      	; 0x1442 <move+0x1f0>
				day = 1;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	80 93 2c 03 	sts	0x032C, r24
			}
		}
		if(!(PINB & (1<<2))){
    1442:	b2 99       	sbic	0x16, 2	; 22
    1444:	09 c0       	rjmp	.+18     	; 0x1458 <move+0x206>
			if(day > 1){
    1446:	80 91 2c 03 	lds	r24, 0x032C
    144a:	82 30       	cpi	r24, 0x02	; 2
    144c:	10 f0       	brcs	.+4      	; 0x1452 <move+0x200>
				day--;
    144e:	81 50       	subi	r24, 0x01	; 1
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <move+0x202>
			}
			else {
				day = 31;
    1452:	8f e1       	ldi	r24, 0x1F	; 31
    1454:	80 93 2c 03 	sts	0x032C, r24
			}
		}
		LCD_moveCursor(1, 6);    // مكان اليوم
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	66 e0       	ldi	r22, 0x06	; 6
    145c:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
		LCD_displayString("  ");
    1460:	80 e3       	ldi	r24, 0x30	; 48
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
    1468:	8c ed       	ldi	r24, 0xDC	; 220
    146a:	95 e0       	ldi	r25, 0x05	; 5
    146c:	28 ec       	ldi	r18, 0xC8	; 200
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	f9 01       	movw	r30, r18
    1472:	31 97       	sbiw	r30, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <move+0x220>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1476:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1478:	d9 f7       	brne	.-10     	; 0x1470 <move+0x21e>
		_delay_ms(150);
		LCD_moveCursor(1, 6);
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	66 e0       	ldi	r22, 0x06	; 6
    147e:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
		if(day < 10){
    1482:	80 91 2c 03 	lds	r24, 0x032C
    1486:	8a 30       	cpi	r24, 0x0A	; 10
    1488:	18 f4       	brcc	.+6      	; 0x1490 <move+0x23e>
			LCD_displayCharacter('0');
    148a:	80 e3       	ldi	r24, 0x30	; 48
    148c:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>

		}
		LCD_intgerToString(day);
    1490:	80 91 2c 03 	lds	r24, 0x032C
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
    149a:	8c ed       	ldi	r24, 0xDC	; 220
    149c:	95 e0       	ldi	r25, 0x05	; 5
    149e:	28 ec       	ldi	r18, 0xC8	; 200
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	f9 01       	movw	r30, r18
    14a4:	31 97       	sbiw	r30, 0x01	; 1
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <move+0x252>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14aa:	d9 f7       	brne	.-10     	; 0x14a2 <move+0x250>
    14ac:	b7 c0       	rjmp	.+366    	; 0x161c <move+0x3ca>
		_delay_ms(150);
		break;
	case MONTHF:
		if(!(PINB & (1<<1))){
    14ae:	b1 99       	sbic	0x16, 1	; 22
    14b0:	0a c0       	rjmp	.+20     	; 0x14c6 <move+0x274>
			month++;
    14b2:	80 91 2d 03 	lds	r24, 0x032D
    14b6:	8f 5f       	subi	r24, 0xFF	; 255
    14b8:	80 93 2d 03 	sts	0x032D, r24
			if(month > 12){
    14bc:	8d 30       	cpi	r24, 0x0D	; 13
    14be:	18 f0       	brcs	.+6      	; 0x14c6 <move+0x274>
				month = 1;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	80 93 2d 03 	sts	0x032D, r24
			}
		}
		if(!(PINB & (1<<2))){
    14c6:	b2 99       	sbic	0x16, 2	; 22
    14c8:	09 c0       	rjmp	.+18     	; 0x14dc <move+0x28a>
			if(month > 1){
    14ca:	80 91 2d 03 	lds	r24, 0x032D
    14ce:	82 30       	cpi	r24, 0x02	; 2
    14d0:	10 f0       	brcs	.+4      	; 0x14d6 <move+0x284>
				month--;
    14d2:	81 50       	subi	r24, 0x01	; 1
    14d4:	01 c0       	rjmp	.+2      	; 0x14d8 <move+0x286>
			}
			else {
				month = 12;
    14d6:	8c e0       	ldi	r24, 0x0C	; 12
    14d8:	80 93 2d 03 	sts	0x032D, r24
			}
		}
		LCD_moveCursor(1, 9);    // مكان الشهر
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	69 e0       	ldi	r22, 0x09	; 9
    14e0:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
		LCD_displayString("  ");
    14e4:	80 e3       	ldi	r24, 0x30	; 48
    14e6:	91 e0       	ldi	r25, 0x01	; 1
    14e8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
    14ec:	8c ed       	ldi	r24, 0xDC	; 220
    14ee:	95 e0       	ldi	r25, 0x05	; 5
    14f0:	28 ec       	ldi	r18, 0xC8	; 200
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	f9 01       	movw	r30, r18
    14f6:	31 97       	sbiw	r30, 0x01	; 1
    14f8:	f1 f7       	brne	.-4      	; 0x14f6 <move+0x2a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fc:	d9 f7       	brne	.-10     	; 0x14f4 <move+0x2a2>
		_delay_ms(150);
		LCD_moveCursor(1, 9);
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	69 e0       	ldi	r22, 0x09	; 9
    1502:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
		if(month < 10){
    1506:	80 91 2d 03 	lds	r24, 0x032D
    150a:	8a 30       	cpi	r24, 0x0A	; 10
    150c:	18 f4       	brcc	.+6      	; 0x1514 <move+0x2c2>
			LCD_displayCharacter('0');
    150e:	80 e3       	ldi	r24, 0x30	; 48
    1510:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>

		}
		LCD_intgerToString(month);
    1514:	80 91 2d 03 	lds	r24, 0x032D
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
    151e:	8c ed       	ldi	r24, 0xDC	; 220
    1520:	95 e0       	ldi	r25, 0x05	; 5
    1522:	28 ec       	ldi	r18, 0xC8	; 200
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	f9 01       	movw	r30, r18
    1528:	31 97       	sbiw	r30, 0x01	; 1
    152a:	f1 f7       	brne	.-4      	; 0x1528 <move+0x2d6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    152c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152e:	d9 f7       	brne	.-10     	; 0x1526 <move+0x2d4>
    1530:	75 c0       	rjmp	.+234    	; 0x161c <move+0x3ca>
		_delay_ms(150);
		break;
	case YEARF:
		if(!(PINB & (1<<1))){
    1532:	b1 99       	sbic	0x16, 1	; 22
    1534:	09 c0       	rjmp	.+18     	; 0x1548 <move+0x2f6>
			year++;
    1536:	80 91 2e 03 	lds	r24, 0x032E
    153a:	8f 5f       	subi	r24, 0xFF	; 255
    153c:	80 93 2e 03 	sts	0x032E, r24
			if(year > 99){
    1540:	84 36       	cpi	r24, 0x64	; 100
    1542:	10 f0       	brcs	.+4      	; 0x1548 <move+0x2f6>
				year = 0;
    1544:	10 92 2e 03 	sts	0x032E, r1
			}
		}
		if(!(PINB & (1<<2))){
    1548:	b2 99       	sbic	0x16, 2	; 22
    154a:	09 c0       	rjmp	.+18     	; 0x155e <move+0x30c>
			if(year == 0){
    154c:	80 91 2e 03 	lds	r24, 0x032E
    1550:	88 23       	and	r24, r24
    1552:	11 f4       	brne	.+4      	; 0x1558 <move+0x306>
				year = 99;
    1554:	83 e6       	ldi	r24, 0x63	; 99
    1556:	01 c0       	rjmp	.+2      	; 0x155a <move+0x308>
			}
			else {
				year--;
    1558:	81 50       	subi	r24, 0x01	; 1
    155a:	80 93 2e 03 	sts	0x032E, r24
			}
		}
		LCD_moveCursor(1, 12);   // مكان السنة
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	6c e0       	ldi	r22, 0x0C	; 12
    1562:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
		LCD_displayString("  ");
    1566:	80 e3       	ldi	r24, 0x30	; 48
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
    156e:	8c ed       	ldi	r24, 0xDC	; 220
    1570:	95 e0       	ldi	r25, 0x05	; 5
    1572:	28 ec       	ldi	r18, 0xC8	; 200
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	f9 01       	movw	r30, r18
    1578:	31 97       	sbiw	r30, 0x01	; 1
    157a:	f1 f7       	brne	.-4      	; 0x1578 <move+0x326>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157e:	d9 f7       	brne	.-10     	; 0x1576 <move+0x324>
		_delay_ms(150);
		LCD_moveCursor(1, 12);
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	6c e0       	ldi	r22, 0x0C	; 12
    1584:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
		if(year < 10){
    1588:	80 91 2e 03 	lds	r24, 0x032E
    158c:	8a 30       	cpi	r24, 0x0A	; 10
    158e:	18 f4       	brcc	.+6      	; 0x1596 <move+0x344>
			LCD_displayCharacter('0');
    1590:	80 e3       	ldi	r24, 0x30	; 48
    1592:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>

		}
		LCD_intgerToString(year);
    1596:	80 91 2e 03 	lds	r24, 0x032E
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
    15a0:	8c ed       	ldi	r24, 0xDC	; 220
    15a2:	95 e0       	ldi	r25, 0x05	; 5
    15a4:	28 ec       	ldi	r18, 0xC8	; 200
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	f9 01       	movw	r30, r18
    15aa:	31 97       	sbiw	r30, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <move+0x358>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b0:	d9 f7       	brne	.-10     	; 0x15a8 <move+0x356>
    15b2:	34 c0       	rjmp	.+104    	; 0x161c <move+0x3ca>
		_delay_ms(150);
		break;
	case 10:
		LCD_clearScreen();
    15b4:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Set Completed.");
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	43 e3       	ldi	r20, 0x33	; 51
    15be:	51 e0       	ldi	r21, 0x01	; 1
    15c0:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
		RTC_setTime(hour,min,sec);
    15c4:	80 91 29 03 	lds	r24, 0x0329
    15c8:	60 91 2a 03 	lds	r22, 0x032A
    15cc:	40 91 2b 03 	lds	r20, 0x032B
    15d0:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <RTC_setTime>
		RTC_setDate(day,month,year);
    15d4:	80 91 2c 03 	lds	r24, 0x032C
    15d8:	60 91 2d 03 	lds	r22, 0x032D
    15dc:	40 91 2e 03 	lds	r20, 0x032E
    15e0:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <RTC_setDate>
		Buzzer_on();
    15e4:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <Buzzer_on>
    15e8:	88 e8       	ldi	r24, 0x88	; 136
    15ea:	93 e1       	ldi	r25, 0x13	; 19
    15ec:	28 ec       	ldi	r18, 0xC8	; 200
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	f9 01       	movw	r30, r18
    15f2:	31 97       	sbiw	r30, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <move+0x3a0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f8:	d9 f7       	brne	.-10     	; 0x15f0 <move+0x39e>
		_delay_ms(500);
		Buzzer_off();
    15fa:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Buzzer_off>
    15fe:	88 e9       	ldi	r24, 0x98	; 152
    1600:	9a e3       	ldi	r25, 0x3A	; 58
    1602:	28 ec       	ldi	r18, 0xC8	; 200
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	f9 01       	movw	r30, r18
    1608:	31 97       	sbiw	r30, 0x01	; 1
    160a:	f1 f7       	brne	.-4      	; 0x1608 <move+0x3b6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160e:	d9 f7       	brne	.-10     	; 0x1606 <move+0x3b4>
		_delay_ms(1500);
		LCD_clearScreen();
    1610:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
		mover = HOURF;
    1614:	10 92 28 03 	sts	0x0328, r1
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	08 95       	ret
		return 1;
    161c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 0;
}
    161e:	08 95       	ret

00001620 <date_display>:
}
void date_display(void){



	LCD_displayStringRowColumn(1,0,"Date: ");
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	42 e4       	ldi	r20, 0x42	; 66
    1626:	51 e0       	ldi	r21, 0x01	; 1
    1628:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,6);
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	66 e0       	ldi	r22, 0x06	; 6
    1630:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
	if(RTC_getDay() < 10){
    1634:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <RTC_getDay>
    1638:	8a 30       	cpi	r24, 0x0A	; 10
    163a:	18 f4       	brcc	.+6      	; 0x1642 <date_display+0x22>
		LCD_displayCharacter('0');
    163c:	80 e3       	ldi	r24, 0x30	; 48
    163e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
		LCD_intgerToString(RTC_getDay());
	}
	else{
		LCD_intgerToString(RTC_getDay());
    1642:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <RTC_getDay>
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
	}
	LCD_displayString("/");
    164c:	89 e4       	ldi	r24, 0x49	; 73
    164e:	91 e0       	ldi	r25, 0x01	; 1
    1650:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
	if(RTC_getMonth() < 10){
    1654:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <RTC_getMonth>
    1658:	8a 30       	cpi	r24, 0x0A	; 10
    165a:	18 f4       	brcc	.+6      	; 0x1662 <date_display+0x42>
		LCD_displayCharacter('0');
    165c:	80 e3       	ldi	r24, 0x30	; 48
    165e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
		LCD_intgerToString(RTC_getMonth());
	}
	else{
		LCD_intgerToString(RTC_getMonth());
    1662:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <RTC_getMonth>
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
	}

	LCD_displayString("/");
    166c:	89 e4       	ldi	r24, 0x49	; 73
    166e:	91 e0       	ldi	r25, 0x01	; 1
    1670:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>

	if(RTC_getYear() < 10){
    1674:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <RTC_getYear>
    1678:	8a 30       	cpi	r24, 0x0A	; 10
    167a:	18 f4       	brcc	.+6      	; 0x1682 <date_display+0x62>
		LCD_displayCharacter('0');
    167c:	80 e3       	ldi	r24, 0x30	; 48
    167e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
		LCD_intgerToString(RTC_getYear());
	}
	else{
		LCD_intgerToString(RTC_getYear());
    1682:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <RTC_getYear>
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
	}
	LCD_displayStringRowColumn(1, 14, "  ");
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	6e e0       	ldi	r22, 0x0E	; 14
    1690:	40 e3       	ldi	r20, 0x30	; 48
    1692:	51 e0       	ldi	r21, 0x01	; 1
    1694:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>



}
    1698:	08 95       	ret

0000169a <mode_12_display>:

		RTC_setDate(day, month, year);
	}
}

void mode_12_display(void){
    169a:	1f 93       	push	r17
	date_display();
    169c:	0e 94 10 0b 	call	0x1620	; 0x1620 <date_display>
	LCD_displayStringRowColumn(0,0,"Time: ");
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	4a ef       	ldi	r20, 0xFA	; 250
    16a6:	50 e0       	ldi	r21, 0x00	; 0
    16a8:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>

	LCD_moveCursor(0,6);
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	66 e0       	ldi	r22, 0x06	; 6
    16b0:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>

	uint8 convert=RTC_getHour();
    16b4:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <RTC_getHour>
    16b8:	18 2f       	mov	r17, r24
	if(convert == 0){
    16ba:	88 23       	and	r24, r24
    16bc:	19 f4       	brne	.+6      	; 0x16c4 <mode_12_display+0x2a>
		LCD_intgerToString(12);
    16be:	8c e0       	ldi	r24, 0x0C	; 12
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	09 c0       	rjmp	.+18     	; 0x16d6 <mode_12_display+0x3c>
		LCD_displayStringRowColumn(0, 14, "Am");
	}
	else if(convert < 12){
    16c4:	8c 30       	cpi	r24, 0x0C	; 12
    16c6:	70 f4       	brcc	.+28     	; 0x16e4 <mode_12_display+0x4a>
		if(convert < 10){
    16c8:	8a 30       	cpi	r24, 0x0A	; 10
    16ca:	18 f4       	brcc	.+6      	; 0x16d2 <mode_12_display+0x38>
			LCD_displayCharacter('0');
    16cc:	80 e3       	ldi	r24, 0x30	; 48
    16ce:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
		}
		LCD_intgerToString(convert);
    16d2:	81 2f       	mov	r24, r17
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
		LCD_displayStringRowColumn(0, 14, "Am");
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	6e e0       	ldi	r22, 0x0E	; 14
    16de:	4b e4       	ldi	r20, 0x4B	; 75
    16e0:	51 e0       	ldi	r21, 0x01	; 1
    16e2:	13 c0       	rjmp	.+38     	; 0x170a <mode_12_display+0x70>

	}
	else if(convert ==12){
    16e4:	8c 30       	cpi	r24, 0x0C	; 12
    16e6:	19 f4       	brne	.+6      	; 0x16ee <mode_12_display+0x54>
		LCD_intgerToString(12);
    16e8:	8c e0       	ldi	r24, 0x0C	; 12
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	08 c0       	rjmp	.+16     	; 0x16fe <mode_12_display+0x64>
		LCD_displayStringRowColumn(0, 14, "Pm");

	}
	else if(convert>12){
		convert=convert-12;
    16ee:	1c 50       	subi	r17, 0x0C	; 12
		if(convert<10){
    16f0:	1a 30       	cpi	r17, 0x0A	; 10
    16f2:	18 f4       	brcc	.+6      	; 0x16fa <mode_12_display+0x60>
			LCD_displayCharacter('0');
    16f4:	80 e3       	ldi	r24, 0x30	; 48
    16f6:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>

		}
		LCD_intgerToString(convert);
    16fa:	81 2f       	mov	r24, r17
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
		LCD_displayStringRowColumn(0, 14, "Pm");
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	6e e0       	ldi	r22, 0x0E	; 14
    1706:	4e e4       	ldi	r20, 0x4E	; 78
    1708:	51 e0       	ldi	r21, 0x01	; 1
    170a:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>

	}
	LCD_moveCursor(0,8);
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	68 e0       	ldi	r22, 0x08	; 8
    1712:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
	LCD_displayCharacter(':');
    1716:	8a e3       	ldi	r24, 0x3A	; 58
    1718:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>


	LCD_moveCursor(0, 9);
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	69 e0       	ldi	r22, 0x09	; 9
    1720:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>

	if(RTC_getMinute() < 10){
    1724:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <RTC_getMinute>
    1728:	8a 30       	cpi	r24, 0x0A	; 10
    172a:	18 f4       	brcc	.+6      	; 0x1732 <mode_12_display+0x98>
		LCD_displayCharacter('0');
    172c:	80 e3       	ldi	r24, 0x30	; 48
    172e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
		LCD_intgerToString(RTC_getMinute());
	}
	else{
		LCD_intgerToString(RTC_getMinute());
    1732:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <RTC_getMinute>
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>


	}
	LCD_displayString(":");
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	91 e0       	ldi	r25, 0x01	; 1
    1740:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
	LCD_moveCursor(0, 12);
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	6c e0       	ldi	r22, 0x0C	; 12
    1748:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
	if(RTC_getSecond() < 10){
    174c:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <RTC_getSecond>
    1750:	8a 30       	cpi	r24, 0x0A	; 10
    1752:	18 f4       	brcc	.+6      	; 0x175a <mode_12_display+0xc0>
		LCD_displayCharacter('0');
    1754:	80 e3       	ldi	r24, 0x30	; 48
    1756:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
		LCD_intgerToString(RTC_getSecond());
	}
	else{
		LCD_intgerToString(RTC_getSecond());
    175a:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <RTC_getSecond>
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
	}


}
    1764:	1f 91       	pop	r17
    1766:	08 95       	ret

00001768 <Timer_countUp>:
 * اللي هي ببسطاه تمام هعمل زياده للثواني و بعدين هتشيك علي كل حاجه تانيعه جايه بس و يفضلو يزيدو و يقلو سوا
 * و نفس الشيء او نفس الطريقه هتستخدم في ال count down
 *
 */
void Timer_countUp(void) {
	if (++sec0 > 9) {
    1768:	80 91 2f 03 	lds	r24, 0x032F
    176c:	8f 5f       	subi	r24, 0xFF	; 255
    176e:	80 93 2f 03 	sts	0x032F, r24
    1772:	8a 30       	cpi	r24, 0x0A	; 10
    1774:	a8 f1       	brcs	.+106    	; 0x17e0 <Timer_countUp+0x78>
		sec0 = 0;
    1776:	10 92 2f 03 	sts	0x032F, r1
		if (++sec1 > 5) {
    177a:	80 91 30 03 	lds	r24, 0x0330
    177e:	8f 5f       	subi	r24, 0xFF	; 255
    1780:	80 93 30 03 	sts	0x0330, r24
    1784:	86 30       	cpi	r24, 0x06	; 6
    1786:	60 f1       	brcs	.+88     	; 0x17e0 <Timer_countUp+0x78>
			sec1 = 0;
    1788:	10 92 30 03 	sts	0x0330, r1
			if (++min0 > 9) {
    178c:	80 91 31 03 	lds	r24, 0x0331
    1790:	8f 5f       	subi	r24, 0xFF	; 255
    1792:	80 93 31 03 	sts	0x0331, r24
    1796:	8a 30       	cpi	r24, 0x0A	; 10
    1798:	18 f1       	brcs	.+70     	; 0x17e0 <Timer_countUp+0x78>
				min0 = 0;
    179a:	10 92 31 03 	sts	0x0331, r1
				if (++min1 > 5) {
    179e:	80 91 32 03 	lds	r24, 0x0332
    17a2:	8f 5f       	subi	r24, 0xFF	; 255
    17a4:	80 93 32 03 	sts	0x0332, r24
    17a8:	86 30       	cpi	r24, 0x06	; 6
    17aa:	d0 f0       	brcs	.+52     	; 0x17e0 <Timer_countUp+0x78>
					min1 = 0;
    17ac:	10 92 32 03 	sts	0x0332, r1
					if (++hour0 > 9 || (hour1 == 2 && hour0 > 3)) {
    17b0:	90 91 33 03 	lds	r25, 0x0333
    17b4:	9f 5f       	subi	r25, 0xFF	; 255
    17b6:	90 93 33 03 	sts	0x0333, r25
    17ba:	9a 30       	cpi	r25, 0x0A	; 10
    17bc:	30 f4       	brcc	.+12     	; 0x17ca <Timer_countUp+0x62>
    17be:	80 91 34 03 	lds	r24, 0x0334
    17c2:	82 30       	cpi	r24, 0x02	; 2
    17c4:	69 f4       	brne	.+26     	; 0x17e0 <Timer_countUp+0x78>
    17c6:	94 30       	cpi	r25, 0x04	; 4
    17c8:	58 f0       	brcs	.+22     	; 0x17e0 <Timer_countUp+0x78>
						hour0 = 0;
    17ca:	10 92 33 03 	sts	0x0333, r1
						if (++hour1 > 2) {
    17ce:	80 91 34 03 	lds	r24, 0x0334
    17d2:	8f 5f       	subi	r24, 0xFF	; 255
    17d4:	80 93 34 03 	sts	0x0334, r24
    17d8:	83 30       	cpi	r24, 0x03	; 3
    17da:	10 f0       	brcs	.+4      	; 0x17e0 <Timer_countUp+0x78>
							hour1 = 0;
    17dc:	10 92 34 03 	sts	0x0334, r1
					}
				}
			}
		}
	}
	if(sec0 == 1)
    17e0:	80 91 2f 03 	lds	r24, 0x032F
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	11 f4       	brne	.+4      	; 0x17ec <Timer_countUp+0x84>
	awlmara=1;
    17e8:	80 93 39 03 	sts	0x0339, r24
    17ec:	08 95       	ret

000017ee <reset_values_before_and_after_exit>:
	LCD_intgerToString(sec1);
	LCD_intgerToString(sec0);

}
void reset_values_before_and_after_exit(void){
	sec0 = 0, sec1 = 0;
    17ee:	10 92 2f 03 	sts	0x032F, r1
    17f2:	10 92 30 03 	sts	0x0330, r1
	min0 = 0, min1 = 0;
    17f6:	10 92 31 03 	sts	0x0331, r1
    17fa:	10 92 32 03 	sts	0x0332, r1
	hour0 = 0, hour1 = 0;
    17fe:	10 92 33 03 	sts	0x0333, r1
    1802:	10 92 34 03 	sts	0x0334, r1
}
    1806:	08 95       	ret

00001808 <count_up_display>:
void display_stopwatch_before(void){
	LCD_displayStringRowColumn(0,3," 00:00:00");
	LCD_displayStringRowColumn(1,0,"Start Stop Reset");

}
void count_up_display(void){
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
	LCD_moveCursor(0,4);
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	64 e0       	ldi	r22, 0x04	; 4
    1810:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
	LCD_intgerToString(hour1);
    1814:	80 91 34 03 	lds	r24, 0x0334
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
	LCD_intgerToString(hour0);
    181e:	80 91 33 03 	lds	r24, 0x0333
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
	LCD_displayString(":");
    1828:	01 e5       	ldi	r16, 0x51	; 81
    182a:	11 e0       	ldi	r17, 0x01	; 1
    182c:	c8 01       	movw	r24, r16
    182e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
	LCD_intgerToString(min1);
    1832:	80 91 32 03 	lds	r24, 0x0332
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
	LCD_intgerToString(min0);
    183c:	80 91 31 03 	lds	r24, 0x0331
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
	LCD_displayString(":");
    1846:	c8 01       	movw	r24, r16
    1848:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
	LCD_intgerToString(sec1);
    184c:	80 91 30 03 	lds	r24, 0x0330
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
	LCD_intgerToString(sec0);
    1856:	80 91 2f 03 	lds	r24, 0x032F
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>

}
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	08 95       	ret

00001866 <display_stopwatch_before>:
	if(sec0 == 1)
	awlmara=1;

}
void display_stopwatch_before(void){
	LCD_displayStringRowColumn(0,3," 00:00:00");
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	63 e0       	ldi	r22, 0x03	; 3
    186a:	43 e5       	ldi	r20, 0x53	; 83
    186c:	51 e0       	ldi	r21, 0x01	; 1
    186e:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Start Stop Reset");
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	60 e0       	ldi	r22, 0x00	; 0
    1876:	4d e5       	ldi	r20, 0x5D	; 93
    1878:	51 e0       	ldi	r21, 0x01	; 1
    187a:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>

}
    187e:	08 95       	ret

00001880 <GPIO_setupPinDirection>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1880:	68 30       	cpi	r22, 0x08	; 8
    1882:	08 f0       	brcs	.+2      	; 0x1886 <GPIO_setupPinDirection+0x6>
    1884:	70 c0       	rjmp	.+224    	; 0x1966 <GPIO_setupPinDirection+0xe6>
    1886:	84 30       	cpi	r24, 0x04	; 4
    1888:	08 f0       	brcs	.+2      	; 0x188c <GPIO_setupPinDirection+0xc>
    188a:	6d c0       	rjmp	.+218    	; 0x1966 <GPIO_setupPinDirection+0xe6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	09 f1       	breq	.+66     	; 0x18d2 <GPIO_setupPinDirection+0x52>
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	30 f0       	brcs	.+12     	; 0x18a0 <GPIO_setupPinDirection+0x20>
    1894:	82 30       	cpi	r24, 0x02	; 2
    1896:	b1 f1       	breq	.+108    	; 0x1904 <GPIO_setupPinDirection+0x84>
    1898:	83 30       	cpi	r24, 0x03	; 3
    189a:	09 f0       	breq	.+2      	; 0x189e <GPIO_setupPinDirection+0x1e>
    189c:	64 c0       	rjmp	.+200    	; 0x1966 <GPIO_setupPinDirection+0xe6>
    189e:	4b c0       	rjmp	.+150    	; 0x1936 <GPIO_setupPinDirection+0xb6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    18a0:	41 30       	cpi	r20, 0x01	; 1
    18a2:	59 f4       	brne	.+22     	; 0x18ba <GPIO_setupPinDirection+0x3a>
			{
				SET_BIT(DDRA,pin_num);
    18a4:	2a b3       	in	r18, 0x1a	; 26
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <GPIO_setupPinDirection+0x30>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	6a 95       	dec	r22
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <GPIO_setupPinDirection+0x2c>
    18b4:	28 2b       	or	r18, r24
    18b6:	2a bb       	out	0x1a, r18	; 26
    18b8:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    18ba:	2a b3       	in	r18, 0x1a	; 26
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <GPIO_setupPinDirection+0x46>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	6a 95       	dec	r22
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <GPIO_setupPinDirection+0x42>
    18ca:	80 95       	com	r24
    18cc:	82 23       	and	r24, r18
    18ce:	8a bb       	out	0x1a, r24	; 26
    18d0:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    18d2:	41 30       	cpi	r20, 0x01	; 1
    18d4:	59 f4       	brne	.+22     	; 0x18ec <GPIO_setupPinDirection+0x6c>
			{
				SET_BIT(DDRB,pin_num);
    18d6:	27 b3       	in	r18, 0x17	; 23
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <GPIO_setupPinDirection+0x62>
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	6a 95       	dec	r22
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <GPIO_setupPinDirection+0x5e>
    18e6:	28 2b       	or	r18, r24
    18e8:	27 bb       	out	0x17, r18	; 23
    18ea:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    18ec:	27 b3       	in	r18, 0x17	; 23
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <GPIO_setupPinDirection+0x78>
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	6a 95       	dec	r22
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <GPIO_setupPinDirection+0x74>
    18fc:	80 95       	com	r24
    18fe:	82 23       	and	r24, r18
    1900:	87 bb       	out	0x17, r24	; 23
    1902:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1904:	41 30       	cpi	r20, 0x01	; 1
    1906:	59 f4       	brne	.+22     	; 0x191e <GPIO_setupPinDirection+0x9e>
			{
				SET_BIT(DDRC,pin_num);
    1908:	24 b3       	in	r18, 0x14	; 20
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <GPIO_setupPinDirection+0x94>
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	6a 95       	dec	r22
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <GPIO_setupPinDirection+0x90>
    1918:	28 2b       	or	r18, r24
    191a:	24 bb       	out	0x14, r18	; 20
    191c:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    191e:	24 b3       	in	r18, 0x14	; 20
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 c0       	rjmp	.+4      	; 0x192a <GPIO_setupPinDirection+0xaa>
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	6a 95       	dec	r22
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <GPIO_setupPinDirection+0xa6>
    192e:	80 95       	com	r24
    1930:	82 23       	and	r24, r18
    1932:	84 bb       	out	0x14, r24	; 20
    1934:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1936:	41 30       	cpi	r20, 0x01	; 1
    1938:	59 f4       	brne	.+22     	; 0x1950 <GPIO_setupPinDirection+0xd0>
			{
				SET_BIT(DDRD,pin_num);
    193a:	21 b3       	in	r18, 0x11	; 17
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <GPIO_setupPinDirection+0xc6>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	6a 95       	dec	r22
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <GPIO_setupPinDirection+0xc2>
    194a:	28 2b       	or	r18, r24
    194c:	21 bb       	out	0x11, r18	; 17
    194e:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1950:	21 b3       	in	r18, 0x11	; 17
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	02 c0       	rjmp	.+4      	; 0x195c <GPIO_setupPinDirection+0xdc>
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	6a 95       	dec	r22
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <GPIO_setupPinDirection+0xd8>
    1960:	80 95       	com	r24
    1962:	82 23       	and	r24, r18
    1964:	81 bb       	out	0x11, r24	; 17
    1966:	08 95       	ret

00001968 <GPIO_writePin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1968:	68 30       	cpi	r22, 0x08	; 8
    196a:	08 f0       	brcs	.+2      	; 0x196e <GPIO_writePin+0x6>
    196c:	70 c0       	rjmp	.+224    	; 0x1a4e <GPIO_writePin+0xe6>
    196e:	84 30       	cpi	r24, 0x04	; 4
    1970:	08 f0       	brcs	.+2      	; 0x1974 <GPIO_writePin+0xc>
    1972:	6d c0       	rjmp	.+218    	; 0x1a4e <GPIO_writePin+0xe6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1974:	81 30       	cpi	r24, 0x01	; 1
    1976:	09 f1       	breq	.+66     	; 0x19ba <GPIO_writePin+0x52>
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	30 f0       	brcs	.+12     	; 0x1988 <GPIO_writePin+0x20>
    197c:	82 30       	cpi	r24, 0x02	; 2
    197e:	b1 f1       	breq	.+108    	; 0x19ec <GPIO_writePin+0x84>
    1980:	83 30       	cpi	r24, 0x03	; 3
    1982:	09 f0       	breq	.+2      	; 0x1986 <GPIO_writePin+0x1e>
    1984:	64 c0       	rjmp	.+200    	; 0x1a4e <GPIO_writePin+0xe6>
    1986:	4b c0       	rjmp	.+150    	; 0x1a1e <GPIO_writePin+0xb6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1988:	41 30       	cpi	r20, 0x01	; 1
    198a:	59 f4       	brne	.+22     	; 0x19a2 <GPIO_writePin+0x3a>
			{
				SET_BIT(PORTA,pin_num);
    198c:	2b b3       	in	r18, 0x1b	; 27
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <GPIO_writePin+0x30>
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	6a 95       	dec	r22
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <GPIO_writePin+0x2c>
    199c:	28 2b       	or	r18, r24
    199e:	2b bb       	out	0x1b, r18	; 27
    19a0:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    19a2:	2b b3       	in	r18, 0x1b	; 27
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <GPIO_writePin+0x46>
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	6a 95       	dec	r22
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <GPIO_writePin+0x42>
    19b2:	80 95       	com	r24
    19b4:	82 23       	and	r24, r18
    19b6:	8b bb       	out	0x1b, r24	; 27
    19b8:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    19ba:	41 30       	cpi	r20, 0x01	; 1
    19bc:	59 f4       	brne	.+22     	; 0x19d4 <GPIO_writePin+0x6c>
			{
				SET_BIT(PORTB,pin_num);
    19be:	28 b3       	in	r18, 0x18	; 24
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <GPIO_writePin+0x62>
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	6a 95       	dec	r22
    19cc:	e2 f7       	brpl	.-8      	; 0x19c6 <GPIO_writePin+0x5e>
    19ce:	28 2b       	or	r18, r24
    19d0:	28 bb       	out	0x18, r18	; 24
    19d2:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    19d4:	28 b3       	in	r18, 0x18	; 24
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <GPIO_writePin+0x78>
    19dc:	88 0f       	add	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	6a 95       	dec	r22
    19e2:	e2 f7       	brpl	.-8      	; 0x19dc <GPIO_writePin+0x74>
    19e4:	80 95       	com	r24
    19e6:	82 23       	and	r24, r18
    19e8:	88 bb       	out	0x18, r24	; 24
    19ea:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    19ec:	41 30       	cpi	r20, 0x01	; 1
    19ee:	59 f4       	brne	.+22     	; 0x1a06 <GPIO_writePin+0x9e>
			{
				SET_BIT(PORTC,pin_num);
    19f0:	25 b3       	in	r18, 0x15	; 21
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <GPIO_writePin+0x94>
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	6a 95       	dec	r22
    19fe:	e2 f7       	brpl	.-8      	; 0x19f8 <GPIO_writePin+0x90>
    1a00:	28 2b       	or	r18, r24
    1a02:	25 bb       	out	0x15, r18	; 21
    1a04:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1a06:	25 b3       	in	r18, 0x15	; 21
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <GPIO_writePin+0xaa>
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	6a 95       	dec	r22
    1a14:	e2 f7       	brpl	.-8      	; 0x1a0e <GPIO_writePin+0xa6>
    1a16:	80 95       	com	r24
    1a18:	82 23       	and	r24, r18
    1a1a:	85 bb       	out	0x15, r24	; 21
    1a1c:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1a1e:	41 30       	cpi	r20, 0x01	; 1
    1a20:	59 f4       	brne	.+22     	; 0x1a38 <GPIO_writePin+0xd0>
			{
				SET_BIT(PORTD,pin_num);
    1a22:	22 b3       	in	r18, 0x12	; 18
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <GPIO_writePin+0xc6>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	6a 95       	dec	r22
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <GPIO_writePin+0xc2>
    1a32:	28 2b       	or	r18, r24
    1a34:	22 bb       	out	0x12, r18	; 18
    1a36:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1a38:	22 b3       	in	r18, 0x12	; 18
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <GPIO_writePin+0xdc>
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	6a 95       	dec	r22
    1a46:	e2 f7       	brpl	.-8      	; 0x1a40 <GPIO_writePin+0xd8>
    1a48:	80 95       	com	r24
    1a4a:	82 23       	and	r24, r18
    1a4c:	82 bb       	out	0x12, r24	; 18
    1a4e:	08 95       	ret

00001a50 <GPIO_readPin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a50:	68 30       	cpi	r22, 0x08	; 8
    1a52:	d0 f4       	brcc	.+52     	; 0x1a88 <GPIO_readPin+0x38>
    1a54:	84 30       	cpi	r24, 0x04	; 4
    1a56:	c0 f4       	brcc	.+48     	; 0x1a88 <GPIO_readPin+0x38>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	49 f0       	breq	.+18     	; 0x1a6e <GPIO_readPin+0x1e>
    1a5c:	81 30       	cpi	r24, 0x01	; 1
    1a5e:	28 f0       	brcs	.+10     	; 0x1a6a <GPIO_readPin+0x1a>
    1a60:	82 30       	cpi	r24, 0x02	; 2
    1a62:	39 f0       	breq	.+14     	; 0x1a72 <GPIO_readPin+0x22>
    1a64:	83 30       	cpi	r24, 0x03	; 3
    1a66:	81 f4       	brne	.+32     	; 0x1a88 <GPIO_readPin+0x38>
    1a68:	06 c0       	rjmp	.+12     	; 0x1a76 <GPIO_readPin+0x26>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a6a:	89 b3       	in	r24, 0x19	; 25
    1a6c:	05 c0       	rjmp	.+10     	; 0x1a78 <GPIO_readPin+0x28>
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a6e:	86 b3       	in	r24, 0x16	; 22
    1a70:	03 c0       	rjmp	.+6      	; 0x1a78 <GPIO_readPin+0x28>
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a72:	83 b3       	in	r24, 0x13	; 19
    1a74:	01 c0       	rjmp	.+2      	; 0x1a78 <GPIO_readPin+0x28>
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a76:	80 b3       	in	r24, 0x10	; 16
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <GPIO_readPin+0x30>
    1a7c:	95 95       	asr	r25
    1a7e:	87 95       	ror	r24
    1a80:	6a 95       	dec	r22
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <GPIO_readPin+0x2c>
    1a84:	81 70       	andi	r24, 0x01	; 1
    1a86:	08 95       	ret
    1a88:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return pin_value;
}
    1a8a:	08 95       	ret

00001a8c <GPIO_setupPortDirection>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a8c:	84 30       	cpi	r24, 0x04	; 4
    1a8e:	80 f4       	brcc	.+32     	; 0x1ab0 <GPIO_setupPortDirection+0x24>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a90:	81 30       	cpi	r24, 0x01	; 1
    1a92:	49 f0       	breq	.+18     	; 0x1aa6 <GPIO_setupPortDirection+0x1a>
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	28 f0       	brcs	.+10     	; 0x1aa2 <GPIO_setupPortDirection+0x16>
    1a98:	82 30       	cpi	r24, 0x02	; 2
    1a9a:	39 f0       	breq	.+14     	; 0x1aaa <GPIO_setupPortDirection+0x1e>
    1a9c:	83 30       	cpi	r24, 0x03	; 3
    1a9e:	41 f4       	brne	.+16     	; 0x1ab0 <GPIO_setupPortDirection+0x24>
    1aa0:	06 c0       	rjmp	.+12     	; 0x1aae <GPIO_setupPortDirection+0x22>
		{
		case PORTA_ID:
			DDRA = direction;
    1aa2:	6a bb       	out	0x1a, r22	; 26
    1aa4:	08 95       	ret
			break;
		case PORTB_ID:
			DDRB = direction;
    1aa6:	67 bb       	out	0x17, r22	; 23
    1aa8:	08 95       	ret
			break;
		case PORTC_ID:
			DDRC = direction;
    1aaa:	64 bb       	out	0x14, r22	; 20
    1aac:	08 95       	ret
			break;
		case PORTD_ID:
			DDRD = direction;
    1aae:	61 bb       	out	0x11, r22	; 17
    1ab0:	08 95       	ret

00001ab2 <GPIO_writePort>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ab2:	84 30       	cpi	r24, 0x04	; 4
    1ab4:	80 f4       	brcc	.+32     	; 0x1ad6 <GPIO_writePort+0x24>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1ab6:	81 30       	cpi	r24, 0x01	; 1
    1ab8:	49 f0       	breq	.+18     	; 0x1acc <GPIO_writePort+0x1a>
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	28 f0       	brcs	.+10     	; 0x1ac8 <GPIO_writePort+0x16>
    1abe:	82 30       	cpi	r24, 0x02	; 2
    1ac0:	39 f0       	breq	.+14     	; 0x1ad0 <GPIO_writePort+0x1e>
    1ac2:	83 30       	cpi	r24, 0x03	; 3
    1ac4:	41 f4       	brne	.+16     	; 0x1ad6 <GPIO_writePort+0x24>
    1ac6:	06 c0       	rjmp	.+12     	; 0x1ad4 <GPIO_writePort+0x22>
		{
		case PORTA_ID:
			PORTA = value;
    1ac8:	6b bb       	out	0x1b, r22	; 27
    1aca:	08 95       	ret
			break;
		case PORTB_ID:
			PORTB = value;
    1acc:	68 bb       	out	0x18, r22	; 24
    1ace:	08 95       	ret
			break;
		case PORTC_ID:
			PORTC = value;
    1ad0:	65 bb       	out	0x15, r22	; 21
    1ad2:	08 95       	ret
			break;
		case PORTD_ID:
			PORTD = value;
    1ad4:	62 bb       	out	0x12, r22	; 18
    1ad6:	08 95       	ret

00001ad8 <GPIO_readPort>:

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ad8:	84 30       	cpi	r24, 0x04	; 4
    1ada:	88 f4       	brcc	.+34     	; 0x1afe <GPIO_readPort+0x26>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1adc:	81 30       	cpi	r24, 0x01	; 1
    1ade:	49 f0       	breq	.+18     	; 0x1af2 <GPIO_readPort+0x1a>
    1ae0:	81 30       	cpi	r24, 0x01	; 1
    1ae2:	28 f0       	brcs	.+10     	; 0x1aee <GPIO_readPort+0x16>
    1ae4:	82 30       	cpi	r24, 0x02	; 2
    1ae6:	39 f0       	breq	.+14     	; 0x1af6 <GPIO_readPort+0x1e>
    1ae8:	83 30       	cpi	r24, 0x03	; 3
    1aea:	49 f4       	brne	.+18     	; 0x1afe <GPIO_readPort+0x26>
    1aec:	06 c0       	rjmp	.+12     	; 0x1afa <GPIO_readPort+0x22>
		{
		case PORTA_ID:
			value = PINA;
    1aee:	89 b3       	in	r24, 0x19	; 25
    1af0:	08 95       	ret
			break;
		case PORTB_ID:
			value = PINB;
    1af2:	86 b3       	in	r24, 0x16	; 22
    1af4:	08 95       	ret
			break;
		case PORTC_ID:
			value = PINC;
    1af6:	83 b3       	in	r24, 0x13	; 19
    1af8:	08 95       	ret
			break;
		case PORTD_ID:
			value = PIND;
    1afa:	80 b3       	in	r24, 0x10	; 16
    1afc:	08 95       	ret
    1afe:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return value;
}
    1b00:	08 95       	ret

00001b02 <Timer1_init>:
#ifndef MCAL_TIMER1_C_
#define MCAL_TIMER1_C_
#include<avr/io.h>

void Timer1_init(void) {
	TCCR1A = (1 << FOC1A);
    1b02:	88 e0       	ldi	r24, 0x08	; 8
    1b04:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM12) | (1 << WGM13) | (1 << CS12) | (1 << CS10);
    1b06:	8d e1       	ldi	r24, 0x1D	; 29
    1b08:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 7813;
    1b0a:	85 e8       	ldi	r24, 0x85	; 133
    1b0c:	9e e1       	ldi	r25, 0x1E	; 30
    1b0e:	97 bd       	out	0x27, r25	; 39
    1b10:	86 bd       	out	0x26, r24	; 38
	TIMSK |= (1 << OCIE1A);
    1b12:	89 b7       	in	r24, 0x39	; 57
    1b14:	80 61       	ori	r24, 0x10	; 16
    1b16:	89 bf       	out	0x39, r24	; 57
	TCNT1 = 0;
    1b18:	1d bc       	out	0x2d, r1	; 45
    1b1a:	1c bc       	out	0x2c, r1	; 44
}
    1b1c:	08 95       	ret

00001b1e <TWI_init>:
#include "twi.h"
#include "../common/common_macros.h"
#include <avr/io.h>
#define ERROR 0
#define SUCCESS 1
void TWI_init(const TWI_ConfigType * Config_Ptr){
    1b1e:	fc 01       	movw	r30, r24



	   switch(Config_Ptr->bit_rate)
    1b20:	81 81       	ldd	r24, Z+1	; 0x01
    1b22:	92 81       	ldd	r25, Z+2	; 0x02
    1b24:	84 36       	cpi	r24, 0x64	; 100
    1b26:	91 05       	cpc	r25, r1
    1b28:	21 f0       	breq	.+8      	; 0x1b32 <TWI_init+0x14>
    1b2a:	80 59       	subi	r24, 0x90	; 144
    1b2c:	91 40       	sbci	r25, 0x01	; 1
    1b2e:	31 f4       	brne	.+12     	; 0x1b3c <TWI_init+0x1e>
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <TWI_init+0x18>
	    {
	        case TWI_BAUD_100KHZ:
	            TWBR = 32;
    1b32:	80 e2       	ldi	r24, 0x20	; 32
    1b34:	01 c0       	rjmp	.+2      	; 0x1b38 <TWI_init+0x1a>
	            TWSR = 0x00; // prescaler = 1
	            break;

	        case TWI_BAUD_400KHZ:
	            TWBR = 2;
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	80 b9       	out	0x00, r24	; 0
	            TWSR = 0x00;
    1b3a:	11 b8       	out	0x01, r1	; 1
	            break;
	    }

	    // Set slave address if needed (as master use dummy address)
	    TWAR = (Config_Ptr->address << 1);
    1b3c:	80 81       	ld	r24, Z
    1b3e:	88 0f       	add	r24, r24
    1b40:	82 b9       	out	0x02, r24	; 2

	    // Enable TWI
	    TWCR = (1 << TWEN);
    1b42:	84 e0       	ldi	r24, 0x04	; 4
    1b44:	86 bf       	out	0x36, r24	; 54
	}
    1b46:	08 95       	ret

00001b48 <TWI_start>:
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1b48:	84 ea       	ldi	r24, 0xA4	; 164
    1b4a:	86 bf       	out	0x36, r24	; 54
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1b4c:	06 b6       	in	r0, 0x36	; 54
    1b4e:	07 fe       	sbrs	r0, 7
    1b50:	fd cf       	rjmp	.-6      	; 0x1b4c <TWI_start+0x4>
}
    1b52:	08 95       	ret

00001b54 <TWI_stop>:
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1b54:	84 e9       	ldi	r24, 0x94	; 148
    1b56:	86 bf       	out	0x36, r24	; 54
}
    1b58:	08 95       	ret

00001b5a <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    /* Put data On TWI data Register */
    TWDR = data;
    1b5a:	83 b9       	out	0x03, r24	; 3
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1b5c:	84 e8       	ldi	r24, 0x84	; 132
    1b5e:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1b60:	06 b6       	in	r0, 0x36	; 54
    1b62:	07 fe       	sbrs	r0, 7
    1b64:	fd cf       	rjmp	.-6      	; 0x1b60 <TWI_writeByte+0x6>
}
    1b66:	08 95       	ret

00001b68 <TWI_readByteWithACK>:
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1b68:	84 ec       	ldi	r24, 0xC4	; 196
    1b6a:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1b6c:	06 b6       	in	r0, 0x36	; 54
    1b6e:	07 fe       	sbrs	r0, 7
    1b70:	fd cf       	rjmp	.-6      	; 0x1b6c <TWI_readByteWithACK+0x4>
    /* Read Data */
    return TWDR;
    1b72:	83 b1       	in	r24, 0x03	; 3
}
    1b74:	08 95       	ret

00001b76 <TWI_readByteWithNACK>:
{
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1b76:	84 e8       	ldi	r24, 0x84	; 132
    1b78:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1b7a:	06 b6       	in	r0, 0x36	; 54
    1b7c:	07 fe       	sbrs	r0, 7
    1b7e:	fd cf       	rjmp	.-6      	; 0x1b7a <TWI_readByteWithNACK+0x4>
    /* Read Data */
    return TWDR;
    1b80:	83 b1       	in	r24, 0x03	; 3
}
    1b82:	08 95       	ret

00001b84 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1b84:	81 b1       	in	r24, 0x01	; 1
    return status;
}
    1b86:	88 7f       	andi	r24, 0xF8	; 248
    1b88:	08 95       	ret

00001b8a <DEC_to_BCD>:
 */
static uint8 BCD_to_DEC(uint8 val) {
    return ((val >> 4) * 10) + (val & 0x0F);
}
// THIS FUNCTION WILL BE USED IF WE WANT TO SET DATE AND TIME ON THE RTC AS IT ONLY UNDERSTAND BCD
static uint8 DEC_to_BCD(uint8 val) {
    1b8a:	48 2f       	mov	r20, r24
    1b8c:	6a e0       	ldi	r22, 0x0A	; 10
    1b8e:	0e 94 9f 13 	call	0x273e	; 0x273e <__udivmodqi4>
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	84 e0       	ldi	r24, 0x04	; 4
    1b98:	22 0f       	add	r18, r18
    1b9a:	33 1f       	adc	r19, r19
    1b9c:	8a 95       	dec	r24
    1b9e:	e1 f7       	brne	.-8      	; 0x1b98 <DEC_to_BCD+0xe>
    1ba0:	84 2f       	mov	r24, r20
    1ba2:	0e 94 9f 13 	call	0x273e	; 0x273e <__udivmodqi4>
    return ((val / 10) << 4) | (val % 10);
}
    1ba6:	89 2f       	mov	r24, r25
    1ba8:	82 2b       	or	r24, r18
    1baa:	08 95       	ret

00001bac <RTC_getYear>:
    uint8 val = TWI_readByteWithNACK();
    TWI_stop();
    return BCD_to_DEC(val);
}

uint8 RTC_getYear(void) {
    1bac:	1f 93       	push	r17
    TWI_start();
    1bae:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <TWI_start>
    TWI_writeByte(RTC_ADDRESS);
    1bb2:	80 ed       	ldi	r24, 0xD0	; 208
    1bb4:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_writeByte(0x06); // Year register
    1bb8:	86 e0       	ldi	r24, 0x06	; 6
    1bba:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_start();
    1bbe:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <TWI_start>
    TWI_writeByte(RTC_ADDRESS | 1);
    1bc2:	81 ed       	ldi	r24, 0xD1	; 209
    1bc4:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    uint8 val = TWI_readByteWithNACK();
    1bc8:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <TWI_readByteWithNACK>
    1bcc:	18 2f       	mov	r17, r24
    TWI_stop();
    1bce:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <TWI_stop>
    1bd2:	81 2f       	mov	r24, r17
    1bd4:	82 95       	swap	r24
    1bd6:	8f 70       	andi	r24, 0x0F	; 15
    1bd8:	2a e0       	ldi	r18, 0x0A	; 10
    1bda:	82 9f       	mul	r24, r18
    1bdc:	c0 01       	movw	r24, r0
    1bde:	11 24       	eor	r1, r1
    1be0:	1f 70       	andi	r17, 0x0F	; 15
    return BCD_to_DEC(val);
}
    1be2:	81 0f       	add	r24, r17
    1be4:	1f 91       	pop	r17
    1be6:	08 95       	ret

00001be8 <RTC_getMonth>:
    uint8 val = TWI_readByteWithNACK();
    TWI_stop();
    return BCD_to_DEC(val);
}

uint8 RTC_getMonth(void) {
    1be8:	1f 93       	push	r17
    TWI_start();
    1bea:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <TWI_start>
    TWI_writeByte(RTC_ADDRESS);
    1bee:	80 ed       	ldi	r24, 0xD0	; 208
    1bf0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_writeByte(0x05); // Month register
    1bf4:	85 e0       	ldi	r24, 0x05	; 5
    1bf6:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_start();
    1bfa:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <TWI_start>
    TWI_writeByte(RTC_ADDRESS | 1);
    1bfe:	81 ed       	ldi	r24, 0xD1	; 209
    1c00:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    uint8 val = TWI_readByteWithNACK();
    1c04:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <TWI_readByteWithNACK>
    1c08:	18 2f       	mov	r17, r24
    TWI_stop();
    1c0a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <TWI_stop>
    1c0e:	81 2f       	mov	r24, r17
    1c10:	82 95       	swap	r24
    1c12:	8f 70       	andi	r24, 0x0F	; 15
    1c14:	2a e0       	ldi	r18, 0x0A	; 10
    1c16:	82 9f       	mul	r24, r18
    1c18:	c0 01       	movw	r24, r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	1f 70       	andi	r17, 0x0F	; 15
    return BCD_to_DEC(val);
}
    1c1e:	81 0f       	add	r24, r17
    1c20:	1f 91       	pop	r17
    1c22:	08 95       	ret

00001c24 <RTC_getDay>:
    uint8 val = TWI_readByteWithNACK();
    TWI_stop();
    return BCD_to_DEC(val);
}

uint8 RTC_getDay(void) {
    1c24:	1f 93       	push	r17
    TWI_start();
    1c26:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <TWI_start>
    TWI_writeByte(RTC_ADDRESS);
    1c2a:	80 ed       	ldi	r24, 0xD0	; 208
    1c2c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_writeByte(0x04); // Date register
    1c30:	84 e0       	ldi	r24, 0x04	; 4
    1c32:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_start();
    1c36:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <TWI_start>
    TWI_writeByte(RTC_ADDRESS | 1);
    1c3a:	81 ed       	ldi	r24, 0xD1	; 209
    1c3c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    uint8 val = TWI_readByteWithNACK();
    1c40:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <TWI_readByteWithNACK>
    1c44:	18 2f       	mov	r17, r24
    TWI_stop();
    1c46:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <TWI_stop>
    1c4a:	81 2f       	mov	r24, r17
    1c4c:	82 95       	swap	r24
    1c4e:	8f 70       	andi	r24, 0x0F	; 15
    1c50:	2a e0       	ldi	r18, 0x0A	; 10
    1c52:	82 9f       	mul	r24, r18
    1c54:	c0 01       	movw	r24, r0
    1c56:	11 24       	eor	r1, r1
    1c58:	1f 70       	andi	r17, 0x0F	; 15
    return BCD_to_DEC(val);
}
    1c5a:	81 0f       	add	r24, r17
    1c5c:	1f 91       	pop	r17
    1c5e:	08 95       	ret

00001c60 <RTC_getHour>:
    uint8 val = TWI_readByteWithNACK();
    TWI_stop();
    return BCD_to_DEC(val);
}

uint8 RTC_getHour(void) {
    1c60:	1f 93       	push	r17
    TWI_start();
    1c62:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <TWI_start>
    TWI_writeByte(RTC_ADDRESS);
    1c66:	80 ed       	ldi	r24, 0xD0	; 208
    1c68:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_writeByte(0x02); // Hours register
    1c6c:	82 e0       	ldi	r24, 0x02	; 2
    1c6e:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_start();
    1c72:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <TWI_start>
    TWI_writeByte(RTC_ADDRESS | 1);
    1c76:	81 ed       	ldi	r24, 0xD1	; 209
    1c78:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    uint8 val = TWI_readByteWithNACK();
    1c7c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <TWI_readByteWithNACK>
    1c80:	18 2f       	mov	r17, r24
    TWI_stop();
    1c82:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <TWI_stop>
    1c86:	81 2f       	mov	r24, r17
    1c88:	82 95       	swap	r24
    1c8a:	8f 70       	andi	r24, 0x0F	; 15
    1c8c:	2a e0       	ldi	r18, 0x0A	; 10
    1c8e:	82 9f       	mul	r24, r18
    1c90:	c0 01       	movw	r24, r0
    1c92:	11 24       	eor	r1, r1
    1c94:	1f 70       	andi	r17, 0x0F	; 15
    return BCD_to_DEC(val);
}
    1c96:	81 0f       	add	r24, r17
    1c98:	1f 91       	pop	r17
    1c9a:	08 95       	ret

00001c9c <RTC_getMinute>:
    uint8 val = TWI_readByteWithNACK();
    TWI_stop();
    return BCD_to_DEC(val);
}

uint8 RTC_getMinute(void) {
    1c9c:	1f 93       	push	r17
    TWI_start();
    1c9e:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <TWI_start>
    TWI_writeByte(RTC_ADDRESS);
    1ca2:	80 ed       	ldi	r24, 0xD0	; 208
    1ca4:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_writeByte(0x01); // Minutes register
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_start();
    1cae:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <TWI_start>
    TWI_writeByte(RTC_ADDRESS | 1);
    1cb2:	81 ed       	ldi	r24, 0xD1	; 209
    1cb4:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    uint8 val = TWI_readByteWithNACK();
    1cb8:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <TWI_readByteWithNACK>
    1cbc:	18 2f       	mov	r17, r24
    TWI_stop();
    1cbe:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <TWI_stop>
    1cc2:	81 2f       	mov	r24, r17
    1cc4:	82 95       	swap	r24
    1cc6:	8f 70       	andi	r24, 0x0F	; 15
    1cc8:	2a e0       	ldi	r18, 0x0A	; 10
    1cca:	82 9f       	mul	r24, r18
    1ccc:	c0 01       	movw	r24, r0
    1cce:	11 24       	eor	r1, r1
    1cd0:	1f 70       	andi	r17, 0x0F	; 15
    return BCD_to_DEC(val);
}
    1cd2:	81 0f       	add	r24, r17
    1cd4:	1f 91       	pop	r17
    1cd6:	08 95       	ret

00001cd8 <RTC_getSecond>:
    TWI_writeByte(DEC_to_BCD(m));
    TWI_writeByte(DEC_to_BCD(y));
    TWI_stop();
}

uint8 RTC_getSecond(void) {
    1cd8:	1f 93       	push	r17
    TWI_start();
    1cda:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <TWI_start>
    TWI_writeByte(RTC_ADDRESS);
    1cde:	80 ed       	ldi	r24, 0xD0	; 208
    1ce0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_writeByte(0x00); // Seconds register
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_start();
    1cea:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <TWI_start>
    TWI_writeByte(RTC_ADDRESS | 1);
    1cee:	81 ed       	ldi	r24, 0xD1	; 209
    1cf0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    uint8 val = TWI_readByteWithNACK();
    1cf4:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <TWI_readByteWithNACK>
    1cf8:	18 2f       	mov	r17, r24
    TWI_stop();
    1cfa:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <TWI_stop>
    1cfe:	81 2f       	mov	r24, r17
    1d00:	82 95       	swap	r24
    1d02:	8f 70       	andi	r24, 0x0F	; 15
    1d04:	2a e0       	ldi	r18, 0x0A	; 10
    1d06:	82 9f       	mul	r24, r18
    1d08:	c0 01       	movw	r24, r0
    1d0a:	11 24       	eor	r1, r1
    1d0c:	1f 70       	andi	r17, 0x0F	; 15
    return BCD_to_DEC(val);
}
    1d0e:	81 0f       	add	r24, r17
    1d10:	1f 91       	pop	r17
    1d12:	08 95       	ret

00001d14 <RTC_setDate>:
    TWI_writeByte(DEC_to_BCD(m));
    TWI_writeByte(DEC_to_BCD(h));
    TWI_stop();
}

void RTC_setDate(uint8 d, uint8 m, uint8 y) {
    1d14:	ff 92       	push	r15
    1d16:	0f 93       	push	r16
    1d18:	1f 93       	push	r17
    1d1a:	18 2f       	mov	r17, r24
    1d1c:	06 2f       	mov	r16, r22
    1d1e:	f4 2e       	mov	r15, r20
    TWI_start();
    1d20:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <TWI_start>
    TWI_writeByte(RTC_ADDRESS);
    1d24:	80 ed       	ldi	r24, 0xD0	; 208
    1d26:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_writeByte(0x04); // Date register
    1d2a:	84 e0       	ldi	r24, 0x04	; 4
    1d2c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_writeByte(DEC_to_BCD(d));
    1d30:	81 2f       	mov	r24, r17
    1d32:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DEC_to_BCD>
    1d36:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_writeByte(DEC_to_BCD(m));
    1d3a:	80 2f       	mov	r24, r16
    1d3c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DEC_to_BCD>
    1d40:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_writeByte(DEC_to_BCD(y));
    1d44:	8f 2d       	mov	r24, r15
    1d46:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DEC_to_BCD>
    1d4a:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_stop();
    1d4e:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <TWI_stop>
}
    1d52:	1f 91       	pop	r17
    1d54:	0f 91       	pop	r16
    1d56:	ff 90       	pop	r15
    1d58:	08 95       	ret

00001d5a <RTC_setTime>:
void RTC_init(void) {
    TWI_ConfigType config = {TWI_BAUD_100KHZ, 0x01}; // Dummy address
    TWI_init(&config);
}

void RTC_setTime(uint8 h, uint8 m, uint8 s) {
    1d5a:	ff 92       	push	r15
    1d5c:	0f 93       	push	r16
    1d5e:	1f 93       	push	r17
    1d60:	f8 2e       	mov	r15, r24
    1d62:	06 2f       	mov	r16, r22
    1d64:	14 2f       	mov	r17, r20
    TWI_start();
    1d66:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <TWI_start>
    TWI_writeByte(RTC_ADDRESS);       // Write mode
    1d6a:	80 ed       	ldi	r24, 0xD0	; 208
    1d6c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_writeByte(0x00);              // Seconds register
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_writeByte(DEC_to_BCD(s));
    1d76:	81 2f       	mov	r24, r17
    1d78:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DEC_to_BCD>
    1d7c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_writeByte(DEC_to_BCD(m));
    1d80:	80 2f       	mov	r24, r16
    1d82:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DEC_to_BCD>
    1d86:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_writeByte(DEC_to_BCD(h));
    1d8a:	8f 2d       	mov	r24, r15
    1d8c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <DEC_to_BCD>
    1d90:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TWI_writeByte>
    TWI_stop();
    1d94:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <TWI_stop>
}
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	ff 90       	pop	r15
    1d9e:	08 95       	ret

00001da0 <RTC_init>:
// THIS FUNCTION WILL BE USED IF WE WANT TO SET DATE AND TIME ON THE RTC AS IT ONLY UNDERSTAND BCD
static uint8 DEC_to_BCD(uint8 val) {
    return ((val / 10) << 4) | (val % 10);
}
// RTC_INIT TO INIT. ADDRESS BAUD RATE AND ENABLE TWEN
void RTC_init(void) {
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <RTC_init+0x6>
    1da6:	0f 92       	push	r0
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    TWI_ConfigType config = {TWI_BAUD_100KHZ, 0x01}; // Dummy address
    1dac:	de 01       	movw	r26, r28
    1dae:	11 96       	adiw	r26, 0x01	; 1
    1db0:	e9 e1       	ldi	r30, 0x19	; 25
    1db2:	f3 e0       	ldi	r31, 0x03	; 3
    1db4:	83 e0       	ldi	r24, 0x03	; 3
    1db6:	01 90       	ld	r0, Z+
    1db8:	0d 92       	st	X+, r0
    1dba:	81 50       	subi	r24, 0x01	; 1
    1dbc:	e1 f7       	brne	.-8      	; 0x1db6 <RTC_init+0x16>
    TWI_init(&config);
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	01 96       	adiw	r24, 0x01	; 1
    1dc2:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <TWI_init>
}
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <Buzzer_init>:
 *******************************************************************************/
#include "buzzer.h"
#include"../common/common_macros.h"
void Buzzer_init(void)
{
	SET_BIT(BUZZER_DDR,BUZZER_PIN);        // Set buzzer pin as output
    1dd2:	88 9a       	sbi	0x11, 0	; 17

    CLEAR_BIT(BUZZER_PORT,BUZZER_PIN);     // Turn buzzer off initially
    1dd4:	90 98       	cbi	0x12, 0	; 18
}
    1dd6:	08 95       	ret

00001dd8 <Buzzer_on>:

void Buzzer_on(void)
{
	SET_BIT(BUZZER_PORT,BUZZER_PIN); // Set pin high
    1dd8:	90 9a       	sbi	0x12, 0	; 18
}
    1dda:	08 95       	ret

00001ddc <Buzzer_off>:

void Buzzer_off(void)
{
	CLEAR_BIT(BUZZER_PORT,BUZZER_PIN); // Set pin low
    1ddc:	90 98       	cbi	0x12, 0	; 18
}
    1dde:	08 95       	ret

00001de0 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1de0:	df 92       	push	r13
    1de2:	ef 92       	push	r14
    1de4:	ff 92       	push	r15
    1de6:	0f 93       	push	r16
    1de8:	1f 93       	push	r17
    1dea:	d8 2e       	mov	r13, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	41 e0       	ldi	r20, 0x01	; 1
    1df2:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
    1df6:	e0 ed       	ldi	r30, 0xD0	; 208
    1df8:	ee 2e       	mov	r14, r30
    1dfa:	e7 e0       	ldi	r30, 0x07	; 7
    1dfc:	fe 2e       	mov	r15, r30
    1dfe:	c7 01       	movw	r24, r14
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <LCD_displayCharacter+0x20>
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	61 e0       	ldi	r22, 0x01	; 1
    1e08:	41 e0       	ldi	r20, 0x01	; 1
    1e0a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
    1e0e:	c7 01       	movw	r24, r14
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <LCD_displayCharacter+0x30>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    1e14:	0d 2d       	mov	r16, r13
    1e16:	10 e0       	ldi	r17, 0x00	; 0
    1e18:	a8 01       	movw	r20, r16
    1e1a:	40 71       	andi	r20, 0x10	; 16
    1e1c:	50 70       	andi	r21, 0x00	; 0
    1e1e:	74 e0       	ldi	r23, 0x04	; 4
    1e20:	55 95       	asr	r21
    1e22:	47 95       	ror	r20
    1e24:	7a 95       	dec	r23
    1e26:	e1 f7       	brne	.-8      	; 0x1e20 <LCD_displayCharacter+0x40>
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	62 e0       	ldi	r22, 0x02	; 2
    1e2c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    1e30:	a8 01       	movw	r20, r16
    1e32:	40 72       	andi	r20, 0x20	; 32
    1e34:	50 70       	andi	r21, 0x00	; 0
    1e36:	65 e0       	ldi	r22, 0x05	; 5
    1e38:	55 95       	asr	r21
    1e3a:	47 95       	ror	r20
    1e3c:	6a 95       	dec	r22
    1e3e:	e1 f7       	brne	.-8      	; 0x1e38 <LCD_displayCharacter+0x58>
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	63 e0       	ldi	r22, 0x03	; 3
    1e44:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    1e48:	a8 01       	movw	r20, r16
    1e4a:	40 74       	andi	r20, 0x40	; 64
    1e4c:	50 70       	andi	r21, 0x00	; 0
    1e4e:	36 e0       	ldi	r19, 0x06	; 6
    1e50:	55 95       	asr	r21
    1e52:	47 95       	ror	r20
    1e54:	3a 95       	dec	r19
    1e56:	e1 f7       	brne	.-8      	; 0x1e50 <LCD_displayCharacter+0x70>
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	64 e0       	ldi	r22, 0x04	; 4
    1e5c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    1e60:	4d 2d       	mov	r20, r13
    1e62:	44 1f       	adc	r20, r20
    1e64:	44 27       	eor	r20, r20
    1e66:	44 1f       	adc	r20, r20
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	65 e0       	ldi	r22, 0x05	; 5
    1e6c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
    1e70:	c7 01       	movw	r24, r14
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <LCD_displayCharacter+0x92>

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	61 e0       	ldi	r22, 0x01	; 1
    1e7a:	40 e0       	ldi	r20, 0x00	; 0
    1e7c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
    1e80:	c7 01       	movw	r24, r14
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	f1 f7       	brne	.-4      	; 0x1e82 <LCD_displayCharacter+0xa2>
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	61 e0       	ldi	r22, 0x01	; 1
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
    1e90:	c7 01       	movw	r24, r14
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	f1 f7       	brne	.-4      	; 0x1e92 <LCD_displayCharacter+0xb2>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	d8 22       	and	r13, r24
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	62 e0       	ldi	r22, 0x02	; 2
    1e9e:	4d 2d       	mov	r20, r13
    1ea0:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    1ea4:	a8 01       	movw	r20, r16
    1ea6:	42 70       	andi	r20, 0x02	; 2
    1ea8:	50 70       	andi	r21, 0x00	; 0
    1eaa:	55 95       	asr	r21
    1eac:	47 95       	ror	r20
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	63 e0       	ldi	r22, 0x03	; 3
    1eb2:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    1eb6:	a8 01       	movw	r20, r16
    1eb8:	44 70       	andi	r20, 0x04	; 4
    1eba:	50 70       	andi	r21, 0x00	; 0
    1ebc:	55 95       	asr	r21
    1ebe:	47 95       	ror	r20
    1ec0:	55 95       	asr	r21
    1ec2:	47 95       	ror	r20
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	64 e0       	ldi	r22, 0x04	; 4
    1ec8:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    1ecc:	08 70       	andi	r16, 0x08	; 8
    1ece:	10 70       	andi	r17, 0x00	; 0
    1ed0:	83 e0       	ldi	r24, 0x03	; 3
    1ed2:	15 95       	asr	r17
    1ed4:	07 95       	ror	r16
    1ed6:	8a 95       	dec	r24
    1ed8:	e1 f7       	brne	.-8      	; 0x1ed2 <LCD_displayCharacter+0xf2>
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	65 e0       	ldi	r22, 0x05	; 5
    1ede:	40 2f       	mov	r20, r16
    1ee0:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
    1ee4:	c7 01       	movw	r24, r14
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <LCD_displayCharacter+0x106>

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	61 e0       	ldi	r22, 0x01	; 1
    1eee:	40 e0       	ldi	r20, 0x00	; 0
    1ef0:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
    1ef4:	c7 01       	movw	r24, r14
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <LCD_displayCharacter+0x116>
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1efa:	1f 91       	pop	r17
    1efc:	0f 91       	pop	r16
    1efe:	ff 90       	pop	r15
    1f00:	ef 90       	pop	r14
    1f02:	df 90       	pop	r13
    1f04:	08 95       	ret

00001f06 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1f06:	1f 93       	push	r17
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
    1f0c:	ec 01       	movw	r28, r24
    1f0e:	10 e0       	ldi	r17, 0x00	; 0
    1f10:	03 c0       	rjmp	.+6      	; 0x1f18 <LCD_displayString+0x12>
	uint8 i = 0;
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1f12:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
		i++;
    1f16:	1f 5f       	subi	r17, 0xFF	; 255
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1f18:	fe 01       	movw	r30, r28
    1f1a:	e1 0f       	add	r30, r17
    1f1c:	f1 1d       	adc	r31, r1
    1f1e:	80 81       	ld	r24, Z
    1f20:	88 23       	and	r24, r24
    1f22:	b9 f7       	brne	.-18     	; 0x1f12 <LCD_displayString+0xc>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	1f 91       	pop	r17
    1f2a:	08 95       	ret

00001f2c <LCD_floatToString>:
 * by taking the asci code and then handle the display
 * finally send the buffer to be displayed on the LCD
 * ty : by magdy
 */
void LCD_floatToString(float num)
{
    1f2c:	af 92       	push	r10
    1f2e:	bf 92       	push	r11
    1f30:	cf 92       	push	r12
    1f32:	df 92       	push	r13
    1f34:	ef 92       	push	r14
    1f36:	ff 92       	push	r15
    1f38:	0f 93       	push	r16
    1f3a:	1f 93       	push	r17
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	60 97       	sbiw	r28, 0x10	; 16
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	7b 01       	movw	r14, r22
    1f52:	8c 01       	movw	r16, r24
    char buffer[16];
    int int_part = (int)num;
    1f54:	0e 94 4b 03 	call	0x696	; 0x696 <__fixsfsi>





        sprintf(buffer, "%d.%02d", int_part, frac_part);
    1f58:	2d b7       	in	r18, 0x3d	; 61
    1f5a:	3e b7       	in	r19, 0x3e	; 62
    1f5c:	28 50       	subi	r18, 0x08	; 8
    1f5e:	30 40       	sbci	r19, 0x00	; 0
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	3e bf       	out	0x3e, r19	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	2d bf       	out	0x3d, r18	; 61
    1f6a:	cd b6       	in	r12, 0x3d	; 61
    1f6c:	de b6       	in	r13, 0x3e	; 62
    1f6e:	08 94       	sec
    1f70:	c1 1c       	adc	r12, r1
    1f72:	d1 1c       	adc	r13, r1
    1f74:	5e 01       	movw	r10, r28
    1f76:	08 94       	sec
    1f78:	a1 1c       	adc	r10, r1
    1f7a:	b1 1c       	adc	r11, r1
    1f7c:	ed b7       	in	r30, 0x3d	; 61
    1f7e:	fe b7       	in	r31, 0x3e	; 62
    1f80:	b2 82       	std	Z+2, r11	; 0x02
    1f82:	a1 82       	std	Z+1, r10	; 0x01
    1f84:	2e e6       	ldi	r18, 0x6E	; 110
    1f86:	31 e0       	ldi	r19, 0x01	; 1
    1f88:	f6 01       	movw	r30, r12
    1f8a:	33 83       	std	Z+3, r19	; 0x03
    1f8c:	22 83       	std	Z+2, r18	; 0x02
    1f8e:	75 83       	std	Z+5, r23	; 0x05
    1f90:	64 83       	std	Z+4, r22	; 0x04
    1f92:	88 27       	eor	r24, r24
    1f94:	77 fd       	sbrc	r23, 7
    1f96:	80 95       	com	r24
    1f98:	98 2f       	mov	r25, r24
    1f9a:	0e 94 ed 02 	call	0x5da	; 0x5da <__floatsisf>
    1f9e:	9b 01       	movw	r18, r22
    1fa0:	ac 01       	movw	r20, r24
    1fa2:	c8 01       	movw	r24, r16
    1fa4:	b7 01       	movw	r22, r14
    1fa6:	0e 94 95 01 	call	0x32a	; 0x32a <__subsf3>
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	48 ec       	ldi	r20, 0xC8	; 200
    1fb0:	52 e4       	ldi	r21, 0x42	; 66
    1fb2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__mulsf3>
    1fb6:	0e 94 4b 03 	call	0x696	; 0x696 <__fixsfsi>
    1fba:	f6 01       	movw	r30, r12
    1fbc:	77 83       	std	Z+7, r23	; 0x07
    1fbe:	66 83       	std	Z+6, r22	; 0x06
    1fc0:	0e 94 2a 14 	call	0x2854	; 0x2854 <sprintf>


    LCD_displayString(buffer);
    1fc4:	2d b7       	in	r18, 0x3d	; 61
    1fc6:	3e b7       	in	r19, 0x3e	; 62
    1fc8:	28 5f       	subi	r18, 0xF8	; 248
    1fca:	3f 4f       	sbci	r19, 0xFF	; 255
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	3e bf       	out	0x3e, r19	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	2d bf       	out	0x3d, r18	; 61
    1fd6:	c5 01       	movw	r24, r10
    1fd8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
}
    1fdc:	60 96       	adiw	r28, 0x10	; 16
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	de bf       	out	0x3e, r29	; 62
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	cd bf       	out	0x3d, r28	; 61
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	1f 91       	pop	r17
    1fee:	0f 91       	pop	r16
    1ff0:	ff 90       	pop	r15
    1ff2:	ef 90       	pop	r14
    1ff4:	df 90       	pop	r13
    1ff6:	cf 90       	pop	r12
    1ff8:	bf 90       	pop	r11
    1ffa:	af 90       	pop	r10
    1ffc:	08 95       	ret

00001ffe <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	60 97       	sbiw	r28, 0x10	; 16
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2016:	8e 01       	movw	r16, r28
    2018:	0f 5f       	subi	r16, 0xFF	; 255
    201a:	1f 4f       	sbci	r17, 0xFF	; 255
    201c:	b8 01       	movw	r22, r16
    201e:	4a e0       	ldi	r20, 0x0A	; 10
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	0e 94 09 14 	call	0x2812	; 0x2812 <itoa>
   LCD_displayString(buff); /* Display the string */
    2026:	c8 01       	movw	r24, r16
    2028:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
}
    202c:	60 96       	adiw	r28, 0x10	; 16
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	1f 91       	pop	r17
    203e:	0f 91       	pop	r16
    2040:	08 95       	ret

00002042 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2042:	df 92       	push	r13
    2044:	ef 92       	push	r14
    2046:	ff 92       	push	r15
    2048:	0f 93       	push	r16
    204a:	1f 93       	push	r17
    204c:	d8 2e       	mov	r13, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	40 e0       	ldi	r20, 0x00	; 0
    2054:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
    2058:	30 ed       	ldi	r19, 0xD0	; 208
    205a:	e3 2e       	mov	r14, r19
    205c:	37 e0       	ldi	r19, 0x07	; 7
    205e:	f3 2e       	mov	r15, r19
    2060:	c7 01       	movw	r24, r14
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_sendCommand+0x20>
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	61 e0       	ldi	r22, 0x01	; 1
    206a:	41 e0       	ldi	r20, 0x01	; 1
    206c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
    2070:	c7 01       	movw	r24, r14
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <LCD_sendCommand+0x30>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2076:	0d 2d       	mov	r16, r13
    2078:	10 e0       	ldi	r17, 0x00	; 0
    207a:	a8 01       	movw	r20, r16
    207c:	40 71       	andi	r20, 0x10	; 16
    207e:	50 70       	andi	r21, 0x00	; 0
    2080:	24 e0       	ldi	r18, 0x04	; 4
    2082:	55 95       	asr	r21
    2084:	47 95       	ror	r20
    2086:	2a 95       	dec	r18
    2088:	e1 f7       	brne	.-8      	; 0x2082 <LCD_sendCommand+0x40>
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	62 e0       	ldi	r22, 0x02	; 2
    208e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2092:	a8 01       	movw	r20, r16
    2094:	40 72       	andi	r20, 0x20	; 32
    2096:	50 70       	andi	r21, 0x00	; 0
    2098:	95 e0       	ldi	r25, 0x05	; 5
    209a:	55 95       	asr	r21
    209c:	47 95       	ror	r20
    209e:	9a 95       	dec	r25
    20a0:	e1 f7       	brne	.-8      	; 0x209a <LCD_sendCommand+0x58>
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	63 e0       	ldi	r22, 0x03	; 3
    20a6:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    20aa:	a8 01       	movw	r20, r16
    20ac:	40 74       	andi	r20, 0x40	; 64
    20ae:	50 70       	andi	r21, 0x00	; 0
    20b0:	86 e0       	ldi	r24, 0x06	; 6
    20b2:	55 95       	asr	r21
    20b4:	47 95       	ror	r20
    20b6:	8a 95       	dec	r24
    20b8:	e1 f7       	brne	.-8      	; 0x20b2 <LCD_sendCommand+0x70>
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	64 e0       	ldi	r22, 0x04	; 4
    20be:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    20c2:	4d 2d       	mov	r20, r13
    20c4:	44 1f       	adc	r20, r20
    20c6:	44 27       	eor	r20, r20
    20c8:	44 1f       	adc	r20, r20
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	65 e0       	ldi	r22, 0x05	; 5
    20ce:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
    20d2:	c7 01       	movw	r24, r14
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <LCD_sendCommand+0x92>

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	61 e0       	ldi	r22, 0x01	; 1
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
    20e2:	c7 01       	movw	r24, r14
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	f1 f7       	brne	.-4      	; 0x20e4 <LCD_sendCommand+0xa2>
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	61 e0       	ldi	r22, 0x01	; 1
    20ec:	41 e0       	ldi	r20, 0x01	; 1
    20ee:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
    20f2:	c7 01       	movw	r24, r14
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <LCD_sendCommand+0xb2>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	d8 22       	and	r13, r24
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	62 e0       	ldi	r22, 0x02	; 2
    2100:	4d 2d       	mov	r20, r13
    2102:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2106:	a8 01       	movw	r20, r16
    2108:	42 70       	andi	r20, 0x02	; 2
    210a:	50 70       	andi	r21, 0x00	; 0
    210c:	55 95       	asr	r21
    210e:	47 95       	ror	r20
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	63 e0       	ldi	r22, 0x03	; 3
    2114:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2118:	a8 01       	movw	r20, r16
    211a:	44 70       	andi	r20, 0x04	; 4
    211c:	50 70       	andi	r21, 0x00	; 0
    211e:	55 95       	asr	r21
    2120:	47 95       	ror	r20
    2122:	55 95       	asr	r21
    2124:	47 95       	ror	r20
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	64 e0       	ldi	r22, 0x04	; 4
    212a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    212e:	08 70       	andi	r16, 0x08	; 8
    2130:	10 70       	andi	r17, 0x00	; 0
    2132:	f3 e0       	ldi	r31, 0x03	; 3
    2134:	15 95       	asr	r17
    2136:	07 95       	ror	r16
    2138:	fa 95       	dec	r31
    213a:	e1 f7       	brne	.-8      	; 0x2134 <LCD_sendCommand+0xf2>
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	65 e0       	ldi	r22, 0x05	; 5
    2140:	40 2f       	mov	r20, r16
    2142:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
    2146:	c7 01       	movw	r24, r14
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <LCD_sendCommand+0x106>

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	61 e0       	ldi	r22, 0x01	; 1
    2150:	40 e0       	ldi	r20, 0x00	; 0
    2152:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_writePin>
    2156:	c7 01       	movw	r24, r14
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <LCD_sendCommand+0x116>
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    215c:	1f 91       	pop	r17
    215e:	0f 91       	pop	r16
    2160:	ff 90       	pop	r15
    2162:	ef 90       	pop	r14
    2164:	df 90       	pop	r13
    2166:	08 95       	ret

00002168 <LCD_clearScreen>:
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_sendCommand>
}
    216e:	08 95       	ret

00002170 <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2170:	81 30       	cpi	r24, 0x01	; 1
    2172:	39 f0       	breq	.+14     	; 0x2182 <LCD_moveCursor+0x12>
    2174:	81 30       	cpi	r24, 0x01	; 1
    2176:	50 f0       	brcs	.+20     	; 0x218c <LCD_moveCursor+0x1c>
    2178:	82 30       	cpi	r24, 0x02	; 2
    217a:	29 f0       	breq	.+10     	; 0x2186 <LCD_moveCursor+0x16>
    217c:	83 30       	cpi	r24, 0x03	; 3
    217e:	31 f4       	brne	.+12     	; 0x218c <LCD_moveCursor+0x1c>
    2180:	04 c0       	rjmp	.+8      	; 0x218a <LCD_moveCursor+0x1a>
	{
		case 0:
			lcd_memory_address=col;
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2182:	60 5c       	subi	r22, 0xC0	; 192
    2184:	03 c0       	rjmp	.+6      	; 0x218c <LCD_moveCursor+0x1c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2186:	60 5f       	subi	r22, 0xF0	; 240
    2188:	01 c0       	rjmp	.+2      	; 0x218c <LCD_moveCursor+0x1c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    218a:	60 5b       	subi	r22, 0xB0	; 176
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    218c:	86 2f       	mov	r24, r22
    218e:	80 68       	ori	r24, 0x80	; 128
    2190:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_sendCommand>
}
    2194:	08 95       	ret

00002196 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2196:	0f 93       	push	r16
    2198:	1f 93       	push	r17
    219a:	8a 01       	movw	r16, r20
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    219c:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    21a0:	c8 01       	movw	r24, r16
    21a2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
}
    21a6:	1f 91       	pop	r17
    21a8:	0f 91       	pop	r16
    21aa:	08 95       	ret

000021ac <LCD_init>:
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	41 e0       	ldi	r20, 0x01	; 1
    21b2:	0e 94 40 0c 	call	0x1880	; 0x1880 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	61 e0       	ldi	r22, 0x01	; 1
    21ba:	41 e0       	ldi	r20, 0x01	; 1
    21bc:	0e 94 40 0c 	call	0x1880	; 0x1880 <GPIO_setupPinDirection>
    21c0:	80 e4       	ldi	r24, 0x40	; 64
    21c2:	9c e9       	ldi	r25, 0x9C	; 156
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <LCD_init+0x18>

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	62 e0       	ldi	r22, 0x02	; 2
    21cc:	41 e0       	ldi	r20, 0x01	; 1
    21ce:	0e 94 40 0c 	call	0x1880	; 0x1880 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	63 e0       	ldi	r22, 0x03	; 3
    21d6:	41 e0       	ldi	r20, 0x01	; 1
    21d8:	0e 94 40 0c 	call	0x1880	; 0x1880 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	64 e0       	ldi	r22, 0x04	; 4
    21e0:	41 e0       	ldi	r20, 0x01	; 1
    21e2:	0e 94 40 0c 	call	0x1880	; 0x1880 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	65 e0       	ldi	r22, 0x05	; 5
    21ea:	41 e0       	ldi	r20, 0x01	; 1
    21ec:	0e 94 40 0c 	call	0x1880	; 0x1880 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    21f0:	83 e3       	ldi	r24, 0x33	; 51
    21f2:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    21f6:	82 e3       	ldi	r24, 0x32	; 50
    21f8:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    21fc:	88 e2       	ldi	r24, 0x28	; 40
    21fe:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2202:	8c e0       	ldi	r24, 0x0C	; 12
    2204:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_sendCommand>
}
    220e:	08 95       	ret

00002210 <__vector_7>:


	}
}

ISR(TIMER1_COMPA_vect) {
    2210:	1f 92       	push	r1
    2212:	0f 92       	push	r0
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	0f 92       	push	r0
    2218:	11 24       	eor	r1, r1
    221a:	1f 93       	push	r17
    221c:	2f 93       	push	r18
    221e:	3f 93       	push	r19
    2220:	4f 93       	push	r20
    2222:	5f 93       	push	r21
    2224:	6f 93       	push	r22
    2226:	7f 93       	push	r23
    2228:	8f 93       	push	r24
    222a:	9f 93       	push	r25
    222c:	af 93       	push	r26
    222e:	bf 93       	push	r27
    2230:	ef 93       	push	r30
    2232:	ff 93       	push	r31
	if(stopwatchf == 1){
    2234:	10 91 36 03 	lds	r17, 0x0336
    2238:	11 30       	cpi	r17, 0x01	; 1
    223a:	21 f4       	brne	.+8      	; 0x2244 <__vector_7+0x34>
		Timer_countUp();
    223c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <Timer_countUp>
		stopwatchs=1;
    2240:	10 93 35 03 	sts	0x0335, r17

	}
	if(stopwatchss == 1){
    2244:	80 91 37 03 	lds	r24, 0x0337
    2248:	81 30       	cpi	r24, 0x01	; 1
    224a:	29 f4       	brne	.+10     	; 0x2256 <__vector_7+0x46>
		stopwatchss=0;
    224c:	10 92 37 03 	sts	0x0337, r1
		TCCR1B &= ~((1 << CS10) | (1 << CS12));
    2250:	8e b5       	in	r24, 0x2e	; 46
    2252:	8a 7f       	andi	r24, 0xFA	; 250
    2254:	8e bd       	out	0x2e, r24	; 46

	}
}
    2256:	ff 91       	pop	r31
    2258:	ef 91       	pop	r30
    225a:	bf 91       	pop	r27
    225c:	af 91       	pop	r26
    225e:	9f 91       	pop	r25
    2260:	8f 91       	pop	r24
    2262:	7f 91       	pop	r23
    2264:	6f 91       	pop	r22
    2266:	5f 91       	pop	r21
    2268:	4f 91       	pop	r20
    226a:	3f 91       	pop	r19
    226c:	2f 91       	pop	r18
    226e:	1f 91       	pop	r17
    2270:	0f 90       	pop	r0
    2272:	0f be       	out	0x3f, r0	; 63
    2274:	0f 90       	pop	r0
    2276:	1f 90       	pop	r1
    2278:	18 95       	reti

0000227a <main>:
uint8 hours,mins ;
volatile uint8 timer0_counter = 0;



int main(void){
    227a:	cf 92       	push	r12
    227c:	df 92       	push	r13
    227e:	ef 92       	push	r14
    2280:	ff 92       	push	r15
    2282:	0f 93       	push	r16
    2284:	1f 93       	push	r17
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
	LCD_init();
    228a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LCD_init>
	Buzzer_init();
    228e:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <Buzzer_init>
	RTC_init();
    2292:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <RTC_init>
	button_init();
    2296:	0e 94 41 08 	call	0x1082	; 0x1082 <button_init>
	SREG|=(1<<7);
    229a:	8f b7       	in	r24, 0x3f	; 63
    229c:	80 68       	ori	r24, 0x80	; 128
    229e:	8f bf       	out	0x3f, r24	; 63
    22a0:	c8 ec       	ldi	r28, 0xC8	; 200
    22a2:	d0 e0       	ldi	r29, 0x00	; 0
					break;

				case 4:
					if (is_Stopped == 0) {
						Set_Alarm(&hours, &mins);
						mode = 5;
    22a4:	05 e0       	ldi	r16, 0x05	; 5
    22a6:	90 e4       	ldi	r25, 0x40	; 64
    22a8:	e9 2e       	mov	r14, r25
    22aa:	9c e9       	ldi	r25, 0x9C	; 156
    22ac:	f9 2e       	mov	r15, r25
    22ae:	80 e2       	ldi	r24, 0x20	; 32
    22b0:	c8 2e       	mov	r12, r24
    22b2:	8e e4       	ldi	r24, 0x4E	; 78
    22b4:	d8 2e       	mov	r13, r24
	SREG|=(1<<7);


	while(1){

		select_mode();
    22b6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <select_mode>
		update();
    22ba:	0e 94 a2 08 	call	0x1144	; 0x1144 <update>
    22be:	04 c0       	rjmp	.+8      	; 0x22c8 <main+0x4e>
		while(mode == 0)
		{
			Check_Alarm();
    22c0:	0e 94 6f 05 	call	0xade	; 0xade <Check_Alarm>
			select_buttons();
    22c4:	0e 94 19 08 	call	0x1032	; 0x1032 <select_buttons>

	while(1){

		select_mode();
		update();
		while(mode == 0)
    22c8:	80 91 3a 03 	lds	r24, 0x033A
    22cc:	88 23       	and	r24, r24
    22ce:	c1 f3       	breq	.-16     	; 0x22c0 <main+0x46>
		{
			Check_Alarm();
			select_buttons();
		}

		switch(mode){
    22d0:	82 30       	cpi	r24, 0x02	; 2
    22d2:	09 f4       	brne	.+2      	; 0x22d6 <main+0x5c>
    22d4:	6a c0       	rjmp	.+212    	; 0x23aa <main+0x130>
    22d6:	83 30       	cpi	r24, 0x03	; 3
    22d8:	18 f4       	brcc	.+6      	; 0x22e0 <main+0x66>
    22da:	81 30       	cpi	r24, 0x01	; 1
    22dc:	61 f7       	brne	.-40     	; 0x22b6 <main+0x3c>
    22de:	06 c0       	rjmp	.+12     	; 0x22ec <main+0x72>
    22e0:	83 30       	cpi	r24, 0x03	; 3
    22e2:	09 f4       	brne	.+2      	; 0x22e6 <main+0x6c>
    22e4:	02 c1       	rjmp	.+516    	; 0x24ea <main+0x270>
    22e6:	84 30       	cpi	r24, 0x04	; 4
    22e8:	31 f7       	brne	.-52     	; 0x22b6 <main+0x3c>
    22ea:	91 c1       	rjmp	.+802    	; 0x260e <main+0x394>
		case 1:
			Check_Alarm();
    22ec:	0e 94 6f 05 	call	0xade	; 0xade <Check_Alarm>

			LCD_displayStringRowColumn(0,0,"   Clock Mode    ");
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	46 e7       	ldi	r20, 0x76	; 118
    22f6:	51 e0       	ldi	r21, 0x01	; 1
    22f8:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"                ");
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	60 e0       	ldi	r22, 0x00	; 0
    2300:	48 e8       	ldi	r20, 0x88	; 136
    2302:	51 e0       	ldi	r21, 0x01	; 1
    2304:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
    2308:	88 e9       	ldi	r24, 0x98	; 152
    230a:	9a e3       	ldi	r25, 0x3A	; 58
    230c:	fe 01       	movw	r30, r28
    230e:	31 97       	sbiw	r30, 0x01	; 1
    2310:	f1 f7       	brne	.-4      	; 0x230e <main+0x94>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2312:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2314:	d9 f7       	brne	.-10     	; 0x230c <main+0x92>
			_delay_ms(1500);
			LCD_clearScreen();
    2316:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
			clock_mode_display();
    231a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <clock_mode_display>
			while(1){
				//mode display
				Check_Alarm();
    231e:	0e 94 6f 05 	call	0xade	; 0xade <Check_Alarm>

				if(!(PINB & (1<<display))){
    2322:	b0 99       	sbic	0x16, 0	; 22
    2324:	0e c0       	rjmp	.+28     	; 0x2342 <main+0xc8>
					LCD_clearScreen();
    2326:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
					while(1){
						Check_Alarm();
    232a:	0e 94 6f 05 	call	0xade	; 0xade <Check_Alarm>

						date_display();
    232e:	0e 94 10 0b 	call	0x1620	; 0x1620 <date_display>
						clock_display();
    2332:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <clock_display>
						if(!(PINB & (1<<BACK_Exit))){
    2336:	b4 99       	sbic	0x16, 4	; 22
    2338:	f8 cf       	rjmp	.-16     	; 0x232a <main+0xb0>
							LCD_clearScreen();
    233a:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
							clock_mode_display();
    233e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <clock_mode_display>
						}

					}

				}
				if(!(PINB & (1<<set))){
    2342:	b1 99       	sbic	0x16, 1	; 22
    2344:	17 c0       	rjmp	.+46     	; 0x2374 <main+0xfa>
					LCD_clearScreen();
    2346:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
					set_1st_diplay_void();
    234a:	0e 94 4b 08 	call	0x1096	; 0x1096 <set_1st_diplay_void>
    234e:	80 e1       	ldi	r24, 0x10	; 16
    2350:	97 e2       	ldi	r25, 0x27	; 39
    2352:	fe 01       	movw	r30, r28
    2354:	31 97       	sbiw	r30, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <main+0xda>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2358:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235a:	d9 f7       	brne	.-10     	; 0x2352 <main+0xd8>
					_delay_ms(1000);
					while(1){
						Check_Alarm();
    235c:	0e 94 6f 05 	call	0xade	; 0xade <Check_Alarm>

						if(move()){
    2360:	0e 94 29 09 	call	0x1252	; 0x1252 <move>
    2364:	88 23       	and	r24, r24
    2366:	21 f4       	brne	.+8      	; 0x2370 <main+0xf6>
							clock_mode_display();
							break;
						}
						if(!(PINB & (1<<BACK_Exit))){
    2368:	b4 99       	sbic	0x16, 4	; 22
    236a:	f8 cf       	rjmp	.-16     	; 0x235c <main+0xe2>
							LCD_clearScreen();
    236c:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
							clock_mode_display();
    2370:	0e 94 58 08 	call	0x10b0	; 0x10b0 <clock_mode_display>

					}

				}
				//end of mode 2
				if(!(PINB & (1<<PB2))){
    2374:	b2 99       	sbic	0x16, 2	; 22
    2376:	13 c0       	rjmp	.+38     	; 0x239e <main+0x124>
					LCD_clearScreen();
    2378:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
    237c:	80 e1       	ldi	r24, 0x10	; 16
    237e:	97 e2       	ldi	r25, 0x27	; 39
    2380:	fe 01       	movw	r30, r28
    2382:	31 97       	sbiw	r30, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <main+0x108>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2386:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2388:	d9 f7       	brne	.-10     	; 0x2380 <main+0x106>
					_delay_ms(1000);
					while(1){
						Check_Alarm();
    238a:	0e 94 6f 05 	call	0xade	; 0xade <Check_Alarm>

						mode_12_display();
    238e:	0e 94 4d 0b 	call	0x169a	; 0x169a <mode_12_display>

						if(!(PINB & (1<<BACK_Exit))){
    2392:	b4 99       	sbic	0x16, 4	; 22
    2394:	fa cf       	rjmp	.-12     	; 0x238a <main+0x110>
							LCD_clearScreen();
    2396:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
							clock_mode_display();
    239a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <clock_mode_display>

					}

				}

				if(Exit_mode()){
    239e:	0e 94 2e 08 	call	0x105c	; 0x105c <Exit_mode>
    23a2:	88 23       	and	r24, r24
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <main+0x12e>
    23a6:	bb cf       	rjmp	.-138    	; 0x231e <main+0xa4>
    23a8:	bf c1       	rjmp	.+894    	; 0x2728 <main+0x4ae>
			 *===================================================================================================================
			 */

		case 2:

			LCD_displayStringRowColumn(0, 0, "   Alarm Mode    ");
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	49 e9       	ldi	r20, 0x99	; 153
    23b0:	51 e0       	ldi	r21, 0x01	; 1
    23b2:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "                ");
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	60 e0       	ldi	r22, 0x00	; 0
    23ba:	48 e8       	ldi	r20, 0x88	; 136
    23bc:	51 e0       	ldi	r21, 0x01	; 1
    23be:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
    23c2:	88 e8       	ldi	r24, 0x88	; 136
    23c4:	93 e1       	ldi	r25, 0x13	; 19
    23c6:	fe 01       	movw	r30, r28
    23c8:	31 97       	sbiw	r30, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <main+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ce:	d9 f7       	brne	.-10     	; 0x23c6 <main+0x14c>
			_delay_ms(500);
			get_time(23, 0);
    23d0:	87 e1       	ldi	r24, 0x17	; 23
    23d2:	60 e0       	ldi	r22, 0x00	; 0
    23d4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <get_time>
    23d8:	11 c0       	rjmp	.+34     	; 0x23fc <main+0x182>

			while (1) {

				while (mode == 0) {
					if(Exit_mode()){
    23da:	0e 94 2e 08 	call	0x105c	; 0x105c <Exit_mode>
    23de:	88 23       	and	r24, r24
    23e0:	89 f4       	brne	.+34     	; 0x2404 <main+0x18a>

						break;
					}
					select_buttons();
    23e2:	0e 94 19 08 	call	0x1032	; 0x1032 <select_buttons>
					Check_Alarm();
    23e6:	0e 94 6f 05 	call	0xade	; 0xade <Check_Alarm>

					if (returnMainWindow == 1) {
    23ea:	80 91 1f 03 	lds	r24, 0x031F
    23ee:	81 30       	cpi	r24, 0x01	; 1
    23f0:	29 f4       	brne	.+10     	; 0x23fc <main+0x182>
						mode = 0;
    23f2:	10 92 3a 03 	sts	0x033A, r1
						returnMainWindow = 0;
    23f6:	10 92 1f 03 	sts	0x031F, r1
    23fa:	04 c0       	rjmp	.+8      	; 0x2404 <main+0x18a>
			_delay_ms(500);
			get_time(23, 0);

			while (1) {

				while (mode == 0) {
    23fc:	80 91 3a 03 	lds	r24, 0x033A
    2400:	88 23       	and	r24, r24
    2402:	59 f3       	breq	.-42     	; 0x23da <main+0x160>
						returnMainWindow = 0;
						break;
					}
				}

				if (returnMainWindow == 1) break;
    2404:	80 91 1f 03 	lds	r24, 0x031F
    2408:	81 30       	cpi	r24, 0x01	; 1
    240a:	09 f4       	brne	.+2      	; 0x240e <main+0x194>
    240c:	95 c1       	rjmp	.+810    	; 0x2738 <main+0x4be>

				switch (mode) {
    240e:	80 91 3a 03 	lds	r24, 0x033A
    2412:	82 30       	cpi	r24, 0x02	; 2
    2414:	a9 f0       	breq	.+42     	; 0x2440 <main+0x1c6>
    2416:	83 30       	cpi	r24, 0x03	; 3
    2418:	20 f4       	brcc	.+8      	; 0x2422 <main+0x1a8>
    241a:	81 30       	cpi	r24, 0x01	; 1
    241c:	09 f0       	breq	.+2      	; 0x2420 <main+0x1a6>
    241e:	5a c0       	rjmp	.+180    	; 0x24d4 <main+0x25a>
    2420:	06 c0       	rjmp	.+12     	; 0x242e <main+0x1b4>
    2422:	83 30       	cpi	r24, 0x03	; 3
    2424:	41 f1       	breq	.+80     	; 0x2476 <main+0x1fc>
    2426:	84 30       	cpi	r24, 0x04	; 4
    2428:	09 f0       	breq	.+2      	; 0x242c <main+0x1b2>
    242a:	54 c0       	rjmp	.+168    	; 0x24d4 <main+0x25a>
    242c:	41 c0       	rjmp	.+130    	; 0x24b0 <main+0x236>
				case 1:
					hoursModification = !hoursModification;
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	80 91 17 03 	lds	r24, 0x0317
    2434:	88 23       	and	r24, r24
    2436:	09 f4       	brne	.+2      	; 0x243a <main+0x1c0>
    2438:	91 e0       	ldi	r25, 0x01	; 1
    243a:	90 93 17 03 	sts	0x0317, r25
    243e:	35 c0       	rjmp	.+106    	; 0x24aa <main+0x230>
					mode = 0;
					break;

				case 2: // Increment
					if (hoursModification)
    2440:	80 91 17 03 	lds	r24, 0x0317
    2444:	88 23       	and	r24, r24
    2446:	21 f0       	breq	.+8      	; 0x2450 <main+0x1d6>
						Increment_decrementHours(INC);
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	0e 94 3b 05 	call	0xa76	; 0xa76 <Increment_decrementHours>
    244e:	03 c0       	rjmp	.+6      	; 0x2456 <main+0x1dc>
					else
						Increment_decrementMins(INC);
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	0e 94 4f 05 	call	0xa9e	; 0xa9e <Increment_decrementMins>

					// مسح الجزء الخاص بـ HH:MM
					LCD_displayStringRowColumn(0, 11, "     ");
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	6b e0       	ldi	r22, 0x0B	; 11
    245a:	4b ea       	ldi	r20, 0xAB	; 171
    245c:	51 e0       	ldi	r21, 0x01	; 1
    245e:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>

					// إعادة عرض الوقت بعد التعديل
					Show_time();
    2462:	0e 94 bb 05 	call	0xb76	; 0xb76 <Show_time>
    2466:	8c ed       	ldi	r24, 0xDC	; 220
    2468:	95 e0       	ldi	r25, 0x05	; 5
    246a:	fe 01       	movw	r30, r28
    246c:	31 97       	sbiw	r30, 0x01	; 1
    246e:	f1 f7       	brne	.-4      	; 0x246c <main+0x1f2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2470:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2472:	d9 f7       	brne	.-10     	; 0x246a <main+0x1f0>
    2474:	1a c0       	rjmp	.+52     	; 0x24aa <main+0x230>
					_delay_ms(150);
					mode = 0;
					break;

				case 3: // Decrement
					if (hoursModification)
    2476:	80 91 17 03 	lds	r24, 0x0317
    247a:	88 23       	and	r24, r24
    247c:	21 f0       	breq	.+8      	; 0x2486 <main+0x20c>
						Increment_decrementHours(DEC);
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	0e 94 3b 05 	call	0xa76	; 0xa76 <Increment_decrementHours>
    2484:	03 c0       	rjmp	.+6      	; 0x248c <main+0x212>
					else
						Increment_decrementMins(DEC);
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	0e 94 4f 05 	call	0xa9e	; 0xa9e <Increment_decrementMins>

					// مسح الجزء الخاص بـ HH:MM
					LCD_displayStringRowColumn(0, 11, "     ");
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	6b e0       	ldi	r22, 0x0B	; 11
    2490:	4b ea       	ldi	r20, 0xAB	; 171
    2492:	51 e0       	ldi	r21, 0x01	; 1
    2494:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>

					// إعادة عرض الوقت بعد التعديل
					Show_time();
    2498:	0e 94 bb 05 	call	0xb76	; 0xb76 <Show_time>
    249c:	8c ed       	ldi	r24, 0xDC	; 220
    249e:	95 e0       	ldi	r25, 0x05	; 5
    24a0:	fe 01       	movw	r30, r28
    24a2:	31 97       	sbiw	r30, 0x01	; 1
    24a4:	f1 f7       	brne	.-4      	; 0x24a2 <main+0x228>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a8:	d9 f7       	brne	.-10     	; 0x24a0 <main+0x226>

					_delay_ms(150);
					mode = 0;
    24aa:	10 92 3a 03 	sts	0x033A, r1
    24ae:	12 c0       	rjmp	.+36     	; 0x24d4 <main+0x25a>
					break;

				case 4:
					if (is_Stopped == 0) {
    24b0:	80 91 1d 03 	lds	r24, 0x031D
    24b4:	88 23       	and	r24, r24
    24b6:	59 f4       	brne	.+22     	; 0x24ce <main+0x254>
						Set_Alarm(&hours, &mins);
    24b8:	8d e3       	ldi	r24, 0x3D	; 61
    24ba:	93 e0       	ldi	r25, 0x03	; 3
    24bc:	6c e3       	ldi	r22, 0x3C	; 60
    24be:	73 e0       	ldi	r23, 0x03	; 3
    24c0:	0e 94 11 06 	call	0xc22	; 0xc22 <Set_Alarm>
						mode = 5;
    24c4:	00 93 3a 03 	sts	0x033A, r16
						returnMainWindow = 1;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	80 93 1f 03 	sts	0x031F, r24
					}
					is_Stopped = 1;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	80 93 1d 03 	sts	0x031D, r24
					break;
				}

				if (Exit_mode()) break;
    24d4:	0e 94 2e 08 	call	0x105c	; 0x105c <Exit_mode>
    24d8:	88 23       	and	r24, r24
    24da:	09 f0       	breq	.+2      	; 0x24de <main+0x264>
    24dc:	2d c1       	rjmp	.+602    	; 0x2738 <main+0x4be>

				if (returnMainWindow == 1) {
    24de:	80 91 1f 03 	lds	r24, 0x031F
    24e2:	81 30       	cpi	r24, 0x01	; 1
    24e4:	09 f0       	breq	.+2      	; 0x24e8 <main+0x26e>
    24e6:	8a cf       	rjmp	.-236    	; 0x23fc <main+0x182>
    24e8:	25 c1       	rjmp	.+586    	; 0x2734 <main+0x4ba>




		case 3:
			Check_Alarm();
    24ea:	0e 94 6f 05 	call	0xade	; 0xade <Check_Alarm>

			Timer1_init();
    24ee:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <Timer1_init>
			LCD_displayStringRowColumn(0,0,"    StopWatch    ");
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	60 e0       	ldi	r22, 0x00	; 0
    24f6:	41 eb       	ldi	r20, 0xB1	; 177
    24f8:	51 e0       	ldi	r21, 0x01	; 1
    24fa:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"                ");
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	48 e8       	ldi	r20, 0x88	; 136
    2504:	51 e0       	ldi	r21, 0x01	; 1
    2506:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
    250a:	88 e9       	ldi	r24, 0x98	; 152
    250c:	9a e3       	ldi	r25, 0x3A	; 58
    250e:	fe 01       	movw	r30, r28
    2510:	31 97       	sbiw	r30, 0x01	; 1
    2512:	f1 f7       	brne	.-4      	; 0x2510 <main+0x296>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2514:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2516:	d9 f7       	brne	.-10     	; 0x250e <main+0x294>
			_delay_ms(1500);
			LCD_clearScreen();
    2518:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
			display_stopwatch_before();
    251c:	0e 94 33 0c 	call	0x1866	; 0x1866 <display_stopwatch_before>
			LCD_displayStringRowColumn(1, 0, "Start Stop Reset");
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	60 e0       	ldi	r22, 0x00	; 0
    2524:	43 ec       	ldi	r20, 0xC3	; 195
    2526:	51 e0       	ldi	r21, 0x01	; 1
    2528:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>

			reset_values_before_and_after_exit();
    252c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <reset_values_before_and_after_exit>
			stopwatchs=0;
    2530:	10 92 35 03 	sts	0x0335, r1
			stopwatchf=0;
    2534:	10 92 36 03 	sts	0x0336, r1
			stopwatchss=0;
    2538:	10 92 37 03 	sts	0x0337, r1
			buzzer_enable=0;
    253c:	10 92 38 03 	sts	0x0338, r1
			awlmara=0;
    2540:	10 92 39 03 	sts	0x0339, r1
			PORTA&=~(1<<7);
    2544:	df 98       	cbi	0x1b, 7	; 27

			while(1){
				Check_Alarm();

				if(!(PINB & (1<<0))){
					stopwatchs=1;
    2546:	11 e0       	ldi	r17, 0x01	; 1
			buzzer_enable=0;
			awlmara=0;
			PORTA&=~(1<<7);

			while(1){
				Check_Alarm();
    2548:	0e 94 6f 05 	call	0xade	; 0xade <Check_Alarm>

				if(!(PINB & (1<<0))){
    254c:	b0 99       	sbic	0x16, 0	; 22
    254e:	09 c0       	rjmp	.+18     	; 0x2562 <main+0x2e8>
					stopwatchs=1;
    2550:	10 93 35 03 	sts	0x0335, r17
					stopwatchf=1;
    2554:	10 93 36 03 	sts	0x0336, r17
					stopwatchss = 0;
    2558:	10 92 37 03 	sts	0x0337, r1
					TCCR1B |= (1 << CS12) | (1 << CS10);
    255c:	8e b5       	in	r24, 0x2e	; 46
    255e:	85 60       	ori	r24, 0x05	; 5
    2560:	8e bd       	out	0x2e, r24	; 46
				}
				if(stopwatchs ==1){
    2562:	80 91 35 03 	lds	r24, 0x0335
    2566:	81 30       	cpi	r24, 0x01	; 1
    2568:	21 f4       	brne	.+8      	; 0x2572 <main+0x2f8>
					count_up_display();
    256a:	0e 94 04 0c 	call	0x1808	; 0x1808 <count_up_display>
					stopwatchs=0;
    256e:	10 92 35 03 	sts	0x0335, r1
				}
				if(!(PINB & (1<<1))){
    2572:	b1 99       	sbic	0x16, 1	; 22
    2574:	06 c0       	rjmp	.+12     	; 0x2582 <main+0x308>
					stopwatchss=1;
    2576:	10 93 37 03 	sts	0x0337, r17
					stopwatchs=0;
    257a:	10 92 35 03 	sts	0x0335, r1
					stopwatchf=0;
    257e:	10 92 36 03 	sts	0x0336, r1

				}
				if(!(PINB & (1<<2))){
    2582:	b2 99       	sbic	0x16, 2	; 22
    2584:	0a c0       	rjmp	.+20     	; 0x259a <main+0x320>
					display_stopwatch_before();
    2586:	0e 94 33 0c 	call	0x1866	; 0x1866 <display_stopwatch_before>
					reset_values_before_and_after_exit();
    258a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <reset_values_before_and_after_exit>
					stopwatchs=0;
    258e:	10 92 35 03 	sts	0x0335, r1
					stopwatchf=0;
    2592:	10 92 36 03 	sts	0x0336, r1
					stopwatchss=0;
    2596:	10 92 37 03 	sts	0x0337, r1
				}
				if(!(PINB & (1<<3))){
    259a:	b3 99       	sbic	0x16, 3	; 22
    259c:	0a c0       	rjmp	.+20     	; 0x25b2 <main+0x338>
    259e:	c7 01       	movw	r24, r14
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <main+0x326>
					_delay_ms(20);
					if(!(PINB & (1<<3))){
    25a4:	b3 99       	sbic	0x16, 3	; 22
    25a6:	05 c0       	rjmp	.+10     	; 0x25b2 <main+0x338>
						buzzer_enable^=1;
    25a8:	80 91 38 03 	lds	r24, 0x0338
    25ac:	81 27       	eor	r24, r17
    25ae:	80 93 38 03 	sts	0x0338, r24

					}
				}

				if(buzzer_enable==1){
    25b2:	80 91 38 03 	lds	r24, 0x0338
    25b6:	81 30       	cpi	r24, 0x01	; 1
    25b8:	a9 f4       	brne	.+42     	; 0x25e4 <main+0x36a>
					PORTA|=(1<<7);
    25ba:	df 9a       	sbi	0x1b, 7	; 27
					if(sec0 == 0 && sec1 == 0 && awlmara==1){
    25bc:	80 91 2f 03 	lds	r24, 0x032F
    25c0:	88 23       	and	r24, r24
    25c2:	a9 f4       	brne	.+42     	; 0x25ee <main+0x374>
    25c4:	80 91 30 03 	lds	r24, 0x0330
    25c8:	88 23       	and	r24, r24
    25ca:	89 f4       	brne	.+34     	; 0x25ee <main+0x374>
    25cc:	80 91 39 03 	lds	r24, 0x0339
    25d0:	81 30       	cpi	r24, 0x01	; 1
    25d2:	69 f4       	brne	.+26     	; 0x25ee <main+0x374>
						Buzzer_on();
    25d4:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <Buzzer_on>
    25d8:	c6 01       	movw	r24, r12
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <main+0x360>
						_delay_ms(10);
						Buzzer_off();
    25de:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Buzzer_off>
    25e2:	05 c0       	rjmp	.+10     	; 0x25ee <main+0x374>
					}


				}
				else if(buzzer_enable ==0){
    25e4:	80 91 38 03 	lds	r24, 0x0338
    25e8:	88 23       	and	r24, r24
    25ea:	09 f4       	brne	.+2      	; 0x25ee <main+0x374>
					PORTA&=~(1<<7);
    25ec:	df 98       	cbi	0x1b, 7	; 27

				}


				if(Exit_mode()){
    25ee:	0e 94 2e 08 	call	0x105c	; 0x105c <Exit_mode>
    25f2:	88 23       	and	r24, r24
    25f4:	11 f0       	breq	.+4      	; 0x25fa <main+0x380>
					PORTA&=~(1<<7);
    25f6:	df 98       	cbi	0x1b, 7	; 27
    25f8:	9f c0       	rjmp	.+318    	; 0x2738 <main+0x4be>

					break;
				}
				if (returnMainWindow == 1) {
    25fa:	80 91 1f 03 	lds	r24, 0x031F
    25fe:	81 30       	cpi	r24, 0x01	; 1
    2600:	09 f0       	breq	.+2      	; 0x2604 <main+0x38a>
    2602:	a2 cf       	rjmp	.-188    	; 0x2548 <main+0x2ce>
					mode = 0;
    2604:	10 92 3a 03 	sts	0x033A, r1
					returnMainWindow = 0;
    2608:	10 92 1f 03 	sts	0x031F, r1
    260c:	28 c0       	rjmp	.+80     	; 0x265e <main+0x3e4>




		case 4:
			Check_Alarm();
    260e:	0e 94 6f 05 	call	0xade	; 0xade <Check_Alarm>

			// ================= COUNTDOWN MODE ==================
			reset_countdown();
    2612:	0e 94 7d 06 	call	0xcfa	; 0xcfa <reset_countdown>
			LCD_displayStringRowColumn(0, 0, "   Count Down    ");
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	60 e0       	ldi	r22, 0x00	; 0
    261a:	44 ed       	ldi	r20, 0xD4	; 212
    261c:	51 e0       	ldi	r21, 0x01	; 1
    261e:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "                ");
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	60 e0       	ldi	r22, 0x00	; 0
    2626:	48 e8       	ldi	r20, 0x88	; 136
    2628:	51 e0       	ldi	r21, 0x01	; 1
    262a:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
    262e:	88 e9       	ldi	r24, 0x98	; 152
    2630:	9a e3       	ldi	r25, 0x3A	; 58
    2632:	fe 01       	movw	r30, r28
    2634:	31 97       	sbiw	r30, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <main+0x3ba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2638:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263a:	d9 f7       	brne	.-10     	; 0x2632 <main+0x3b8>
			_delay_ms(1500);
			LCD_clearScreen();
    263c:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Set : HH:MM:SS");
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	60 e0       	ldi	r22, 0x00	; 0
    2644:	46 ee       	ldi	r20, 0xE6	; 230
    2646:	51 e0       	ldi	r21, 0x01	; 1
    2648:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayStringRowColumn>
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <main+0x3d8>
			uint8_t set_result = 0;

			while (!(set_result = move_countdown())){  // Wait until user confirms or exits
				Check_Alarm();
    264e:	0e 94 6f 05 	call	0xade	; 0xade <Check_Alarm>
			_delay_ms(1500);
			LCD_clearScreen();
			LCD_displayStringRowColumn(0, 0, "Set : HH:MM:SS");
			uint8_t set_result = 0;

			while (!(set_result = move_countdown())){  // Wait until user confirms or exits
    2652:	0e 94 8a 06 	call	0xd14	; 0xd14 <move_countdown>
    2656:	88 23       	and	r24, r24
    2658:	d1 f3       	breq	.-12     	; 0x264e <main+0x3d4>
				Check_Alarm();
			}

			if (set_result == 2) {
    265a:	82 30       	cpi	r24, 0x02	; 2
    265c:	19 f4       	brne	.+6      	; 0x2664 <main+0x3ea>
				LCD_clearScreen();
    265e:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
    2662:	6a c0       	rjmp	.+212    	; 0x2738 <main+0x4be>
				set_result = 0;
				mode = 0;
				break;
			}

			countdown_done_flag = 0;
    2664:	10 92 23 03 	sts	0x0323, r1
			intrupt = 1;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	80 93 25 03 	sts	0x0325, r24
			Timer2_init();
    266e:	0e 94 74 06 	call	0xce8	; 0xce8 <Timer2_init>

			while (1) {
				Check_Alarm();
    2672:	0e 94 6f 05 	call	0xade	; 0xade <Check_Alarm>

				if (countdown_done_flag) {
    2676:	80 91 23 03 	lds	r24, 0x0323
    267a:	88 23       	and	r24, r24
    267c:	c1 f0       	breq	.+48     	; 0x26ae <main+0x434>
					LCD_clearScreen();
    267e:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
					LCD_displayString("   Time's up!");
    2682:	85 ef       	ldi	r24, 0xF5	; 245
    2684:	91 e0       	ldi	r25, 0x01	; 1
    2686:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
					while (PINB & (1 << 3));
    268a:	b3 99       	sbic	0x16, 3	; 22
    268c:	fe cf       	rjmp	.-4      	; 0x268a <main+0x410>
					Buzzer_off();
    268e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <Buzzer_off>
					LCD_clearScreen();
    2692:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
					LCD_displayString("    STOPPED");
    2696:	83 e0       	ldi	r24, 0x03	; 3
    2698:	92 e0       	ldi	r25, 0x02	; 2
    269a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_displayString>
    269e:	88 e9       	ldi	r24, 0x98	; 152
    26a0:	9a e3       	ldi	r25, 0x3A	; 58
    26a2:	fe 01       	movw	r30, r28
    26a4:	31 97       	sbiw	r30, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <main+0x42a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26aa:	d9 f7       	brne	.-10     	; 0x26a2 <main+0x428>
    26ac:	3d c0       	rjmp	.+122    	; 0x2728 <main+0x4ae>
					_delay_ms(1500);
					break;
				} else {
					LCD_moveCursor(0, 4);
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	64 e0       	ldi	r22, 0x04	; 4
    26b2:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_moveCursor>
					if (hour < 10) LCD_displayCharacter('0');
    26b6:	80 91 20 03 	lds	r24, 0x0320
    26ba:	8a 30       	cpi	r24, 0x0A	; 10
    26bc:	18 f4       	brcc	.+6      	; 0x26c4 <main+0x44a>
    26be:	80 e3       	ldi	r24, 0x30	; 48
    26c0:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
					LCD_intgerToString(hour);
    26c4:	80 91 20 03 	lds	r24, 0x0320
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
					LCD_displayCharacter(':');
    26ce:	8a e3       	ldi	r24, 0x3A	; 58
    26d0:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
					if (min < 10) LCD_displayCharacter('0');
    26d4:	80 91 21 03 	lds	r24, 0x0321
    26d8:	8a 30       	cpi	r24, 0x0A	; 10
    26da:	18 f4       	brcc	.+6      	; 0x26e2 <main+0x468>
    26dc:	80 e3       	ldi	r24, 0x30	; 48
    26de:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
					LCD_intgerToString(min);
    26e2:	80 91 21 03 	lds	r24, 0x0321
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
					LCD_displayCharacter(':');
    26ec:	8a e3       	ldi	r24, 0x3A	; 58
    26ee:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
					if (sec < 10) LCD_displayCharacter('0');
    26f2:	80 91 22 03 	lds	r24, 0x0322
    26f6:	8a 30       	cpi	r24, 0x0A	; 10
    26f8:	18 f4       	brcc	.+6      	; 0x2700 <main+0x486>
    26fa:	80 e3       	ldi	r24, 0x30	; 48
    26fc:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_displayCharacter>
					LCD_intgerToString(sec);
    2700:	80 91 22 03 	lds	r24, 0x0322
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_intgerToString>
    270a:	80 ed       	ldi	r24, 0xD0	; 208
    270c:	97 e0       	ldi	r25, 0x07	; 7
    270e:	fe 01       	movw	r30, r28
    2710:	31 97       	sbiw	r30, 0x01	; 1
    2712:	f1 f7       	brne	.-4      	; 0x2710 <main+0x496>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2714:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2716:	d9 f7       	brne	.-10     	; 0x270e <main+0x494>
					_delay_ms(200);
				}

				if (Exit_mode()) {
    2718:	0e 94 2e 08 	call	0x105c	; 0x105c <Exit_mode>
    271c:	88 23       	and	r24, r24
    271e:	09 f4       	brne	.+2      	; 0x2722 <main+0x4a8>
    2720:	a8 cf       	rjmp	.-176    	; 0x2672 <main+0x3f8>
					reset_countdown();
    2722:	0e 94 7d 06 	call	0xcfa	; 0xcfa <reset_countdown>
					TCCR2 = 0x00; // إيقاف Timer2 بشكل آمن
    2726:	15 bc       	out	0x25, r1	; 37

					break;
				}

			}
			if (returnMainWindow == 1) {
    2728:	80 91 1f 03 	lds	r24, 0x031F
    272c:	81 30       	cpi	r24, 0x01	; 1
    272e:	21 f4       	brne	.+8      	; 0x2738 <main+0x4be>
				LCD_clearScreen();
    2730:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_clearScreen>
				returnMainWindow = 0;
    2734:	10 92 1f 03 	sts	0x031F, r1
				mode = 0;
				break;
			}

			mode = 0;
    2738:	10 92 3a 03 	sts	0x033A, r1
    273c:	bc cd       	rjmp	.-1160   	; 0x22b6 <main+0x3c>

0000273e <__udivmodqi4>:
    273e:	99 1b       	sub	r25, r25
    2740:	79 e0       	ldi	r23, 0x09	; 9
    2742:	04 c0       	rjmp	.+8      	; 0x274c <__udivmodqi4_ep>

00002744 <__udivmodqi4_loop>:
    2744:	99 1f       	adc	r25, r25
    2746:	96 17       	cp	r25, r22
    2748:	08 f0       	brcs	.+2      	; 0x274c <__udivmodqi4_ep>
    274a:	96 1b       	sub	r25, r22

0000274c <__udivmodqi4_ep>:
    274c:	88 1f       	adc	r24, r24
    274e:	7a 95       	dec	r23
    2750:	c9 f7       	brne	.-14     	; 0x2744 <__udivmodqi4_loop>
    2752:	80 95       	com	r24
    2754:	08 95       	ret

00002756 <__divmodhi4>:
    2756:	97 fb       	bst	r25, 7
    2758:	09 2e       	mov	r0, r25
    275a:	07 26       	eor	r0, r23
    275c:	0a d0       	rcall	.+20     	; 0x2772 <__divmodhi4_neg1>
    275e:	77 fd       	sbrc	r23, 7
    2760:	04 d0       	rcall	.+8      	; 0x276a <__divmodhi4_neg2>
    2762:	0c d0       	rcall	.+24     	; 0x277c <__udivmodhi4>
    2764:	06 d0       	rcall	.+12     	; 0x2772 <__divmodhi4_neg1>
    2766:	00 20       	and	r0, r0
    2768:	1a f4       	brpl	.+6      	; 0x2770 <__divmodhi4_exit>

0000276a <__divmodhi4_neg2>:
    276a:	70 95       	com	r23
    276c:	61 95       	neg	r22
    276e:	7f 4f       	sbci	r23, 0xFF	; 255

00002770 <__divmodhi4_exit>:
    2770:	08 95       	ret

00002772 <__divmodhi4_neg1>:
    2772:	f6 f7       	brtc	.-4      	; 0x2770 <__divmodhi4_exit>
    2774:	90 95       	com	r25
    2776:	81 95       	neg	r24
    2778:	9f 4f       	sbci	r25, 0xFF	; 255
    277a:	08 95       	ret

0000277c <__udivmodhi4>:
    277c:	aa 1b       	sub	r26, r26
    277e:	bb 1b       	sub	r27, r27
    2780:	51 e1       	ldi	r21, 0x11	; 17
    2782:	07 c0       	rjmp	.+14     	; 0x2792 <__udivmodhi4_ep>

00002784 <__udivmodhi4_loop>:
    2784:	aa 1f       	adc	r26, r26
    2786:	bb 1f       	adc	r27, r27
    2788:	a6 17       	cp	r26, r22
    278a:	b7 07       	cpc	r27, r23
    278c:	10 f0       	brcs	.+4      	; 0x2792 <__udivmodhi4_ep>
    278e:	a6 1b       	sub	r26, r22
    2790:	b7 0b       	sbc	r27, r23

00002792 <__udivmodhi4_ep>:
    2792:	88 1f       	adc	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	5a 95       	dec	r21
    2798:	a9 f7       	brne	.-22     	; 0x2784 <__udivmodhi4_loop>
    279a:	80 95       	com	r24
    279c:	90 95       	com	r25
    279e:	bc 01       	movw	r22, r24
    27a0:	cd 01       	movw	r24, r26
    27a2:	08 95       	ret

000027a4 <__prologue_saves__>:
    27a4:	2f 92       	push	r2
    27a6:	3f 92       	push	r3
    27a8:	4f 92       	push	r4
    27aa:	5f 92       	push	r5
    27ac:	6f 92       	push	r6
    27ae:	7f 92       	push	r7
    27b0:	8f 92       	push	r8
    27b2:	9f 92       	push	r9
    27b4:	af 92       	push	r10
    27b6:	bf 92       	push	r11
    27b8:	cf 92       	push	r12
    27ba:	df 92       	push	r13
    27bc:	ef 92       	push	r14
    27be:	ff 92       	push	r15
    27c0:	0f 93       	push	r16
    27c2:	1f 93       	push	r17
    27c4:	cf 93       	push	r28
    27c6:	df 93       	push	r29
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
    27cc:	ca 1b       	sub	r28, r26
    27ce:	db 0b       	sbc	r29, r27
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	09 94       	ijmp

000027dc <__epilogue_restores__>:
    27dc:	2a 88       	ldd	r2, Y+18	; 0x12
    27de:	39 88       	ldd	r3, Y+17	; 0x11
    27e0:	48 88       	ldd	r4, Y+16	; 0x10
    27e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    27e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    27e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    27e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    27ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    27ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    27ee:	b9 84       	ldd	r11, Y+9	; 0x09
    27f0:	c8 84       	ldd	r12, Y+8	; 0x08
    27f2:	df 80       	ldd	r13, Y+7	; 0x07
    27f4:	ee 80       	ldd	r14, Y+6	; 0x06
    27f6:	fd 80       	ldd	r15, Y+5	; 0x05
    27f8:	0c 81       	ldd	r16, Y+4	; 0x04
    27fa:	1b 81       	ldd	r17, Y+3	; 0x03
    27fc:	aa 81       	ldd	r26, Y+2	; 0x02
    27fe:	b9 81       	ldd	r27, Y+1	; 0x01
    2800:	ce 0f       	add	r28, r30
    2802:	d1 1d       	adc	r29, r1
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
    280e:	ed 01       	movw	r28, r26
    2810:	08 95       	ret

00002812 <itoa>:
    2812:	fb 01       	movw	r30, r22
    2814:	9f 01       	movw	r18, r30
    2816:	e8 94       	clt
    2818:	42 30       	cpi	r20, 0x02	; 2
    281a:	c4 f0       	brlt	.+48     	; 0x284c <itoa+0x3a>
    281c:	45 32       	cpi	r20, 0x25	; 37
    281e:	b4 f4       	brge	.+44     	; 0x284c <itoa+0x3a>
    2820:	4a 30       	cpi	r20, 0x0A	; 10
    2822:	29 f4       	brne	.+10     	; 0x282e <itoa+0x1c>
    2824:	97 fb       	bst	r25, 7
    2826:	1e f4       	brtc	.+6      	; 0x282e <itoa+0x1c>
    2828:	90 95       	com	r25
    282a:	81 95       	neg	r24
    282c:	9f 4f       	sbci	r25, 0xFF	; 255
    282e:	64 2f       	mov	r22, r20
    2830:	77 27       	eor	r23, r23
    2832:	0e 94 be 13 	call	0x277c	; 0x277c <__udivmodhi4>
    2836:	80 5d       	subi	r24, 0xD0	; 208
    2838:	8a 33       	cpi	r24, 0x3A	; 58
    283a:	0c f0       	brlt	.+2      	; 0x283e <itoa+0x2c>
    283c:	89 5d       	subi	r24, 0xD9	; 217
    283e:	81 93       	st	Z+, r24
    2840:	cb 01       	movw	r24, r22
    2842:	00 97       	sbiw	r24, 0x00	; 0
    2844:	a1 f7       	brne	.-24     	; 0x282e <itoa+0x1c>
    2846:	16 f4       	brtc	.+4      	; 0x284c <itoa+0x3a>
    2848:	5d e2       	ldi	r21, 0x2D	; 45
    284a:	51 93       	st	Z+, r21
    284c:	10 82       	st	Z, r1
    284e:	c9 01       	movw	r24, r18
    2850:	0c 94 41 16 	jmp	0x2c82	; 0x2c82 <strrev>

00002854 <sprintf>:
    2854:	ae e0       	ldi	r26, 0x0E	; 14
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	e0 e3       	ldi	r30, 0x30	; 48
    285a:	f4 e1       	ldi	r31, 0x14	; 20
    285c:	0c 94 e0 13 	jmp	0x27c0	; 0x27c0 <__prologue_saves__+0x1c>
    2860:	0d 89       	ldd	r16, Y+21	; 0x15
    2862:	1e 89       	ldd	r17, Y+22	; 0x16
    2864:	86 e0       	ldi	r24, 0x06	; 6
    2866:	8c 83       	std	Y+4, r24	; 0x04
    2868:	1a 83       	std	Y+2, r17	; 0x02
    286a:	09 83       	std	Y+1, r16	; 0x01
    286c:	8f ef       	ldi	r24, 0xFF	; 255
    286e:	9f e7       	ldi	r25, 0x7F	; 127
    2870:	9e 83       	std	Y+6, r25	; 0x06
    2872:	8d 83       	std	Y+5, r24	; 0x05
    2874:	9e 01       	movw	r18, r28
    2876:	27 5e       	subi	r18, 0xE7	; 231
    2878:	3f 4f       	sbci	r19, 0xFF	; 255
    287a:	ce 01       	movw	r24, r28
    287c:	01 96       	adiw	r24, 0x01	; 1
    287e:	6f 89       	ldd	r22, Y+23	; 0x17
    2880:	78 8d       	ldd	r23, Y+24	; 0x18
    2882:	a9 01       	movw	r20, r18
    2884:	0e 94 4e 14 	call	0x289c	; 0x289c <vfprintf>
    2888:	2f 81       	ldd	r18, Y+7	; 0x07
    288a:	38 85       	ldd	r19, Y+8	; 0x08
    288c:	02 0f       	add	r16, r18
    288e:	13 1f       	adc	r17, r19
    2890:	f8 01       	movw	r30, r16
    2892:	10 82       	st	Z, r1
    2894:	2e 96       	adiw	r28, 0x0e	; 14
    2896:	e4 e0       	ldi	r30, 0x04	; 4
    2898:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__epilogue_restores__+0x1c>

0000289c <vfprintf>:
    289c:	ab e0       	ldi	r26, 0x0B	; 11
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	e4 e5       	ldi	r30, 0x54	; 84
    28a2:	f4 e1       	ldi	r31, 0x14	; 20
    28a4:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__prologue_saves__>
    28a8:	3c 01       	movw	r6, r24
    28aa:	2b 01       	movw	r4, r22
    28ac:	5a 01       	movw	r10, r20
    28ae:	fc 01       	movw	r30, r24
    28b0:	17 82       	std	Z+7, r1	; 0x07
    28b2:	16 82       	std	Z+6, r1	; 0x06
    28b4:	83 81       	ldd	r24, Z+3	; 0x03
    28b6:	81 fd       	sbrc	r24, 1
    28b8:	03 c0       	rjmp	.+6      	; 0x28c0 <vfprintf+0x24>
    28ba:	6f ef       	ldi	r22, 0xFF	; 255
    28bc:	7f ef       	ldi	r23, 0xFF	; 255
    28be:	c6 c1       	rjmp	.+908    	; 0x2c4c <vfprintf+0x3b0>
    28c0:	9a e0       	ldi	r25, 0x0A	; 10
    28c2:	89 2e       	mov	r8, r25
    28c4:	1e 01       	movw	r2, r28
    28c6:	08 94       	sec
    28c8:	21 1c       	adc	r2, r1
    28ca:	31 1c       	adc	r3, r1
    28cc:	f3 01       	movw	r30, r6
    28ce:	23 81       	ldd	r18, Z+3	; 0x03
    28d0:	f2 01       	movw	r30, r4
    28d2:	23 fd       	sbrc	r18, 3
    28d4:	85 91       	lpm	r24, Z+
    28d6:	23 ff       	sbrs	r18, 3
    28d8:	81 91       	ld	r24, Z+
    28da:	2f 01       	movw	r4, r30
    28dc:	88 23       	and	r24, r24
    28de:	09 f4       	brne	.+2      	; 0x28e2 <vfprintf+0x46>
    28e0:	b2 c1       	rjmp	.+868    	; 0x2c46 <vfprintf+0x3aa>
    28e2:	85 32       	cpi	r24, 0x25	; 37
    28e4:	39 f4       	brne	.+14     	; 0x28f4 <vfprintf+0x58>
    28e6:	23 fd       	sbrc	r18, 3
    28e8:	85 91       	lpm	r24, Z+
    28ea:	23 ff       	sbrs	r18, 3
    28ec:	81 91       	ld	r24, Z+
    28ee:	2f 01       	movw	r4, r30
    28f0:	85 32       	cpi	r24, 0x25	; 37
    28f2:	29 f4       	brne	.+10     	; 0x28fe <vfprintf+0x62>
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	b3 01       	movw	r22, r6
    28f8:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <fputc>
    28fc:	e7 cf       	rjmp	.-50     	; 0x28cc <vfprintf+0x30>
    28fe:	98 2f       	mov	r25, r24
    2900:	ff 24       	eor	r15, r15
    2902:	ee 24       	eor	r14, r14
    2904:	99 24       	eor	r9, r9
    2906:	ff e1       	ldi	r31, 0x1F	; 31
    2908:	ff 15       	cp	r31, r15
    290a:	d0 f0       	brcs	.+52     	; 0x2940 <vfprintf+0xa4>
    290c:	9b 32       	cpi	r25, 0x2B	; 43
    290e:	69 f0       	breq	.+26     	; 0x292a <vfprintf+0x8e>
    2910:	9c 32       	cpi	r25, 0x2C	; 44
    2912:	28 f4       	brcc	.+10     	; 0x291e <vfprintf+0x82>
    2914:	90 32       	cpi	r25, 0x20	; 32
    2916:	59 f0       	breq	.+22     	; 0x292e <vfprintf+0x92>
    2918:	93 32       	cpi	r25, 0x23	; 35
    291a:	91 f4       	brne	.+36     	; 0x2940 <vfprintf+0xa4>
    291c:	0e c0       	rjmp	.+28     	; 0x293a <vfprintf+0x9e>
    291e:	9d 32       	cpi	r25, 0x2D	; 45
    2920:	49 f0       	breq	.+18     	; 0x2934 <vfprintf+0x98>
    2922:	90 33       	cpi	r25, 0x30	; 48
    2924:	69 f4       	brne	.+26     	; 0x2940 <vfprintf+0xa4>
    2926:	41 e0       	ldi	r20, 0x01	; 1
    2928:	24 c0       	rjmp	.+72     	; 0x2972 <vfprintf+0xd6>
    292a:	52 e0       	ldi	r21, 0x02	; 2
    292c:	f5 2a       	or	r15, r21
    292e:	84 e0       	ldi	r24, 0x04	; 4
    2930:	f8 2a       	or	r15, r24
    2932:	28 c0       	rjmp	.+80     	; 0x2984 <vfprintf+0xe8>
    2934:	98 e0       	ldi	r25, 0x08	; 8
    2936:	f9 2a       	or	r15, r25
    2938:	25 c0       	rjmp	.+74     	; 0x2984 <vfprintf+0xe8>
    293a:	e0 e1       	ldi	r30, 0x10	; 16
    293c:	fe 2a       	or	r15, r30
    293e:	22 c0       	rjmp	.+68     	; 0x2984 <vfprintf+0xe8>
    2940:	f7 fc       	sbrc	r15, 7
    2942:	29 c0       	rjmp	.+82     	; 0x2996 <vfprintf+0xfa>
    2944:	89 2f       	mov	r24, r25
    2946:	80 53       	subi	r24, 0x30	; 48
    2948:	8a 30       	cpi	r24, 0x0A	; 10
    294a:	70 f4       	brcc	.+28     	; 0x2968 <vfprintf+0xcc>
    294c:	f6 fe       	sbrs	r15, 6
    294e:	05 c0       	rjmp	.+10     	; 0x295a <vfprintf+0xbe>
    2950:	98 9c       	mul	r9, r8
    2952:	90 2c       	mov	r9, r0
    2954:	11 24       	eor	r1, r1
    2956:	98 0e       	add	r9, r24
    2958:	15 c0       	rjmp	.+42     	; 0x2984 <vfprintf+0xe8>
    295a:	e8 9c       	mul	r14, r8
    295c:	e0 2c       	mov	r14, r0
    295e:	11 24       	eor	r1, r1
    2960:	e8 0e       	add	r14, r24
    2962:	f0 e2       	ldi	r31, 0x20	; 32
    2964:	ff 2a       	or	r15, r31
    2966:	0e c0       	rjmp	.+28     	; 0x2984 <vfprintf+0xe8>
    2968:	9e 32       	cpi	r25, 0x2E	; 46
    296a:	29 f4       	brne	.+10     	; 0x2976 <vfprintf+0xda>
    296c:	f6 fc       	sbrc	r15, 6
    296e:	6b c1       	rjmp	.+726    	; 0x2c46 <vfprintf+0x3aa>
    2970:	40 e4       	ldi	r20, 0x40	; 64
    2972:	f4 2a       	or	r15, r20
    2974:	07 c0       	rjmp	.+14     	; 0x2984 <vfprintf+0xe8>
    2976:	9c 36       	cpi	r25, 0x6C	; 108
    2978:	19 f4       	brne	.+6      	; 0x2980 <vfprintf+0xe4>
    297a:	50 e8       	ldi	r21, 0x80	; 128
    297c:	f5 2a       	or	r15, r21
    297e:	02 c0       	rjmp	.+4      	; 0x2984 <vfprintf+0xe8>
    2980:	98 36       	cpi	r25, 0x68	; 104
    2982:	49 f4       	brne	.+18     	; 0x2996 <vfprintf+0xfa>
    2984:	f2 01       	movw	r30, r4
    2986:	23 fd       	sbrc	r18, 3
    2988:	95 91       	lpm	r25, Z+
    298a:	23 ff       	sbrs	r18, 3
    298c:	91 91       	ld	r25, Z+
    298e:	2f 01       	movw	r4, r30
    2990:	99 23       	and	r25, r25
    2992:	09 f0       	breq	.+2      	; 0x2996 <vfprintf+0xfa>
    2994:	b8 cf       	rjmp	.-144    	; 0x2906 <vfprintf+0x6a>
    2996:	89 2f       	mov	r24, r25
    2998:	85 54       	subi	r24, 0x45	; 69
    299a:	83 30       	cpi	r24, 0x03	; 3
    299c:	18 f0       	brcs	.+6      	; 0x29a4 <vfprintf+0x108>
    299e:	80 52       	subi	r24, 0x20	; 32
    29a0:	83 30       	cpi	r24, 0x03	; 3
    29a2:	38 f4       	brcc	.+14     	; 0x29b2 <vfprintf+0x116>
    29a4:	44 e0       	ldi	r20, 0x04	; 4
    29a6:	50 e0       	ldi	r21, 0x00	; 0
    29a8:	a4 0e       	add	r10, r20
    29aa:	b5 1e       	adc	r11, r21
    29ac:	5f e3       	ldi	r21, 0x3F	; 63
    29ae:	59 83       	std	Y+1, r21	; 0x01
    29b0:	0f c0       	rjmp	.+30     	; 0x29d0 <vfprintf+0x134>
    29b2:	93 36       	cpi	r25, 0x63	; 99
    29b4:	31 f0       	breq	.+12     	; 0x29c2 <vfprintf+0x126>
    29b6:	93 37       	cpi	r25, 0x73	; 115
    29b8:	79 f0       	breq	.+30     	; 0x29d8 <vfprintf+0x13c>
    29ba:	93 35       	cpi	r25, 0x53	; 83
    29bc:	09 f0       	breq	.+2      	; 0x29c0 <vfprintf+0x124>
    29be:	56 c0       	rjmp	.+172    	; 0x2a6c <vfprintf+0x1d0>
    29c0:	20 c0       	rjmp	.+64     	; 0x2a02 <vfprintf+0x166>
    29c2:	f5 01       	movw	r30, r10
    29c4:	80 81       	ld	r24, Z
    29c6:	89 83       	std	Y+1, r24	; 0x01
    29c8:	42 e0       	ldi	r20, 0x02	; 2
    29ca:	50 e0       	ldi	r21, 0x00	; 0
    29cc:	a4 0e       	add	r10, r20
    29ce:	b5 1e       	adc	r11, r21
    29d0:	61 01       	movw	r12, r2
    29d2:	01 e0       	ldi	r16, 0x01	; 1
    29d4:	10 e0       	ldi	r17, 0x00	; 0
    29d6:	12 c0       	rjmp	.+36     	; 0x29fc <vfprintf+0x160>
    29d8:	f5 01       	movw	r30, r10
    29da:	c0 80       	ld	r12, Z
    29dc:	d1 80       	ldd	r13, Z+1	; 0x01
    29de:	f6 fc       	sbrc	r15, 6
    29e0:	03 c0       	rjmp	.+6      	; 0x29e8 <vfprintf+0x14c>
    29e2:	6f ef       	ldi	r22, 0xFF	; 255
    29e4:	7f ef       	ldi	r23, 0xFF	; 255
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <vfprintf+0x150>
    29e8:	69 2d       	mov	r22, r9
    29ea:	70 e0       	ldi	r23, 0x00	; 0
    29ec:	42 e0       	ldi	r20, 0x02	; 2
    29ee:	50 e0       	ldi	r21, 0x00	; 0
    29f0:	a4 0e       	add	r10, r20
    29f2:	b5 1e       	adc	r11, r21
    29f4:	c6 01       	movw	r24, r12
    29f6:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <strnlen>
    29fa:	8c 01       	movw	r16, r24
    29fc:	5f e7       	ldi	r21, 0x7F	; 127
    29fe:	f5 22       	and	r15, r21
    2a00:	14 c0       	rjmp	.+40     	; 0x2a2a <vfprintf+0x18e>
    2a02:	f5 01       	movw	r30, r10
    2a04:	c0 80       	ld	r12, Z
    2a06:	d1 80       	ldd	r13, Z+1	; 0x01
    2a08:	f6 fc       	sbrc	r15, 6
    2a0a:	03 c0       	rjmp	.+6      	; 0x2a12 <vfprintf+0x176>
    2a0c:	6f ef       	ldi	r22, 0xFF	; 255
    2a0e:	7f ef       	ldi	r23, 0xFF	; 255
    2a10:	02 c0       	rjmp	.+4      	; 0x2a16 <vfprintf+0x17a>
    2a12:	69 2d       	mov	r22, r9
    2a14:	70 e0       	ldi	r23, 0x00	; 0
    2a16:	42 e0       	ldi	r20, 0x02	; 2
    2a18:	50 e0       	ldi	r21, 0x00	; 0
    2a1a:	a4 0e       	add	r10, r20
    2a1c:	b5 1e       	adc	r11, r21
    2a1e:	c6 01       	movw	r24, r12
    2a20:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <strnlen_P>
    2a24:	8c 01       	movw	r16, r24
    2a26:	50 e8       	ldi	r21, 0x80	; 128
    2a28:	f5 2a       	or	r15, r21
    2a2a:	f3 fe       	sbrs	r15, 3
    2a2c:	07 c0       	rjmp	.+14     	; 0x2a3c <vfprintf+0x1a0>
    2a2e:	1a c0       	rjmp	.+52     	; 0x2a64 <vfprintf+0x1c8>
    2a30:	80 e2       	ldi	r24, 0x20	; 32
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	b3 01       	movw	r22, r6
    2a36:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <fputc>
    2a3a:	ea 94       	dec	r14
    2a3c:	8e 2d       	mov	r24, r14
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	08 17       	cp	r16, r24
    2a42:	19 07       	cpc	r17, r25
    2a44:	a8 f3       	brcs	.-22     	; 0x2a30 <vfprintf+0x194>
    2a46:	0e c0       	rjmp	.+28     	; 0x2a64 <vfprintf+0x1c8>
    2a48:	f6 01       	movw	r30, r12
    2a4a:	f7 fc       	sbrc	r15, 7
    2a4c:	85 91       	lpm	r24, Z+
    2a4e:	f7 fe       	sbrs	r15, 7
    2a50:	81 91       	ld	r24, Z+
    2a52:	6f 01       	movw	r12, r30
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	b3 01       	movw	r22, r6
    2a58:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <fputc>
    2a5c:	e1 10       	cpse	r14, r1
    2a5e:	ea 94       	dec	r14
    2a60:	01 50       	subi	r16, 0x01	; 1
    2a62:	10 40       	sbci	r17, 0x00	; 0
    2a64:	01 15       	cp	r16, r1
    2a66:	11 05       	cpc	r17, r1
    2a68:	79 f7       	brne	.-34     	; 0x2a48 <vfprintf+0x1ac>
    2a6a:	ea c0       	rjmp	.+468    	; 0x2c40 <vfprintf+0x3a4>
    2a6c:	94 36       	cpi	r25, 0x64	; 100
    2a6e:	11 f0       	breq	.+4      	; 0x2a74 <vfprintf+0x1d8>
    2a70:	99 36       	cpi	r25, 0x69	; 105
    2a72:	69 f5       	brne	.+90     	; 0x2ace <vfprintf+0x232>
    2a74:	f7 fe       	sbrs	r15, 7
    2a76:	08 c0       	rjmp	.+16     	; 0x2a88 <vfprintf+0x1ec>
    2a78:	f5 01       	movw	r30, r10
    2a7a:	20 81       	ld	r18, Z
    2a7c:	31 81       	ldd	r19, Z+1	; 0x01
    2a7e:	42 81       	ldd	r20, Z+2	; 0x02
    2a80:	53 81       	ldd	r21, Z+3	; 0x03
    2a82:	84 e0       	ldi	r24, 0x04	; 4
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	0a c0       	rjmp	.+20     	; 0x2a9c <vfprintf+0x200>
    2a88:	f5 01       	movw	r30, r10
    2a8a:	80 81       	ld	r24, Z
    2a8c:	91 81       	ldd	r25, Z+1	; 0x01
    2a8e:	9c 01       	movw	r18, r24
    2a90:	44 27       	eor	r20, r20
    2a92:	37 fd       	sbrc	r19, 7
    2a94:	40 95       	com	r20
    2a96:	54 2f       	mov	r21, r20
    2a98:	82 e0       	ldi	r24, 0x02	; 2
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	a8 0e       	add	r10, r24
    2a9e:	b9 1e       	adc	r11, r25
    2aa0:	9f e6       	ldi	r25, 0x6F	; 111
    2aa2:	f9 22       	and	r15, r25
    2aa4:	57 ff       	sbrs	r21, 7
    2aa6:	09 c0       	rjmp	.+18     	; 0x2aba <vfprintf+0x21e>
    2aa8:	50 95       	com	r21
    2aaa:	40 95       	com	r20
    2aac:	30 95       	com	r19
    2aae:	21 95       	neg	r18
    2ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab2:	4f 4f       	sbci	r20, 0xFF	; 255
    2ab4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ab6:	e0 e8       	ldi	r30, 0x80	; 128
    2ab8:	fe 2a       	or	r15, r30
    2aba:	ca 01       	movw	r24, r20
    2abc:	b9 01       	movw	r22, r18
    2abe:	a1 01       	movw	r20, r2
    2ac0:	2a e0       	ldi	r18, 0x0A	; 10
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <__ultoa_invert>
    2ac8:	d8 2e       	mov	r13, r24
    2aca:	d2 18       	sub	r13, r2
    2acc:	40 c0       	rjmp	.+128    	; 0x2b4e <vfprintf+0x2b2>
    2ace:	95 37       	cpi	r25, 0x75	; 117
    2ad0:	29 f4       	brne	.+10     	; 0x2adc <vfprintf+0x240>
    2ad2:	1f 2d       	mov	r17, r15
    2ad4:	1f 7e       	andi	r17, 0xEF	; 239
    2ad6:	2a e0       	ldi	r18, 0x0A	; 10
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	1d c0       	rjmp	.+58     	; 0x2b16 <vfprintf+0x27a>
    2adc:	1f 2d       	mov	r17, r15
    2ade:	19 7f       	andi	r17, 0xF9	; 249
    2ae0:	9f 36       	cpi	r25, 0x6F	; 111
    2ae2:	61 f0       	breq	.+24     	; 0x2afc <vfprintf+0x260>
    2ae4:	90 37       	cpi	r25, 0x70	; 112
    2ae6:	20 f4       	brcc	.+8      	; 0x2af0 <vfprintf+0x254>
    2ae8:	98 35       	cpi	r25, 0x58	; 88
    2aea:	09 f0       	breq	.+2      	; 0x2aee <vfprintf+0x252>
    2aec:	ac c0       	rjmp	.+344    	; 0x2c46 <vfprintf+0x3aa>
    2aee:	0f c0       	rjmp	.+30     	; 0x2b0e <vfprintf+0x272>
    2af0:	90 37       	cpi	r25, 0x70	; 112
    2af2:	39 f0       	breq	.+14     	; 0x2b02 <vfprintf+0x266>
    2af4:	98 37       	cpi	r25, 0x78	; 120
    2af6:	09 f0       	breq	.+2      	; 0x2afa <vfprintf+0x25e>
    2af8:	a6 c0       	rjmp	.+332    	; 0x2c46 <vfprintf+0x3aa>
    2afa:	04 c0       	rjmp	.+8      	; 0x2b04 <vfprintf+0x268>
    2afc:	28 e0       	ldi	r18, 0x08	; 8
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	0a c0       	rjmp	.+20     	; 0x2b16 <vfprintf+0x27a>
    2b02:	10 61       	ori	r17, 0x10	; 16
    2b04:	14 fd       	sbrc	r17, 4
    2b06:	14 60       	ori	r17, 0x04	; 4
    2b08:	20 e1       	ldi	r18, 0x10	; 16
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	04 c0       	rjmp	.+8      	; 0x2b16 <vfprintf+0x27a>
    2b0e:	14 fd       	sbrc	r17, 4
    2b10:	16 60       	ori	r17, 0x06	; 6
    2b12:	20 e1       	ldi	r18, 0x10	; 16
    2b14:	32 e0       	ldi	r19, 0x02	; 2
    2b16:	17 ff       	sbrs	r17, 7
    2b18:	08 c0       	rjmp	.+16     	; 0x2b2a <vfprintf+0x28e>
    2b1a:	f5 01       	movw	r30, r10
    2b1c:	60 81       	ld	r22, Z
    2b1e:	71 81       	ldd	r23, Z+1	; 0x01
    2b20:	82 81       	ldd	r24, Z+2	; 0x02
    2b22:	93 81       	ldd	r25, Z+3	; 0x03
    2b24:	44 e0       	ldi	r20, 0x04	; 4
    2b26:	50 e0       	ldi	r21, 0x00	; 0
    2b28:	08 c0       	rjmp	.+16     	; 0x2b3a <vfprintf+0x29e>
    2b2a:	f5 01       	movw	r30, r10
    2b2c:	80 81       	ld	r24, Z
    2b2e:	91 81       	ldd	r25, Z+1	; 0x01
    2b30:	bc 01       	movw	r22, r24
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	42 e0       	ldi	r20, 0x02	; 2
    2b38:	50 e0       	ldi	r21, 0x00	; 0
    2b3a:	a4 0e       	add	r10, r20
    2b3c:	b5 1e       	adc	r11, r21
    2b3e:	a1 01       	movw	r20, r2
    2b40:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <__ultoa_invert>
    2b44:	d8 2e       	mov	r13, r24
    2b46:	d2 18       	sub	r13, r2
    2b48:	8f e7       	ldi	r24, 0x7F	; 127
    2b4a:	f8 2e       	mov	r15, r24
    2b4c:	f1 22       	and	r15, r17
    2b4e:	f6 fe       	sbrs	r15, 6
    2b50:	0b c0       	rjmp	.+22     	; 0x2b68 <vfprintf+0x2cc>
    2b52:	5e ef       	ldi	r21, 0xFE	; 254
    2b54:	f5 22       	and	r15, r21
    2b56:	d9 14       	cp	r13, r9
    2b58:	38 f4       	brcc	.+14     	; 0x2b68 <vfprintf+0x2cc>
    2b5a:	f4 fe       	sbrs	r15, 4
    2b5c:	07 c0       	rjmp	.+14     	; 0x2b6c <vfprintf+0x2d0>
    2b5e:	f2 fc       	sbrc	r15, 2
    2b60:	05 c0       	rjmp	.+10     	; 0x2b6c <vfprintf+0x2d0>
    2b62:	8f ee       	ldi	r24, 0xEF	; 239
    2b64:	f8 22       	and	r15, r24
    2b66:	02 c0       	rjmp	.+4      	; 0x2b6c <vfprintf+0x2d0>
    2b68:	1d 2d       	mov	r17, r13
    2b6a:	01 c0       	rjmp	.+2      	; 0x2b6e <vfprintf+0x2d2>
    2b6c:	19 2d       	mov	r17, r9
    2b6e:	f4 fe       	sbrs	r15, 4
    2b70:	0d c0       	rjmp	.+26     	; 0x2b8c <vfprintf+0x2f0>
    2b72:	fe 01       	movw	r30, r28
    2b74:	ed 0d       	add	r30, r13
    2b76:	f1 1d       	adc	r31, r1
    2b78:	80 81       	ld	r24, Z
    2b7a:	80 33       	cpi	r24, 0x30	; 48
    2b7c:	19 f4       	brne	.+6      	; 0x2b84 <vfprintf+0x2e8>
    2b7e:	99 ee       	ldi	r25, 0xE9	; 233
    2b80:	f9 22       	and	r15, r25
    2b82:	08 c0       	rjmp	.+16     	; 0x2b94 <vfprintf+0x2f8>
    2b84:	1f 5f       	subi	r17, 0xFF	; 255
    2b86:	f2 fe       	sbrs	r15, 2
    2b88:	05 c0       	rjmp	.+10     	; 0x2b94 <vfprintf+0x2f8>
    2b8a:	03 c0       	rjmp	.+6      	; 0x2b92 <vfprintf+0x2f6>
    2b8c:	8f 2d       	mov	r24, r15
    2b8e:	86 78       	andi	r24, 0x86	; 134
    2b90:	09 f0       	breq	.+2      	; 0x2b94 <vfprintf+0x2f8>
    2b92:	1f 5f       	subi	r17, 0xFF	; 255
    2b94:	0f 2d       	mov	r16, r15
    2b96:	f3 fc       	sbrc	r15, 3
    2b98:	14 c0       	rjmp	.+40     	; 0x2bc2 <vfprintf+0x326>
    2b9a:	f0 fe       	sbrs	r15, 0
    2b9c:	0f c0       	rjmp	.+30     	; 0x2bbc <vfprintf+0x320>
    2b9e:	1e 15       	cp	r17, r14
    2ba0:	10 f0       	brcs	.+4      	; 0x2ba6 <vfprintf+0x30a>
    2ba2:	9d 2c       	mov	r9, r13
    2ba4:	0b c0       	rjmp	.+22     	; 0x2bbc <vfprintf+0x320>
    2ba6:	9d 2c       	mov	r9, r13
    2ba8:	9e 0c       	add	r9, r14
    2baa:	91 1a       	sub	r9, r17
    2bac:	1e 2d       	mov	r17, r14
    2bae:	06 c0       	rjmp	.+12     	; 0x2bbc <vfprintf+0x320>
    2bb0:	80 e2       	ldi	r24, 0x20	; 32
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	b3 01       	movw	r22, r6
    2bb6:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <fputc>
    2bba:	1f 5f       	subi	r17, 0xFF	; 255
    2bbc:	1e 15       	cp	r17, r14
    2bbe:	c0 f3       	brcs	.-16     	; 0x2bb0 <vfprintf+0x314>
    2bc0:	04 c0       	rjmp	.+8      	; 0x2bca <vfprintf+0x32e>
    2bc2:	1e 15       	cp	r17, r14
    2bc4:	10 f4       	brcc	.+4      	; 0x2bca <vfprintf+0x32e>
    2bc6:	e1 1a       	sub	r14, r17
    2bc8:	01 c0       	rjmp	.+2      	; 0x2bcc <vfprintf+0x330>
    2bca:	ee 24       	eor	r14, r14
    2bcc:	04 ff       	sbrs	r16, 4
    2bce:	0f c0       	rjmp	.+30     	; 0x2bee <vfprintf+0x352>
    2bd0:	80 e3       	ldi	r24, 0x30	; 48
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	b3 01       	movw	r22, r6
    2bd6:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <fputc>
    2bda:	02 ff       	sbrs	r16, 2
    2bdc:	1d c0       	rjmp	.+58     	; 0x2c18 <vfprintf+0x37c>
    2bde:	01 fd       	sbrc	r16, 1
    2be0:	03 c0       	rjmp	.+6      	; 0x2be8 <vfprintf+0x34c>
    2be2:	88 e7       	ldi	r24, 0x78	; 120
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	0e c0       	rjmp	.+28     	; 0x2c04 <vfprintf+0x368>
    2be8:	88 e5       	ldi	r24, 0x58	; 88
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	0b c0       	rjmp	.+22     	; 0x2c04 <vfprintf+0x368>
    2bee:	80 2f       	mov	r24, r16
    2bf0:	86 78       	andi	r24, 0x86	; 134
    2bf2:	91 f0       	breq	.+36     	; 0x2c18 <vfprintf+0x37c>
    2bf4:	01 ff       	sbrs	r16, 1
    2bf6:	02 c0       	rjmp	.+4      	; 0x2bfc <vfprintf+0x360>
    2bf8:	8b e2       	ldi	r24, 0x2B	; 43
    2bfa:	01 c0       	rjmp	.+2      	; 0x2bfe <vfprintf+0x362>
    2bfc:	80 e2       	ldi	r24, 0x20	; 32
    2bfe:	f7 fc       	sbrc	r15, 7
    2c00:	8d e2       	ldi	r24, 0x2D	; 45
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	b3 01       	movw	r22, r6
    2c06:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <fputc>
    2c0a:	06 c0       	rjmp	.+12     	; 0x2c18 <vfprintf+0x37c>
    2c0c:	80 e3       	ldi	r24, 0x30	; 48
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	b3 01       	movw	r22, r6
    2c12:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <fputc>
    2c16:	9a 94       	dec	r9
    2c18:	d9 14       	cp	r13, r9
    2c1a:	c0 f3       	brcs	.-16     	; 0x2c0c <vfprintf+0x370>
    2c1c:	da 94       	dec	r13
    2c1e:	f1 01       	movw	r30, r2
    2c20:	ed 0d       	add	r30, r13
    2c22:	f1 1d       	adc	r31, r1
    2c24:	80 81       	ld	r24, Z
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	b3 01       	movw	r22, r6
    2c2a:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <fputc>
    2c2e:	dd 20       	and	r13, r13
    2c30:	a9 f7       	brne	.-22     	; 0x2c1c <vfprintf+0x380>
    2c32:	06 c0       	rjmp	.+12     	; 0x2c40 <vfprintf+0x3a4>
    2c34:	80 e2       	ldi	r24, 0x20	; 32
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	b3 01       	movw	r22, r6
    2c3a:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <fputc>
    2c3e:	ea 94       	dec	r14
    2c40:	ee 20       	and	r14, r14
    2c42:	c1 f7       	brne	.-16     	; 0x2c34 <vfprintf+0x398>
    2c44:	43 ce       	rjmp	.-890    	; 0x28cc <vfprintf+0x30>
    2c46:	f3 01       	movw	r30, r6
    2c48:	66 81       	ldd	r22, Z+6	; 0x06
    2c4a:	77 81       	ldd	r23, Z+7	; 0x07
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	2b 96       	adiw	r28, 0x0b	; 11
    2c50:	e2 e1       	ldi	r30, 0x12	; 18
    2c52:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__epilogue_restores__>

00002c56 <strnlen_P>:
    2c56:	fc 01       	movw	r30, r24
    2c58:	05 90       	lpm	r0, Z+
    2c5a:	61 50       	subi	r22, 0x01	; 1
    2c5c:	70 40       	sbci	r23, 0x00	; 0
    2c5e:	01 10       	cpse	r0, r1
    2c60:	d8 f7       	brcc	.-10     	; 0x2c58 <strnlen_P+0x2>
    2c62:	80 95       	com	r24
    2c64:	90 95       	com	r25
    2c66:	8e 0f       	add	r24, r30
    2c68:	9f 1f       	adc	r25, r31
    2c6a:	08 95       	ret

00002c6c <strnlen>:
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	61 50       	subi	r22, 0x01	; 1
    2c70:	70 40       	sbci	r23, 0x00	; 0
    2c72:	01 90       	ld	r0, Z+
    2c74:	01 10       	cpse	r0, r1
    2c76:	d8 f7       	brcc	.-10     	; 0x2c6e <strnlen+0x2>
    2c78:	80 95       	com	r24
    2c7a:	90 95       	com	r25
    2c7c:	8e 0f       	add	r24, r30
    2c7e:	9f 1f       	adc	r25, r31
    2c80:	08 95       	ret

00002c82 <strrev>:
    2c82:	dc 01       	movw	r26, r24
    2c84:	fc 01       	movw	r30, r24
    2c86:	67 2f       	mov	r22, r23
    2c88:	71 91       	ld	r23, Z+
    2c8a:	77 23       	and	r23, r23
    2c8c:	e1 f7       	brne	.-8      	; 0x2c86 <strrev+0x4>
    2c8e:	32 97       	sbiw	r30, 0x02	; 2
    2c90:	04 c0       	rjmp	.+8      	; 0x2c9a <strrev+0x18>
    2c92:	7c 91       	ld	r23, X
    2c94:	6d 93       	st	X+, r22
    2c96:	70 83       	st	Z, r23
    2c98:	62 91       	ld	r22, -Z
    2c9a:	ae 17       	cp	r26, r30
    2c9c:	bf 07       	cpc	r27, r31
    2c9e:	c8 f3       	brcs	.-14     	; 0x2c92 <strrev+0x10>
    2ca0:	08 95       	ret

00002ca2 <fputc>:
    2ca2:	0f 93       	push	r16
    2ca4:	1f 93       	push	r17
    2ca6:	cf 93       	push	r28
    2ca8:	df 93       	push	r29
    2caa:	8c 01       	movw	r16, r24
    2cac:	eb 01       	movw	r28, r22
    2cae:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb0:	81 ff       	sbrs	r24, 1
    2cb2:	1b c0       	rjmp	.+54     	; 0x2cea <fputc+0x48>
    2cb4:	82 ff       	sbrs	r24, 2
    2cb6:	0d c0       	rjmp	.+26     	; 0x2cd2 <fputc+0x30>
    2cb8:	2e 81       	ldd	r18, Y+6	; 0x06
    2cba:	3f 81       	ldd	r19, Y+7	; 0x07
    2cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cbe:	9d 81       	ldd	r25, Y+5	; 0x05
    2cc0:	28 17       	cp	r18, r24
    2cc2:	39 07       	cpc	r19, r25
    2cc4:	64 f4       	brge	.+24     	; 0x2cde <fputc+0x3c>
    2cc6:	e8 81       	ld	r30, Y
    2cc8:	f9 81       	ldd	r31, Y+1	; 0x01
    2cca:	01 93       	st	Z+, r16
    2ccc:	f9 83       	std	Y+1, r31	; 0x01
    2cce:	e8 83       	st	Y, r30
    2cd0:	06 c0       	rjmp	.+12     	; 0x2cde <fputc+0x3c>
    2cd2:	e8 85       	ldd	r30, Y+8	; 0x08
    2cd4:	f9 85       	ldd	r31, Y+9	; 0x09
    2cd6:	80 2f       	mov	r24, r16
    2cd8:	09 95       	icall
    2cda:	89 2b       	or	r24, r25
    2cdc:	31 f4       	brne	.+12     	; 0x2cea <fputc+0x48>
    2cde:	8e 81       	ldd	r24, Y+6	; 0x06
    2ce0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ce2:	01 96       	adiw	r24, 0x01	; 1
    2ce4:	9f 83       	std	Y+7, r25	; 0x07
    2ce6:	8e 83       	std	Y+6, r24	; 0x06
    2ce8:	02 c0       	rjmp	.+4      	; 0x2cee <fputc+0x4c>
    2cea:	0f ef       	ldi	r16, 0xFF	; 255
    2cec:	1f ef       	ldi	r17, 0xFF	; 255
    2cee:	c8 01       	movw	r24, r16
    2cf0:	df 91       	pop	r29
    2cf2:	cf 91       	pop	r28
    2cf4:	1f 91       	pop	r17
    2cf6:	0f 91       	pop	r16
    2cf8:	08 95       	ret

00002cfa <__ultoa_invert>:
    2cfa:	fa 01       	movw	r30, r20
    2cfc:	aa 27       	eor	r26, r26
    2cfe:	28 30       	cpi	r18, 0x08	; 8
    2d00:	51 f1       	breq	.+84     	; 0x2d56 <__ultoa_invert+0x5c>
    2d02:	20 31       	cpi	r18, 0x10	; 16
    2d04:	81 f1       	breq	.+96     	; 0x2d66 <__ultoa_invert+0x6c>
    2d06:	e8 94       	clt
    2d08:	6f 93       	push	r22
    2d0a:	6e 7f       	andi	r22, 0xFE	; 254
    2d0c:	6e 5f       	subi	r22, 0xFE	; 254
    2d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d10:	8f 4f       	sbci	r24, 0xFF	; 255
    2d12:	9f 4f       	sbci	r25, 0xFF	; 255
    2d14:	af 4f       	sbci	r26, 0xFF	; 255
    2d16:	b1 e0       	ldi	r27, 0x01	; 1
    2d18:	3e d0       	rcall	.+124    	; 0x2d96 <__ultoa_invert+0x9c>
    2d1a:	b4 e0       	ldi	r27, 0x04	; 4
    2d1c:	3c d0       	rcall	.+120    	; 0x2d96 <__ultoa_invert+0x9c>
    2d1e:	67 0f       	add	r22, r23
    2d20:	78 1f       	adc	r23, r24
    2d22:	89 1f       	adc	r24, r25
    2d24:	9a 1f       	adc	r25, r26
    2d26:	a1 1d       	adc	r26, r1
    2d28:	68 0f       	add	r22, r24
    2d2a:	79 1f       	adc	r23, r25
    2d2c:	8a 1f       	adc	r24, r26
    2d2e:	91 1d       	adc	r25, r1
    2d30:	a1 1d       	adc	r26, r1
    2d32:	6a 0f       	add	r22, r26
    2d34:	71 1d       	adc	r23, r1
    2d36:	81 1d       	adc	r24, r1
    2d38:	91 1d       	adc	r25, r1
    2d3a:	a1 1d       	adc	r26, r1
    2d3c:	20 d0       	rcall	.+64     	; 0x2d7e <__ultoa_invert+0x84>
    2d3e:	09 f4       	brne	.+2      	; 0x2d42 <__ultoa_invert+0x48>
    2d40:	68 94       	set
    2d42:	3f 91       	pop	r19
    2d44:	2a e0       	ldi	r18, 0x0A	; 10
    2d46:	26 9f       	mul	r18, r22
    2d48:	11 24       	eor	r1, r1
    2d4a:	30 19       	sub	r19, r0
    2d4c:	30 5d       	subi	r19, 0xD0	; 208
    2d4e:	31 93       	st	Z+, r19
    2d50:	de f6       	brtc	.-74     	; 0x2d08 <__ultoa_invert+0xe>
    2d52:	cf 01       	movw	r24, r30
    2d54:	08 95       	ret
    2d56:	46 2f       	mov	r20, r22
    2d58:	47 70       	andi	r20, 0x07	; 7
    2d5a:	40 5d       	subi	r20, 0xD0	; 208
    2d5c:	41 93       	st	Z+, r20
    2d5e:	b3 e0       	ldi	r27, 0x03	; 3
    2d60:	0f d0       	rcall	.+30     	; 0x2d80 <__ultoa_invert+0x86>
    2d62:	c9 f7       	brne	.-14     	; 0x2d56 <__ultoa_invert+0x5c>
    2d64:	f6 cf       	rjmp	.-20     	; 0x2d52 <__ultoa_invert+0x58>
    2d66:	46 2f       	mov	r20, r22
    2d68:	4f 70       	andi	r20, 0x0F	; 15
    2d6a:	40 5d       	subi	r20, 0xD0	; 208
    2d6c:	4a 33       	cpi	r20, 0x3A	; 58
    2d6e:	18 f0       	brcs	.+6      	; 0x2d76 <__ultoa_invert+0x7c>
    2d70:	49 5d       	subi	r20, 0xD9	; 217
    2d72:	31 fd       	sbrc	r19, 1
    2d74:	40 52       	subi	r20, 0x20	; 32
    2d76:	41 93       	st	Z+, r20
    2d78:	02 d0       	rcall	.+4      	; 0x2d7e <__ultoa_invert+0x84>
    2d7a:	a9 f7       	brne	.-22     	; 0x2d66 <__ultoa_invert+0x6c>
    2d7c:	ea cf       	rjmp	.-44     	; 0x2d52 <__ultoa_invert+0x58>
    2d7e:	b4 e0       	ldi	r27, 0x04	; 4
    2d80:	a6 95       	lsr	r26
    2d82:	97 95       	ror	r25
    2d84:	87 95       	ror	r24
    2d86:	77 95       	ror	r23
    2d88:	67 95       	ror	r22
    2d8a:	ba 95       	dec	r27
    2d8c:	c9 f7       	brne	.-14     	; 0x2d80 <__ultoa_invert+0x86>
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	61 05       	cpc	r22, r1
    2d92:	71 05       	cpc	r23, r1
    2d94:	08 95       	ret
    2d96:	9b 01       	movw	r18, r22
    2d98:	ac 01       	movw	r20, r24
    2d9a:	0a 2e       	mov	r0, r26
    2d9c:	06 94       	lsr	r0
    2d9e:	57 95       	ror	r21
    2da0:	47 95       	ror	r20
    2da2:	37 95       	ror	r19
    2da4:	27 95       	ror	r18
    2da6:	ba 95       	dec	r27
    2da8:	c9 f7       	brne	.-14     	; 0x2d9c <__ultoa_invert+0xa2>
    2daa:	62 0f       	add	r22, r18
    2dac:	73 1f       	adc	r23, r19
    2dae:	84 1f       	adc	r24, r20
    2db0:	95 1f       	adc	r25, r21
    2db2:	a0 1d       	adc	r26, r0
    2db4:	08 95       	ret

00002db6 <_exit>:
    2db6:	f8 94       	cli

00002db8 <__stop_program>:
    2db8:	ff cf       	rjmp	.-2      	; 0x2db8 <__stop_program>
