
project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000156  00800060  000027b2  00002826  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000288c  00000000  00000000  0000297c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010d9  00000000  00000000  00005208  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000062e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00006481  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00006673  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00008a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00009e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000afdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000b19c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000b492  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000be00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 78 12 	call	0x24f0	; 0x24f0 <main>
      7a:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad ea       	ldi	r26, 0xAD	; 173
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 97 13 	jmp	0x272e	; 0x272e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 97 13 	jmp	0x272e	; 0x272e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d ea       	ldi	r24, 0xAD	; 173
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6d ea       	ldi	r22, 0xAD	; 173
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 97 13 	jmp	0x272e	; 0x272e <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 97 13 	jmp	0x272e	; 0x272e <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 97 13 	jmp	0x272e	; 0x272e <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	eb 54       	subi	r30, 0x4B	; 75
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <PWM_Timer0_Start>:

#include <avr/io.h>
#include "PWM.h"

void PWM_Timer0_Start(uint8 duty_cycle)
{
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	0f 92       	push	r0
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	89 83       	std	Y+1, r24	; 0x01
    // Set OC0 (PB3) as output
    DDRB |= (1 << PB3);
     e2e:	a7 e3       	ldi	r26, 0x37	; 55
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e7 e3       	ldi	r30, 0x37	; 55
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	88 60       	ori	r24, 0x08	; 8
     e3a:	8c 93       	st	X, r24

    // Set Fast PWM mode (WGM00 & WGM01 = 1), Non-inverting mode (COM01 = 1)
    TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS02) | (1 << CS00);
     e3c:	e3 e5       	ldi	r30, 0x53	; 83
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	8d e6       	ldi	r24, 0x6D	; 109
     e42:	80 83       	st	Z, r24
    // CS02 and CS00 -> Prescaler = 1024

    // Set duty cycle (0-100%)
    OCR0 = (uint8)((duty_cycle * 255UL) / 100);
     e44:	0c e5       	ldi	r16, 0x5C	; 92
     e46:	10 e0       	ldi	r17, 0x00	; 0
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	88 2f       	mov	r24, r24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	a0 e0       	ldi	r26, 0x00	; 0
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	2f ef       	ldi	r18, 0xFF	; 255
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	40 e0       	ldi	r20, 0x00	; 0
     e58:	50 e0       	ldi	r21, 0x00	; 0
     e5a:	bc 01       	movw	r22, r24
     e5c:	cd 01       	movw	r24, r26
     e5e:	0e 94 07 13 	call	0x260e	; 0x260e <__mulsi3>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	24 e6       	ldi	r18, 0x64	; 100
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e0       	ldi	r20, 0x00	; 0
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	bc 01       	movw	r22, r24
     e70:	cd 01       	movw	r24, r26
     e72:	0e 94 39 13 	call	0x2672	; 0x2672 <__udivmodsi4>
     e76:	da 01       	movw	r26, r20
     e78:	c9 01       	movw	r24, r18
     e7a:	f8 01       	movw	r30, r16
     e7c:	80 83       	st	Z, r24
}
     e7e:	0f 90       	pop	r0
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	08 95       	ret

00000e8a <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS1) | (1 << REFS0);  // Internal 2.56V reference
     e92:	e7 e2       	ldi	r30, 0x27	; 39
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 ec       	ldi	r24, 0xC0	; 192
     e98:	80 83       	st	Z, r24

	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);  // F_CPU / 128
     e9a:	e6 e2       	ldi	r30, 0x26	; 38
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	87 e8       	ldi	r24, 0x87	; 135
     ea0:	80 83       	st	Z, r24
}
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	0f 92       	push	r0
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	87 70       	andi	r24, 0x07	; 7
     eb8:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     eba:	a7 e2       	ldi	r26, 0x27	; 39
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e7 e2       	ldi	r30, 0x27	; 39
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	80 7e       	andi	r24, 0xE0	; 224
     ec6:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     ec8:	a7 e2       	ldi	r26, 0x27	; 39
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e7 e2       	ldi	r30, 0x27	; 39
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	90 81       	ld	r25, Z
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	89 2b       	or	r24, r25
     ed6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
     ed8:	a6 e2       	ldi	r26, 0x26	; 38
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e6 e2       	ldi	r30, 0x26	; 38
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	80 64       	ori	r24, 0x40	; 64
     ee4:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
     ee6:	e6 e2       	ldi	r30, 0x26	; 38
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	88 2f       	mov	r24, r24
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	80 71       	andi	r24, 0x10	; 16
     ef2:	90 70       	andi	r25, 0x00	; 0
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	b9 f3       	breq	.-18     	; 0xee6 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
     ef8:	a6 e2       	ldi	r26, 0x26	; 38
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e6 e2       	ldi	r30, 0x26	; 38
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	80 61       	ori	r24, 0x10	; 16
     f04:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
     f06:	e4 e2       	ldi	r30, 0x24	; 36
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
}
     f0e:	0f 90       	pop	r0
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <GPIO_setupPinDirection+0x6>
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <GPIO_setupPinDirection+0x8>
     f1e:	0f 92       	push	r0
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	6a 83       	std	Y+2, r22	; 0x02
     f28:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	88 30       	cpi	r24, 0x08	; 8
     f2e:	08 f0       	brcs	.+2      	; 0xf32 <GPIO_setupPinDirection+0x1c>
     f30:	d5 c0       	rjmp	.+426    	; 0x10dc <GPIO_setupPinDirection+0x1c6>
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	84 30       	cpi	r24, 0x04	; 4
     f36:	08 f0       	brcs	.+2      	; 0xf3a <GPIO_setupPinDirection+0x24>
     f38:	d1 c0       	rjmp	.+418    	; 0x10dc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	3d 83       	std	Y+5, r19	; 0x05
     f42:	2c 83       	std	Y+4, r18	; 0x04
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	9d 81       	ldd	r25, Y+5	; 0x05
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	91 05       	cpc	r25, r1
     f4c:	09 f4       	brne	.+2      	; 0xf50 <GPIO_setupPinDirection+0x3a>
     f4e:	43 c0       	rjmp	.+134    	; 0xfd6 <GPIO_setupPinDirection+0xc0>
     f50:	2c 81       	ldd	r18, Y+4	; 0x04
     f52:	3d 81       	ldd	r19, Y+5	; 0x05
     f54:	22 30       	cpi	r18, 0x02	; 2
     f56:	31 05       	cpc	r19, r1
     f58:	2c f4       	brge	.+10     	; 0xf64 <GPIO_setupPinDirection+0x4e>
     f5a:	8c 81       	ldd	r24, Y+4	; 0x04
     f5c:	9d 81       	ldd	r25, Y+5	; 0x05
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	71 f0       	breq	.+28     	; 0xf7e <GPIO_setupPinDirection+0x68>
     f62:	bc c0       	rjmp	.+376    	; 0x10dc <GPIO_setupPinDirection+0x1c6>
     f64:	2c 81       	ldd	r18, Y+4	; 0x04
     f66:	3d 81       	ldd	r19, Y+5	; 0x05
     f68:	22 30       	cpi	r18, 0x02	; 2
     f6a:	31 05       	cpc	r19, r1
     f6c:	09 f4       	brne	.+2      	; 0xf70 <GPIO_setupPinDirection+0x5a>
     f6e:	5f c0       	rjmp	.+190    	; 0x102e <GPIO_setupPinDirection+0x118>
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	9d 81       	ldd	r25, Y+5	; 0x05
     f74:	83 30       	cpi	r24, 0x03	; 3
     f76:	91 05       	cpc	r25, r1
     f78:	09 f4       	brne	.+2      	; 0xf7c <GPIO_setupPinDirection+0x66>
     f7a:	85 c0       	rjmp	.+266    	; 0x1086 <GPIO_setupPinDirection+0x170>
     f7c:	af c0       	rjmp	.+350    	; 0x10dc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	a1 f4       	brne	.+40     	; 0xfac <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f84:	aa e3       	ldi	r26, 0x3A	; 58
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	ea e3       	ldi	r30, 0x3A	; 58
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <GPIO_setupPinDirection+0x8c>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <GPIO_setupPinDirection+0x88>
     fa6:	84 2b       	or	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	98 c0       	rjmp	.+304    	; 0x10dc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     fac:	aa e3       	ldi	r26, 0x3A	; 58
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	ea e3       	ldi	r30, 0x3A	; 58
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <GPIO_setupPinDirection+0xb4>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <GPIO_setupPinDirection+0xb0>
     fce:	80 95       	com	r24
     fd0:	84 23       	and	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	83 c0       	rjmp	.+262    	; 0x10dc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	a1 f4       	brne	.+40     	; 0x1004 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     fdc:	a7 e3       	ldi	r26, 0x37	; 55
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e7 e3       	ldi	r30, 0x37	; 55
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <GPIO_setupPinDirection+0xe4>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <GPIO_setupPinDirection+0xe0>
     ffe:	84 2b       	or	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	6c c0       	rjmp	.+216    	; 0x10dc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1004:	a7 e3       	ldi	r26, 0x37	; 55
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e7 e3       	ldi	r30, 0x37	; 55
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <GPIO_setupPinDirection+0x10c>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <GPIO_setupPinDirection+0x108>
    1026:	80 95       	com	r24
    1028:	84 23       	and	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	57 c0       	rjmp	.+174    	; 0x10dc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	a1 f4       	brne	.+40     	; 0x105c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1034:	a4 e3       	ldi	r26, 0x34	; 52
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e4 e3       	ldi	r30, 0x34	; 52
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <GPIO_setupPinDirection+0x13c>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <GPIO_setupPinDirection+0x138>
    1056:	84 2b       	or	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	40 c0       	rjmp	.+128    	; 0x10dc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    105c:	a4 e3       	ldi	r26, 0x34	; 52
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e4 e3       	ldi	r30, 0x34	; 52
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <GPIO_setupPinDirection+0x164>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <GPIO_setupPinDirection+0x160>
    107e:	80 95       	com	r24
    1080:	84 23       	and	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	2b c0       	rjmp	.+86     	; 0x10dc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	a1 f4       	brne	.+40     	; 0x10b4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    108c:	a1 e3       	ldi	r26, 0x31	; 49
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e1 e3       	ldi	r30, 0x31	; 49
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <GPIO_setupPinDirection+0x194>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <GPIO_setupPinDirection+0x190>
    10ae:	84 2b       	or	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	14 c0       	rjmp	.+40     	; 0x10dc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    10b4:	a1 e3       	ldi	r26, 0x31	; 49
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e1 e3       	ldi	r30, 0x31	; 49
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <GPIO_setupPinDirection+0x1bc>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <GPIO_setupPinDirection+0x1b8>
    10d6:	80 95       	com	r24
    10d8:	84 23       	and	r24, r20
    10da:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	00 d0       	rcall	.+0      	; 0x10f2 <GPIO_writePin+0x6>
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <GPIO_writePin+0x8>
    10f4:	0f 92       	push	r0
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	6a 83       	std	Y+2, r22	; 0x02
    10fe:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	88 30       	cpi	r24, 0x08	; 8
    1104:	08 f0       	brcs	.+2      	; 0x1108 <GPIO_writePin+0x1c>
    1106:	d5 c0       	rjmp	.+426    	; 0x12b2 <GPIO_writePin+0x1c6>
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	84 30       	cpi	r24, 0x04	; 4
    110c:	08 f0       	brcs	.+2      	; 0x1110 <GPIO_writePin+0x24>
    110e:	d1 c0       	rjmp	.+418    	; 0x12b2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	3d 83       	std	Y+5, r19	; 0x05
    1118:	2c 83       	std	Y+4, r18	; 0x04
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
    111c:	9d 81       	ldd	r25, Y+5	; 0x05
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	91 05       	cpc	r25, r1
    1122:	09 f4       	brne	.+2      	; 0x1126 <GPIO_writePin+0x3a>
    1124:	43 c0       	rjmp	.+134    	; 0x11ac <GPIO_writePin+0xc0>
    1126:	2c 81       	ldd	r18, Y+4	; 0x04
    1128:	3d 81       	ldd	r19, Y+5	; 0x05
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	31 05       	cpc	r19, r1
    112e:	2c f4       	brge	.+10     	; 0x113a <GPIO_writePin+0x4e>
    1130:	8c 81       	ldd	r24, Y+4	; 0x04
    1132:	9d 81       	ldd	r25, Y+5	; 0x05
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	71 f0       	breq	.+28     	; 0x1154 <GPIO_writePin+0x68>
    1138:	bc c0       	rjmp	.+376    	; 0x12b2 <GPIO_writePin+0x1c6>
    113a:	2c 81       	ldd	r18, Y+4	; 0x04
    113c:	3d 81       	ldd	r19, Y+5	; 0x05
    113e:	22 30       	cpi	r18, 0x02	; 2
    1140:	31 05       	cpc	r19, r1
    1142:	09 f4       	brne	.+2      	; 0x1146 <GPIO_writePin+0x5a>
    1144:	5f c0       	rjmp	.+190    	; 0x1204 <GPIO_writePin+0x118>
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	9d 81       	ldd	r25, Y+5	; 0x05
    114a:	83 30       	cpi	r24, 0x03	; 3
    114c:	91 05       	cpc	r25, r1
    114e:	09 f4       	brne	.+2      	; 0x1152 <GPIO_writePin+0x66>
    1150:	85 c0       	rjmp	.+266    	; 0x125c <GPIO_writePin+0x170>
    1152:	af c0       	rjmp	.+350    	; 0x12b2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	a1 f4       	brne	.+40     	; 0x1182 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    115a:	ab e3       	ldi	r26, 0x3B	; 59
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	eb e3       	ldi	r30, 0x3B	; 59
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 2e       	mov	r0, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <GPIO_writePin+0x8c>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <GPIO_writePin+0x88>
    117c:	84 2b       	or	r24, r20
    117e:	8c 93       	st	X, r24
    1180:	98 c0       	rjmp	.+304    	; 0x12b2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1182:	ab e3       	ldi	r26, 0x3B	; 59
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	eb e3       	ldi	r30, 0x3B	; 59
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <GPIO_writePin+0xb4>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <GPIO_writePin+0xb0>
    11a4:	80 95       	com	r24
    11a6:	84 23       	and	r24, r20
    11a8:	8c 93       	st	X, r24
    11aa:	83 c0       	rjmp	.+262    	; 0x12b2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	a1 f4       	brne	.+40     	; 0x11da <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    11b2:	a8 e3       	ldi	r26, 0x38	; 56
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e8 e3       	ldi	r30, 0x38	; 56
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <GPIO_writePin+0xe4>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <GPIO_writePin+0xe0>
    11d4:	84 2b       	or	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	6c c0       	rjmp	.+216    	; 0x12b2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    11da:	a8 e3       	ldi	r26, 0x38	; 56
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e8 e3       	ldi	r30, 0x38	; 56
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <GPIO_writePin+0x10c>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <GPIO_writePin+0x108>
    11fc:	80 95       	com	r24
    11fe:	84 23       	and	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	57 c0       	rjmp	.+174    	; 0x12b2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	a1 f4       	brne	.+40     	; 0x1232 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    120a:	a5 e3       	ldi	r26, 0x35	; 53
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e5 e3       	ldi	r30, 0x35	; 53
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <GPIO_writePin+0x13c>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <GPIO_writePin+0x138>
    122c:	84 2b       	or	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	40 c0       	rjmp	.+128    	; 0x12b2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1232:	a5 e3       	ldi	r26, 0x35	; 53
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e5 e3       	ldi	r30, 0x35	; 53
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <GPIO_writePin+0x164>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <GPIO_writePin+0x160>
    1254:	80 95       	com	r24
    1256:	84 23       	and	r24, r20
    1258:	8c 93       	st	X, r24
    125a:	2b c0       	rjmp	.+86     	; 0x12b2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	a1 f4       	brne	.+40     	; 0x128a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1262:	a2 e3       	ldi	r26, 0x32	; 50
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e2 e3       	ldi	r30, 0x32	; 50
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <GPIO_writePin+0x194>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <GPIO_writePin+0x190>
    1284:	84 2b       	or	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	14 c0       	rjmp	.+40     	; 0x12b2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    128a:	a2 e3       	ldi	r26, 0x32	; 50
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e2 e3       	ldi	r30, 0x32	; 50
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	02 2e       	mov	r0, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <GPIO_writePin+0x1bc>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0a 94       	dec	r0
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <GPIO_writePin+0x1b8>
    12ac:	80 95       	com	r24
    12ae:	84 23       	and	r24, r20
    12b0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <GPIO_readPin+0x6>
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <GPIO_readPin+0x8>
    12ca:	0f 92       	push	r0
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	8a 83       	std	Y+2, r24	; 0x02
    12d2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    12d4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	88 30       	cpi	r24, 0x08	; 8
    12da:	08 f0       	brcs	.+2      	; 0x12de <GPIO_readPin+0x1c>
    12dc:	84 c0       	rjmp	.+264    	; 0x13e6 <GPIO_readPin+0x124>
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	84 30       	cpi	r24, 0x04	; 4
    12e2:	08 f0       	brcs	.+2      	; 0x12e6 <GPIO_readPin+0x24>
    12e4:	80 c0       	rjmp	.+256    	; 0x13e6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	3d 83       	std	Y+5, r19	; 0x05
    12ee:	2c 83       	std	Y+4, r18	; 0x04
    12f0:	4c 81       	ldd	r20, Y+4	; 0x04
    12f2:	5d 81       	ldd	r21, Y+5	; 0x05
    12f4:	41 30       	cpi	r20, 0x01	; 1
    12f6:	51 05       	cpc	r21, r1
    12f8:	79 f1       	breq	.+94     	; 0x1358 <GPIO_readPin+0x96>
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	9d 81       	ldd	r25, Y+5	; 0x05
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	91 05       	cpc	r25, r1
    1302:	34 f4       	brge	.+12     	; 0x1310 <GPIO_readPin+0x4e>
    1304:	2c 81       	ldd	r18, Y+4	; 0x04
    1306:	3d 81       	ldd	r19, Y+5	; 0x05
    1308:	21 15       	cp	r18, r1
    130a:	31 05       	cpc	r19, r1
    130c:	69 f0       	breq	.+26     	; 0x1328 <GPIO_readPin+0x66>
    130e:	6b c0       	rjmp	.+214    	; 0x13e6 <GPIO_readPin+0x124>
    1310:	4c 81       	ldd	r20, Y+4	; 0x04
    1312:	5d 81       	ldd	r21, Y+5	; 0x05
    1314:	42 30       	cpi	r20, 0x02	; 2
    1316:	51 05       	cpc	r21, r1
    1318:	b9 f1       	breq	.+110    	; 0x1388 <GPIO_readPin+0xc6>
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	9d 81       	ldd	r25, Y+5	; 0x05
    131e:	83 30       	cpi	r24, 0x03	; 3
    1320:	91 05       	cpc	r25, r1
    1322:	09 f4       	brne	.+2      	; 0x1326 <GPIO_readPin+0x64>
    1324:	49 c0       	rjmp	.+146    	; 0x13b8 <GPIO_readPin+0xf6>
    1326:	5f c0       	rjmp	.+190    	; 0x13e6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1328:	e9 e3       	ldi	r30, 0x39	; 57
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	88 2f       	mov	r24, r24
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	a9 01       	movw	r20, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <GPIO_readPin+0x7e>
    133c:	55 95       	asr	r21
    133e:	47 95       	ror	r20
    1340:	8a 95       	dec	r24
    1342:	e2 f7       	brpl	.-8      	; 0x133c <GPIO_readPin+0x7a>
    1344:	ca 01       	movw	r24, r20
    1346:	81 70       	andi	r24, 0x01	; 1
    1348:	90 70       	andi	r25, 0x00	; 0
    134a:	88 23       	and	r24, r24
    134c:	19 f0       	breq	.+6      	; 0x1354 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	49 c0       	rjmp	.+146    	; 0x13e6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1354:	19 82       	std	Y+1, r1	; 0x01
    1356:	47 c0       	rjmp	.+142    	; 0x13e6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1358:	e6 e3       	ldi	r30, 0x36	; 54
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	88 2f       	mov	r24, r24
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	a9 01       	movw	r20, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <GPIO_readPin+0xae>
    136c:	55 95       	asr	r21
    136e:	47 95       	ror	r20
    1370:	8a 95       	dec	r24
    1372:	e2 f7       	brpl	.-8      	; 0x136c <GPIO_readPin+0xaa>
    1374:	ca 01       	movw	r24, r20
    1376:	81 70       	andi	r24, 0x01	; 1
    1378:	90 70       	andi	r25, 0x00	; 0
    137a:	88 23       	and	r24, r24
    137c:	19 f0       	breq	.+6      	; 0x1384 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	31 c0       	rjmp	.+98     	; 0x13e6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1384:	19 82       	std	Y+1, r1	; 0x01
    1386:	2f c0       	rjmp	.+94     	; 0x13e6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1388:	e3 e3       	ldi	r30, 0x33	; 51
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a9 01       	movw	r20, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <GPIO_readPin+0xde>
    139c:	55 95       	asr	r21
    139e:	47 95       	ror	r20
    13a0:	8a 95       	dec	r24
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <GPIO_readPin+0xda>
    13a4:	ca 01       	movw	r24, r20
    13a6:	81 70       	andi	r24, 0x01	; 1
    13a8:	90 70       	andi	r25, 0x00	; 0
    13aa:	88 23       	and	r24, r24
    13ac:	19 f0       	breq	.+6      	; 0x13b4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	19 c0       	rjmp	.+50     	; 0x13e6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13b4:	19 82       	std	Y+1, r1	; 0x01
    13b6:	17 c0       	rjmp	.+46     	; 0x13e6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    13b8:	e0 e3       	ldi	r30, 0x30	; 48
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	a9 01       	movw	r20, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <GPIO_readPin+0x10e>
    13cc:	55 95       	asr	r21
    13ce:	47 95       	ror	r20
    13d0:	8a 95       	dec	r24
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <GPIO_readPin+0x10a>
    13d4:	ca 01       	movw	r24, r20
    13d6:	81 70       	andi	r24, 0x01	; 1
    13d8:	90 70       	andi	r25, 0x00	; 0
    13da:	88 23       	and	r24, r24
    13dc:	19 f0       	breq	.+6      	; 0x13e4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13e4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <GPIO_setupPortDirection+0x6>
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <GPIO_setupPortDirection+0x8>
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	84 30       	cpi	r24, 0x04	; 4
    140c:	90 f5       	brcc	.+100    	; 0x1472 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	3c 83       	std	Y+4, r19	; 0x04
    1416:	2b 83       	std	Y+3, r18	; 0x03
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	91 05       	cpc	r25, r1
    1420:	d1 f0       	breq	.+52     	; 0x1456 <GPIO_setupPortDirection+0x5e>
    1422:	2b 81       	ldd	r18, Y+3	; 0x03
    1424:	3c 81       	ldd	r19, Y+4	; 0x04
    1426:	22 30       	cpi	r18, 0x02	; 2
    1428:	31 05       	cpc	r19, r1
    142a:	2c f4       	brge	.+10     	; 0x1436 <GPIO_setupPortDirection+0x3e>
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	61 f0       	breq	.+24     	; 0x144c <GPIO_setupPortDirection+0x54>
    1434:	1e c0       	rjmp	.+60     	; 0x1472 <GPIO_setupPortDirection+0x7a>
    1436:	2b 81       	ldd	r18, Y+3	; 0x03
    1438:	3c 81       	ldd	r19, Y+4	; 0x04
    143a:	22 30       	cpi	r18, 0x02	; 2
    143c:	31 05       	cpc	r19, r1
    143e:	81 f0       	breq	.+32     	; 0x1460 <GPIO_setupPortDirection+0x68>
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	9c 81       	ldd	r25, Y+4	; 0x04
    1444:	83 30       	cpi	r24, 0x03	; 3
    1446:	91 05       	cpc	r25, r1
    1448:	81 f0       	breq	.+32     	; 0x146a <GPIO_setupPortDirection+0x72>
    144a:	13 c0       	rjmp	.+38     	; 0x1472 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    144c:	ea e3       	ldi	r30, 0x3A	; 58
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	80 83       	st	Z, r24
    1454:	0e c0       	rjmp	.+28     	; 0x1472 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1456:	e7 e3       	ldi	r30, 0x37	; 55
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	80 83       	st	Z, r24
    145e:	09 c0       	rjmp	.+18     	; 0x1472 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1460:	e4 e3       	ldi	r30, 0x34	; 52
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	80 83       	st	Z, r24
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    146a:	e1 e3       	ldi	r30, 0x31	; 49
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	80 83       	st	Z, r24
			break;
		}
	}
}
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	00 d0       	rcall	.+0      	; 0x1486 <GPIO_writePort+0x6>
    1486:	00 d0       	rcall	.+0      	; 0x1488 <GPIO_writePort+0x8>
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	84 30       	cpi	r24, 0x04	; 4
    1494:	90 f5       	brcc	.+100    	; 0x14fa <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	3c 83       	std	Y+4, r19	; 0x04
    149e:	2b 83       	std	Y+3, r18	; 0x03
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	81 30       	cpi	r24, 0x01	; 1
    14a6:	91 05       	cpc	r25, r1
    14a8:	d1 f0       	breq	.+52     	; 0x14de <GPIO_writePort+0x5e>
    14aa:	2b 81       	ldd	r18, Y+3	; 0x03
    14ac:	3c 81       	ldd	r19, Y+4	; 0x04
    14ae:	22 30       	cpi	r18, 0x02	; 2
    14b0:	31 05       	cpc	r19, r1
    14b2:	2c f4       	brge	.+10     	; 0x14be <GPIO_writePort+0x3e>
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	61 f0       	breq	.+24     	; 0x14d4 <GPIO_writePort+0x54>
    14bc:	1e c0       	rjmp	.+60     	; 0x14fa <GPIO_writePort+0x7a>
    14be:	2b 81       	ldd	r18, Y+3	; 0x03
    14c0:	3c 81       	ldd	r19, Y+4	; 0x04
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	81 f0       	breq	.+32     	; 0x14e8 <GPIO_writePort+0x68>
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	83 30       	cpi	r24, 0x03	; 3
    14ce:	91 05       	cpc	r25, r1
    14d0:	81 f0       	breq	.+32     	; 0x14f2 <GPIO_writePort+0x72>
    14d2:	13 c0       	rjmp	.+38     	; 0x14fa <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    14d4:	eb e3       	ldi	r30, 0x3B	; 59
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	80 83       	st	Z, r24
    14dc:	0e c0       	rjmp	.+28     	; 0x14fa <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    14de:	e8 e3       	ldi	r30, 0x38	; 56
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	80 83       	st	Z, r24
    14e6:	09 c0       	rjmp	.+18     	; 0x14fa <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    14e8:	e5 e3       	ldi	r30, 0x35	; 53
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	80 83       	st	Z, r24
    14f0:	04 c0       	rjmp	.+8      	; 0x14fa <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    14f2:	e2 e3       	ldi	r30, 0x32	; 50
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	80 83       	st	Z, r24
			break;
		}
	}
}
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	00 d0       	rcall	.+0      	; 0x150e <GPIO_readPort+0x6>
    150e:	00 d0       	rcall	.+0      	; 0x1510 <GPIO_readPort+0x8>
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1516:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	84 30       	cpi	r24, 0x04	; 4
    151c:	90 f5       	brcc	.+100    	; 0x1582 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	3c 83       	std	Y+4, r19	; 0x04
    1526:	2b 83       	std	Y+3, r18	; 0x03
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	91 05       	cpc	r25, r1
    1530:	d1 f0       	breq	.+52     	; 0x1566 <GPIO_readPort+0x5e>
    1532:	2b 81       	ldd	r18, Y+3	; 0x03
    1534:	3c 81       	ldd	r19, Y+4	; 0x04
    1536:	22 30       	cpi	r18, 0x02	; 2
    1538:	31 05       	cpc	r19, r1
    153a:	2c f4       	brge	.+10     	; 0x1546 <GPIO_readPort+0x3e>
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	61 f0       	breq	.+24     	; 0x155c <GPIO_readPort+0x54>
    1544:	1e c0       	rjmp	.+60     	; 0x1582 <GPIO_readPort+0x7a>
    1546:	2b 81       	ldd	r18, Y+3	; 0x03
    1548:	3c 81       	ldd	r19, Y+4	; 0x04
    154a:	22 30       	cpi	r18, 0x02	; 2
    154c:	31 05       	cpc	r19, r1
    154e:	81 f0       	breq	.+32     	; 0x1570 <GPIO_readPort+0x68>
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	83 30       	cpi	r24, 0x03	; 3
    1556:	91 05       	cpc	r25, r1
    1558:	81 f0       	breq	.+32     	; 0x157a <GPIO_readPort+0x72>
    155a:	13 c0       	rjmp	.+38     	; 0x1582 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    155c:	e9 e3       	ldi	r30, 0x39	; 57
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	0e c0       	rjmp	.+28     	; 0x1582 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1566:	e6 e3       	ldi	r30, 0x36	; 54
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	09 c0       	rjmp	.+18     	; 0x1582 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1570:	e3 e3       	ldi	r30, 0x33	; 51
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	04 c0       	rjmp	.+8      	; 0x1582 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    157a:	e0 e3       	ldi	r30, 0x30	; 48
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1582:	89 81       	ldd	r24, Y+1	; 0x01
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <DcMotor_Init>:
 *******************************************************************************/
#include <avr/io.h>
#include "DC_Motor.h"

void DcMotor_Init(void)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    // Set IN1 and IN2 as output
    DC_MOTOR_DDR |= (1 << DC_MOTOR_IN1) | (1 << DC_MOTOR_IN2);
    159a:	a7 e3       	ldi	r26, 0x37	; 55
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e7 e3       	ldi	r30, 0x37	; 55
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	83 60       	ori	r24, 0x03	; 3
    15a6:	8c 93       	st	X, r24

    // Set PWM pin (OC0) as output
    PWM_PORT |= (1 << PWM_PIN);
    15a8:	a7 e3       	ldi	r26, 0x37	; 55
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e7 e3       	ldi	r30, 0x37	; 55
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	88 60       	ori	r24, 0x08	; 8
    15b4:	8c 93       	st	X, r24

    // Set Timer0 to Fast PWM mode, non-inverting
    TCCR0 = (1 << WGM00) | (1 << WGM01)   // Fast PWM Mode
    15b6:	e3 e5       	ldi	r30, 0x53	; 83
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	8d e6       	ldi	r24, 0x6D	; 109
    15bc:	80 83       	st	Z, r24
           | (1 << COM01)                 // Non-Inverting Mode
           | (1 << CS02) | (1 << CS00);   // Prescaler = 1024

    // Stop motor initially
    DC_MOTOR_PORT &= ~((1 << DC_MOTOR_IN1) | (1 << DC_MOTOR_IN2));
    15be:	a8 e3       	ldi	r26, 0x38	; 56
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e8 e3       	ldi	r30, 0x38	; 56
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	8c 7f       	andi	r24, 0xFC	; 252
    15ca:	8c 93       	st	X, r24
    OCR0 = 0; // 0% duty cycle
    15cc:	ec e5       	ldi	r30, 0x5C	; 92
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	10 82       	st	Z, r1
}
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	00 d0       	rcall	.+0      	; 0x15de <DcMotor_Rotate+0x6>
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <DcMotor_Rotate+0x8>
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	6a 83       	std	Y+2, r22	; 0x02

    if (speed > 100) speed = 100;
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	85 36       	cpi	r24, 0x65	; 101
    15ec:	10 f0       	brcs	.+4      	; 0x15f2 <DcMotor_Rotate+0x1a>
    15ee:	84 e6       	ldi	r24, 0x64	; 100
    15f0:	8a 83       	std	Y+2, r24	; 0x02

    // Convert % to 8-bit PWM value (0-255)
    OCR0 = (uint8)((speed * 255) / 100);
    15f2:	ec e5       	ldi	r30, 0x5C	; 92
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	48 2f       	mov	r20, r24
    15fa:	50 e0       	ldi	r21, 0x00	; 0
    15fc:	ca 01       	movw	r24, r20
    15fe:	9c 01       	movw	r18, r24
    1600:	22 0f       	add	r18, r18
    1602:	33 1f       	adc	r19, r19
    1604:	c9 01       	movw	r24, r18
    1606:	96 95       	lsr	r25
    1608:	98 2f       	mov	r25, r24
    160a:	88 27       	eor	r24, r24
    160c:	97 95       	ror	r25
    160e:	87 95       	ror	r24
    1610:	82 1b       	sub	r24, r18
    1612:	93 0b       	sbc	r25, r19
    1614:	84 0f       	add	r24, r20
    1616:	95 1f       	adc	r25, r21
    1618:	24 e6       	ldi	r18, 0x64	; 100
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	b9 01       	movw	r22, r18
    161e:	0e 94 26 13 	call	0x264c	; 0x264c <__divmodhi4>
    1622:	cb 01       	movw	r24, r22
    1624:	80 83       	st	Z, r24

    switch (state)
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	3c 83       	std	Y+4, r19	; 0x04
    162e:	2b 83       	std	Y+3, r18	; 0x03
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	91 05       	cpc	r25, r1
    1638:	31 f0       	breq	.+12     	; 0x1646 <DcMotor_Rotate+0x6e>
    163a:	2b 81       	ldd	r18, Y+3	; 0x03
    163c:	3c 81       	ldd	r19, Y+4	; 0x04
    163e:	22 30       	cpi	r18, 0x02	; 2
    1640:	31 05       	cpc	r19, r1
    1642:	81 f0       	breq	.+32     	; 0x1664 <DcMotor_Rotate+0x8c>
    1644:	1e c0       	rjmp	.+60     	; 0x1682 <DcMotor_Rotate+0xaa>
    {
        case CW:
            DC_MOTOR_PORT |= (1 << DC_MOTOR_IN1);
    1646:	a8 e3       	ldi	r26, 0x38	; 56
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e8 e3       	ldi	r30, 0x38	; 56
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	81 60       	ori	r24, 0x01	; 1
    1652:	8c 93       	st	X, r24
            DC_MOTOR_PORT &= ~(1 << DC_MOTOR_IN2);
    1654:	a8 e3       	ldi	r26, 0x38	; 56
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e8 e3       	ldi	r30, 0x38	; 56
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	8d 7f       	andi	r24, 0xFD	; 253
    1660:	8c 93       	st	X, r24
    1662:	16 c0       	rjmp	.+44     	; 0x1690 <DcMotor_Rotate+0xb8>
            break;
        case A_CW:
            DC_MOTOR_PORT |= (1 << DC_MOTOR_IN2);
    1664:	a8 e3       	ldi	r26, 0x38	; 56
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e8 e3       	ldi	r30, 0x38	; 56
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	82 60       	ori	r24, 0x02	; 2
    1670:	8c 93       	st	X, r24
            DC_MOTOR_PORT &= ~(1 << DC_MOTOR_IN1);
    1672:	a8 e3       	ldi	r26, 0x38	; 56
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e8 e3       	ldi	r30, 0x38	; 56
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	8e 7f       	andi	r24, 0xFE	; 254
    167e:	8c 93       	st	X, r24
    1680:	07 c0       	rjmp	.+14     	; 0x1690 <DcMotor_Rotate+0xb8>
            break;
        case STOP:
        default:
            DC_MOTOR_PORT &= ~((1 << DC_MOTOR_IN1) | (1 << DC_MOTOR_IN2));
    1682:	a8 e3       	ldi	r26, 0x38	; 56
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e8 e3       	ldi	r30, 0x38	; 56
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	8c 7f       	andi	r24, 0xFC	; 252
    168e:	8c 93       	st	X, r24
            break;
    }
}
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <FlameSensor_init>:
#include "FlameSensor.h"
#include "Buzzer.h"
#include "../COMMON/std_types.h"

void FlameSensor_init(void)
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    // Set the sensor pin as input
    FLAME_SENSOR_DDR &= ~(1 << FLAME_SENSOR_PIN);
    16a6:	a4 e3       	ldi	r26, 0x34	; 52
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e4 e3       	ldi	r30, 0x34	; 52
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	8b 7f       	andi	r24, 0xFB	; 251
    16b2:	8c 93       	st	X, r24
}
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <FlameSensor_getValue>:

uint8 FlameSensor_getValue(void)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	0f 92       	push	r0
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    // Return the logic level from the sensor pin (0 or 1)
    return (FLAME_SENSOR_PIN_REG & (1 << FLAME_SENSOR_PIN)) ? LOGIC_HIGH : LOGIC_LOW;
    16c4:	e3 e3       	ldi	r30, 0x33	; 51
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	88 2f       	mov	r24, r24
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	84 70       	andi	r24, 0x04	; 4
    16d0:	90 70       	andi	r25, 0x00	; 0
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	19 f0       	breq	.+6      	; 0x16dc <FlameSensor_getValue+0x22>
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	01 c0       	rjmp	.+2      	; 0x16de <FlameSensor_getValue+0x24>
    16dc:	19 82       	std	Y+1, r1	; 0x01
    16de:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <LDR_getLightIntensity>:
#include "../MCAL/adc.h"

#define ADC_MAX_VALUE          1023

uint16 LDR_getLightIntensity(void)
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	2a 97       	sbiw	r28, 0x0a	; 10
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	de bf       	out	0x3e, r29	; 62
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	cd bf       	out	0x3d, r28	; 61
    uint16 adc_value = ADC_readChannel(LDR_SENSOR_CHANNEL_ID);
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	0e 94 54 07 	call	0xea8	; 0xea8 <ADC_readChannel>
    1702:	9a 87       	std	Y+10, r25	; 0x0a
    1704:	89 87       	std	Y+9, r24	; 0x09
    /*after reading the adc channel u have to make the conversion of the adc bits value to a real precentage 3lshan kda*/
    /*ht3ml el 7sba ely t7t dy*/
    float voltage = ((float)adc_value / ADC_MAX_VALUE) * ADC_REF_VOLT_VALUE;
    1706:	89 85       	ldd	r24, Y+9	; 0x09
    1708:	9a 85       	ldd	r25, Y+10	; 0x0a
    170a:	cc 01       	movw	r24, r24
    170c:	a0 e0       	ldi	r26, 0x00	; 0
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	bc 01       	movw	r22, r24
    1712:	cd 01       	movw	r24, r26
    1714:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	bc 01       	movw	r22, r24
    171e:	cd 01       	movw	r24, r26
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 ec       	ldi	r19, 0xC0	; 192
    1724:	4f e7       	ldi	r20, 0x7F	; 127
    1726:	54 e4       	ldi	r21, 0x44	; 68
    1728:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	bc 01       	movw	r22, r24
    1732:	cd 01       	movw	r24, r26
    1734:	2a e0       	ldi	r18, 0x0A	; 10
    1736:	37 ed       	ldi	r19, 0xD7	; 215
    1738:	43 e2       	ldi	r20, 0x23	; 35
    173a:	50 e4       	ldi	r21, 0x40	; 64
    173c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	8d 83       	std	Y+5, r24	; 0x05
    1746:	9e 83       	std	Y+6, r25	; 0x06
    1748:	af 83       	std	Y+7, r26	; 0x07
    174a:	b8 87       	std	Y+8, r27	; 0x08
    float light_percentage = (1 - (voltage / LDR_SENSOR_MAX_VOLT_VALUE)) * LDR_SENSOR_MAX_LIGHT_INTENSITY;
    174c:	6d 81       	ldd	r22, Y+5	; 0x05
    174e:	7e 81       	ldd	r23, Y+6	; 0x06
    1750:	8f 81       	ldd	r24, Y+7	; 0x07
    1752:	98 85       	ldd	r25, Y+8	; 0x08
    1754:	2a e0       	ldi	r18, 0x0A	; 10
    1756:	37 ed       	ldi	r19, 0xD7	; 215
    1758:	43 e2       	ldi	r20, 0x23	; 35
    175a:	50 ec       	ldi	r21, 0xC0	; 192
    175c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	bc 01       	movw	r22, r24
    1766:	cd 01       	movw	r24, r26
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e8       	ldi	r20, 0x80	; 128
    176e:	5f e3       	ldi	r21, 0x3F	; 63
    1770:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	bc 01       	movw	r22, r24
    177a:	cd 01       	movw	r24, r26
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	48 ec       	ldi	r20, 0xC8	; 200
    1782:	52 e4       	ldi	r21, 0x42	; 66
    1784:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	9a 83       	std	Y+2, r25	; 0x02
    1790:	ab 83       	std	Y+3, r26	; 0x03
    1792:	bc 83       	std	Y+4, r27	; 0x04


    if (light_percentage > 100) light_percentage = 100;
    1794:	69 81       	ldd	r22, Y+1	; 0x01
    1796:	7a 81       	ldd	r23, Y+2	; 0x02
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	9c 81       	ldd	r25, Y+4	; 0x04
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	48 ec       	ldi	r20, 0xC8	; 200
    17a2:	52 e4       	ldi	r21, 0x42	; 66
    17a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17a8:	18 16       	cp	r1, r24
    17aa:	4c f4       	brge	.+18     	; 0x17be <LDR_getLightIntensity+0xd6>
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	a8 ec       	ldi	r26, 0xC8	; 200
    17b2:	b2 e4       	ldi	r27, 0x42	; 66
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	9a 83       	std	Y+2, r25	; 0x02
    17b8:	ab 83       	std	Y+3, r26	; 0x03
    17ba:	bc 83       	std	Y+4, r27	; 0x04
    17bc:	14 c0       	rjmp	.+40     	; 0x17e6 <LDR_getLightIntensity+0xfe>
    else if (light_percentage < 0) light_percentage = 0;
    17be:	69 81       	ldd	r22, Y+1	; 0x01
    17c0:	7a 81       	ldd	r23, Y+2	; 0x02
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	9c 81       	ldd	r25, Y+4	; 0x04
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	50 e0       	ldi	r21, 0x00	; 0
    17ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17d2:	88 23       	and	r24, r24
    17d4:	44 f4       	brge	.+16     	; 0x17e6 <LDR_getLightIntensity+0xfe>
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a0 e0       	ldi	r26, 0x00	; 0
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	9a 83       	std	Y+2, r25	; 0x02
    17e2:	ab 83       	std	Y+3, r26	; 0x03
    17e4:	bc 83       	std	Y+4, r27	; 0x04

    return (uint16)light_percentage;
    17e6:	69 81       	ldd	r22, Y+1	; 0x01
    17e8:	7a 81       	ldd	r23, Y+2	; 0x02
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	9c 81       	ldd	r25, Y+4	; 0x04
    17ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
}
    17f6:	2a 96       	adiw	r28, 0x0a	; 10
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <LEDS_init>:
#include "LED.h"
#include "../COMMON/common_macros.h"
#include<avr/io.h>
#include"../MCAL/gpio.h"
void LEDS_init(void)
{
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
	   /* Red */
	    GPIO_setupPinDirection(RED_LED_PORT, RED_LED_PIN , PIN_OUTPUT);
    1810:	e8 e3       	ldi	r30, 0x38	; 56
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	65 e0       	ldi	r22, 0x05	; 5
    1818:	41 e0       	ldi	r20, 0x01	; 1
    181a:	0e 94 8b 07 	call	0xf16	; 0xf16 <GPIO_setupPinDirection>
	    LED_off(LED_RED);
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LED_off>

	    /* Green */
	    GPIO_setupPinDirection(GREEN_LED_PORT, GREEN_LED_PIN, PIN_OUTPUT);
    1824:	e8 e3       	ldi	r30, 0x38	; 56
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	66 e0       	ldi	r22, 0x06	; 6
    182c:	41 e0       	ldi	r20, 0x01	; 1
    182e:	0e 94 8b 07 	call	0xf16	; 0xf16 <GPIO_setupPinDirection>
	    LED_off(LED_GREEN);
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LED_off>

	    /* Blue */
	    GPIO_setupPinDirection(BLUE_LED_PORT, BLUE_LED_PIN, PIN_OUTPUT);
    1838:	e8 e3       	ldi	r30, 0x38	; 56
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	67 e0       	ldi	r22, 0x07	; 7
    1840:	41 e0       	ldi	r20, 0x01	; 1
    1842:	0e 94 8b 07 	call	0xf16	; 0xf16 <GPIO_setupPinDirection>
	    LED_off(LED_BLUE);
    1846:	82 e0       	ldi	r24, 0x02	; 2
    1848:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LED_off>
}
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <LED_on>:


void LED_on(LED_ID id)
{  switch (id) {
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	00 d0       	rcall	.+0      	; 0x1858 <LED_on+0x6>
    1858:	0f 92       	push	r0
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	3b 83       	std	Y+3, r19	; 0x03
    1868:	2a 83       	std	Y+2, r18	; 0x02
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	9b 81       	ldd	r25, Y+3	; 0x03
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	91 05       	cpc	r25, r1
    1872:	89 f0       	breq	.+34     	; 0x1896 <LED_on+0x44>
    1874:	2a 81       	ldd	r18, Y+2	; 0x02
    1876:	3b 81       	ldd	r19, Y+3	; 0x03
    1878:	22 30       	cpi	r18, 0x02	; 2
    187a:	31 05       	cpc	r19, r1
    187c:	a1 f0       	breq	.+40     	; 0x18a6 <LED_on+0x54>
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	9b 81       	ldd	r25, Y+3	; 0x03
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	b9 f4       	brne	.+46     	; 0x18b4 <LED_on+0x62>
case LED_RED:
    #if (RED_LED_LOGIC == POSITIVE_LOGIC)
        SET_BIT(RED_LED_PORT, RED_LED_PIN);
    1886:	a8 e3       	ldi	r26, 0x38	; 56
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e8 e3       	ldi	r30, 0x38	; 56
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	80 62       	ori	r24, 0x20	; 32
    1892:	8c 93       	st	X, r24
    1894:	0f c0       	rjmp	.+30     	; 0x18b4 <LED_on+0x62>
    #endif
    break;

case LED_GREEN:
    #if (GREEN_LED_LOGIC == POSITIVE_LOGIC)
        SET_BIT(GREEN_LED_PORT, GREEN_LED_PIN);
    1896:	a8 e3       	ldi	r26, 0x38	; 56
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e8 e3       	ldi	r30, 0x38	; 56
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	80 64       	ori	r24, 0x40	; 64
    18a2:	8c 93       	st	X, r24
    18a4:	07 c0       	rjmp	.+14     	; 0x18b4 <LED_on+0x62>
    #endif
    break;

case LED_BLUE:
    #if (BLUE_LED_LOGIC == POSITIVE_LOGIC)
        SET_BIT(BLUE_LED_PORT, BLUE_LED_PIN);
    18a6:	a8 e3       	ldi	r26, 0x38	; 56
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e8 e3       	ldi	r30, 0x38	; 56
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	80 68       	ori	r24, 0x80	; 128
    18b2:	8c 93       	st	X, r24
        CLEAR_BIT(BLUE_LED_PORT, BLUE_LED_PIN);
    #endif
    break;
}

}
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <LED_off>:

void LED_off(LED_ID id)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <LED_off+0x6>
    18c6:	0f 92       	push	r0
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	89 83       	std	Y+1, r24	; 0x01
    switch (id) {
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	3b 83       	std	Y+3, r19	; 0x03
    18d6:	2a 83       	std	Y+2, r18	; 0x02
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	9b 81       	ldd	r25, Y+3	; 0x03
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	91 05       	cpc	r25, r1
    18e0:	89 f0       	breq	.+34     	; 0x1904 <LED_off+0x44>
    18e2:	2a 81       	ldd	r18, Y+2	; 0x02
    18e4:	3b 81       	ldd	r19, Y+3	; 0x03
    18e6:	22 30       	cpi	r18, 0x02	; 2
    18e8:	31 05       	cpc	r19, r1
    18ea:	a1 f0       	breq	.+40     	; 0x1914 <LED_off+0x54>
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	9b 81       	ldd	r25, Y+3	; 0x03
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	b9 f4       	brne	.+46     	; 0x1922 <LED_off+0x62>
        case LED_RED:
            #if (RED_LED_LOGIC == POSITIVE_LOGIC)
                CLEAR_BIT(RED_LED_PORT, RED_LED_PIN);
    18f4:	a8 e3       	ldi	r26, 0x38	; 56
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e8 e3       	ldi	r30, 0x38	; 56
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	8f 7d       	andi	r24, 0xDF	; 223
    1900:	8c 93       	st	X, r24
    1902:	0f c0       	rjmp	.+30     	; 0x1922 <LED_off+0x62>
            #endif
            break;

        case LED_GREEN:
            #if (GREEN_LED_LOGIC == POSITIVE_LOGIC)
                CLEAR_BIT(GREEN_LED_PORT, GREEN_LED_PIN);
    1904:	a8 e3       	ldi	r26, 0x38	; 56
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e8 e3       	ldi	r30, 0x38	; 56
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	8f 7b       	andi	r24, 0xBF	; 191
    1910:	8c 93       	st	X, r24
    1912:	07 c0       	rjmp	.+14     	; 0x1922 <LED_off+0x62>
            #endif
            break;

        case LED_BLUE:
            #if (BLUE_LED_LOGIC == POSITIVE_LOGIC)
                CLEAR_BIT(BLUE_LED_PORT, BLUE_LED_PIN);
    1914:	a8 e3       	ldi	r26, 0x38	; 56
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e8 e3       	ldi	r30, 0x38	; 56
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	8f 77       	andi	r24, 0x7F	; 127
    1920:	8c 93       	st	X, r24
            #else
                SET_BIT(BLUE_LED_PORT, BLUE_LED_PIN);
            #endif
            break;
    }
}
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <Buzzer_init>:
 *
 *******************************************************************************/
#include "buzzer.h"

void Buzzer_init(void)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    BUZZER_DDR |= (1 << BUZZER_PIN);   // Set buzzer pin as output
    1936:	a1 e3       	ldi	r26, 0x31	; 49
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e1 e3       	ldi	r30, 0x31	; 49
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	88 60       	ori	r24, 0x08	; 8
    1942:	8c 93       	st	X, r24
    BUZZER_PORT &= ~(1 << BUZZER_PIN); // Turn buzzer off initially
    1944:	a2 e3       	ldi	r26, 0x32	; 50
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e2 e3       	ldi	r30, 0x32	; 50
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	87 7f       	andi	r24, 0xF7	; 247
    1950:	8c 93       	st	X, r24
}
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <Buzzer_on>:

void Buzzer_on(void)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    BUZZER_PORT |= (1 << BUZZER_PIN); // Set pin high
    1960:	a2 e3       	ldi	r26, 0x32	; 50
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e2 e3       	ldi	r30, 0x32	; 50
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	88 60       	ori	r24, 0x08	; 8
    196c:	8c 93       	st	X, r24
}
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <Buzzer_off>:

void Buzzer_off(void)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    BUZZER_PORT &= ~(1 << BUZZER_PIN); // Set pin low
    197c:	a2 e3       	ldi	r26, 0x32	; 50
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e2 e3       	ldi	r30, 0x32	; 50
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	87 7f       	andi	r24, 0xF7	; 247
    1988:	8c 93       	st	X, r24
}
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	2e 97       	sbiw	r28, 0x0e	; 14
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	0e 94 8b 07 	call	0xf16	; 0xf16 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    19ae:	83 e0       	ldi	r24, 0x03	; 3
    19b0:	61 e0       	ldi	r22, 0x01	; 1
    19b2:	41 e0       	ldi	r20, 0x01	; 1
    19b4:	0e 94 8b 07 	call	0xf16	; 0xf16 <GPIO_setupPinDirection>
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	a0 ea       	ldi	r26, 0xA0	; 160
    19be:	b1 e4       	ldi	r27, 0x41	; 65
    19c0:	8b 87       	std	Y+11, r24	; 0x0b
    19c2:	9c 87       	std	Y+12, r25	; 0x0c
    19c4:	ad 87       	std	Y+13, r26	; 0x0d
    19c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    19cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	4a e7       	ldi	r20, 0x7A	; 122
    19d6:	55 e4       	ldi	r21, 0x45	; 69
    19d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	8f 83       	std	Y+7, r24	; 0x07
    19e2:	98 87       	std	Y+8, r25	; 0x08
    19e4:	a9 87       	std	Y+9, r26	; 0x09
    19e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19e8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ea:	78 85       	ldd	r23, Y+8	; 0x08
    19ec:	89 85       	ldd	r24, Y+9	; 0x09
    19ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e8       	ldi	r20, 0x80	; 128
    19f6:	5f e3       	ldi	r21, 0x3F	; 63
    19f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19fc:	88 23       	and	r24, r24
    19fe:	2c f4       	brge	.+10     	; 0x1a0a <LCD_init+0x7a>
		__ticks = 1;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	9e 83       	std	Y+6, r25	; 0x06
    1a06:	8d 83       	std	Y+5, r24	; 0x05
    1a08:	3f c0       	rjmp	.+126    	; 0x1a88 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0c:	78 85       	ldd	r23, Y+8	; 0x08
    1a0e:	89 85       	ldd	r24, Y+9	; 0x09
    1a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	3f ef       	ldi	r19, 0xFF	; 255
    1a16:	4f e7       	ldi	r20, 0x7F	; 127
    1a18:	57 e4       	ldi	r21, 0x47	; 71
    1a1a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a1e:	18 16       	cp	r1, r24
    1a20:	4c f5       	brge	.+82     	; 0x1a74 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e2       	ldi	r20, 0x20	; 32
    1a30:	51 e4       	ldi	r21, 0x41	; 65
    1a32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	bc 01       	movw	r22, r24
    1a3c:	cd 01       	movw	r24, r26
    1a3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	9e 83       	std	Y+6, r25	; 0x06
    1a48:	8d 83       	std	Y+5, r24	; 0x05
    1a4a:	0f c0       	rjmp	.+30     	; 0x1a6a <LCD_init+0xda>
    1a4c:	80 e9       	ldi	r24, 0x90	; 144
    1a4e:	91 e0       	ldi	r25, 0x01	; 1
    1a50:	9c 83       	std	Y+4, r25	; 0x04
    1a52:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	9c 81       	ldd	r25, Y+4	; 0x04
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <LCD_init+0xc8>
    1a5c:	9c 83       	std	Y+4, r25	; 0x04
    1a5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a60:	8d 81       	ldd	r24, Y+5	; 0x05
    1a62:	9e 81       	ldd	r25, Y+6	; 0x06
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	9e 83       	std	Y+6, r25	; 0x06
    1a68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	69 f7       	brne	.-38     	; 0x1a4c <LCD_init+0xbc>
    1a72:	14 c0       	rjmp	.+40     	; 0x1a9c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a74:	6f 81       	ldd	r22, Y+7	; 0x07
    1a76:	78 85       	ldd	r23, Y+8	; 0x08
    1a78:	89 85       	ldd	r24, Y+9	; 0x09
    1a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	9e 83       	std	Y+6, r25	; 0x06
    1a86:	8d 83       	std	Y+5, r24	; 0x05
    1a88:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8c:	9a 83       	std	Y+2, r25	; 0x02
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	f1 f7       	brne	.-4      	; 0x1a94 <LCD_init+0x104>
    1a98:	9a 83       	std	Y+2, r25	; 0x02
    1a9a:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1a9c:	82 e0       	ldi	r24, 0x02	; 2
    1a9e:	6f ef       	ldi	r22, 0xFF	; 255
    1aa0:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1aa4:	88 e3       	ldi	r24, 0x38	; 56
    1aa6:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1aaa:	8c e0       	ldi	r24, 0x0C	; 12
    1aac:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LCD_sendCommand>
}
    1ab6:	2e 96       	adiw	r28, 0x0e	; 14
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	e9 97       	sbiw	r28, 0x39	; 57
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1ade:	83 e0       	ldi	r24, 0x03	; 3
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	40 e0       	ldi	r20, 0x00	; 0
    1ae4:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a0 e8       	ldi	r26, 0x80	; 128
    1aee:	bf e3       	ldi	r27, 0x3F	; 63
    1af0:	8d ab       	std	Y+53, r24	; 0x35
    1af2:	9e ab       	std	Y+54, r25	; 0x36
    1af4:	af ab       	std	Y+55, r26	; 0x37
    1af6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af8:	6d a9       	ldd	r22, Y+53	; 0x35
    1afa:	7e a9       	ldd	r23, Y+54	; 0x36
    1afc:	8f a9       	ldd	r24, Y+55	; 0x37
    1afe:	98 ad       	ldd	r25, Y+56	; 0x38
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4a e7       	ldi	r20, 0x7A	; 122
    1b06:	55 e4       	ldi	r21, 0x45	; 69
    1b08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	89 ab       	std	Y+49, r24	; 0x31
    1b12:	9a ab       	std	Y+50, r25	; 0x32
    1b14:	ab ab       	std	Y+51, r26	; 0x33
    1b16:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b18:	69 a9       	ldd	r22, Y+49	; 0x31
    1b1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e8       	ldi	r20, 0x80	; 128
    1b26:	5f e3       	ldi	r21, 0x3F	; 63
    1b28:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b2c:	88 23       	and	r24, r24
    1b2e:	2c f4       	brge	.+10     	; 0x1b3a <LCD_sendCommand+0x72>
		__ticks = 1;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	98 ab       	std	Y+48, r25	; 0x30
    1b36:	8f a7       	std	Y+47, r24	; 0x2f
    1b38:	3f c0       	rjmp	.+126    	; 0x1bb8 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1b3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b40:	9c a9       	ldd	r25, Y+52	; 0x34
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	3f ef       	ldi	r19, 0xFF	; 255
    1b46:	4f e7       	ldi	r20, 0x7F	; 127
    1b48:	57 e4       	ldi	r21, 0x47	; 71
    1b4a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b4e:	18 16       	cp	r1, r24
    1b50:	4c f5       	brge	.+82     	; 0x1ba4 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b52:	6d a9       	ldd	r22, Y+53	; 0x35
    1b54:	7e a9       	ldd	r23, Y+54	; 0x36
    1b56:	8f a9       	ldd	r24, Y+55	; 0x37
    1b58:	98 ad       	ldd	r25, Y+56	; 0x38
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e2       	ldi	r20, 0x20	; 32
    1b60:	51 e4       	ldi	r21, 0x41	; 65
    1b62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	cd 01       	movw	r24, r26
    1b6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	98 ab       	std	Y+48, r25	; 0x30
    1b78:	8f a7       	std	Y+47, r24	; 0x2f
    1b7a:	0f c0       	rjmp	.+30     	; 0x1b9a <LCD_sendCommand+0xd2>
    1b7c:	80 e9       	ldi	r24, 0x90	; 144
    1b7e:	91 e0       	ldi	r25, 0x01	; 1
    1b80:	9e a7       	std	Y+46, r25	; 0x2e
    1b82:	8d a7       	std	Y+45, r24	; 0x2d
    1b84:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b86:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <LCD_sendCommand+0xc0>
    1b8c:	9e a7       	std	Y+46, r25	; 0x2e
    1b8e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b90:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b92:	98 a9       	ldd	r25, Y+48	; 0x30
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	98 ab       	std	Y+48, r25	; 0x30
    1b98:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	69 f7       	brne	.-38     	; 0x1b7c <LCD_sendCommand+0xb4>
    1ba2:	14 c0       	rjmp	.+40     	; 0x1bcc <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba8:	8b a9       	ldd	r24, Y+51	; 0x33
    1baa:	9c a9       	ldd	r25, Y+52	; 0x34
    1bac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	98 ab       	std	Y+48, r25	; 0x30
    1bb6:	8f a7       	std	Y+47, r24	; 0x2f
    1bb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bba:	98 a9       	ldd	r25, Y+48	; 0x30
    1bbc:	9c a7       	std	Y+44, r25	; 0x2c
    1bbe:	8b a7       	std	Y+43, r24	; 0x2b
    1bc0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bc2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <LCD_sendCommand+0xfc>
    1bc8:	9c a7       	std	Y+44, r25	; 0x2c
    1bca:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1bcc:	83 e0       	ldi	r24, 0x03	; 3
    1bce:	61 e0       	ldi	r22, 0x01	; 1
    1bd0:	41 e0       	ldi	r20, 0x01	; 1
    1bd2:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	a0 e8       	ldi	r26, 0x80	; 128
    1bdc:	bf e3       	ldi	r27, 0x3F	; 63
    1bde:	8f a3       	std	Y+39, r24	; 0x27
    1be0:	98 a7       	std	Y+40, r25	; 0x28
    1be2:	a9 a7       	std	Y+41, r26	; 0x29
    1be4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be6:	6f a1       	ldd	r22, Y+39	; 0x27
    1be8:	78 a5       	ldd	r23, Y+40	; 0x28
    1bea:	89 a5       	ldd	r24, Y+41	; 0x29
    1bec:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4a e7       	ldi	r20, 0x7A	; 122
    1bf4:	55 e4       	ldi	r21, 0x45	; 69
    1bf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8b a3       	std	Y+35, r24	; 0x23
    1c00:	9c a3       	std	Y+36, r25	; 0x24
    1c02:	ad a3       	std	Y+37, r26	; 0x25
    1c04:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c06:	6b a1       	ldd	r22, Y+35	; 0x23
    1c08:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <LCD_sendCommand+0x160>
		__ticks = 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9a a3       	std	Y+34, r25	; 0x22
    1c24:	89 a3       	std	Y+33, r24	; 0x21
    1c26:	3f c0       	rjmp	.+126    	; 0x1ca6 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1c28:	6b a1       	ldd	r22, Y+35	; 0x23
    1c2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	3f ef       	ldi	r19, 0xFF	; 255
    1c34:	4f e7       	ldi	r20, 0x7F	; 127
    1c36:	57 e4       	ldi	r21, 0x47	; 71
    1c38:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	4c f5       	brge	.+82     	; 0x1c92 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c40:	6f a1       	ldd	r22, Y+39	; 0x27
    1c42:	78 a5       	ldd	r23, Y+40	; 0x28
    1c44:	89 a5       	ldd	r24, Y+41	; 0x29
    1c46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	51 e4       	ldi	r21, 0x41	; 65
    1c50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	bc 01       	movw	r22, r24
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9a a3       	std	Y+34, r25	; 0x22
    1c66:	89 a3       	std	Y+33, r24	; 0x21
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <LCD_sendCommand+0x1c0>
    1c6a:	80 e9       	ldi	r24, 0x90	; 144
    1c6c:	91 e0       	ldi	r25, 0x01	; 1
    1c6e:	98 a3       	std	Y+32, r25	; 0x20
    1c70:	8f 8f       	std	Y+31, r24	; 0x1f
    1c72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c74:	98 a1       	ldd	r25, Y+32	; 0x20
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <LCD_sendCommand+0x1ae>
    1c7a:	98 a3       	std	Y+32, r25	; 0x20
    1c7c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c80:	9a a1       	ldd	r25, Y+34	; 0x22
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	9a a3       	std	Y+34, r25	; 0x22
    1c86:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c88:	89 a1       	ldd	r24, Y+33	; 0x21
    1c8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	69 f7       	brne	.-38     	; 0x1c6a <LCD_sendCommand+0x1a2>
    1c90:	14 c0       	rjmp	.+40     	; 0x1cba <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c92:	6b a1       	ldd	r22, Y+35	; 0x23
    1c94:	7c a1       	ldd	r23, Y+36	; 0x24
    1c96:	8d a1       	ldd	r24, Y+37	; 0x25
    1c98:	9e a1       	ldd	r25, Y+38	; 0x26
    1c9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9a a3       	std	Y+34, r25	; 0x22
    1ca4:	89 a3       	std	Y+33, r24	; 0x21
    1ca6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca8:	9a a1       	ldd	r25, Y+34	; 0x22
    1caa:	9e 8f       	std	Y+30, r25	; 0x1e
    1cac:	8d 8f       	std	Y+29, r24	; 0x1d
    1cae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <LCD_sendCommand+0x1ea>
    1cb6:	9e 8f       	std	Y+30, r25	; 0x1e
    1cb8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1cba:	82 e0       	ldi	r24, 0x02	; 2
    1cbc:	69 ad       	ldd	r22, Y+57	; 0x39
    1cbe:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_writePort>
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	a0 e8       	ldi	r26, 0x80	; 128
    1cc8:	bf e3       	ldi	r27, 0x3F	; 63
    1cca:	89 8f       	std	Y+25, r24	; 0x19
    1ccc:	9a 8f       	std	Y+26, r25	; 0x1a
    1cce:	ab 8f       	std	Y+27, r26	; 0x1b
    1cd0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd2:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	4a e7       	ldi	r20, 0x7A	; 122
    1ce0:	55 e4       	ldi	r21, 0x45	; 69
    1ce2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	8d 8b       	std	Y+21, r24	; 0x15
    1cec:	9e 8b       	std	Y+22, r25	; 0x16
    1cee:	af 8b       	std	Y+23, r26	; 0x17
    1cf0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cf2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e8       	ldi	r20, 0x80	; 128
    1d00:	5f e3       	ldi	r21, 0x3F	; 63
    1d02:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d06:	88 23       	and	r24, r24
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9c 8b       	std	Y+20, r25	; 0x14
    1d10:	8b 8b       	std	Y+19, r24	; 0x13
    1d12:	3f c0       	rjmp	.+126    	; 0x1d92 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1d14:	6d 89       	ldd	r22, Y+21	; 0x15
    1d16:	7e 89       	ldd	r23, Y+22	; 0x16
    1d18:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	3f ef       	ldi	r19, 0xFF	; 255
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	57 e4       	ldi	r21, 0x47	; 71
    1d24:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	4c f5       	brge	.+82     	; 0x1d7e <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9c 8b       	std	Y+20, r25	; 0x14
    1d52:	8b 8b       	std	Y+19, r24	; 0x13
    1d54:	0f c0       	rjmp	.+30     	; 0x1d74 <LCD_sendCommand+0x2ac>
    1d56:	80 e9       	ldi	r24, 0x90	; 144
    1d58:	91 e0       	ldi	r25, 0x01	; 1
    1d5a:	9a 8b       	std	Y+18, r25	; 0x12
    1d5c:	89 8b       	std	Y+17, r24	; 0x11
    1d5e:	89 89       	ldd	r24, Y+17	; 0x11
    1d60:	9a 89       	ldd	r25, Y+18	; 0x12
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <LCD_sendCommand+0x29a>
    1d66:	9a 8b       	std	Y+18, r25	; 0x12
    1d68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	9c 8b       	std	Y+20, r25	; 0x14
    1d72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d74:	8b 89       	ldd	r24, Y+19	; 0x13
    1d76:	9c 89       	ldd	r25, Y+20	; 0x14
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	69 f7       	brne	.-38     	; 0x1d56 <LCD_sendCommand+0x28e>
    1d7c:	14 c0       	rjmp	.+40     	; 0x1da6 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d80:	7e 89       	ldd	r23, Y+22	; 0x16
    1d82:	8f 89       	ldd	r24, Y+23	; 0x17
    1d84:	98 8d       	ldd	r25, Y+24	; 0x18
    1d86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9c 8b       	std	Y+20, r25	; 0x14
    1d90:	8b 8b       	std	Y+19, r24	; 0x13
    1d92:	8b 89       	ldd	r24, Y+19	; 0x13
    1d94:	9c 89       	ldd	r25, Y+20	; 0x14
    1d96:	98 8b       	std	Y+16, r25	; 0x10
    1d98:	8f 87       	std	Y+15, r24	; 0x0f
    1d9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9c:	98 89       	ldd	r25, Y+16	; 0x10
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_sendCommand+0x2d6>
    1da2:	98 8b       	std	Y+16, r25	; 0x10
    1da4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1da6:	83 e0       	ldi	r24, 0x03	; 3
    1da8:	61 e0       	ldi	r22, 0x01	; 1
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	a0 e8       	ldi	r26, 0x80	; 128
    1db6:	bf e3       	ldi	r27, 0x3F	; 63
    1db8:	8b 87       	std	Y+11, r24	; 0x0b
    1dba:	9c 87       	std	Y+12, r25	; 0x0c
    1dbc:	ad 87       	std	Y+13, r26	; 0x0d
    1dbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	4a e7       	ldi	r20, 0x7A	; 122
    1dce:	55 e4       	ldi	r21, 0x45	; 69
    1dd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	8f 83       	std	Y+7, r24	; 0x07
    1dda:	98 87       	std	Y+8, r25	; 0x08
    1ddc:	a9 87       	std	Y+9, r26	; 0x09
    1dde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1de0:	6f 81       	ldd	r22, Y+7	; 0x07
    1de2:	78 85       	ldd	r23, Y+8	; 0x08
    1de4:	89 85       	ldd	r24, Y+9	; 0x09
    1de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e8       	ldi	r20, 0x80	; 128
    1dee:	5f e3       	ldi	r21, 0x3F	; 63
    1df0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1df4:	88 23       	and	r24, r24
    1df6:	2c f4       	brge	.+10     	; 0x1e02 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	9e 83       	std	Y+6, r25	; 0x06
    1dfe:	8d 83       	std	Y+5, r24	; 0x05
    1e00:	3f c0       	rjmp	.+126    	; 0x1e80 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1e02:	6f 81       	ldd	r22, Y+7	; 0x07
    1e04:	78 85       	ldd	r23, Y+8	; 0x08
    1e06:	89 85       	ldd	r24, Y+9	; 0x09
    1e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	3f ef       	ldi	r19, 0xFF	; 255
    1e0e:	4f e7       	ldi	r20, 0x7F	; 127
    1e10:	57 e4       	ldi	r21, 0x47	; 71
    1e12:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e16:	18 16       	cp	r1, r24
    1e18:	4c f5       	brge	.+82     	; 0x1e6c <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e2       	ldi	r20, 0x20	; 32
    1e28:	51 e4       	ldi	r21, 0x41	; 65
    1e2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	bc 01       	movw	r22, r24
    1e34:	cd 01       	movw	r24, r26
    1e36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
    1e42:	0f c0       	rjmp	.+30     	; 0x1e62 <LCD_sendCommand+0x39a>
    1e44:	80 e9       	ldi	r24, 0x90	; 144
    1e46:	91 e0       	ldi	r25, 0x01	; 1
    1e48:	9c 83       	std	Y+4, r25	; 0x04
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <LCD_sendCommand+0x388>
    1e54:	9c 83       	std	Y+4, r25	; 0x04
    1e56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	9e 83       	std	Y+6, r25	; 0x06
    1e60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e62:	8d 81       	ldd	r24, Y+5	; 0x05
    1e64:	9e 81       	ldd	r25, Y+6	; 0x06
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	69 f7       	brne	.-38     	; 0x1e44 <LCD_sendCommand+0x37c>
    1e6a:	14 c0       	rjmp	.+40     	; 0x1e94 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6e:	78 85       	ldd	r23, Y+8	; 0x08
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	9e 83       	std	Y+6, r25	; 0x06
    1e7e:	8d 83       	std	Y+5, r24	; 0x05
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	9e 81       	ldd	r25, Y+6	; 0x06
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <LCD_sendCommand+0x3c4>
    1e90:	9a 83       	std	Y+2, r25	; 0x02
    1e92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1e94:	e9 96       	adiw	r28, 0x39	; 57
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	e9 97       	sbiw	r28, 0x39	; 57
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1ebc:	83 e0       	ldi	r24, 0x03	; 3
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	41 e0       	ldi	r20, 0x01	; 1
    1ec2:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a0 e8       	ldi	r26, 0x80	; 128
    1ecc:	bf e3       	ldi	r27, 0x3F	; 63
    1ece:	8d ab       	std	Y+53, r24	; 0x35
    1ed0:	9e ab       	std	Y+54, r25	; 0x36
    1ed2:	af ab       	std	Y+55, r26	; 0x37
    1ed4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ed8:	7e a9       	ldd	r23, Y+54	; 0x36
    1eda:	8f a9       	ldd	r24, Y+55	; 0x37
    1edc:	98 ad       	ldd	r25, Y+56	; 0x38
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	4a e7       	ldi	r20, 0x7A	; 122
    1ee4:	55 e4       	ldi	r21, 0x45	; 69
    1ee6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	89 ab       	std	Y+49, r24	; 0x31
    1ef0:	9a ab       	std	Y+50, r25	; 0x32
    1ef2:	ab ab       	std	Y+51, r26	; 0x33
    1ef4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ef6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ef8:	7a a9       	ldd	r23, Y+50	; 0x32
    1efa:	8b a9       	ldd	r24, Y+51	; 0x33
    1efc:	9c a9       	ldd	r25, Y+52	; 0x34
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e8       	ldi	r20, 0x80	; 128
    1f04:	5f e3       	ldi	r21, 0x3F	; 63
    1f06:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	2c f4       	brge	.+10     	; 0x1f18 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	98 ab       	std	Y+48, r25	; 0x30
    1f14:	8f a7       	std	Y+47, r24	; 0x2f
    1f16:	3f c0       	rjmp	.+126    	; 0x1f96 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1f18:	69 a9       	ldd	r22, Y+49	; 0x31
    1f1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	3f ef       	ldi	r19, 0xFF	; 255
    1f24:	4f e7       	ldi	r20, 0x7F	; 127
    1f26:	57 e4       	ldi	r21, 0x47	; 71
    1f28:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f2c:	18 16       	cp	r1, r24
    1f2e:	4c f5       	brge	.+82     	; 0x1f82 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f30:	6d a9       	ldd	r22, Y+53	; 0x35
    1f32:	7e a9       	ldd	r23, Y+54	; 0x36
    1f34:	8f a9       	ldd	r24, Y+55	; 0x37
    1f36:	98 ad       	ldd	r25, Y+56	; 0x38
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e2       	ldi	r20, 0x20	; 32
    1f3e:	51 e4       	ldi	r21, 0x41	; 65
    1f40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	98 ab       	std	Y+48, r25	; 0x30
    1f56:	8f a7       	std	Y+47, r24	; 0x2f
    1f58:	0f c0       	rjmp	.+30     	; 0x1f78 <LCD_displayCharacter+0xd2>
    1f5a:	80 e9       	ldi	r24, 0x90	; 144
    1f5c:	91 e0       	ldi	r25, 0x01	; 1
    1f5e:	9e a7       	std	Y+46, r25	; 0x2e
    1f60:	8d a7       	std	Y+45, r24	; 0x2d
    1f62:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f64:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <LCD_displayCharacter+0xc0>
    1f6a:	9e a7       	std	Y+46, r25	; 0x2e
    1f6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f70:	98 a9       	ldd	r25, Y+48	; 0x30
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	98 ab       	std	Y+48, r25	; 0x30
    1f76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	69 f7       	brne	.-38     	; 0x1f5a <LCD_displayCharacter+0xb4>
    1f80:	14 c0       	rjmp	.+40     	; 0x1faa <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f82:	69 a9       	ldd	r22, Y+49	; 0x31
    1f84:	7a a9       	ldd	r23, Y+50	; 0x32
    1f86:	8b a9       	ldd	r24, Y+51	; 0x33
    1f88:	9c a9       	ldd	r25, Y+52	; 0x34
    1f8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	98 ab       	std	Y+48, r25	; 0x30
    1f94:	8f a7       	std	Y+47, r24	; 0x2f
    1f96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f98:	98 a9       	ldd	r25, Y+48	; 0x30
    1f9a:	9c a7       	std	Y+44, r25	; 0x2c
    1f9c:	8b a7       	std	Y+43, r24	; 0x2b
    1f9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fa0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <LCD_displayCharacter+0xfc>
    1fa6:	9c a7       	std	Y+44, r25	; 0x2c
    1fa8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1faa:	83 e0       	ldi	r24, 0x03	; 3
    1fac:	61 e0       	ldi	r22, 0x01	; 1
    1fae:	41 e0       	ldi	r20, 0x01	; 1
    1fb0:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	a0 e8       	ldi	r26, 0x80	; 128
    1fba:	bf e3       	ldi	r27, 0x3F	; 63
    1fbc:	8f a3       	std	Y+39, r24	; 0x27
    1fbe:	98 a7       	std	Y+40, r25	; 0x28
    1fc0:	a9 a7       	std	Y+41, r26	; 0x29
    1fc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc4:	6f a1       	ldd	r22, Y+39	; 0x27
    1fc6:	78 a5       	ldd	r23, Y+40	; 0x28
    1fc8:	89 a5       	ldd	r24, Y+41	; 0x29
    1fca:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	4a e7       	ldi	r20, 0x7A	; 122
    1fd2:	55 e4       	ldi	r21, 0x45	; 69
    1fd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	8b a3       	std	Y+35, r24	; 0x23
    1fde:	9c a3       	std	Y+36, r25	; 0x24
    1fe0:	ad a3       	std	Y+37, r26	; 0x25
    1fe2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fe4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fea:	9e a1       	ldd	r25, Y+38	; 0x26
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e8       	ldi	r20, 0x80	; 128
    1ff2:	5f e3       	ldi	r21, 0x3F	; 63
    1ff4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ff8:	88 23       	and	r24, r24
    1ffa:	2c f4       	brge	.+10     	; 0x2006 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	9a a3       	std	Y+34, r25	; 0x22
    2002:	89 a3       	std	Y+33, r24	; 0x21
    2004:	3f c0       	rjmp	.+126    	; 0x2084 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2006:	6b a1       	ldd	r22, Y+35	; 0x23
    2008:	7c a1       	ldd	r23, Y+36	; 0x24
    200a:	8d a1       	ldd	r24, Y+37	; 0x25
    200c:	9e a1       	ldd	r25, Y+38	; 0x26
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	3f ef       	ldi	r19, 0xFF	; 255
    2012:	4f e7       	ldi	r20, 0x7F	; 127
    2014:	57 e4       	ldi	r21, 0x47	; 71
    2016:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    201a:	18 16       	cp	r1, r24
    201c:	4c f5       	brge	.+82     	; 0x2070 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201e:	6f a1       	ldd	r22, Y+39	; 0x27
    2020:	78 a5       	ldd	r23, Y+40	; 0x28
    2022:	89 a5       	ldd	r24, Y+41	; 0x29
    2024:	9a a5       	ldd	r25, Y+42	; 0x2a
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e2       	ldi	r20, 0x20	; 32
    202c:	51 e4       	ldi	r21, 0x41	; 65
    202e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	bc 01       	movw	r22, r24
    2038:	cd 01       	movw	r24, r26
    203a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	9a a3       	std	Y+34, r25	; 0x22
    2044:	89 a3       	std	Y+33, r24	; 0x21
    2046:	0f c0       	rjmp	.+30     	; 0x2066 <LCD_displayCharacter+0x1c0>
    2048:	80 e9       	ldi	r24, 0x90	; 144
    204a:	91 e0       	ldi	r25, 0x01	; 1
    204c:	98 a3       	std	Y+32, r25	; 0x20
    204e:	8f 8f       	std	Y+31, r24	; 0x1f
    2050:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2052:	98 a1       	ldd	r25, Y+32	; 0x20
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <LCD_displayCharacter+0x1ae>
    2058:	98 a3       	std	Y+32, r25	; 0x20
    205a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205c:	89 a1       	ldd	r24, Y+33	; 0x21
    205e:	9a a1       	ldd	r25, Y+34	; 0x22
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	9a a3       	std	Y+34, r25	; 0x22
    2064:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2066:	89 a1       	ldd	r24, Y+33	; 0x21
    2068:	9a a1       	ldd	r25, Y+34	; 0x22
    206a:	00 97       	sbiw	r24, 0x00	; 0
    206c:	69 f7       	brne	.-38     	; 0x2048 <LCD_displayCharacter+0x1a2>
    206e:	14 c0       	rjmp	.+40     	; 0x2098 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2070:	6b a1       	ldd	r22, Y+35	; 0x23
    2072:	7c a1       	ldd	r23, Y+36	; 0x24
    2074:	8d a1       	ldd	r24, Y+37	; 0x25
    2076:	9e a1       	ldd	r25, Y+38	; 0x26
    2078:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	9a a3       	std	Y+34, r25	; 0x22
    2082:	89 a3       	std	Y+33, r24	; 0x21
    2084:	89 a1       	ldd	r24, Y+33	; 0x21
    2086:	9a a1       	ldd	r25, Y+34	; 0x22
    2088:	9e 8f       	std	Y+30, r25	; 0x1e
    208a:	8d 8f       	std	Y+29, r24	; 0x1d
    208c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    208e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_displayCharacter+0x1ea>
    2094:	9e 8f       	std	Y+30, r25	; 0x1e
    2096:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2098:	82 e0       	ldi	r24, 0x02	; 2
    209a:	69 ad       	ldd	r22, Y+57	; 0x39
    209c:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_writePort>
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	a0 e8       	ldi	r26, 0x80	; 128
    20a6:	bf e3       	ldi	r27, 0x3F	; 63
    20a8:	89 8f       	std	Y+25, r24	; 0x19
    20aa:	9a 8f       	std	Y+26, r25	; 0x1a
    20ac:	ab 8f       	std	Y+27, r26	; 0x1b
    20ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b0:	69 8d       	ldd	r22, Y+25	; 0x19
    20b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	4a e7       	ldi	r20, 0x7A	; 122
    20be:	55 e4       	ldi	r21, 0x45	; 69
    20c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	8d 8b       	std	Y+21, r24	; 0x15
    20ca:	9e 8b       	std	Y+22, r25	; 0x16
    20cc:	af 8b       	std	Y+23, r26	; 0x17
    20ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20d0:	6d 89       	ldd	r22, Y+21	; 0x15
    20d2:	7e 89       	ldd	r23, Y+22	; 0x16
    20d4:	8f 89       	ldd	r24, Y+23	; 0x17
    20d6:	98 8d       	ldd	r25, Y+24	; 0x18
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e8       	ldi	r20, 0x80	; 128
    20de:	5f e3       	ldi	r21, 0x3F	; 63
    20e0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20e4:	88 23       	and	r24, r24
    20e6:	2c f4       	brge	.+10     	; 0x20f2 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	9c 8b       	std	Y+20, r25	; 0x14
    20ee:	8b 8b       	std	Y+19, r24	; 0x13
    20f0:	3f c0       	rjmp	.+126    	; 0x2170 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    20f2:	6d 89       	ldd	r22, Y+21	; 0x15
    20f4:	7e 89       	ldd	r23, Y+22	; 0x16
    20f6:	8f 89       	ldd	r24, Y+23	; 0x17
    20f8:	98 8d       	ldd	r25, Y+24	; 0x18
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	3f ef       	ldi	r19, 0xFF	; 255
    20fe:	4f e7       	ldi	r20, 0x7F	; 127
    2100:	57 e4       	ldi	r21, 0x47	; 71
    2102:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2106:	18 16       	cp	r1, r24
    2108:	4c f5       	brge	.+82     	; 0x215c <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210a:	69 8d       	ldd	r22, Y+25	; 0x19
    210c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    210e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2110:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e2       	ldi	r20, 0x20	; 32
    2118:	51 e4       	ldi	r21, 0x41	; 65
    211a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	bc 01       	movw	r22, r24
    2124:	cd 01       	movw	r24, r26
    2126:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	9c 8b       	std	Y+20, r25	; 0x14
    2130:	8b 8b       	std	Y+19, r24	; 0x13
    2132:	0f c0       	rjmp	.+30     	; 0x2152 <LCD_displayCharacter+0x2ac>
    2134:	80 e9       	ldi	r24, 0x90	; 144
    2136:	91 e0       	ldi	r25, 0x01	; 1
    2138:	9a 8b       	std	Y+18, r25	; 0x12
    213a:	89 8b       	std	Y+17, r24	; 0x11
    213c:	89 89       	ldd	r24, Y+17	; 0x11
    213e:	9a 89       	ldd	r25, Y+18	; 0x12
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	f1 f7       	brne	.-4      	; 0x2140 <LCD_displayCharacter+0x29a>
    2144:	9a 8b       	std	Y+18, r25	; 0x12
    2146:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2148:	8b 89       	ldd	r24, Y+19	; 0x13
    214a:	9c 89       	ldd	r25, Y+20	; 0x14
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	9c 8b       	std	Y+20, r25	; 0x14
    2150:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2152:	8b 89       	ldd	r24, Y+19	; 0x13
    2154:	9c 89       	ldd	r25, Y+20	; 0x14
    2156:	00 97       	sbiw	r24, 0x00	; 0
    2158:	69 f7       	brne	.-38     	; 0x2134 <LCD_displayCharacter+0x28e>
    215a:	14 c0       	rjmp	.+40     	; 0x2184 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215c:	6d 89       	ldd	r22, Y+21	; 0x15
    215e:	7e 89       	ldd	r23, Y+22	; 0x16
    2160:	8f 89       	ldd	r24, Y+23	; 0x17
    2162:	98 8d       	ldd	r25, Y+24	; 0x18
    2164:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	9c 8b       	std	Y+20, r25	; 0x14
    216e:	8b 8b       	std	Y+19, r24	; 0x13
    2170:	8b 89       	ldd	r24, Y+19	; 0x13
    2172:	9c 89       	ldd	r25, Y+20	; 0x14
    2174:	98 8b       	std	Y+16, r25	; 0x10
    2176:	8f 87       	std	Y+15, r24	; 0x0f
    2178:	8f 85       	ldd	r24, Y+15	; 0x0f
    217a:	98 89       	ldd	r25, Y+16	; 0x10
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <LCD_displayCharacter+0x2d6>
    2180:	98 8b       	std	Y+16, r25	; 0x10
    2182:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2184:	83 e0       	ldi	r24, 0x03	; 3
    2186:	61 e0       	ldi	r22, 0x01	; 1
    2188:	40 e0       	ldi	r20, 0x00	; 0
    218a:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	a0 e8       	ldi	r26, 0x80	; 128
    2194:	bf e3       	ldi	r27, 0x3F	; 63
    2196:	8b 87       	std	Y+11, r24	; 0x0b
    2198:	9c 87       	std	Y+12, r25	; 0x0c
    219a:	ad 87       	std	Y+13, r26	; 0x0d
    219c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219e:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	4a e7       	ldi	r20, 0x7A	; 122
    21ac:	55 e4       	ldi	r21, 0x45	; 69
    21ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	8f 83       	std	Y+7, r24	; 0x07
    21b8:	98 87       	std	Y+8, r25	; 0x08
    21ba:	a9 87       	std	Y+9, r26	; 0x09
    21bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21be:	6f 81       	ldd	r22, Y+7	; 0x07
    21c0:	78 85       	ldd	r23, Y+8	; 0x08
    21c2:	89 85       	ldd	r24, Y+9	; 0x09
    21c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e8       	ldi	r20, 0x80	; 128
    21cc:	5f e3       	ldi	r21, 0x3F	; 63
    21ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21d2:	88 23       	and	r24, r24
    21d4:	2c f4       	brge	.+10     	; 0x21e0 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	9e 83       	std	Y+6, r25	; 0x06
    21dc:	8d 83       	std	Y+5, r24	; 0x05
    21de:	3f c0       	rjmp	.+126    	; 0x225e <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    21e0:	6f 81       	ldd	r22, Y+7	; 0x07
    21e2:	78 85       	ldd	r23, Y+8	; 0x08
    21e4:	89 85       	ldd	r24, Y+9	; 0x09
    21e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	3f ef       	ldi	r19, 0xFF	; 255
    21ec:	4f e7       	ldi	r20, 0x7F	; 127
    21ee:	57 e4       	ldi	r21, 0x47	; 71
    21f0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21f4:	18 16       	cp	r1, r24
    21f6:	4c f5       	brge	.+82     	; 0x224a <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e2       	ldi	r20, 0x20	; 32
    2206:	51 e4       	ldi	r21, 0x41	; 65
    2208:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	bc 01       	movw	r22, r24
    2212:	cd 01       	movw	r24, r26
    2214:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	9e 83       	std	Y+6, r25	; 0x06
    221e:	8d 83       	std	Y+5, r24	; 0x05
    2220:	0f c0       	rjmp	.+30     	; 0x2240 <LCD_displayCharacter+0x39a>
    2222:	80 e9       	ldi	r24, 0x90	; 144
    2224:	91 e0       	ldi	r25, 0x01	; 1
    2226:	9c 83       	std	Y+4, r25	; 0x04
    2228:	8b 83       	std	Y+3, r24	; 0x03
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	f1 f7       	brne	.-4      	; 0x222e <LCD_displayCharacter+0x388>
    2232:	9c 83       	std	Y+4, r25	; 0x04
    2234:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2236:	8d 81       	ldd	r24, Y+5	; 0x05
    2238:	9e 81       	ldd	r25, Y+6	; 0x06
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	9e 83       	std	Y+6, r25	; 0x06
    223e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2240:	8d 81       	ldd	r24, Y+5	; 0x05
    2242:	9e 81       	ldd	r25, Y+6	; 0x06
    2244:	00 97       	sbiw	r24, 0x00	; 0
    2246:	69 f7       	brne	.-38     	; 0x2222 <LCD_displayCharacter+0x37c>
    2248:	14 c0       	rjmp	.+40     	; 0x2272 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224a:	6f 81       	ldd	r22, Y+7	; 0x07
    224c:	78 85       	ldd	r23, Y+8	; 0x08
    224e:	89 85       	ldd	r24, Y+9	; 0x09
    2250:	9a 85       	ldd	r25, Y+10	; 0x0a
    2252:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	9e 83       	std	Y+6, r25	; 0x06
    225c:	8d 83       	std	Y+5, r24	; 0x05
    225e:	8d 81       	ldd	r24, Y+5	; 0x05
    2260:	9e 81       	ldd	r25, Y+6	; 0x06
    2262:	9a 83       	std	Y+2, r25	; 0x02
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	9a 81       	ldd	r25, Y+2	; 0x02
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	f1 f7       	brne	.-4      	; 0x226a <LCD_displayCharacter+0x3c4>
    226e:	9a 83       	std	Y+2, r25	; 0x02
    2270:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2272:	e9 96       	adiw	r28, 0x39	; 57
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	00 d0       	rcall	.+0      	; 0x228a <LCD_displayString+0x6>
    228a:	0f 92       	push	r0
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	9b 83       	std	Y+3, r25	; 0x03
    2292:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2294:	19 82       	std	Y+1, r1	; 0x01
    2296:	0e c0       	rjmp	.+28     	; 0x22b4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	28 2f       	mov	r18, r24
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	9b 81       	ldd	r25, Y+3	; 0x03
    22a2:	fc 01       	movw	r30, r24
    22a4:	e2 0f       	add	r30, r18
    22a6:	f3 1f       	adc	r31, r19
    22a8:	80 81       	ld	r24, Z
    22aa:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_displayCharacter>
		i++;
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	8f 5f       	subi	r24, 0xFF	; 255
    22b2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	28 2f       	mov	r18, r24
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	9b 81       	ldd	r25, Y+3	; 0x03
    22be:	fc 01       	movw	r30, r24
    22c0:	e2 0f       	add	r30, r18
    22c2:	f3 1f       	adc	r31, r19
    22c4:	80 81       	ld	r24, Z
    22c6:	88 23       	and	r24, r24
    22c8:	39 f7       	brne	.-50     	; 0x2298 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	00 d0       	rcall	.+0      	; 0x22dc <LCD_moveCursor+0x6>
    22dc:	00 d0       	rcall	.+0      	; 0x22de <LCD_moveCursor+0x8>
    22de:	0f 92       	push	r0
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	8a 83       	std	Y+2, r24	; 0x02
    22e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	3d 83       	std	Y+5, r19	; 0x05
    22f0:	2c 83       	std	Y+4, r18	; 0x04
    22f2:	8c 81       	ldd	r24, Y+4	; 0x04
    22f4:	9d 81       	ldd	r25, Y+5	; 0x05
    22f6:	81 30       	cpi	r24, 0x01	; 1
    22f8:	91 05       	cpc	r25, r1
    22fa:	c1 f0       	breq	.+48     	; 0x232c <LCD_moveCursor+0x56>
    22fc:	2c 81       	ldd	r18, Y+4	; 0x04
    22fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2300:	22 30       	cpi	r18, 0x02	; 2
    2302:	31 05       	cpc	r19, r1
    2304:	2c f4       	brge	.+10     	; 0x2310 <LCD_moveCursor+0x3a>
    2306:	8c 81       	ldd	r24, Y+4	; 0x04
    2308:	9d 81       	ldd	r25, Y+5	; 0x05
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	61 f0       	breq	.+24     	; 0x2326 <LCD_moveCursor+0x50>
    230e:	19 c0       	rjmp	.+50     	; 0x2342 <LCD_moveCursor+0x6c>
    2310:	2c 81       	ldd	r18, Y+4	; 0x04
    2312:	3d 81       	ldd	r19, Y+5	; 0x05
    2314:	22 30       	cpi	r18, 0x02	; 2
    2316:	31 05       	cpc	r19, r1
    2318:	69 f0       	breq	.+26     	; 0x2334 <LCD_moveCursor+0x5e>
    231a:	8c 81       	ldd	r24, Y+4	; 0x04
    231c:	9d 81       	ldd	r25, Y+5	; 0x05
    231e:	83 30       	cpi	r24, 0x03	; 3
    2320:	91 05       	cpc	r25, r1
    2322:	61 f0       	breq	.+24     	; 0x233c <LCD_moveCursor+0x66>
    2324:	0e c0       	rjmp	.+28     	; 0x2342 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	0b c0       	rjmp	.+22     	; 0x2342 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	80 5c       	subi	r24, 0xC0	; 192
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	07 c0       	rjmp	.+14     	; 0x2342 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	80 5f       	subi	r24, 0xF0	; 240
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	03 c0       	rjmp	.+6      	; 0x2342 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	80 5b       	subi	r24, 0xB0	; 176
    2340:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	80 68       	ori	r24, 0x80	; 128
    2346:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LCD_sendCommand>
}
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	08 95       	ret

0000235a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	00 d0       	rcall	.+0      	; 0x2360 <LCD_displayStringRowColumn+0x6>
    2360:	00 d0       	rcall	.+0      	; 0x2362 <LCD_displayStringRowColumn+0x8>
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	89 83       	std	Y+1, r24	; 0x01
    2368:	6a 83       	std	Y+2, r22	; 0x02
    236a:	5c 83       	std	Y+4, r21	; 0x04
    236c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	6a 81       	ldd	r22, Y+2	; 0x02
    2372:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2376:	8b 81       	ldd	r24, Y+3	; 0x03
    2378:	9c 81       	ldd	r25, Y+4	; 0x04
    237a:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_displayString>
}
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	62 97       	sbiw	r28, 0x12	; 18
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	9a 8b       	std	Y+18, r25	; 0x12
    23a2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    23a4:	89 89       	ldd	r24, Y+17	; 0x11
    23a6:	9a 89       	ldd	r25, Y+18	; 0x12
    23a8:	9e 01       	movw	r18, r28
    23aa:	2f 5f       	subi	r18, 0xFF	; 255
    23ac:	3f 4f       	sbci	r19, 0xFF	; 255
    23ae:	b9 01       	movw	r22, r18
    23b0:	4a e0       	ldi	r20, 0x0A	; 10
    23b2:	50 e0       	ldi	r21, 0x00	; 0
    23b4:	0e 94 a6 13 	call	0x274c	; 0x274c <itoa>
   LCD_displayString(buff); /* Display the string */
    23b8:	ce 01       	movw	r24, r28
    23ba:	01 96       	adiw	r24, 0x01	; 1
    23bc:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_displayString>
}
    23c0:	62 96       	adiw	r28, 0x12	; 18
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LCD_sendCommand>
}
    23e0:	cf 91       	pop	r28
    23e2:	df 91       	pop	r29
    23e4:	08 95       	ret

000023e6 <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	00 d0       	rcall	.+0      	; 0x23ec <LM35_getTemperature+0x6>
    23ec:	0f 92       	push	r0
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    23f2:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    23f4:	1a 82       	std	Y+2, r1	; 0x02
    23f6:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	0e 94 54 07 	call	0xea8	; 0xea8 <ADC_readChannel>
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	9a 81       	ldd	r25, Y+2	; 0x02
    2406:	cc 01       	movw	r24, r24
    2408:	a0 e0       	ldi	r26, 0x00	; 0
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	26 e9       	ldi	r18, 0x96	; 150
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e0       	ldi	r20, 0x00	; 0
    2412:	50 e0       	ldi	r21, 0x00	; 0
    2414:	bc 01       	movw	r22, r24
    2416:	cd 01       	movw	r24, r26
    2418:	0e 94 07 13 	call	0x260e	; 0x260e <__mulsi3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	bc 01       	movw	r22, r24
    2422:	cd 01       	movw	r24, r26
    2424:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	bc 01       	movw	r22, r24
    242e:	cd 01       	movw	r24, r26
    2430:	2a e0       	ldi	r18, 0x0A	; 10
    2432:	37 ed       	ldi	r19, 0xD7	; 215
    2434:	43 e2       	ldi	r20, 0x23	; 35
    2436:	50 e4       	ldi	r21, 0x40	; 64
    2438:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	bc 01       	movw	r22, r24
    2442:	cd 01       	movw	r24, r26
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 ed       	ldi	r19, 0xD0	; 208
    2448:	4f eb       	ldi	r20, 0xBF	; 191
    244a:	54 e4       	ldi	r21, 0x44	; 68
    244c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	bc 01       	movw	r22, r24
    2456:	cd 01       	movw	r24, r26
    2458:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    2462:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <set_light>:

           /*the application */


        //=== LIGHT FUNCTION===//
void set_light(uint8 light){
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	0f 92       	push	r0
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	89 83       	std	Y+1, r24	; 0x01
	if(light<15){
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	8f 30       	cpi	r24, 0x0F	; 15
    2480:	50 f4       	brcc	.+20     	; 0x2496 <set_light+0x26>
		LED_on(LED_RED);
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	0e 94 29 0c 	call	0x1852	; 0x1852 <LED_on>
		LED_on(LED_GREEN);
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	0e 94 29 0c 	call	0x1852	; 0x1852 <LED_on>
		LED_on(LED_BLUE);
    248e:	82 e0       	ldi	r24, 0x02	; 2
    2490:	0e 94 29 0c 	call	0x1852	; 0x1852 <LED_on>
    2494:	29 c0       	rjmp	.+82     	; 0x24e8 <set_light+0x78>

	}
	else if(light>15&&light<51){
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	80 31       	cpi	r24, 0x10	; 16
    249a:	68 f0       	brcs	.+26     	; 0x24b6 <set_light+0x46>
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	83 33       	cpi	r24, 0x33	; 51
    24a0:	50 f4       	brcc	.+20     	; 0x24b6 <set_light+0x46>
		LED_on(LED_RED);
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	0e 94 29 0c 	call	0x1852	; 0x1852 <LED_on>
		LED_on(LED_GREEN);
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	0e 94 29 0c 	call	0x1852	; 0x1852 <LED_on>
		LED_off(LED_BLUE);
    24ae:	82 e0       	ldi	r24, 0x02	; 2
    24b0:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LED_off>
    24b4:	19 c0       	rjmp	.+50     	; 0x24e8 <set_light+0x78>
	}
	else if(light>=51&&light<=70){
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	83 33       	cpi	r24, 0x33	; 51
    24ba:	68 f0       	brcs	.+26     	; 0x24d6 <set_light+0x66>
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	87 34       	cpi	r24, 0x47	; 71
    24c0:	50 f4       	brcc	.+20     	; 0x24d6 <set_light+0x66>
		LED_on(LED_RED);
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	0e 94 29 0c 	call	0x1852	; 0x1852 <LED_on>
		LED_off(LED_BLUE);
    24c8:	82 e0       	ldi	r24, 0x02	; 2
    24ca:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LED_off>
		LED_off(LED_GREEN);
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LED_off>
    24d4:	09 c0       	rjmp	.+18     	; 0x24e8 <set_light+0x78>


	}

	else{   LED_off(LED_RED);
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LED_off>
		    LED_off(LED_BLUE);
    24dc:	82 e0       	ldi	r24, 0x02	; 2
    24de:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LED_off>
	     	LED_off(LED_GREEN);
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LED_off>

	}

}
    24e8:	0f 90       	pop	r0
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	08 95       	ret

000024f0 <main>:





int main(void){
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	00 d0       	rcall	.+0      	; 0x24f6 <main+0x6>
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <main+0x8>
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
	ADC_init();
    24fc:	0e 94 45 07 	call	0xe8a	; 0xe8a <ADC_init>
	DcMotor_Init();
    2500:	0e 94 c9 0a 	call	0x1592	; 0x1592 <DcMotor_Init>
	Buzzer_init();
    2504:	0e 94 97 0c 	call	0x192e	; 0x192e <Buzzer_init>
	FlameSensor_init();
    2508:	0e 94 4f 0b 	call	0x169e	; 0x169e <FlameSensor_init>
	LCD_init();
    250c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <LCD_init>
	LEDS_init();
    2510:	0e 94 04 0c 	call	0x1808	; 0x1808 <LEDS_init>
	   uint8 fire_alert_displayed = 0;
    2514:	1c 82       	std	Y+4, r1	; 0x04
	   uint8 fanSpeed=0;
    2516:	1b 82       	std	Y+3, r1	; 0x03
	while(1){



        //===  LDR CODE   === //
uint8 light = 100 - LDR_getLightIntensity();
    2518:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LDR_getLightIntensity>
    251c:	98 2f       	mov	r25, r24
    251e:	84 e6       	ldi	r24, 0x64	; 100
    2520:	89 1b       	sub	r24, r25
    2522:	8a 83       	std	Y+2, r24	; 0x02
     set_light(light);
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	0e 94 38 12 	call	0x2470	; 0x2470 <set_light>

        //=== Temperature ===//

     uint8 temp = LM35_getTemperature();
    252a:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <LM35_getTemperature>
    252e:	89 83       	std	Y+1, r24	; 0x01


     if(temp < 25)
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	89 31       	cpi	r24, 0x19	; 25
    2534:	10 f4       	brcc	.+4      	; 0x253a <main+0x4a>
         fanSpeed = 0;
    2536:	1b 82       	std	Y+3, r1	; 0x03
    2538:	14 c0       	rjmp	.+40     	; 0x2562 <main+0x72>
     else if(temp < 30)
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	8e 31       	cpi	r24, 0x1E	; 30
    253e:	18 f4       	brcc	.+6      	; 0x2546 <main+0x56>
         fanSpeed = 25;
    2540:	89 e1       	ldi	r24, 0x19	; 25
    2542:	8b 83       	std	Y+3, r24	; 0x03
    2544:	0e c0       	rjmp	.+28     	; 0x2562 <main+0x72>
     else if(temp < 35)
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	83 32       	cpi	r24, 0x23	; 35
    254a:	18 f4       	brcc	.+6      	; 0x2552 <main+0x62>
         fanSpeed = 50;
    254c:	82 e3       	ldi	r24, 0x32	; 50
    254e:	8b 83       	std	Y+3, r24	; 0x03
    2550:	08 c0       	rjmp	.+16     	; 0x2562 <main+0x72>
     else if(temp < 40)
    2552:	89 81       	ldd	r24, Y+1	; 0x01
    2554:	88 32       	cpi	r24, 0x28	; 40
    2556:	18 f4       	brcc	.+6      	; 0x255e <main+0x6e>
         fanSpeed = 75;
    2558:	8b e4       	ldi	r24, 0x4B	; 75
    255a:	8b 83       	std	Y+3, r24	; 0x03
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <main+0x72>
     else
         fanSpeed = 100;
    255e:	84 e6       	ldi	r24, 0x64	; 100
    2560:	8b 83       	std	Y+3, r24	; 0x03



     //===FLAME SENSOR===//

       if(FlameSensor_getValue())
    2562:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <FlameSensor_getValue>
    2566:	88 23       	and	r24, r24
    2568:	c1 f0       	breq	.+48     	; 0x259a <main+0xaa>
       {  if (fire_alert_displayed == 0){
    256a:	8c 81       	ldd	r24, Y+4	; 0x04
    256c:	88 23       	and	r24, r24
    256e:	a1 f6       	brne	.-88     	; 0x2518 <main+0x28>
    	   Buzzer_on();
    2570:	0e 94 ac 0c 	call	0x1958	; 0x1958 <Buzzer_on>
    	   LCD_clearScreen();
    2574:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <LCD_clearScreen>
    	   LCD_displayStringRowColumn(0, 0, "Critical alert!  ");
    2578:	20 e6       	ldi	r18, 0x60	; 96
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	60 e0       	ldi	r22, 0x00	; 0
    2580:	a9 01       	movw	r20, r18
    2582:	0e 94 ad 11 	call	0x235a	; 0x235a <LCD_displayStringRowColumn>
    	   LCD_displayStringRowColumn(1, 0, "7ARE2A  ");
    2586:	22 e7       	ldi	r18, 0x72	; 114
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	a9 01       	movw	r20, r18
    2590:	0e 94 ad 11 	call	0x235a	; 0x235a <LCD_displayStringRowColumn>
    	   fire_alert_displayed = 1;
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	8c 83       	std	Y+4, r24	; 0x04
    2598:	bf cf       	rjmp	.-130    	; 0x2518 <main+0x28>
       }
           continue;
       }
       else
       {
           Buzzer_off();
    259a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <Buzzer_off>
           fire_alert_displayed = 0;
    259e:	1c 82       	std	Y+4, r1	; 0x04
           //=== LCD DISPLAY CODE===//

           LCD_moveCursor(0, 0);
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	60 e0       	ldi	r22, 0x00	; 0
    25a4:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_moveCursor>
             if(fanSpeed == 0){
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	88 23       	and	r24, r24
    25ac:	49 f4       	brne	.+18     	; 0x25c0 <main+0xd0>
                 LCD_displayString("FAN is OFF     ");
    25ae:	8b e7       	ldi	r24, 0x7B	; 123
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_displayString>
               DcMotor_Rotate(STOP, 0);
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	60 e0       	ldi	r22, 0x00	; 0
    25ba:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DcMotor_Rotate>
    25be:	08 c0       	rjmp	.+16     	; 0x25d0 <main+0xe0>
             }
             else{
                 LCD_displayString("FAN is ON      ");
    25c0:	8b e8       	ldi	r24, 0x8B	; 139
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_displayString>
                 DcMotor_Rotate(CW, fanSpeed);
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	6b 81       	ldd	r22, Y+3	; 0x03
    25cc:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <DcMotor_Rotate>
             }

             LCD_moveCursor(1, 0);
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	60 e0       	ldi	r22, 0x00	; 0
    25d4:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <LCD_moveCursor>
             LCD_displayString("Temp=");
    25d8:	8b e9       	ldi	r24, 0x9B	; 155
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_displayString>
             LCD_intgerToString(temp);
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	88 2f       	mov	r24, r24
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	0e 94 c6 11 	call	0x238c	; 0x238c <LCD_intgerToString>
             LCD_displayString("C ");
    25ea:	81 ea       	ldi	r24, 0xA1	; 161
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_displayString>

             LCD_displayString("LDR=");
    25f2:	84 ea       	ldi	r24, 0xA4	; 164
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_displayString>
             LCD_intgerToString(light);
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	88 2f       	mov	r24, r24
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	0e 94 c6 11 	call	0x238c	; 0x238c <LCD_intgerToString>
             LCD_displayString("%  ");
    2604:	89 ea       	ldi	r24, 0xA9	; 169
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_displayString>
    260c:	85 cf       	rjmp	.-246    	; 0x2518 <main+0x28>

0000260e <__mulsi3>:
    260e:	62 9f       	mul	r22, r18
    2610:	d0 01       	movw	r26, r0
    2612:	73 9f       	mul	r23, r19
    2614:	f0 01       	movw	r30, r0
    2616:	82 9f       	mul	r24, r18
    2618:	e0 0d       	add	r30, r0
    261a:	f1 1d       	adc	r31, r1
    261c:	64 9f       	mul	r22, r20
    261e:	e0 0d       	add	r30, r0
    2620:	f1 1d       	adc	r31, r1
    2622:	92 9f       	mul	r25, r18
    2624:	f0 0d       	add	r31, r0
    2626:	83 9f       	mul	r24, r19
    2628:	f0 0d       	add	r31, r0
    262a:	74 9f       	mul	r23, r20
    262c:	f0 0d       	add	r31, r0
    262e:	65 9f       	mul	r22, r21
    2630:	f0 0d       	add	r31, r0
    2632:	99 27       	eor	r25, r25
    2634:	72 9f       	mul	r23, r18
    2636:	b0 0d       	add	r27, r0
    2638:	e1 1d       	adc	r30, r1
    263a:	f9 1f       	adc	r31, r25
    263c:	63 9f       	mul	r22, r19
    263e:	b0 0d       	add	r27, r0
    2640:	e1 1d       	adc	r30, r1
    2642:	f9 1f       	adc	r31, r25
    2644:	bd 01       	movw	r22, r26
    2646:	cf 01       	movw	r24, r30
    2648:	11 24       	eor	r1, r1
    264a:	08 95       	ret

0000264c <__divmodhi4>:
    264c:	97 fb       	bst	r25, 7
    264e:	09 2e       	mov	r0, r25
    2650:	07 26       	eor	r0, r23
    2652:	0a d0       	rcall	.+20     	; 0x2668 <__divmodhi4_neg1>
    2654:	77 fd       	sbrc	r23, 7
    2656:	04 d0       	rcall	.+8      	; 0x2660 <__divmodhi4_neg2>
    2658:	2e d0       	rcall	.+92     	; 0x26b6 <__udivmodhi4>
    265a:	06 d0       	rcall	.+12     	; 0x2668 <__divmodhi4_neg1>
    265c:	00 20       	and	r0, r0
    265e:	1a f4       	brpl	.+6      	; 0x2666 <__divmodhi4_exit>

00002660 <__divmodhi4_neg2>:
    2660:	70 95       	com	r23
    2662:	61 95       	neg	r22
    2664:	7f 4f       	sbci	r23, 0xFF	; 255

00002666 <__divmodhi4_exit>:
    2666:	08 95       	ret

00002668 <__divmodhi4_neg1>:
    2668:	f6 f7       	brtc	.-4      	; 0x2666 <__divmodhi4_exit>
    266a:	90 95       	com	r25
    266c:	81 95       	neg	r24
    266e:	9f 4f       	sbci	r25, 0xFF	; 255
    2670:	08 95       	ret

00002672 <__udivmodsi4>:
    2672:	a1 e2       	ldi	r26, 0x21	; 33
    2674:	1a 2e       	mov	r1, r26
    2676:	aa 1b       	sub	r26, r26
    2678:	bb 1b       	sub	r27, r27
    267a:	fd 01       	movw	r30, r26
    267c:	0d c0       	rjmp	.+26     	; 0x2698 <__udivmodsi4_ep>

0000267e <__udivmodsi4_loop>:
    267e:	aa 1f       	adc	r26, r26
    2680:	bb 1f       	adc	r27, r27
    2682:	ee 1f       	adc	r30, r30
    2684:	ff 1f       	adc	r31, r31
    2686:	a2 17       	cp	r26, r18
    2688:	b3 07       	cpc	r27, r19
    268a:	e4 07       	cpc	r30, r20
    268c:	f5 07       	cpc	r31, r21
    268e:	20 f0       	brcs	.+8      	; 0x2698 <__udivmodsi4_ep>
    2690:	a2 1b       	sub	r26, r18
    2692:	b3 0b       	sbc	r27, r19
    2694:	e4 0b       	sbc	r30, r20
    2696:	f5 0b       	sbc	r31, r21

00002698 <__udivmodsi4_ep>:
    2698:	66 1f       	adc	r22, r22
    269a:	77 1f       	adc	r23, r23
    269c:	88 1f       	adc	r24, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	1a 94       	dec	r1
    26a2:	69 f7       	brne	.-38     	; 0x267e <__udivmodsi4_loop>
    26a4:	60 95       	com	r22
    26a6:	70 95       	com	r23
    26a8:	80 95       	com	r24
    26aa:	90 95       	com	r25
    26ac:	9b 01       	movw	r18, r22
    26ae:	ac 01       	movw	r20, r24
    26b0:	bd 01       	movw	r22, r26
    26b2:	cf 01       	movw	r24, r30
    26b4:	08 95       	ret

000026b6 <__udivmodhi4>:
    26b6:	aa 1b       	sub	r26, r26
    26b8:	bb 1b       	sub	r27, r27
    26ba:	51 e1       	ldi	r21, 0x11	; 17
    26bc:	07 c0       	rjmp	.+14     	; 0x26cc <__udivmodhi4_ep>

000026be <__udivmodhi4_loop>:
    26be:	aa 1f       	adc	r26, r26
    26c0:	bb 1f       	adc	r27, r27
    26c2:	a6 17       	cp	r26, r22
    26c4:	b7 07       	cpc	r27, r23
    26c6:	10 f0       	brcs	.+4      	; 0x26cc <__udivmodhi4_ep>
    26c8:	a6 1b       	sub	r26, r22
    26ca:	b7 0b       	sbc	r27, r23

000026cc <__udivmodhi4_ep>:
    26cc:	88 1f       	adc	r24, r24
    26ce:	99 1f       	adc	r25, r25
    26d0:	5a 95       	dec	r21
    26d2:	a9 f7       	brne	.-22     	; 0x26be <__udivmodhi4_loop>
    26d4:	80 95       	com	r24
    26d6:	90 95       	com	r25
    26d8:	bc 01       	movw	r22, r24
    26da:	cd 01       	movw	r24, r26
    26dc:	08 95       	ret

000026de <__prologue_saves__>:
    26de:	2f 92       	push	r2
    26e0:	3f 92       	push	r3
    26e2:	4f 92       	push	r4
    26e4:	5f 92       	push	r5
    26e6:	6f 92       	push	r6
    26e8:	7f 92       	push	r7
    26ea:	8f 92       	push	r8
    26ec:	9f 92       	push	r9
    26ee:	af 92       	push	r10
    26f0:	bf 92       	push	r11
    26f2:	cf 92       	push	r12
    26f4:	df 92       	push	r13
    26f6:	ef 92       	push	r14
    26f8:	ff 92       	push	r15
    26fa:	0f 93       	push	r16
    26fc:	1f 93       	push	r17
    26fe:	cf 93       	push	r28
    2700:	df 93       	push	r29
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	ca 1b       	sub	r28, r26
    2708:	db 0b       	sbc	r29, r27
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	de bf       	out	0x3e, r29	; 62
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	cd bf       	out	0x3d, r28	; 61
    2714:	09 94       	ijmp

00002716 <__epilogue_restores__>:
    2716:	2a 88       	ldd	r2, Y+18	; 0x12
    2718:	39 88       	ldd	r3, Y+17	; 0x11
    271a:	48 88       	ldd	r4, Y+16	; 0x10
    271c:	5f 84       	ldd	r5, Y+15	; 0x0f
    271e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2720:	7d 84       	ldd	r7, Y+13	; 0x0d
    2722:	8c 84       	ldd	r8, Y+12	; 0x0c
    2724:	9b 84       	ldd	r9, Y+11	; 0x0b
    2726:	aa 84       	ldd	r10, Y+10	; 0x0a
    2728:	b9 84       	ldd	r11, Y+9	; 0x09
    272a:	c8 84       	ldd	r12, Y+8	; 0x08
    272c:	df 80       	ldd	r13, Y+7	; 0x07
    272e:	ee 80       	ldd	r14, Y+6	; 0x06
    2730:	fd 80       	ldd	r15, Y+5	; 0x05
    2732:	0c 81       	ldd	r16, Y+4	; 0x04
    2734:	1b 81       	ldd	r17, Y+3	; 0x03
    2736:	aa 81       	ldd	r26, Y+2	; 0x02
    2738:	b9 81       	ldd	r27, Y+1	; 0x01
    273a:	ce 0f       	add	r28, r30
    273c:	d1 1d       	adc	r29, r1
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	cd bf       	out	0x3d, r28	; 61
    2748:	ed 01       	movw	r28, r26
    274a:	08 95       	ret

0000274c <itoa>:
    274c:	fb 01       	movw	r30, r22
    274e:	9f 01       	movw	r18, r30
    2750:	e8 94       	clt
    2752:	42 30       	cpi	r20, 0x02	; 2
    2754:	c4 f0       	brlt	.+48     	; 0x2786 <itoa+0x3a>
    2756:	45 32       	cpi	r20, 0x25	; 37
    2758:	b4 f4       	brge	.+44     	; 0x2786 <itoa+0x3a>
    275a:	4a 30       	cpi	r20, 0x0A	; 10
    275c:	29 f4       	brne	.+10     	; 0x2768 <itoa+0x1c>
    275e:	97 fb       	bst	r25, 7
    2760:	1e f4       	brtc	.+6      	; 0x2768 <itoa+0x1c>
    2762:	90 95       	com	r25
    2764:	81 95       	neg	r24
    2766:	9f 4f       	sbci	r25, 0xFF	; 255
    2768:	64 2f       	mov	r22, r20
    276a:	77 27       	eor	r23, r23
    276c:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__udivmodhi4>
    2770:	80 5d       	subi	r24, 0xD0	; 208
    2772:	8a 33       	cpi	r24, 0x3A	; 58
    2774:	0c f0       	brlt	.+2      	; 0x2778 <itoa+0x2c>
    2776:	89 5d       	subi	r24, 0xD9	; 217
    2778:	81 93       	st	Z+, r24
    277a:	cb 01       	movw	r24, r22
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	a1 f7       	brne	.-24     	; 0x2768 <itoa+0x1c>
    2780:	16 f4       	brtc	.+4      	; 0x2786 <itoa+0x3a>
    2782:	5d e2       	ldi	r21, 0x2D	; 45
    2784:	51 93       	st	Z+, r21
    2786:	10 82       	st	Z, r1
    2788:	c9 01       	movw	r24, r18
    278a:	0c 94 c7 13 	jmp	0x278e	; 0x278e <strrev>

0000278e <strrev>:
    278e:	dc 01       	movw	r26, r24
    2790:	fc 01       	movw	r30, r24
    2792:	67 2f       	mov	r22, r23
    2794:	71 91       	ld	r23, Z+
    2796:	77 23       	and	r23, r23
    2798:	e1 f7       	brne	.-8      	; 0x2792 <strrev+0x4>
    279a:	32 97       	sbiw	r30, 0x02	; 2
    279c:	04 c0       	rjmp	.+8      	; 0x27a6 <strrev+0x18>
    279e:	7c 91       	ld	r23, X
    27a0:	6d 93       	st	X+, r22
    27a2:	70 83       	st	Z, r23
    27a4:	62 91       	ld	r22, -Z
    27a6:	ae 17       	cp	r26, r30
    27a8:	bf 07       	cpc	r27, r31
    27aa:	c8 f3       	brcs	.-14     	; 0x279e <strrev+0x10>
    27ac:	08 95       	ret

000027ae <_exit>:
    27ae:	f8 94       	cli

000027b0 <__stop_program>:
    27b0:	ff cf       	rjmp	.-2      	; 0x27b0 <__stop_program>
