
CONTROL_module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00003152  000031c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000309c  00000000  00000000  000031d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000014f7  00000000  00000000  00006270  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00007767  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000078a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00007a17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00009660  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000a54b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000b2f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000b458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000b6e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000beb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 a7 18 	jmp	0x314e	; 0x314e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 4f 18 	jmp	0x309e	; 0x309e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:





int main(void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	ac 97       	sbiw	r28, 0x2c	; 44
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	TWI_init(&TWI_config);
     b4a:	88 e6       	ldi	r24, 0x68	; 104
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <TWI_init>
	SPI_initSlave();
     b52:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <SPI_initSlave>
	DcMotor_Init();
     b56:	0e 94 4e 0c 	call	0x189c	; 0x189c <DcMotor_Init>
	LCD_init();
     b5a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <LCD_init>
	Buzzer_init();
     b5e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Buzzer_init>
	servo_init();
     b62:	0e 94 6d 17 	call	0x2eda	; 0x2eda <servo_init>
	uint8 speed_r=0;
     b66:	1c a6       	std	Y+44, r1	; 0x2c
	uint8 distance_r=0;
     b68:	1b a6       	std	Y+43, r1	; 0x2b

	while(1){
		ControlECU_TWI_SlaveReceive(&speed_r);
     b6a:	ce 01       	movw	r24, r28
     b6c:	8c 96       	adiw	r24, 0x2c	; 44
     b6e:	0e 94 20 0c 	call	0x1840	; 0x1840 <ControlECU_TWI_SlaveReceive>
		DcMotor_Rotate(CW, speed_r);
     b72:	9c a5       	ldd	r25, Y+44	; 0x2c
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	69 2f       	mov	r22, r25
     b78:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DcMotor_Rotate>
		LCD_intgerToString(speed_r);
     b7c:	8c a5       	ldd	r24, Y+44	; 0x2c
     b7e:	88 2f       	mov	r24, r24
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_intgerToString>

		distance_r=SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
     b86:	8f ef       	ldi	r24, 0xFF	; 255
     b88:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <SPI_sendReceiveByte>
     b8c:	8b a7       	std	Y+43, r24	; 0x2b
		if(distance_r<=20){
     b8e:	8b a5       	ldd	r24, Y+43	; 0x2b
     b90:	85 31       	cpi	r24, 0x15	; 21
     b92:	08 f0       	brcs	.+2      	; 0xb96 <main+0x60>
     b94:	7f c0       	rjmp	.+254    	; 0xc94 <main+0x15e>
			DcMotor_Rotate(CW,0);
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DcMotor_Rotate>
			Buzzer_tog();
     b9e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <Buzzer_tog>
			servo_set_angle(30);
     ba2:	8e e1       	ldi	r24, 0x1E	; 30
     ba4:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <servo_set_angle>
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	a0 e8       	ldi	r26, 0x80	; 128
     bae:	bf e3       	ldi	r27, 0x3F	; 63
     bb0:	8f a3       	std	Y+39, r24	; 0x27
     bb2:	98 a7       	std	Y+40, r25	; 0x28
     bb4:	a9 a7       	std	Y+41, r26	; 0x29
     bb6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bb8:	6f a1       	ldd	r22, Y+39	; 0x27
     bba:	78 a5       	ldd	r23, Y+40	; 0x28
     bbc:	89 a5       	ldd	r24, Y+41	; 0x29
     bbe:	9a a5       	ldd	r25, Y+42	; 0x2a
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	4a e7       	ldi	r20, 0x7A	; 122
     bc6:	55 e4       	ldi	r21, 0x45	; 69
     bc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bcc:	dc 01       	movw	r26, r24
     bce:	cb 01       	movw	r24, r22
     bd0:	8b a3       	std	Y+35, r24	; 0x23
     bd2:	9c a3       	std	Y+36, r25	; 0x24
     bd4:	ad a3       	std	Y+37, r26	; 0x25
     bd6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bd8:	6b a1       	ldd	r22, Y+35	; 0x23
     bda:	7c a1       	ldd	r23, Y+36	; 0x24
     bdc:	8d a1       	ldd	r24, Y+37	; 0x25
     bde:	9e a1       	ldd	r25, Y+38	; 0x26
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	40 e8       	ldi	r20, 0x80	; 128
     be6:	5f e3       	ldi	r21, 0x3F	; 63
     be8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bec:	88 23       	and	r24, r24
     bee:	2c f4       	brge	.+10     	; 0xbfa <main+0xc4>
		__ticks = 1;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	9a a3       	std	Y+34, r25	; 0x22
     bf6:	89 a3       	std	Y+33, r24	; 0x21
     bf8:	3f c0       	rjmp	.+126    	; 0xc78 <main+0x142>
	else if (__tmp > 65535)
     bfa:	6b a1       	ldd	r22, Y+35	; 0x23
     bfc:	7c a1       	ldd	r23, Y+36	; 0x24
     bfe:	8d a1       	ldd	r24, Y+37	; 0x25
     c00:	9e a1       	ldd	r25, Y+38	; 0x26
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	3f ef       	ldi	r19, 0xFF	; 255
     c06:	4f e7       	ldi	r20, 0x7F	; 127
     c08:	57 e4       	ldi	r21, 0x47	; 71
     c0a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c0e:	18 16       	cp	r1, r24
     c10:	4c f5       	brge	.+82     	; 0xc64 <main+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c12:	6f a1       	ldd	r22, Y+39	; 0x27
     c14:	78 a5       	ldd	r23, Y+40	; 0x28
     c16:	89 a5       	ldd	r24, Y+41	; 0x29
     c18:	9a a5       	ldd	r25, Y+42	; 0x2a
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	40 e2       	ldi	r20, 0x20	; 32
     c20:	51 e4       	ldi	r21, 0x41	; 65
     c22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	bc 01       	movw	r22, r24
     c2c:	cd 01       	movw	r24, r26
     c2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	9a a3       	std	Y+34, r25	; 0x22
     c38:	89 a3       	std	Y+33, r24	; 0x21
     c3a:	0f c0       	rjmp	.+30     	; 0xc5a <main+0x124>
     c3c:	80 e9       	ldi	r24, 0x90	; 144
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	98 a3       	std	Y+32, r25	; 0x20
     c42:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c44:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c46:	98 a1       	ldd	r25, Y+32	; 0x20
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <main+0x112>
     c4c:	98 a3       	std	Y+32, r25	; 0x20
     c4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c50:	89 a1       	ldd	r24, Y+33	; 0x21
     c52:	9a a1       	ldd	r25, Y+34	; 0x22
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	9a a3       	std	Y+34, r25	; 0x22
     c58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c5a:	89 a1       	ldd	r24, Y+33	; 0x21
     c5c:	9a a1       	ldd	r25, Y+34	; 0x22
     c5e:	00 97       	sbiw	r24, 0x00	; 0
     c60:	69 f7       	brne	.-38     	; 0xc3c <main+0x106>
     c62:	14 c0       	rjmp	.+40     	; 0xc8c <main+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c64:	6b a1       	ldd	r22, Y+35	; 0x23
     c66:	7c a1       	ldd	r23, Y+36	; 0x24
     c68:	8d a1       	ldd	r24, Y+37	; 0x25
     c6a:	9e a1       	ldd	r25, Y+38	; 0x26
     c6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c70:	dc 01       	movw	r26, r24
     c72:	cb 01       	movw	r24, r22
     c74:	9a a3       	std	Y+34, r25	; 0x22
     c76:	89 a3       	std	Y+33, r24	; 0x21
     c78:	89 a1       	ldd	r24, Y+33	; 0x21
     c7a:	9a a1       	ldd	r25, Y+34	; 0x22
     c7c:	9e 8f       	std	Y+30, r25	; 0x1e
     c7e:	8d 8f       	std	Y+29, r24	; 0x1d
     c80:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c82:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	f1 f7       	brne	.-4      	; 0xc84 <main+0x14e>
     c88:	9e 8f       	std	Y+30, r25	; 0x1e
     c8a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
			servo_set_angle(180);
     c8c:	84 eb       	ldi	r24, 0xB4	; 180
     c8e:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <servo_set_angle>
     c92:	6b cf       	rjmp	.-298    	; 0xb6a <main+0x34>



		}
		else{
			Buzzer_off();
     c94:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <Buzzer_off>

			servo_set_angle(45);
     c98:	8d e2       	ldi	r24, 0x2D	; 45
     c9a:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <servo_set_angle>
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	a0 e8       	ldi	r26, 0x80	; 128
     ca4:	bf e3       	ldi	r27, 0x3F	; 63
     ca6:	89 8f       	std	Y+25, r24	; 0x19
     ca8:	9a 8f       	std	Y+26, r25	; 0x1a
     caa:	ab 8f       	std	Y+27, r26	; 0x1b
     cac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cae:	69 8d       	ldd	r22, Y+25	; 0x19
     cb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	4a e7       	ldi	r20, 0x7A	; 122
     cbc:	55 e4       	ldi	r21, 0x45	; 69
     cbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cc2:	dc 01       	movw	r26, r24
     cc4:	cb 01       	movw	r24, r22
     cc6:	8d 8b       	std	Y+21, r24	; 0x15
     cc8:	9e 8b       	std	Y+22, r25	; 0x16
     cca:	af 8b       	std	Y+23, r26	; 0x17
     ccc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cce:	6d 89       	ldd	r22, Y+21	; 0x15
     cd0:	7e 89       	ldd	r23, Y+22	; 0x16
     cd2:	8f 89       	ldd	r24, Y+23	; 0x17
     cd4:	98 8d       	ldd	r25, Y+24	; 0x18
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	40 e8       	ldi	r20, 0x80	; 128
     cdc:	5f e3       	ldi	r21, 0x3F	; 63
     cde:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ce2:	88 23       	and	r24, r24
     ce4:	2c f4       	brge	.+10     	; 0xcf0 <main+0x1ba>
		__ticks = 1;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	9c 8b       	std	Y+20, r25	; 0x14
     cec:	8b 8b       	std	Y+19, r24	; 0x13
     cee:	3f c0       	rjmp	.+126    	; 0xd6e <main+0x238>
	else if (__tmp > 65535)
     cf0:	6d 89       	ldd	r22, Y+21	; 0x15
     cf2:	7e 89       	ldd	r23, Y+22	; 0x16
     cf4:	8f 89       	ldd	r24, Y+23	; 0x17
     cf6:	98 8d       	ldd	r25, Y+24	; 0x18
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	3f ef       	ldi	r19, 0xFF	; 255
     cfc:	4f e7       	ldi	r20, 0x7F	; 127
     cfe:	57 e4       	ldi	r21, 0x47	; 71
     d00:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d04:	18 16       	cp	r1, r24
     d06:	4c f5       	brge	.+82     	; 0xd5a <main+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d08:	69 8d       	ldd	r22, Y+25	; 0x19
     d0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	40 e2       	ldi	r20, 0x20	; 32
     d16:	51 e4       	ldi	r21, 0x41	; 65
     d18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	bc 01       	movw	r22, r24
     d22:	cd 01       	movw	r24, r26
     d24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d28:	dc 01       	movw	r26, r24
     d2a:	cb 01       	movw	r24, r22
     d2c:	9c 8b       	std	Y+20, r25	; 0x14
     d2e:	8b 8b       	std	Y+19, r24	; 0x13
     d30:	0f c0       	rjmp	.+30     	; 0xd50 <main+0x21a>
     d32:	80 e9       	ldi	r24, 0x90	; 144
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	9a 8b       	std	Y+18, r25	; 0x12
     d38:	89 8b       	std	Y+17, r24	; 0x11
     d3a:	89 89       	ldd	r24, Y+17	; 0x11
     d3c:	9a 89       	ldd	r25, Y+18	; 0x12
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <main+0x208>
     d42:	9a 8b       	std	Y+18, r25	; 0x12
     d44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d46:	8b 89       	ldd	r24, Y+19	; 0x13
     d48:	9c 89       	ldd	r25, Y+20	; 0x14
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	9c 8b       	std	Y+20, r25	; 0x14
     d4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d50:	8b 89       	ldd	r24, Y+19	; 0x13
     d52:	9c 89       	ldd	r25, Y+20	; 0x14
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	69 f7       	brne	.-38     	; 0xd32 <main+0x1fc>
     d58:	14 c0       	rjmp	.+40     	; 0xd82 <main+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d5a:	6d 89       	ldd	r22, Y+21	; 0x15
     d5c:	7e 89       	ldd	r23, Y+22	; 0x16
     d5e:	8f 89       	ldd	r24, Y+23	; 0x17
     d60:	98 8d       	ldd	r25, Y+24	; 0x18
     d62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	9c 8b       	std	Y+20, r25	; 0x14
     d6c:	8b 8b       	std	Y+19, r24	; 0x13
     d6e:	8b 89       	ldd	r24, Y+19	; 0x13
     d70:	9c 89       	ldd	r25, Y+20	; 0x14
     d72:	98 8b       	std	Y+16, r25	; 0x10
     d74:	8f 87       	std	Y+15, r24	; 0x0f
     d76:	8f 85       	ldd	r24, Y+15	; 0x0f
     d78:	98 89       	ldd	r25, Y+16	; 0x10
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <main+0x244>
     d7e:	98 8b       	std	Y+16, r25	; 0x10
     d80:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);

			servo_set_angle(0);
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <servo_set_angle>
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	a0 e8       	ldi	r26, 0x80	; 128
     d8e:	bf e3       	ldi	r27, 0x3F	; 63
     d90:	8b 87       	std	Y+11, r24	; 0x0b
     d92:	9c 87       	std	Y+12, r25	; 0x0c
     d94:	ad 87       	std	Y+13, r26	; 0x0d
     d96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d98:	6b 85       	ldd	r22, Y+11	; 0x0b
     d9a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	4a e7       	ldi	r20, 0x7A	; 122
     da6:	55 e4       	ldi	r21, 0x45	; 69
     da8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	8f 83       	std	Y+7, r24	; 0x07
     db2:	98 87       	std	Y+8, r25	; 0x08
     db4:	a9 87       	std	Y+9, r26	; 0x09
     db6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     db8:	6f 81       	ldd	r22, Y+7	; 0x07
     dba:	78 85       	ldd	r23, Y+8	; 0x08
     dbc:	89 85       	ldd	r24, Y+9	; 0x09
     dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	40 e8       	ldi	r20, 0x80	; 128
     dc6:	5f e3       	ldi	r21, 0x3F	; 63
     dc8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     dcc:	88 23       	and	r24, r24
     dce:	2c f4       	brge	.+10     	; 0xdda <main+0x2a4>
		__ticks = 1;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	9e 83       	std	Y+6, r25	; 0x06
     dd6:	8d 83       	std	Y+5, r24	; 0x05
     dd8:	3f c0       	rjmp	.+126    	; 0xe58 <main+0x322>
	else if (__tmp > 65535)
     dda:	6f 81       	ldd	r22, Y+7	; 0x07
     ddc:	78 85       	ldd	r23, Y+8	; 0x08
     dde:	89 85       	ldd	r24, Y+9	; 0x09
     de0:	9a 85       	ldd	r25, Y+10	; 0x0a
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	3f ef       	ldi	r19, 0xFF	; 255
     de6:	4f e7       	ldi	r20, 0x7F	; 127
     de8:	57 e4       	ldi	r21, 0x47	; 71
     dea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     dee:	18 16       	cp	r1, r24
     df0:	4c f5       	brge	.+82     	; 0xe44 <main+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df2:	6b 85       	ldd	r22, Y+11	; 0x0b
     df4:	7c 85       	ldd	r23, Y+12	; 0x0c
     df6:	8d 85       	ldd	r24, Y+13	; 0x0d
     df8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e2       	ldi	r20, 0x20	; 32
     e00:	51 e4       	ldi	r21, 0x41	; 65
     e02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	bc 01       	movw	r22, r24
     e0c:	cd 01       	movw	r24, r26
     e0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	9e 83       	std	Y+6, r25	; 0x06
     e18:	8d 83       	std	Y+5, r24	; 0x05
     e1a:	0f c0       	rjmp	.+30     	; 0xe3a <main+0x304>
     e1c:	80 e9       	ldi	r24, 0x90	; 144
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	9c 83       	std	Y+4, r25	; 0x04
     e22:	8b 83       	std	Y+3, r24	; 0x03
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	9c 81       	ldd	r25, Y+4	; 0x04
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <main+0x2f2>
     e2c:	9c 83       	std	Y+4, r25	; 0x04
     e2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e30:	8d 81       	ldd	r24, Y+5	; 0x05
     e32:	9e 81       	ldd	r25, Y+6	; 0x06
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	9e 83       	std	Y+6, r25	; 0x06
     e38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e3a:	8d 81       	ldd	r24, Y+5	; 0x05
     e3c:	9e 81       	ldd	r25, Y+6	; 0x06
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	69 f7       	brne	.-38     	; 0xe1c <main+0x2e6>
     e42:	93 ce       	rjmp	.-730    	; 0xb6a <main+0x34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e44:	6f 81       	ldd	r22, Y+7	; 0x07
     e46:	78 85       	ldd	r23, Y+8	; 0x08
     e48:	89 85       	ldd	r24, Y+9	; 0x09
     e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	9e 83       	std	Y+6, r25	; 0x06
     e56:	8d 83       	std	Y+5, r24	; 0x05
     e58:	8d 81       	ldd	r24, Y+5	; 0x05
     e5a:	9e 81       	ldd	r25, Y+6	; 0x06
     e5c:	9a 83       	std	Y+2, r25	; 0x02
     e5e:	89 83       	std	Y+1, r24	; 0x01
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	9a 81       	ldd	r25, Y+2	; 0x02
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	f1 f7       	brne	.-4      	; 0xe64 <main+0x32e>
     e68:	9a 83       	std	Y+2, r25	; 0x02
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	7e ce       	rjmp	.-772    	; 0xb6a <main+0x34>

00000e6e <PWM_Timer0_Start>:

#include <avr/io.h>
#include "PWM.h"

void PWM_Timer0_Start(uint8 duty_cycle)
{
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	0f 92       	push	r0
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	89 83       	std	Y+1, r24	; 0x01
    // Set OC0 (PB3) as output
    DDRB |= (1 << PB3);
     e7e:	a7 e3       	ldi	r26, 0x37	; 55
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e7 e3       	ldi	r30, 0x37	; 55
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	88 60       	ori	r24, 0x08	; 8
     e8a:	8c 93       	st	X, r24

    // Set Fast PWM mode (WGM00 & WGM01 = 1), Non-inverting mode (COM01 = 1)
    TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01) | (1 << CS00);
     e8c:	e3 e5       	ldi	r30, 0x53	; 83
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	8b e6       	ldi	r24, 0x6B	; 107
     e92:	80 83       	st	Z, r24
    // CS02 and CS00 -> Prescaler = 64

    // Set duty cycle (0-100%)
    OCR0 = (uint8)((duty_cycle * 255UL) / 100);
     e94:	0c e5       	ldi	r16, 0x5C	; 92
     e96:	10 e0       	ldi	r17, 0x00	; 0
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	a0 e0       	ldi	r26, 0x00	; 0
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	2f ef       	ldi	r18, 0xFF	; 255
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	bc 01       	movw	r22, r24
     eac:	cd 01       	movw	r24, r26
     eae:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__mulsi3>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	24 e6       	ldi	r18, 0x64	; 100
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e0       	ldi	r20, 0x00	; 0
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	bc 01       	movw	r22, r24
     ec0:	cd 01       	movw	r24, r26
     ec2:	0e 94 09 18 	call	0x3012	; 0x3012 <__udivmodsi4>
     ec6:	da 01       	movw	r26, r20
     ec8:	c9 01       	movw	r24, r18
     eca:	f8 01       	movw	r30, r16
     ecc:	80 83       	st	Z, r24
}
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	08 95       	ret

00000eda <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <GPIO_setupPinDirection+0x6>
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <GPIO_setupPinDirection+0x8>
     ee2:	0f 92       	push	r0
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	6a 83       	std	Y+2, r22	; 0x02
     eec:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	88 30       	cpi	r24, 0x08	; 8
     ef2:	08 f0       	brcs	.+2      	; 0xef6 <GPIO_setupPinDirection+0x1c>
     ef4:	d5 c0       	rjmp	.+426    	; 0x10a0 <GPIO_setupPinDirection+0x1c6>
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	84 30       	cpi	r24, 0x04	; 4
     efa:	08 f0       	brcs	.+2      	; 0xefe <GPIO_setupPinDirection+0x24>
     efc:	d1 c0       	rjmp	.+418    	; 0x10a0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	3d 83       	std	Y+5, r19	; 0x05
     f06:	2c 83       	std	Y+4, r18	; 0x04
     f08:	8c 81       	ldd	r24, Y+4	; 0x04
     f0a:	9d 81       	ldd	r25, Y+5	; 0x05
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	91 05       	cpc	r25, r1
     f10:	09 f4       	brne	.+2      	; 0xf14 <GPIO_setupPinDirection+0x3a>
     f12:	43 c0       	rjmp	.+134    	; 0xf9a <GPIO_setupPinDirection+0xc0>
     f14:	2c 81       	ldd	r18, Y+4	; 0x04
     f16:	3d 81       	ldd	r19, Y+5	; 0x05
     f18:	22 30       	cpi	r18, 0x02	; 2
     f1a:	31 05       	cpc	r19, r1
     f1c:	2c f4       	brge	.+10     	; 0xf28 <GPIO_setupPinDirection+0x4e>
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	9d 81       	ldd	r25, Y+5	; 0x05
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	71 f0       	breq	.+28     	; 0xf42 <GPIO_setupPinDirection+0x68>
     f26:	bc c0       	rjmp	.+376    	; 0x10a0 <GPIO_setupPinDirection+0x1c6>
     f28:	2c 81       	ldd	r18, Y+4	; 0x04
     f2a:	3d 81       	ldd	r19, Y+5	; 0x05
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <GPIO_setupPinDirection+0x5a>
     f32:	5f c0       	rjmp	.+190    	; 0xff2 <GPIO_setupPinDirection+0x118>
     f34:	8c 81       	ldd	r24, Y+4	; 0x04
     f36:	9d 81       	ldd	r25, Y+5	; 0x05
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	91 05       	cpc	r25, r1
     f3c:	09 f4       	brne	.+2      	; 0xf40 <GPIO_setupPinDirection+0x66>
     f3e:	85 c0       	rjmp	.+266    	; 0x104a <GPIO_setupPinDirection+0x170>
     f40:	af c0       	rjmp	.+350    	; 0x10a0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	a1 f4       	brne	.+40     	; 0xf70 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f48:	aa e3       	ldi	r26, 0x3A	; 58
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ea e3       	ldi	r30, 0x3A	; 58
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <GPIO_setupPinDirection+0x8c>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <GPIO_setupPinDirection+0x88>
     f6a:	84 2b       	or	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	98 c0       	rjmp	.+304    	; 0x10a0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f70:	aa e3       	ldi	r26, 0x3A	; 58
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ea e3       	ldi	r30, 0x3A	; 58
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <GPIO_setupPinDirection+0xb4>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <GPIO_setupPinDirection+0xb0>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	83 c0       	rjmp	.+262    	; 0x10a0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	a1 f4       	brne	.+40     	; 0xfc8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     fa0:	a7 e3       	ldi	r26, 0x37	; 55
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e7 e3       	ldi	r30, 0x37	; 55
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <GPIO_setupPinDirection+0xe4>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <GPIO_setupPinDirection+0xe0>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	6c c0       	rjmp	.+216    	; 0x10a0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     fc8:	a7 e3       	ldi	r26, 0x37	; 55
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e7 e3       	ldi	r30, 0x37	; 55
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <GPIO_setupPinDirection+0x10c>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <GPIO_setupPinDirection+0x108>
     fea:	80 95       	com	r24
     fec:	84 23       	and	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	57 c0       	rjmp	.+174    	; 0x10a0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	a1 f4       	brne	.+40     	; 0x1020 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     ff8:	a4 e3       	ldi	r26, 0x34	; 52
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e4 e3       	ldi	r30, 0x34	; 52
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <GPIO_setupPinDirection+0x13c>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <GPIO_setupPinDirection+0x138>
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	40 c0       	rjmp	.+128    	; 0x10a0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1020:	a4 e3       	ldi	r26, 0x34	; 52
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e4 e3       	ldi	r30, 0x34	; 52
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <GPIO_setupPinDirection+0x164>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <GPIO_setupPinDirection+0x160>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	2b c0       	rjmp	.+86     	; 0x10a0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	a1 f4       	brne	.+40     	; 0x1078 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1050:	a1 e3       	ldi	r26, 0x31	; 49
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e1 e3       	ldi	r30, 0x31	; 49
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <GPIO_setupPinDirection+0x194>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <GPIO_setupPinDirection+0x190>
    1072:	84 2b       	or	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	14 c0       	rjmp	.+40     	; 0x10a0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1078:	a1 e3       	ldi	r26, 0x31	; 49
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e1 e3       	ldi	r30, 0x31	; 49
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <GPIO_setupPinDirection+0x1bc>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <GPIO_setupPinDirection+0x1b8>
    109a:	80 95       	com	r24
    109c:	84 23       	and	r24, r20
    109e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePin+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePin+0x8>
    10b8:	0f 92       	push	r0
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	6a 83       	std	Y+2, r22	; 0x02
    10c2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	88 30       	cpi	r24, 0x08	; 8
    10c8:	08 f0       	brcs	.+2      	; 0x10cc <GPIO_writePin+0x1c>
    10ca:	d5 c0       	rjmp	.+426    	; 0x1276 <GPIO_writePin+0x1c6>
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	84 30       	cpi	r24, 0x04	; 4
    10d0:	08 f0       	brcs	.+2      	; 0x10d4 <GPIO_writePin+0x24>
    10d2:	d1 c0       	rjmp	.+418    	; 0x1276 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	3d 83       	std	Y+5, r19	; 0x05
    10dc:	2c 83       	std	Y+4, r18	; 0x04
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	9d 81       	ldd	r25, Y+5	; 0x05
    10e2:	81 30       	cpi	r24, 0x01	; 1
    10e4:	91 05       	cpc	r25, r1
    10e6:	09 f4       	brne	.+2      	; 0x10ea <GPIO_writePin+0x3a>
    10e8:	43 c0       	rjmp	.+134    	; 0x1170 <GPIO_writePin+0xc0>
    10ea:	2c 81       	ldd	r18, Y+4	; 0x04
    10ec:	3d 81       	ldd	r19, Y+5	; 0x05
    10ee:	22 30       	cpi	r18, 0x02	; 2
    10f0:	31 05       	cpc	r19, r1
    10f2:	2c f4       	brge	.+10     	; 0x10fe <GPIO_writePin+0x4e>
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	9d 81       	ldd	r25, Y+5	; 0x05
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	71 f0       	breq	.+28     	; 0x1118 <GPIO_writePin+0x68>
    10fc:	bc c0       	rjmp	.+376    	; 0x1276 <GPIO_writePin+0x1c6>
    10fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1100:	3d 81       	ldd	r19, Y+5	; 0x05
    1102:	22 30       	cpi	r18, 0x02	; 2
    1104:	31 05       	cpc	r19, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <GPIO_writePin+0x5a>
    1108:	5f c0       	rjmp	.+190    	; 0x11c8 <GPIO_writePin+0x118>
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
    110c:	9d 81       	ldd	r25, Y+5	; 0x05
    110e:	83 30       	cpi	r24, 0x03	; 3
    1110:	91 05       	cpc	r25, r1
    1112:	09 f4       	brne	.+2      	; 0x1116 <GPIO_writePin+0x66>
    1114:	85 c0       	rjmp	.+266    	; 0x1220 <GPIO_writePin+0x170>
    1116:	af c0       	rjmp	.+350    	; 0x1276 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	a1 f4       	brne	.+40     	; 0x1146 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    111e:	ab e3       	ldi	r26, 0x3B	; 59
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	eb e3       	ldi	r30, 0x3B	; 59
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <GPIO_writePin+0x8c>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <GPIO_writePin+0x88>
    1140:	84 2b       	or	r24, r20
    1142:	8c 93       	st	X, r24
    1144:	98 c0       	rjmp	.+304    	; 0x1276 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1146:	ab e3       	ldi	r26, 0x3B	; 59
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	eb e3       	ldi	r30, 0x3B	; 59
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <GPIO_writePin+0xb4>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <GPIO_writePin+0xb0>
    1168:	80 95       	com	r24
    116a:	84 23       	and	r24, r20
    116c:	8c 93       	st	X, r24
    116e:	83 c0       	rjmp	.+262    	; 0x1276 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	a1 f4       	brne	.+40     	; 0x119e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1176:	a8 e3       	ldi	r26, 0x38	; 56
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e8 e3       	ldi	r30, 0x38	; 56
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	48 2f       	mov	r20, r24
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 2e       	mov	r0, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <GPIO_writePin+0xe4>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	0a 94       	dec	r0
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <GPIO_writePin+0xe0>
    1198:	84 2b       	or	r24, r20
    119a:	8c 93       	st	X, r24
    119c:	6c c0       	rjmp	.+216    	; 0x1276 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    119e:	a8 e3       	ldi	r26, 0x38	; 56
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e8 e3       	ldi	r30, 0x38	; 56
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <GPIO_writePin+0x10c>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <GPIO_writePin+0x108>
    11c0:	80 95       	com	r24
    11c2:	84 23       	and	r24, r20
    11c4:	8c 93       	st	X, r24
    11c6:	57 c0       	rjmp	.+174    	; 0x1276 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	a1 f4       	brne	.+40     	; 0x11f6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    11ce:	a5 e3       	ldi	r26, 0x35	; 53
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e5 e3       	ldi	r30, 0x35	; 53
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <GPIO_writePin+0x13c>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <GPIO_writePin+0x138>
    11f0:	84 2b       	or	r24, r20
    11f2:	8c 93       	st	X, r24
    11f4:	40 c0       	rjmp	.+128    	; 0x1276 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    11f6:	a5 e3       	ldi	r26, 0x35	; 53
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e5 e3       	ldi	r30, 0x35	; 53
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <GPIO_writePin+0x164>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <GPIO_writePin+0x160>
    1218:	80 95       	com	r24
    121a:	84 23       	and	r24, r20
    121c:	8c 93       	st	X, r24
    121e:	2b c0       	rjmp	.+86     	; 0x1276 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	a1 f4       	brne	.+40     	; 0x124e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1226:	a2 e3       	ldi	r26, 0x32	; 50
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e2 e3       	ldi	r30, 0x32	; 50
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <GPIO_writePin+0x194>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <GPIO_writePin+0x190>
    1248:	84 2b       	or	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	14 c0       	rjmp	.+40     	; 0x1276 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    124e:	a2 e3       	ldi	r26, 0x32	; 50
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e2 e3       	ldi	r30, 0x32	; 50
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <GPIO_writePin+0x1bc>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <GPIO_writePin+0x1b8>
    1270:	80 95       	com	r24
    1272:	84 23       	and	r24, r20
    1274:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	00 d0       	rcall	.+0      	; 0x128c <GPIO_readPin+0x6>
    128c:	00 d0       	rcall	.+0      	; 0x128e <GPIO_readPin+0x8>
    128e:	0f 92       	push	r0
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	8a 83       	std	Y+2, r24	; 0x02
    1296:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1298:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	88 30       	cpi	r24, 0x08	; 8
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <GPIO_readPin+0x1c>
    12a0:	84 c0       	rjmp	.+264    	; 0x13aa <GPIO_readPin+0x124>
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	84 30       	cpi	r24, 0x04	; 4
    12a6:	08 f0       	brcs	.+2      	; 0x12aa <GPIO_readPin+0x24>
    12a8:	80 c0       	rjmp	.+256    	; 0x13aa <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	3d 83       	std	Y+5, r19	; 0x05
    12b2:	2c 83       	std	Y+4, r18	; 0x04
    12b4:	4c 81       	ldd	r20, Y+4	; 0x04
    12b6:	5d 81       	ldd	r21, Y+5	; 0x05
    12b8:	41 30       	cpi	r20, 0x01	; 1
    12ba:	51 05       	cpc	r21, r1
    12bc:	79 f1       	breq	.+94     	; 0x131c <GPIO_readPin+0x96>
    12be:	8c 81       	ldd	r24, Y+4	; 0x04
    12c0:	9d 81       	ldd	r25, Y+5	; 0x05
    12c2:	82 30       	cpi	r24, 0x02	; 2
    12c4:	91 05       	cpc	r25, r1
    12c6:	34 f4       	brge	.+12     	; 0x12d4 <GPIO_readPin+0x4e>
    12c8:	2c 81       	ldd	r18, Y+4	; 0x04
    12ca:	3d 81       	ldd	r19, Y+5	; 0x05
    12cc:	21 15       	cp	r18, r1
    12ce:	31 05       	cpc	r19, r1
    12d0:	69 f0       	breq	.+26     	; 0x12ec <GPIO_readPin+0x66>
    12d2:	6b c0       	rjmp	.+214    	; 0x13aa <GPIO_readPin+0x124>
    12d4:	4c 81       	ldd	r20, Y+4	; 0x04
    12d6:	5d 81       	ldd	r21, Y+5	; 0x05
    12d8:	42 30       	cpi	r20, 0x02	; 2
    12da:	51 05       	cpc	r21, r1
    12dc:	b9 f1       	breq	.+110    	; 0x134c <GPIO_readPin+0xc6>
    12de:	8c 81       	ldd	r24, Y+4	; 0x04
    12e0:	9d 81       	ldd	r25, Y+5	; 0x05
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	91 05       	cpc	r25, r1
    12e6:	09 f4       	brne	.+2      	; 0x12ea <GPIO_readPin+0x64>
    12e8:	49 c0       	rjmp	.+146    	; 0x137c <GPIO_readPin+0xf6>
    12ea:	5f c0       	rjmp	.+190    	; 0x13aa <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    12ec:	e9 e3       	ldi	r30, 0x39	; 57
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	88 2f       	mov	r24, r24
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	a9 01       	movw	r20, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <GPIO_readPin+0x7e>
    1300:	55 95       	asr	r21
    1302:	47 95       	ror	r20
    1304:	8a 95       	dec	r24
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <GPIO_readPin+0x7a>
    1308:	ca 01       	movw	r24, r20
    130a:	81 70       	andi	r24, 0x01	; 1
    130c:	90 70       	andi	r25, 0x00	; 0
    130e:	88 23       	and	r24, r24
    1310:	19 f0       	breq	.+6      	; 0x1318 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	49 c0       	rjmp	.+146    	; 0x13aa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1318:	19 82       	std	Y+1, r1	; 0x01
    131a:	47 c0       	rjmp	.+142    	; 0x13aa <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    131c:	e6 e3       	ldi	r30, 0x36	; 54
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a9 01       	movw	r20, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <GPIO_readPin+0xae>
    1330:	55 95       	asr	r21
    1332:	47 95       	ror	r20
    1334:	8a 95       	dec	r24
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <GPIO_readPin+0xaa>
    1338:	ca 01       	movw	r24, r20
    133a:	81 70       	andi	r24, 0x01	; 1
    133c:	90 70       	andi	r25, 0x00	; 0
    133e:	88 23       	and	r24, r24
    1340:	19 f0       	breq	.+6      	; 0x1348 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	31 c0       	rjmp	.+98     	; 0x13aa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1348:	19 82       	std	Y+1, r1	; 0x01
    134a:	2f c0       	rjmp	.+94     	; 0x13aa <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    134c:	e3 e3       	ldi	r30, 0x33	; 51
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	88 2f       	mov	r24, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	a9 01       	movw	r20, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <GPIO_readPin+0xde>
    1360:	55 95       	asr	r21
    1362:	47 95       	ror	r20
    1364:	8a 95       	dec	r24
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <GPIO_readPin+0xda>
    1368:	ca 01       	movw	r24, r20
    136a:	81 70       	andi	r24, 0x01	; 1
    136c:	90 70       	andi	r25, 0x00	; 0
    136e:	88 23       	and	r24, r24
    1370:	19 f0       	breq	.+6      	; 0x1378 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	19 c0       	rjmp	.+50     	; 0x13aa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1378:	19 82       	std	Y+1, r1	; 0x01
    137a:	17 c0       	rjmp	.+46     	; 0x13aa <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    137c:	e0 e3       	ldi	r30, 0x30	; 48
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	88 2f       	mov	r24, r24
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	a9 01       	movw	r20, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <GPIO_readPin+0x10e>
    1390:	55 95       	asr	r21
    1392:	47 95       	ror	r20
    1394:	8a 95       	dec	r24
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <GPIO_readPin+0x10a>
    1398:	ca 01       	movw	r24, r20
    139a:	81 70       	andi	r24, 0x01	; 1
    139c:	90 70       	andi	r25, 0x00	; 0
    139e:	88 23       	and	r24, r24
    13a0:	19 f0       	breq	.+6      	; 0x13a8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13a8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <GPIO_setupPortDirection+0x6>
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <GPIO_setupPortDirection+0x8>
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	84 30       	cpi	r24, 0x04	; 4
    13d0:	90 f5       	brcc	.+100    	; 0x1436 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	3c 83       	std	Y+4, r19	; 0x04
    13da:	2b 83       	std	Y+3, r18	; 0x03
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	9c 81       	ldd	r25, Y+4	; 0x04
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	91 05       	cpc	r25, r1
    13e4:	d1 f0       	breq	.+52     	; 0x141a <GPIO_setupPortDirection+0x5e>
    13e6:	2b 81       	ldd	r18, Y+3	; 0x03
    13e8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ea:	22 30       	cpi	r18, 0x02	; 2
    13ec:	31 05       	cpc	r19, r1
    13ee:	2c f4       	brge	.+10     	; 0x13fa <GPIO_setupPortDirection+0x3e>
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	9c 81       	ldd	r25, Y+4	; 0x04
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	61 f0       	breq	.+24     	; 0x1410 <GPIO_setupPortDirection+0x54>
    13f8:	1e c0       	rjmp	.+60     	; 0x1436 <GPIO_setupPortDirection+0x7a>
    13fa:	2b 81       	ldd	r18, Y+3	; 0x03
    13fc:	3c 81       	ldd	r19, Y+4	; 0x04
    13fe:	22 30       	cpi	r18, 0x02	; 2
    1400:	31 05       	cpc	r19, r1
    1402:	81 f0       	breq	.+32     	; 0x1424 <GPIO_setupPortDirection+0x68>
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	91 05       	cpc	r25, r1
    140c:	81 f0       	breq	.+32     	; 0x142e <GPIO_setupPortDirection+0x72>
    140e:	13 c0       	rjmp	.+38     	; 0x1436 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1410:	ea e3       	ldi	r30, 0x3A	; 58
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	80 83       	st	Z, r24
    1418:	0e c0       	rjmp	.+28     	; 0x1436 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    141a:	e7 e3       	ldi	r30, 0x37	; 55
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	80 83       	st	Z, r24
    1422:	09 c0       	rjmp	.+18     	; 0x1436 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1424:	e4 e3       	ldi	r30, 0x34	; 52
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	80 83       	st	Z, r24
    142c:	04 c0       	rjmp	.+8      	; 0x1436 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    142e:	e1 e3       	ldi	r30, 0x31	; 49
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	80 83       	st	Z, r24
			break;
		}
	}
}
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	00 d0       	rcall	.+0      	; 0x144a <GPIO_writePort+0x6>
    144a:	00 d0       	rcall	.+0      	; 0x144c <GPIO_writePort+0x8>
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	84 30       	cpi	r24, 0x04	; 4
    1458:	90 f5       	brcc	.+100    	; 0x14be <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	3c 83       	std	Y+4, r19	; 0x04
    1462:	2b 83       	std	Y+3, r18	; 0x03
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	81 30       	cpi	r24, 0x01	; 1
    146a:	91 05       	cpc	r25, r1
    146c:	d1 f0       	breq	.+52     	; 0x14a2 <GPIO_writePort+0x5e>
    146e:	2b 81       	ldd	r18, Y+3	; 0x03
    1470:	3c 81       	ldd	r19, Y+4	; 0x04
    1472:	22 30       	cpi	r18, 0x02	; 2
    1474:	31 05       	cpc	r19, r1
    1476:	2c f4       	brge	.+10     	; 0x1482 <GPIO_writePort+0x3e>
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	61 f0       	breq	.+24     	; 0x1498 <GPIO_writePort+0x54>
    1480:	1e c0       	rjmp	.+60     	; 0x14be <GPIO_writePort+0x7a>
    1482:	2b 81       	ldd	r18, Y+3	; 0x03
    1484:	3c 81       	ldd	r19, Y+4	; 0x04
    1486:	22 30       	cpi	r18, 0x02	; 2
    1488:	31 05       	cpc	r19, r1
    148a:	81 f0       	breq	.+32     	; 0x14ac <GPIO_writePort+0x68>
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	9c 81       	ldd	r25, Y+4	; 0x04
    1490:	83 30       	cpi	r24, 0x03	; 3
    1492:	91 05       	cpc	r25, r1
    1494:	81 f0       	breq	.+32     	; 0x14b6 <GPIO_writePort+0x72>
    1496:	13 c0       	rjmp	.+38     	; 0x14be <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1498:	eb e3       	ldi	r30, 0x3B	; 59
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	80 83       	st	Z, r24
    14a0:	0e c0       	rjmp	.+28     	; 0x14be <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    14a2:	e8 e3       	ldi	r30, 0x38	; 56
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	80 83       	st	Z, r24
    14aa:	09 c0       	rjmp	.+18     	; 0x14be <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    14ac:	e5 e3       	ldi	r30, 0x35	; 53
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	80 83       	st	Z, r24
    14b4:	04 c0       	rjmp	.+8      	; 0x14be <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    14b6:	e2 e3       	ldi	r30, 0x32	; 50
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	80 83       	st	Z, r24
			break;
		}
	}
}
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <GPIO_readPort+0x6>
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <GPIO_readPort+0x8>
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    14da:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	84 30       	cpi	r24, 0x04	; 4
    14e0:	90 f5       	brcc	.+100    	; 0x1546 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	3c 83       	std	Y+4, r19	; 0x04
    14ea:	2b 83       	std	Y+3, r18	; 0x03
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	9c 81       	ldd	r25, Y+4	; 0x04
    14f0:	81 30       	cpi	r24, 0x01	; 1
    14f2:	91 05       	cpc	r25, r1
    14f4:	d1 f0       	breq	.+52     	; 0x152a <GPIO_readPort+0x5e>
    14f6:	2b 81       	ldd	r18, Y+3	; 0x03
    14f8:	3c 81       	ldd	r19, Y+4	; 0x04
    14fa:	22 30       	cpi	r18, 0x02	; 2
    14fc:	31 05       	cpc	r19, r1
    14fe:	2c f4       	brge	.+10     	; 0x150a <GPIO_readPort+0x3e>
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	9c 81       	ldd	r25, Y+4	; 0x04
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	61 f0       	breq	.+24     	; 0x1520 <GPIO_readPort+0x54>
    1508:	1e c0       	rjmp	.+60     	; 0x1546 <GPIO_readPort+0x7a>
    150a:	2b 81       	ldd	r18, Y+3	; 0x03
    150c:	3c 81       	ldd	r19, Y+4	; 0x04
    150e:	22 30       	cpi	r18, 0x02	; 2
    1510:	31 05       	cpc	r19, r1
    1512:	81 f0       	breq	.+32     	; 0x1534 <GPIO_readPort+0x68>
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	83 30       	cpi	r24, 0x03	; 3
    151a:	91 05       	cpc	r25, r1
    151c:	81 f0       	breq	.+32     	; 0x153e <GPIO_readPort+0x72>
    151e:	13 c0       	rjmp	.+38     	; 0x1546 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1520:	e9 e3       	ldi	r30, 0x39	; 57
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	0e c0       	rjmp	.+28     	; 0x1546 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    152a:	e6 e3       	ldi	r30, 0x36	; 54
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	09 c0       	rjmp	.+18     	; 0x1546 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1534:	e3 e3       	ldi	r30, 0x33	; 51
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	04 c0       	rjmp	.+8      	; 0x1546 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    153e:	e0 e3       	ldi	r30, 0x30	; 48
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1546:	89 81       	ldd	r24, Y+1	; 0x01
}
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <SPI_initMaster>:
/*
 * Description :
 * Initialize the SPI device as Master.
 */
void SPI_initMaster(void) 
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	64 e0       	ldi	r22, 0x04	; 4
    1562:	41 e0       	ldi	r20, 0x01	; 1
    1564:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	65 e0       	ldi	r22, 0x05	; 5
    156c:	41 e0       	ldi	r20, 0x01	; 1
    156e:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_INPUT);
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	66 e0       	ldi	r22, 0x06	; 6
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	67 e0       	ldi	r22, 0x07	; 7
    1580:	41 e0       	ldi	r20, 0x01	; 1
    1582:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_setupPinDirection>
     * MSTR    = 1 Enable Master
     * CPOL    = 0 SCK is low when idle
     * CPHA    = 0 Sample Data with the raising edge
     * SPR1:0  = 00 Choose SPI clock = Fosc/4
     ***********************************************************************/
	SPCR = (1<<SPE) | (1<<MSTR);
    1586:	ed e2       	ldi	r30, 0x2D	; 45
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 e5       	ldi	r24, 0x50	; 80
    158c:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    158e:	ae e2       	ldi	r26, 0x2E	; 46
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	ee e2       	ldi	r30, 0x2E	; 46
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	8e 7f       	andi	r24, 0xFE	; 254
    159a:	8c 93       	st	X, r24
}
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <SPI_initSlave>:
/*
 * Description :
 * Initialize the SPI device as Slave.
 */
void SPI_initSlave(void)
{ 
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_INPUT);
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	64 e0       	ldi	r22, 0x04	; 4
    15ae:	40 e0       	ldi	r20, 0x00	; 0
    15b0:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_INPUT);
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	65 e0       	ldi	r22, 0x05	; 5
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_OUTPUT);
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	66 e0       	ldi	r22, 0x06	; 6
    15c2:	41 e0       	ldi	r20, 0x01	; 1
    15c4:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_INPUT);
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	67 e0       	ldi	r22, 0x07	; 7
    15cc:	40 e0       	ldi	r20, 0x00	; 0
    15ce:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_setupPinDirection>
	 * MSTR    = 0 Disable Master
	 * CPOL    = 0 SCK is low when idle
	 * CPHA    = 0 Sample Data with the raising edge
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	SPCR = (1<<SPE);
    15d2:	ed e2       	ldi	r30, 0x2D	; 45
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 e4       	ldi	r24, 0x40	; 64
    15d8:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    15da:	ae e2       	ldi	r26, 0x2E	; 46
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	ee e2       	ldi	r30, 0x2E	; 46
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	8e 7f       	andi	r24, 0xFE	; 254
    15e6:	8c 93       	st	X, r24
}
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <SPI_sendReceiveByte>:
 * Description :
 * Send the required data through SPI to the other SPI device.
 * In the same time data will be received from the other device.
 */
uint8 SPI_sendReceiveByte(uint8 data)
{
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	0f 92       	push	r0
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPDR = data;
    15fa:	ef e2       	ldi	r30, 0x2F	; 47
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
    1602:	ee e2       	ldi	r30, 0x2E	; 46
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	88 23       	and	r24, r24
    160a:	dc f7       	brge	.-10     	; 0x1602 <SPI_sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPDR;
    160c:	ef e2       	ldi	r30, 0x2F	; 47
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
}
    1612:	0f 90       	pop	r0
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <SPI_sendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_sendString(const uint8 *str)
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	00 d0       	rcall	.+0      	; 0x1620 <SPI_sendString+0x6>
    1620:	00 d0       	rcall	.+0      	; 0x1622 <SPI_sendString+0x8>
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	9c 83       	std	Y+4, r25	; 0x04
    1628:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    162a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 received_data = 0;
    162c:	19 82       	std	Y+1, r1	; 0x01
    162e:	0f c0       	rjmp	.+30     	; 0x164e <SPI_sendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	9c 81       	ldd	r25, Y+4	; 0x04
    163a:	fc 01       	movw	r30, r24
    163c:	e2 0f       	add	r30, r18
    163e:	f3 1f       	adc	r31, r19
    1640:	80 81       	ld	r24, Z
    1642:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <SPI_sendReceiveByte>
    1646:	89 83       	std	Y+1, r24	; 0x01
		i++;
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	8f 5f       	subi	r24, 0xFF	; 255
    164c:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 i = 0;
	uint8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	fc 01       	movw	r30, r24
    165a:	e2 0f       	add	r30, r18
    165c:	f3 1f       	adc	r31, r19
    165e:	80 81       	ld	r24, Z
    1660:	88 23       	and	r24, r24
    1662:	31 f7       	brne	.-52     	; 0x1630 <SPI_sendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
		i++;
	}
}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <SPI_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_receiveString(uint8 *str)
{
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	00 d0       	rcall	.+0      	; 0x167c <SPI_receiveString+0xa>
    167c:	0f 92       	push	r0
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	9b 83       	std	Y+3, r25	; 0x03
    1684:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1686:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	9b 81       	ldd	r25, Y+3	; 0x03
    1692:	8c 01       	movw	r16, r24
    1694:	02 0f       	add	r16, r18
    1696:	13 1f       	adc	r17, r19
    1698:	8f ef       	ldi	r24, 0xFF	; 255
    169a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <SPI_sendReceiveByte>
    169e:	f8 01       	movw	r30, r16
    16a0:	80 83       	st	Z, r24
    16a2:	10 c0       	rjmp	.+32     	; 0x16c4 <SPI_receiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	8f 5f       	subi	r24, 0xFF	; 255
    16a8:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	9b 81       	ldd	r25, Y+3	; 0x03
    16b4:	8c 01       	movw	r16, r24
    16b6:	02 0f       	add	r16, r18
    16b8:	13 1f       	adc	r17, r19
    16ba:	8f ef       	ldi	r24, 0xFF	; 255
    16bc:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <SPI_sendReceiveByte>
    16c0:	f8 01       	movw	r30, r16
    16c2:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	9b 81       	ldd	r25, Y+3	; 0x03
    16ce:	fc 01       	movw	r30, r24
    16d0:	e2 0f       	add	r30, r18
    16d2:	f3 1f       	adc	r31, r19
    16d4:	80 81       	ld	r24, Z
    16d6:	83 32       	cpi	r24, 0x23	; 35
    16d8:	29 f7       	brne	.-54     	; 0x16a4 <SPI_receiveString+0x32>
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	9b 81       	ldd	r25, Y+3	; 0x03
    16e4:	fc 01       	movw	r30, r24
    16e6:	e2 0f       	add	r30, r18
    16e8:	f3 1f       	adc	r31, r19
    16ea:	10 82       	st	Z, r1
}
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	1f 91       	pop	r17
    16f8:	0f 91       	pop	r16
    16fa:	08 95       	ret

000016fc <TWI_init>:
#include "../common/common_macros.h"
#include <avr/io.h>
#include<util/delay.h>
#include"../hal/lcd.h"

void TWI_init(const TWI_ConfigType * Config_Ptr){
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	00 d0       	rcall	.+0      	; 0x1702 <TWI_init+0x6>
    1702:	00 d0       	rcall	.+0      	; 0x1704 <TWI_init+0x8>
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	9a 83       	std	Y+2, r25	; 0x02
    170a:	89 83       	std	Y+1, r24	; 0x01



	switch(Config_Ptr->bit_rate)
    170c:	e9 81       	ldd	r30, Y+1	; 0x01
    170e:	fa 81       	ldd	r31, Y+2	; 0x02
    1710:	81 81       	ldd	r24, Z+1	; 0x01
    1712:	92 81       	ldd	r25, Z+2	; 0x02
    1714:	9c 83       	std	Y+4, r25	; 0x04
    1716:	8b 83       	std	Y+3, r24	; 0x03
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	9c 81       	ldd	r25, Y+4	; 0x04
    171c:	84 36       	cpi	r24, 0x64	; 100
    171e:	91 05       	cpc	r25, r1
    1720:	39 f0       	breq	.+14     	; 0x1730 <TWI_init+0x34>
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	21 e0       	ldi	r18, 0x01	; 1
    1728:	80 39       	cpi	r24, 0x90	; 144
    172a:	92 07       	cpc	r25, r18
    172c:	49 f0       	breq	.+18     	; 0x1740 <TWI_init+0x44>
    172e:	0f c0       	rjmp	.+30     	; 0x174e <TWI_init+0x52>
	{
	case TWI_BAUD_100KHZ:
		TWBR = 32;
    1730:	e0 e2       	ldi	r30, 0x20	; 32
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 e2       	ldi	r24, 0x20	; 32
    1736:	80 83       	st	Z, r24
		TWSR = 0x00; // prescaler = 1
    1738:	e1 e2       	ldi	r30, 0x21	; 33
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	10 82       	st	Z, r1
    173e:	07 c0       	rjmp	.+14     	; 0x174e <TWI_init+0x52>
		break;

	case TWI_BAUD_400KHZ:
		TWBR = 2;
    1740:	e0 e2       	ldi	r30, 0x20	; 32
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	80 83       	st	Z, r24
		TWSR = 0x00;
    1748:	e1 e2       	ldi	r30, 0x21	; 33
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	10 82       	st	Z, r1
		break;
	}

	// Set slave address if needed (as master use dummy address)
	TWAR = (Config_Ptr->address << 1);
    174e:	a2 e2       	ldi	r26, 0x22	; 34
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e9 81       	ldd	r30, Y+1	; 0x01
    1754:	fa 81       	ldd	r31, Y+2	; 0x02
    1756:	80 81       	ld	r24, Z
    1758:	88 0f       	add	r24, r24
    175a:	8c 93       	st	X, r24

	// Enable TWI
	TWCR = (1 << TWEN);
    175c:	e6 e5       	ldi	r30, 0x56	; 86
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	84 e0       	ldi	r24, 0x04	; 4
    1762:	80 83       	st	Z, r24
}
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <TWI_start>:




void TWI_start(void)
{
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    177a:	e6 e5       	ldi	r30, 0x56	; 86
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	84 ea       	ldi	r24, 0xA4	; 164
    1780:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1782:	e6 e5       	ldi	r30, 0x56	; 86
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	88 23       	and	r24, r24
    178a:	dc f7       	brge	.-10     	; 0x1782 <TWI_start+0x10>
}
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <TWI_stop>:

void TWI_stop(void)
{
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    179a:	e6 e5       	ldi	r30, 0x56	; 86
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	84 e9       	ldi	r24, 0x94	; 148
    17a0:	80 83       	st	Z, r24
}
    17a2:	cf 91       	pop	r28
    17a4:	df 91       	pop	r29
    17a6:	08 95       	ret

000017a8 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	0f 92       	push	r0
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    17b4:	e3 e2       	ldi	r30, 0x23	; 35
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN);
    17bc:	e6 e5       	ldi	r30, 0x56	; 86
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	84 e8       	ldi	r24, 0x84	; 132
    17c2:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    17c4:	e6 e5       	ldi	r30, 0x56	; 86
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	88 23       	and	r24, r24
    17cc:	dc f7       	brge	.-10     	; 0x17c4 <TWI_writeByte+0x1c>
}
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    17de:	e6 e5       	ldi	r30, 0x56	; 86
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	84 ec       	ldi	r24, 0xC4	; 196
    17e4:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    17e6:	e6 e5       	ldi	r30, 0x56	; 86
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	88 23       	and	r24, r24
    17ee:	dc f7       	brge	.-10     	; 0x17e6 <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    17f0:	e3 e2       	ldi	r30, 0x23	; 35
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
}
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1804:	e6 e5       	ldi	r30, 0x56	; 86
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	84 e8       	ldi	r24, 0x84	; 132
    180a:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    180c:	e6 e5       	ldi	r30, 0x56	; 86
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	88 23       	and	r24, r24
    1814:	dc f7       	brge	.-10     	; 0x180c <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    1816:	e3 e2       	ldi	r30, 0x23	; 35
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
}
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	08 95       	ret

00001822 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	0f 92       	push	r0
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    182c:	e1 e2       	ldi	r30, 0x21	; 33
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	88 7f       	andi	r24, 0xF8	; 248
    1834:	89 83       	std	Y+1, r24	; 0x01
	return status;
    1836:	89 81       	ldd	r24, Y+1	; 0x01
}
    1838:	0f 90       	pop	r0
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <ControlECU_TWI_SlaveReceive>:
void ControlECU_TWI_SlaveReceive(uint8 *data)
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	00 d0       	rcall	.+0      	; 0x1846 <ControlECU_TWI_SlaveReceive+0x6>
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	9a 83       	std	Y+2, r25	; 0x02
    184c:	89 83       	std	Y+1, r24	; 0x01
    // Step 1: Enable reception
    TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT);
    184e:	e6 e5       	ldi	r30, 0x56	; 86
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	84 ec       	ldi	r24, 0xC4	; 196
    1854:	80 83       	st	Z, r24

    while ((TWI_getStatus() != 0x60) && (TWI_getStatus() != 0x68));
    1856:	0e 94 11 0c 	call	0x1822	; 0x1822 <TWI_getStatus>
    185a:	80 36       	cpi	r24, 0x60	; 96
    185c:	21 f0       	breq	.+8      	; 0x1866 <ControlECU_TWI_SlaveReceive+0x26>
    185e:	0e 94 11 0c 	call	0x1822	; 0x1822 <TWI_getStatus>
    1862:	88 36       	cpi	r24, 0x68	; 104
    1864:	c1 f7       	brne	.-16     	; 0x1856 <ControlECU_TWI_SlaveReceive+0x16>

    TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT);
    1866:	e6 e5       	ldi	r30, 0x56	; 86
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	84 ec       	ldi	r24, 0xC4	; 196
    186c:	80 83       	st	Z, r24

    while ((TWI_getStatus() != 0x80) && (TWI_getStatus() != 0x88));
    186e:	0e 94 11 0c 	call	0x1822	; 0x1822 <TWI_getStatus>
    1872:	80 38       	cpi	r24, 0x80	; 128
    1874:	21 f0       	breq	.+8      	; 0x187e <ControlECU_TWI_SlaveReceive+0x3e>
    1876:	0e 94 11 0c 	call	0x1822	; 0x1822 <TWI_getStatus>
    187a:	88 38       	cpi	r24, 0x88	; 136
    187c:	c1 f7       	brne	.-16     	; 0x186e <ControlECU_TWI_SlaveReceive+0x2e>

    *data = TWDR;
    187e:	e3 e2       	ldi	r30, 0x23	; 35
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	e9 81       	ldd	r30, Y+1	; 0x01
    1886:	fa 81       	ldd	r31, Y+2	; 0x02
    1888:	80 83       	st	Z, r24


    // Clear TWINT again to be ready for next operation
    TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT);
    188a:	e6 e5       	ldi	r30, 0x56	; 86
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	84 ec       	ldi	r24, 0xC4	; 196
    1890:	80 83       	st	Z, r24
}
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <DcMotor_Init>:
 * -----------------------------------------------------------------------------------------------------------------------
 */
#include <avr/io.h>
#include "DC_Motor.h"
void DcMotor_Init(void)
{
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    // Set IN1 and IN2 as output
    DC_MOTOR_DDR |= (1 << DC_MOTOR_IN1) | (1 << DC_MOTOR_IN2);
    18a4:	a7 e3       	ldi	r26, 0x37	; 55
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e7 e3       	ldi	r30, 0x37	; 55
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	83 60       	ori	r24, 0x03	; 3
    18b0:	8c 93       	st	X, r24

    // Set PWM pin (OC0) as output
    PWM_PORT |= (1 << PWM_PIN);
    18b2:	a7 e3       	ldi	r26, 0x37	; 55
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e7 e3       	ldi	r30, 0x37	; 55
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	88 60       	ori	r24, 0x08	; 8
    18be:	8c 93       	st	X, r24

    // Set Timer0 to Fast PWM mode, non-inverting
    TCCR0 = (1 << WGM00) | (1 << WGM01)   // Fast PWM Mode
    18c0:	e3 e5       	ldi	r30, 0x53	; 83
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	8d e6       	ldi	r24, 0x6D	; 109
    18c6:	80 83       	st	Z, r24
           | (1 << COM01)                 // Non-Inverting Mode
           | (1 << CS02) | (1 << CS00);   // Prescaler = 1024

    // Stop motor initially
    DC_MOTOR_PORT &= ~((1 << DC_MOTOR_IN1) | (1 << DC_MOTOR_IN2));
    18c8:	a8 e3       	ldi	r26, 0x38	; 56
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e8 e3       	ldi	r30, 0x38	; 56
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	8c 7f       	andi	r24, 0xFC	; 252
    18d4:	8c 93       	st	X, r24
    OCR0 = 0; // 0% duty cycle
    18d6:	ec e5       	ldi	r30, 0x5C	; 92
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	10 82       	st	Z, r1
}
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <DcMotor_Rotate+0x6>
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <DcMotor_Rotate+0x8>
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	6a 83       	std	Y+2, r22	; 0x02

    if (speed > 100) speed = 100;
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	85 36       	cpi	r24, 0x65	; 101
    18f6:	10 f0       	brcs	.+4      	; 0x18fc <DcMotor_Rotate+0x1a>
    18f8:	84 e6       	ldi	r24, 0x64	; 100
    18fa:	8a 83       	std	Y+2, r24	; 0x02

    // Convert % to 8-bit PWM value (0-255)
    OCR0 = (uint8)((speed * 255) / 100);
    18fc:	ec e5       	ldi	r30, 0x5C	; 92
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	48 2f       	mov	r20, r24
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	ca 01       	movw	r24, r20
    1908:	9c 01       	movw	r18, r24
    190a:	22 0f       	add	r18, r18
    190c:	33 1f       	adc	r19, r19
    190e:	c9 01       	movw	r24, r18
    1910:	96 95       	lsr	r25
    1912:	98 2f       	mov	r25, r24
    1914:	88 27       	eor	r24, r24
    1916:	97 95       	ror	r25
    1918:	87 95       	ror	r24
    191a:	82 1b       	sub	r24, r18
    191c:	93 0b       	sbc	r25, r19
    191e:	84 0f       	add	r24, r20
    1920:	95 1f       	adc	r25, r21
    1922:	24 e6       	ldi	r18, 0x64	; 100
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	b9 01       	movw	r22, r18
    1928:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__divmodhi4>
    192c:	cb 01       	movw	r24, r22
    192e:	80 83       	st	Z, r24

    switch (state)
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	3c 83       	std	Y+4, r19	; 0x04
    1938:	2b 83       	std	Y+3, r18	; 0x03
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	9c 81       	ldd	r25, Y+4	; 0x04
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	91 05       	cpc	r25, r1
    1942:	31 f0       	breq	.+12     	; 0x1950 <DcMotor_Rotate+0x6e>
    1944:	2b 81       	ldd	r18, Y+3	; 0x03
    1946:	3c 81       	ldd	r19, Y+4	; 0x04
    1948:	22 30       	cpi	r18, 0x02	; 2
    194a:	31 05       	cpc	r19, r1
    194c:	81 f0       	breq	.+32     	; 0x196e <DcMotor_Rotate+0x8c>
    194e:	1e c0       	rjmp	.+60     	; 0x198c <DcMotor_Rotate+0xaa>
    {
        case CW:
            DC_MOTOR_PORT |= (1 << DC_MOTOR_IN1);
    1950:	a8 e3       	ldi	r26, 0x38	; 56
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e8 e3       	ldi	r30, 0x38	; 56
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	81 60       	ori	r24, 0x01	; 1
    195c:	8c 93       	st	X, r24
            DC_MOTOR_PORT &= ~(1 << DC_MOTOR_IN2);
    195e:	a8 e3       	ldi	r26, 0x38	; 56
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e8 e3       	ldi	r30, 0x38	; 56
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8d 7f       	andi	r24, 0xFD	; 253
    196a:	8c 93       	st	X, r24
    196c:	16 c0       	rjmp	.+44     	; 0x199a <DcMotor_Rotate+0xb8>
            break;
        case A_CW:
            DC_MOTOR_PORT |= (1 << DC_MOTOR_IN2);
    196e:	a8 e3       	ldi	r26, 0x38	; 56
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e8 e3       	ldi	r30, 0x38	; 56
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	82 60       	ori	r24, 0x02	; 2
    197a:	8c 93       	st	X, r24
            DC_MOTOR_PORT &= ~(1 << DC_MOTOR_IN1);
    197c:	a8 e3       	ldi	r26, 0x38	; 56
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e8 e3       	ldi	r30, 0x38	; 56
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	8e 7f       	andi	r24, 0xFE	; 254
    1988:	8c 93       	st	X, r24
    198a:	07 c0       	rjmp	.+14     	; 0x199a <DcMotor_Rotate+0xb8>
            break;
        case STOP:
        default:
            DC_MOTOR_PORT &= ~((1 << DC_MOTOR_IN1) | (1 << DC_MOTOR_IN2));
    198c:	a8 e3       	ldi	r26, 0x38	; 56
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e8 e3       	ldi	r30, 0x38	; 56
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8c 7f       	andi	r24, 0xFC	; 252
    1998:	8c 93       	st	X, r24
            break;
    }
}
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <Buzzer_init>:



#include "buzzer.h"
void Buzzer_init(void)
{
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    BUZZER_DDR |= (1 << BUZZER_PIN);   // Set buzzer pin as output
    19b0:	a4 e3       	ldi	r26, 0x34	; 52
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e4 e3       	ldi	r30, 0x34	; 52
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	80 62       	ori	r24, 0x20	; 32
    19bc:	8c 93       	st	X, r24
    BUZZER_PORT &= ~(1 << BUZZER_PIN); // Turn buzzer off initially
    19be:	a5 e3       	ldi	r26, 0x35	; 53
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	e5 e3       	ldi	r30, 0x35	; 53
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	8f 7d       	andi	r24, 0xDF	; 223
    19ca:	8c 93       	st	X, r24
}
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <Buzzer_on>:

void Buzzer_on(void)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    BUZZER_PORT |= (1 << BUZZER_PIN); // Set pin high
    19da:	a5 e3       	ldi	r26, 0x35	; 53
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e5 e3       	ldi	r30, 0x35	; 53
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	80 62       	ori	r24, 0x20	; 32
    19e6:	8c 93       	st	X, r24
}
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <Buzzer_off>:

void Buzzer_off(void)
{
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    BUZZER_PORT &= ~(1 << BUZZER_PIN); // Set pin low
    19f6:	a5 e3       	ldi	r26, 0x35	; 53
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e5 e3       	ldi	r30, 0x35	; 53
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	8f 7d       	andi	r24, 0xDF	; 223
    1a02:	8c 93       	st	X, r24
}
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <Buzzer_tog>:
void Buzzer_tog(void){
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
	BUZZER_PORT ^= (1 << BUZZER_PIN);
    1a12:	a5 e3       	ldi	r26, 0x35	; 53
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e5 e3       	ldi	r30, 0x35	; 53
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	90 81       	ld	r25, Z
    1a1c:	80 e2       	ldi	r24, 0x20	; 32
    1a1e:	89 27       	eor	r24, r25
    1a20:	8c 93       	st	X, r24
}
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	2e 97       	sbiw	r28, 0x0e	; 14
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	60 e0       	ldi	r22, 0x00	; 0
    1a40:	41 e0       	ldi	r20, 0x01	; 1
    1a42:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	61 e0       	ldi	r22, 0x01	; 1
    1a4a:	41 e0       	ldi	r20, 0x01	; 1
    1a4c:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_setupPinDirection>
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	a0 ea       	ldi	r26, 0xA0	; 160
    1a56:	b1 e4       	ldi	r27, 0x41	; 65
    1a58:	8b 87       	std	Y+11, r24	; 0x0b
    1a5a:	9c 87       	std	Y+12, r25	; 0x0c
    1a5c:	ad 87       	std	Y+13, r26	; 0x0d
    1a5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	4a e7       	ldi	r20, 0x7A	; 122
    1a6e:	55 e4       	ldi	r21, 0x45	; 69
    1a70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	8f 83       	std	Y+7, r24	; 0x07
    1a7a:	98 87       	std	Y+8, r25	; 0x08
    1a7c:	a9 87       	std	Y+9, r26	; 0x09
    1a7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a80:	6f 81       	ldd	r22, Y+7	; 0x07
    1a82:	78 85       	ldd	r23, Y+8	; 0x08
    1a84:	89 85       	ldd	r24, Y+9	; 0x09
    1a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e8       	ldi	r20, 0x80	; 128
    1a8e:	5f e3       	ldi	r21, 0x3F	; 63
    1a90:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a94:	88 23       	and	r24, r24
    1a96:	2c f4       	brge	.+10     	; 0x1aa2 <LCD_init+0x7a>
		__ticks = 1;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
    1aa0:	3f c0       	rjmp	.+126    	; 0x1b20 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa4:	78 85       	ldd	r23, Y+8	; 0x08
    1aa6:	89 85       	ldd	r24, Y+9	; 0x09
    1aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	3f ef       	ldi	r19, 0xFF	; 255
    1aae:	4f e7       	ldi	r20, 0x7F	; 127
    1ab0:	57 e4       	ldi	r21, 0x47	; 71
    1ab2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ab6:	18 16       	cp	r1, r24
    1ab8:	4c f5       	brge	.+82     	; 0x1b0c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1abc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1abe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e2       	ldi	r20, 0x20	; 32
    1ac8:	51 e4       	ldi	r21, 0x41	; 65
    1aca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	bc 01       	movw	r22, r24
    1ad4:	cd 01       	movw	r24, r26
    1ad6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	9e 83       	std	Y+6, r25	; 0x06
    1ae0:	8d 83       	std	Y+5, r24	; 0x05
    1ae2:	0f c0       	rjmp	.+30     	; 0x1b02 <LCD_init+0xda>
    1ae4:	80 e9       	ldi	r24, 0x90	; 144
    1ae6:	91 e0       	ldi	r25, 0x01	; 1
    1ae8:	9c 83       	std	Y+4, r25	; 0x04
    1aea:	8b 83       	std	Y+3, r24	; 0x03
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	9c 81       	ldd	r25, Y+4	; 0x04
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <LCD_init+0xc8>
    1af4:	9c 83       	std	Y+4, r25	; 0x04
    1af6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	9e 83       	std	Y+6, r25	; 0x06
    1b00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b02:	8d 81       	ldd	r24, Y+5	; 0x05
    1b04:	9e 81       	ldd	r25, Y+6	; 0x06
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	69 f7       	brne	.-38     	; 0x1ae4 <LCD_init+0xbc>
    1b0a:	14 c0       	rjmp	.+40     	; 0x1b34 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0e:	78 85       	ldd	r23, Y+8	; 0x08
    1b10:	89 85       	ldd	r24, Y+9	; 0x09
    1b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9e 83       	std	Y+6, r25	; 0x06
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
    1b20:	8d 81       	ldd	r24, Y+5	; 0x05
    1b22:	9e 81       	ldd	r25, Y+6	; 0x06
    1b24:	9a 83       	std	Y+2, r25	; 0x02
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <LCD_init+0x104>
    1b30:	9a 83       	std	Y+2, r25	; 0x02
    1b32:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	62 e0       	ldi	r22, 0x02	; 2
    1b38:	41 e0       	ldi	r20, 0x01	; 1
    1b3a:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	63 e0       	ldi	r22, 0x03	; 3
    1b42:	41 e0       	ldi	r20, 0x01	; 1
    1b44:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	64 e0       	ldi	r22, 0x04	; 4
    1b4c:	41 e0       	ldi	r20, 0x01	; 1
    1b4e:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	65 e0       	ldi	r22, 0x05	; 5
    1b56:	41 e0       	ldi	r20, 0x01	; 1
    1b58:	0e 94 6d 07 	call	0xeda	; 0xeda <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1b5c:	83 e3       	ldi	r24, 0x33	; 51
    1b5e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1b62:	82 e3       	ldi	r24, 0x32	; 50
    1b64:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1b68:	88 e2       	ldi	r24, 0x28	; 40
    1b6a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1b6e:	8c e0       	ldi	r24, 0x0C	; 12
    1b70:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_sendCommand>
}
    1b7a:	2e 96       	adiw	r28, 0x0e	; 14
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	c3 56       	subi	r28, 0x63	; 99
    1b9a:	d0 40       	sbci	r29, 0x00	; 0
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	ed 59       	subi	r30, 0x9D	; 157
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e1 5a       	subi	r30, 0xA1	; 161
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	a0 e8       	ldi	r26, 0x80	; 128
    1bc4:	bf e3       	ldi	r27, 0x3F	; 63
    1bc6:	80 83       	st	Z, r24
    1bc8:	91 83       	std	Z+1, r25	; 0x01
    1bca:	a2 83       	std	Z+2, r26	; 0x02
    1bcc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bce:	8e 01       	movw	r16, r28
    1bd0:	05 5a       	subi	r16, 0xA5	; 165
    1bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	e1 5a       	subi	r30, 0xA1	; 161
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	60 81       	ld	r22, Z
    1bdc:	71 81       	ldd	r23, Z+1	; 0x01
    1bde:	82 81       	ldd	r24, Z+2	; 0x02
    1be0:	93 81       	ldd	r25, Z+3	; 0x03
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	4a e7       	ldi	r20, 0x7A	; 122
    1be8:	55 e4       	ldi	r21, 0x45	; 69
    1bea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	f8 01       	movw	r30, r16
    1bf4:	80 83       	st	Z, r24
    1bf6:	91 83       	std	Z+1, r25	; 0x01
    1bf8:	a2 83       	std	Z+2, r26	; 0x02
    1bfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	e5 5a       	subi	r30, 0xA5	; 165
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	60 81       	ld	r22, Z
    1c04:	71 81       	ldd	r23, Z+1	; 0x01
    1c06:	82 81       	ldd	r24, Z+2	; 0x02
    1c08:	93 81       	ldd	r25, Z+3	; 0x03
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e8       	ldi	r20, 0x80	; 128
    1c10:	5f e3       	ldi	r21, 0x3F	; 63
    1c12:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c16:	88 23       	and	r24, r24
    1c18:	44 f4       	brge	.+16     	; 0x1c2a <LCD_sendCommand+0x9e>
		__ticks = 1;
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	e7 5a       	subi	r30, 0xA7	; 167
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	80 83       	st	Z, r24
    1c28:	64 c0       	rjmp	.+200    	; 0x1cf2 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	e5 5a       	subi	r30, 0xA5	; 165
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	60 81       	ld	r22, Z
    1c32:	71 81       	ldd	r23, Z+1	; 0x01
    1c34:	82 81       	ldd	r24, Z+2	; 0x02
    1c36:	93 81       	ldd	r25, Z+3	; 0x03
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	3f ef       	ldi	r19, 0xFF	; 255
    1c3c:	4f e7       	ldi	r20, 0x7F	; 127
    1c3e:	57 e4       	ldi	r21, 0x47	; 71
    1c40:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c44:	18 16       	cp	r1, r24
    1c46:	0c f0       	brlt	.+2      	; 0x1c4a <LCD_sendCommand+0xbe>
    1c48:	43 c0       	rjmp	.+134    	; 0x1cd0 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e1 5a       	subi	r30, 0xA1	; 161
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e2       	ldi	r20, 0x20	; 32
    1c5e:	51 e4       	ldi	r21, 0x41	; 65
    1c60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	8e 01       	movw	r16, r28
    1c6a:	07 5a       	subi	r16, 0xA7	; 167
    1c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	91 83       	std	Z+1, r25	; 0x01
    1c7e:	80 83       	st	Z, r24
    1c80:	1f c0       	rjmp	.+62     	; 0x1cc0 <LCD_sendCommand+0x134>
    1c82:	fe 01       	movw	r30, r28
    1c84:	e9 5a       	subi	r30, 0xA9	; 169
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	80 e9       	ldi	r24, 0x90	; 144
    1c8a:	91 e0       	ldi	r25, 0x01	; 1
    1c8c:	91 83       	std	Z+1, r25	; 0x01
    1c8e:	80 83       	st	Z, r24
    1c90:	fe 01       	movw	r30, r28
    1c92:	e9 5a       	subi	r30, 0xA9	; 169
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <LCD_sendCommand+0x10e>
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	e9 5a       	subi	r30, 0xA9	; 169
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	91 83       	std	Z+1, r25	; 0x01
    1ca6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca8:	de 01       	movw	r26, r28
    1caa:	a7 5a       	subi	r26, 0xA7	; 167
    1cac:	bf 4f       	sbci	r27, 0xFF	; 255
    1cae:	fe 01       	movw	r30, r28
    1cb0:	e7 5a       	subi	r30, 0xA7	; 167
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	80 81       	ld	r24, Z
    1cb6:	91 81       	ldd	r25, Z+1	; 0x01
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	11 96       	adiw	r26, 0x01	; 1
    1cbc:	9c 93       	st	X, r25
    1cbe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	e7 5a       	subi	r30, 0xA7	; 167
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	80 81       	ld	r24, Z
    1cc8:	91 81       	ldd	r25, Z+1	; 0x01
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	d1 f6       	brne	.-76     	; 0x1c82 <LCD_sendCommand+0xf6>
    1cce:	27 c0       	rjmp	.+78     	; 0x1d1e <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd0:	8e 01       	movw	r16, r28
    1cd2:	07 5a       	subi	r16, 0xA7	; 167
    1cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	e5 5a       	subi	r30, 0xA5	; 165
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	60 81       	ld	r22, Z
    1cde:	71 81       	ldd	r23, Z+1	; 0x01
    1ce0:	82 81       	ldd	r24, Z+2	; 0x02
    1ce2:	93 81       	ldd	r25, Z+3	; 0x03
    1ce4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	f8 01       	movw	r30, r16
    1cee:	91 83       	std	Z+1, r25	; 0x01
    1cf0:	80 83       	st	Z, r24
    1cf2:	de 01       	movw	r26, r28
    1cf4:	ab 5a       	subi	r26, 0xAB	; 171
    1cf6:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	e7 5a       	subi	r30, 0xA7	; 167
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	80 81       	ld	r24, Z
    1d00:	91 81       	ldd	r25, Z+1	; 0x01
    1d02:	8d 93       	st	X+, r24
    1d04:	9c 93       	st	X, r25
    1d06:	fe 01       	movw	r30, r28
    1d08:	eb 5a       	subi	r30, 0xAB	; 171
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	80 81       	ld	r24, Z
    1d0e:	91 81       	ldd	r25, Z+1	; 0x01
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <LCD_sendCommand+0x184>
    1d14:	fe 01       	movw	r30, r28
    1d16:	eb 5a       	subi	r30, 0xAB	; 171
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	91 83       	std	Z+1, r25	; 0x01
    1d1c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	61 e0       	ldi	r22, 0x01	; 1
    1d22:	41 e0       	ldi	r20, 0x01	; 1
    1d24:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ef 5a       	subi	r30, 0xAF	; 175
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	a0 e8       	ldi	r26, 0x80	; 128
    1d34:	bf e3       	ldi	r27, 0x3F	; 63
    1d36:	80 83       	st	Z, r24
    1d38:	91 83       	std	Z+1, r25	; 0x01
    1d3a:	a2 83       	std	Z+2, r26	; 0x02
    1d3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3e:	8e 01       	movw	r16, r28
    1d40:	03 5b       	subi	r16, 0xB3	; 179
    1d42:	1f 4f       	sbci	r17, 0xFF	; 255
    1d44:	fe 01       	movw	r30, r28
    1d46:	ef 5a       	subi	r30, 0xAF	; 175
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	60 81       	ld	r22, Z
    1d4c:	71 81       	ldd	r23, Z+1	; 0x01
    1d4e:	82 81       	ldd	r24, Z+2	; 0x02
    1d50:	93 81       	ldd	r25, Z+3	; 0x03
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	4a e7       	ldi	r20, 0x7A	; 122
    1d58:	55 e4       	ldi	r21, 0x45	; 69
    1d5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	f8 01       	movw	r30, r16
    1d64:	80 83       	st	Z, r24
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	a2 83       	std	Z+2, r26	; 0x02
    1d6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e3 5b       	subi	r30, 0xB3	; 179
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
    1d76:	82 81       	ldd	r24, Z+2	; 0x02
    1d78:	93 81       	ldd	r25, Z+3	; 0x03
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d86:	88 23       	and	r24, r24
    1d88:	44 f4       	brge	.+16     	; 0x1d9a <LCD_sendCommand+0x20e>
		__ticks = 1;
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e5 5b       	subi	r30, 0xB5	; 181
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	80 83       	st	Z, r24
    1d98:	64 c0       	rjmp	.+200    	; 0x1e62 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	e3 5b       	subi	r30, 0xB3	; 179
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	60 81       	ld	r22, Z
    1da2:	71 81       	ldd	r23, Z+1	; 0x01
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	3f ef       	ldi	r19, 0xFF	; 255
    1dac:	4f e7       	ldi	r20, 0x7F	; 127
    1dae:	57 e4       	ldi	r21, 0x47	; 71
    1db0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1db4:	18 16       	cp	r1, r24
    1db6:	0c f0       	brlt	.+2      	; 0x1dba <LCD_sendCommand+0x22e>
    1db8:	43 c0       	rjmp	.+134    	; 0x1e40 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dba:	fe 01       	movw	r30, r28
    1dbc:	ef 5a       	subi	r30, 0xAF	; 175
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	60 81       	ld	r22, Z
    1dc2:	71 81       	ldd	r23, Z+1	; 0x01
    1dc4:	82 81       	ldd	r24, Z+2	; 0x02
    1dc6:	93 81       	ldd	r25, Z+3	; 0x03
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e2       	ldi	r20, 0x20	; 32
    1dce:	51 e4       	ldi	r21, 0x41	; 65
    1dd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	8e 01       	movw	r16, r28
    1dda:	05 5b       	subi	r16, 0xB5	; 181
    1ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	f8 01       	movw	r30, r16
    1dec:	91 83       	std	Z+1, r25	; 0x01
    1dee:	80 83       	st	Z, r24
    1df0:	1f c0       	rjmp	.+62     	; 0x1e30 <LCD_sendCommand+0x2a4>
    1df2:	fe 01       	movw	r30, r28
    1df4:	e7 5b       	subi	r30, 0xB7	; 183
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 e9       	ldi	r24, 0x90	; 144
    1dfa:	91 e0       	ldi	r25, 0x01	; 1
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	80 83       	st	Z, r24
    1e00:	fe 01       	movw	r30, r28
    1e02:	e7 5b       	subi	r30, 0xB7	; 183
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	80 81       	ld	r24, Z
    1e08:	91 81       	ldd	r25, Z+1	; 0x01
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCD_sendCommand+0x27e>
    1e0e:	fe 01       	movw	r30, r28
    1e10:	e7 5b       	subi	r30, 0xB7	; 183
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e18:	de 01       	movw	r26, r28
    1e1a:	a5 5b       	subi	r26, 0xB5	; 181
    1e1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e1e:	fe 01       	movw	r30, r28
    1e20:	e5 5b       	subi	r30, 0xB5	; 181
    1e22:	ff 4f       	sbci	r31, 0xFF	; 255
    1e24:	80 81       	ld	r24, Z
    1e26:	91 81       	ldd	r25, Z+1	; 0x01
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	11 96       	adiw	r26, 0x01	; 1
    1e2c:	9c 93       	st	X, r25
    1e2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e30:	fe 01       	movw	r30, r28
    1e32:	e5 5b       	subi	r30, 0xB5	; 181
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	80 81       	ld	r24, Z
    1e38:	91 81       	ldd	r25, Z+1	; 0x01
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	d1 f6       	brne	.-76     	; 0x1df2 <LCD_sendCommand+0x266>
    1e3e:	27 c0       	rjmp	.+78     	; 0x1e8e <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e40:	8e 01       	movw	r16, r28
    1e42:	05 5b       	subi	r16, 0xB5	; 181
    1e44:	1f 4f       	sbci	r17, 0xFF	; 255
    1e46:	fe 01       	movw	r30, r28
    1e48:	e3 5b       	subi	r30, 0xB3	; 179
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	60 81       	ld	r22, Z
    1e4e:	71 81       	ldd	r23, Z+1	; 0x01
    1e50:	82 81       	ldd	r24, Z+2	; 0x02
    1e52:	93 81       	ldd	r25, Z+3	; 0x03
    1e54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	f8 01       	movw	r30, r16
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	80 83       	st	Z, r24
    1e62:	de 01       	movw	r26, r28
    1e64:	a9 5b       	subi	r26, 0xB9	; 185
    1e66:	bf 4f       	sbci	r27, 0xFF	; 255
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e5 5b       	subi	r30, 0xB5	; 181
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	80 81       	ld	r24, Z
    1e70:	91 81       	ldd	r25, Z+1	; 0x01
    1e72:	8d 93       	st	X+, r24
    1e74:	9c 93       	st	X, r25
    1e76:	fe 01       	movw	r30, r28
    1e78:	e9 5b       	subi	r30, 0xB9	; 185
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	80 81       	ld	r24, Z
    1e7e:	91 81       	ldd	r25, Z+1	; 0x01
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <LCD_sendCommand+0x2f4>
    1e84:	fe 01       	movw	r30, r28
    1e86:	e9 5b       	subi	r30, 0xB9	; 185
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1e8e:	fe 01       	movw	r30, r28
    1e90:	ed 59       	subi	r30, 0x9D	; 157
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	80 81       	ld	r24, Z
    1e96:	88 2f       	mov	r24, r24
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	80 71       	andi	r24, 0x10	; 16
    1e9c:	90 70       	andi	r25, 0x00	; 0
    1e9e:	95 95       	asr	r25
    1ea0:	87 95       	ror	r24
    1ea2:	95 95       	asr	r25
    1ea4:	87 95       	ror	r24
    1ea6:	95 95       	asr	r25
    1ea8:	87 95       	ror	r24
    1eaa:	95 95       	asr	r25
    1eac:	87 95       	ror	r24
    1eae:	98 2f       	mov	r25, r24
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	62 e0       	ldi	r22, 0x02	; 2
    1eb4:	49 2f       	mov	r20, r25
    1eb6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1eba:	fe 01       	movw	r30, r28
    1ebc:	ed 59       	subi	r30, 0x9D	; 157
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	80 81       	ld	r24, Z
    1ec2:	88 2f       	mov	r24, r24
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	80 72       	andi	r24, 0x20	; 32
    1ec8:	90 70       	andi	r25, 0x00	; 0
    1eca:	95 95       	asr	r25
    1ecc:	87 95       	ror	r24
    1ece:	95 95       	asr	r25
    1ed0:	87 95       	ror	r24
    1ed2:	95 95       	asr	r25
    1ed4:	87 95       	ror	r24
    1ed6:	95 95       	asr	r25
    1ed8:	87 95       	ror	r24
    1eda:	95 95       	asr	r25
    1edc:	87 95       	ror	r24
    1ede:	98 2f       	mov	r25, r24
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	63 e0       	ldi	r22, 0x03	; 3
    1ee4:	49 2f       	mov	r20, r25
    1ee6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1eea:	fe 01       	movw	r30, r28
    1eec:	ed 59       	subi	r30, 0x9D	; 157
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	80 81       	ld	r24, Z
    1ef2:	88 2f       	mov	r24, r24
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	80 74       	andi	r24, 0x40	; 64
    1ef8:	90 70       	andi	r25, 0x00	; 0
    1efa:	08 2e       	mov	r0, r24
    1efc:	89 2f       	mov	r24, r25
    1efe:	00 0c       	add	r0, r0
    1f00:	88 1f       	adc	r24, r24
    1f02:	99 0b       	sbc	r25, r25
    1f04:	00 0c       	add	r0, r0
    1f06:	88 1f       	adc	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	98 2f       	mov	r25, r24
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	64 e0       	ldi	r22, 0x04	; 4
    1f10:	49 2f       	mov	r20, r25
    1f12:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1f16:	fe 01       	movw	r30, r28
    1f18:	ed 59       	subi	r30, 0x9D	; 157
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	80 81       	ld	r24, Z
    1f1e:	98 2f       	mov	r25, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	99 27       	eor	r25, r25
    1f24:	99 1f       	adc	r25, r25
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	65 e0       	ldi	r22, 0x05	; 5
    1f2a:	49 2f       	mov	r20, r25
    1f2c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
    1f30:	fe 01       	movw	r30, r28
    1f32:	ed 5b       	subi	r30, 0xBD	; 189
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	a0 e8       	ldi	r26, 0x80	; 128
    1f3c:	bf e3       	ldi	r27, 0x3F	; 63
    1f3e:	80 83       	st	Z, r24
    1f40:	91 83       	std	Z+1, r25	; 0x01
    1f42:	a2 83       	std	Z+2, r26	; 0x02
    1f44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f46:	8e 01       	movw	r16, r28
    1f48:	01 5c       	subi	r16, 0xC1	; 193
    1f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	ed 5b       	subi	r30, 0xBD	; 189
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	60 81       	ld	r22, Z
    1f54:	71 81       	ldd	r23, Z+1	; 0x01
    1f56:	82 81       	ldd	r24, Z+2	; 0x02
    1f58:	93 81       	ldd	r25, Z+3	; 0x03
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	4a e7       	ldi	r20, 0x7A	; 122
    1f60:	55 e4       	ldi	r21, 0x45	; 69
    1f62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	f8 01       	movw	r30, r16
    1f6c:	80 83       	st	Z, r24
    1f6e:	91 83       	std	Z+1, r25	; 0x01
    1f70:	a2 83       	std	Z+2, r26	; 0x02
    1f72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f74:	fe 01       	movw	r30, r28
    1f76:	ff 96       	adiw	r30, 0x3f	; 63
    1f78:	60 81       	ld	r22, Z
    1f7a:	71 81       	ldd	r23, Z+1	; 0x01
    1f7c:	82 81       	ldd	r24, Z+2	; 0x02
    1f7e:	93 81       	ldd	r25, Z+3	; 0x03
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e8       	ldi	r20, 0x80	; 128
    1f86:	5f e3       	ldi	r21, 0x3F	; 63
    1f88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f8c:	88 23       	and	r24, r24
    1f8e:	2c f4       	brge	.+10     	; 0x1f9a <LCD_sendCommand+0x40e>
		__ticks = 1;
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	9e af       	std	Y+62, r25	; 0x3e
    1f96:	8d af       	std	Y+61, r24	; 0x3d
    1f98:	46 c0       	rjmp	.+140    	; 0x2026 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	ff 96       	adiw	r30, 0x3f	; 63
    1f9e:	60 81       	ld	r22, Z
    1fa0:	71 81       	ldd	r23, Z+1	; 0x01
    1fa2:	82 81       	ldd	r24, Z+2	; 0x02
    1fa4:	93 81       	ldd	r25, Z+3	; 0x03
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	3f ef       	ldi	r19, 0xFF	; 255
    1faa:	4f e7       	ldi	r20, 0x7F	; 127
    1fac:	57 e4       	ldi	r21, 0x47	; 71
    1fae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fb2:	18 16       	cp	r1, r24
    1fb4:	64 f5       	brge	.+88     	; 0x200e <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	ed 5b       	subi	r30, 0xBD	; 189
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	60 81       	ld	r22, Z
    1fbe:	71 81       	ldd	r23, Z+1	; 0x01
    1fc0:	82 81       	ldd	r24, Z+2	; 0x02
    1fc2:	93 81       	ldd	r25, Z+3	; 0x03
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e2       	ldi	r20, 0x20	; 32
    1fca:	51 e4       	ldi	r21, 0x41	; 65
    1fcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	bc 01       	movw	r22, r24
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9e af       	std	Y+62, r25	; 0x3e
    1fe2:	8d af       	std	Y+61, r24	; 0x3d
    1fe4:	0f c0       	rjmp	.+30     	; 0x2004 <LCD_sendCommand+0x478>
    1fe6:	80 e9       	ldi	r24, 0x90	; 144
    1fe8:	91 e0       	ldi	r25, 0x01	; 1
    1fea:	9c af       	std	Y+60, r25	; 0x3c
    1fec:	8b af       	std	Y+59, r24	; 0x3b
    1fee:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ff0:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <LCD_sendCommand+0x466>
    1ff6:	9c af       	std	Y+60, r25	; 0x3c
    1ff8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ffc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	9e af       	std	Y+62, r25	; 0x3e
    2002:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2004:	8d ad       	ldd	r24, Y+61	; 0x3d
    2006:	9e ad       	ldd	r25, Y+62	; 0x3e
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	69 f7       	brne	.-38     	; 0x1fe6 <LCD_sendCommand+0x45a>
    200c:	16 c0       	rjmp	.+44     	; 0x203a <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200e:	fe 01       	movw	r30, r28
    2010:	ff 96       	adiw	r30, 0x3f	; 63
    2012:	60 81       	ld	r22, Z
    2014:	71 81       	ldd	r23, Z+1	; 0x01
    2016:	82 81       	ldd	r24, Z+2	; 0x02
    2018:	93 81       	ldd	r25, Z+3	; 0x03
    201a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	9e af       	std	Y+62, r25	; 0x3e
    2024:	8d af       	std	Y+61, r24	; 0x3d
    2026:	8d ad       	ldd	r24, Y+61	; 0x3d
    2028:	9e ad       	ldd	r25, Y+62	; 0x3e
    202a:	9a af       	std	Y+58, r25	; 0x3a
    202c:	89 af       	std	Y+57, r24	; 0x39
    202e:	89 ad       	ldd	r24, Y+57	; 0x39
    2030:	9a ad       	ldd	r25, Y+58	; 0x3a
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	f1 f7       	brne	.-4      	; 0x2032 <LCD_sendCommand+0x4a6>
    2036:	9a af       	std	Y+58, r25	; 0x3a
    2038:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	61 e0       	ldi	r22, 0x01	; 1
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	a0 e8       	ldi	r26, 0x80	; 128
    204a:	bf e3       	ldi	r27, 0x3F	; 63
    204c:	8d ab       	std	Y+53, r24	; 0x35
    204e:	9e ab       	std	Y+54, r25	; 0x36
    2050:	af ab       	std	Y+55, r26	; 0x37
    2052:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2054:	6d a9       	ldd	r22, Y+53	; 0x35
    2056:	7e a9       	ldd	r23, Y+54	; 0x36
    2058:	8f a9       	ldd	r24, Y+55	; 0x37
    205a:	98 ad       	ldd	r25, Y+56	; 0x38
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	4a e7       	ldi	r20, 0x7A	; 122
    2062:	55 e4       	ldi	r21, 0x45	; 69
    2064:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	89 ab       	std	Y+49, r24	; 0x31
    206e:	9a ab       	std	Y+50, r25	; 0x32
    2070:	ab ab       	std	Y+51, r26	; 0x33
    2072:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2074:	69 a9       	ldd	r22, Y+49	; 0x31
    2076:	7a a9       	ldd	r23, Y+50	; 0x32
    2078:	8b a9       	ldd	r24, Y+51	; 0x33
    207a:	9c a9       	ldd	r25, Y+52	; 0x34
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e8       	ldi	r20, 0x80	; 128
    2082:	5f e3       	ldi	r21, 0x3F	; 63
    2084:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2088:	88 23       	and	r24, r24
    208a:	2c f4       	brge	.+10     	; 0x2096 <LCD_sendCommand+0x50a>
		__ticks = 1;
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	98 ab       	std	Y+48, r25	; 0x30
    2092:	8f a7       	std	Y+47, r24	; 0x2f
    2094:	3f c0       	rjmp	.+126    	; 0x2114 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2096:	69 a9       	ldd	r22, Y+49	; 0x31
    2098:	7a a9       	ldd	r23, Y+50	; 0x32
    209a:	8b a9       	ldd	r24, Y+51	; 0x33
    209c:	9c a9       	ldd	r25, Y+52	; 0x34
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	3f ef       	ldi	r19, 0xFF	; 255
    20a2:	4f e7       	ldi	r20, 0x7F	; 127
    20a4:	57 e4       	ldi	r21, 0x47	; 71
    20a6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20aa:	18 16       	cp	r1, r24
    20ac:	4c f5       	brge	.+82     	; 0x2100 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ae:	6d a9       	ldd	r22, Y+53	; 0x35
    20b0:	7e a9       	ldd	r23, Y+54	; 0x36
    20b2:	8f a9       	ldd	r24, Y+55	; 0x37
    20b4:	98 ad       	ldd	r25, Y+56	; 0x38
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e2       	ldi	r20, 0x20	; 32
    20bc:	51 e4       	ldi	r21, 0x41	; 65
    20be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	bc 01       	movw	r22, r24
    20c8:	cd 01       	movw	r24, r26
    20ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	98 ab       	std	Y+48, r25	; 0x30
    20d4:	8f a7       	std	Y+47, r24	; 0x2f
    20d6:	0f c0       	rjmp	.+30     	; 0x20f6 <LCD_sendCommand+0x56a>
    20d8:	80 e9       	ldi	r24, 0x90	; 144
    20da:	91 e0       	ldi	r25, 0x01	; 1
    20dc:	9e a7       	std	Y+46, r25	; 0x2e
    20de:	8d a7       	std	Y+45, r24	; 0x2d
    20e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    20e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	f1 f7       	brne	.-4      	; 0x20e4 <LCD_sendCommand+0x558>
    20e8:	9e a7       	std	Y+46, r25	; 0x2e
    20ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ee:	98 a9       	ldd	r25, Y+48	; 0x30
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	98 ab       	std	Y+48, r25	; 0x30
    20f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f8:	98 a9       	ldd	r25, Y+48	; 0x30
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	69 f7       	brne	.-38     	; 0x20d8 <LCD_sendCommand+0x54c>
    20fe:	14 c0       	rjmp	.+40     	; 0x2128 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2100:	69 a9       	ldd	r22, Y+49	; 0x31
    2102:	7a a9       	ldd	r23, Y+50	; 0x32
    2104:	8b a9       	ldd	r24, Y+51	; 0x33
    2106:	9c a9       	ldd	r25, Y+52	; 0x34
    2108:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	98 ab       	std	Y+48, r25	; 0x30
    2112:	8f a7       	std	Y+47, r24	; 0x2f
    2114:	8f a5       	ldd	r24, Y+47	; 0x2f
    2116:	98 a9       	ldd	r25, Y+48	; 0x30
    2118:	9c a7       	std	Y+44, r25	; 0x2c
    211a:	8b a7       	std	Y+43, r24	; 0x2b
    211c:	8b a5       	ldd	r24, Y+43	; 0x2b
    211e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f1 f7       	brne	.-4      	; 0x2120 <LCD_sendCommand+0x594>
    2124:	9c a7       	std	Y+44, r25	; 0x2c
    2126:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	61 e0       	ldi	r22, 0x01	; 1
    212c:	41 e0       	ldi	r20, 0x01	; 1
    212e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	a0 e8       	ldi	r26, 0x80	; 128
    2138:	bf e3       	ldi	r27, 0x3F	; 63
    213a:	8f a3       	std	Y+39, r24	; 0x27
    213c:	98 a7       	std	Y+40, r25	; 0x28
    213e:	a9 a7       	std	Y+41, r26	; 0x29
    2140:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2142:	6f a1       	ldd	r22, Y+39	; 0x27
    2144:	78 a5       	ldd	r23, Y+40	; 0x28
    2146:	89 a5       	ldd	r24, Y+41	; 0x29
    2148:	9a a5       	ldd	r25, Y+42	; 0x2a
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4a e7       	ldi	r20, 0x7A	; 122
    2150:	55 e4       	ldi	r21, 0x45	; 69
    2152:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	8b a3       	std	Y+35, r24	; 0x23
    215c:	9c a3       	std	Y+36, r25	; 0x24
    215e:	ad a3       	std	Y+37, r26	; 0x25
    2160:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2162:	6b a1       	ldd	r22, Y+35	; 0x23
    2164:	7c a1       	ldd	r23, Y+36	; 0x24
    2166:	8d a1       	ldd	r24, Y+37	; 0x25
    2168:	9e a1       	ldd	r25, Y+38	; 0x26
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e8       	ldi	r20, 0x80	; 128
    2170:	5f e3       	ldi	r21, 0x3F	; 63
    2172:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2176:	88 23       	and	r24, r24
    2178:	2c f4       	brge	.+10     	; 0x2184 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	9a a3       	std	Y+34, r25	; 0x22
    2180:	89 a3       	std	Y+33, r24	; 0x21
    2182:	3f c0       	rjmp	.+126    	; 0x2202 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2184:	6b a1       	ldd	r22, Y+35	; 0x23
    2186:	7c a1       	ldd	r23, Y+36	; 0x24
    2188:	8d a1       	ldd	r24, Y+37	; 0x25
    218a:	9e a1       	ldd	r25, Y+38	; 0x26
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	3f ef       	ldi	r19, 0xFF	; 255
    2190:	4f e7       	ldi	r20, 0x7F	; 127
    2192:	57 e4       	ldi	r21, 0x47	; 71
    2194:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2198:	18 16       	cp	r1, r24
    219a:	4c f5       	brge	.+82     	; 0x21ee <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219c:	6f a1       	ldd	r22, Y+39	; 0x27
    219e:	78 a5       	ldd	r23, Y+40	; 0x28
    21a0:	89 a5       	ldd	r24, Y+41	; 0x29
    21a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e2       	ldi	r20, 0x20	; 32
    21aa:	51 e4       	ldi	r21, 0x41	; 65
    21ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9a a3       	std	Y+34, r25	; 0x22
    21c2:	89 a3       	std	Y+33, r24	; 0x21
    21c4:	0f c0       	rjmp	.+30     	; 0x21e4 <LCD_sendCommand+0x658>
    21c6:	80 e9       	ldi	r24, 0x90	; 144
    21c8:	91 e0       	ldi	r25, 0x01	; 1
    21ca:	98 a3       	std	Y+32, r25	; 0x20
    21cc:	8f 8f       	std	Y+31, r24	; 0x1f
    21ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21d0:	98 a1       	ldd	r25, Y+32	; 0x20
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <LCD_sendCommand+0x646>
    21d6:	98 a3       	std	Y+32, r25	; 0x20
    21d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21da:	89 a1       	ldd	r24, Y+33	; 0x21
    21dc:	9a a1       	ldd	r25, Y+34	; 0x22
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	9a a3       	std	Y+34, r25	; 0x22
    21e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e4:	89 a1       	ldd	r24, Y+33	; 0x21
    21e6:	9a a1       	ldd	r25, Y+34	; 0x22
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	69 f7       	brne	.-38     	; 0x21c6 <LCD_sendCommand+0x63a>
    21ec:	14 c0       	rjmp	.+40     	; 0x2216 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ee:	6b a1       	ldd	r22, Y+35	; 0x23
    21f0:	7c a1       	ldd	r23, Y+36	; 0x24
    21f2:	8d a1       	ldd	r24, Y+37	; 0x25
    21f4:	9e a1       	ldd	r25, Y+38	; 0x26
    21f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	9a a3       	std	Y+34, r25	; 0x22
    2200:	89 a3       	std	Y+33, r24	; 0x21
    2202:	89 a1       	ldd	r24, Y+33	; 0x21
    2204:	9a a1       	ldd	r25, Y+34	; 0x22
    2206:	9e 8f       	std	Y+30, r25	; 0x1e
    2208:	8d 8f       	std	Y+29, r24	; 0x1d
    220a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    220c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <LCD_sendCommand+0x682>
    2212:	9e 8f       	std	Y+30, r25	; 0x1e
    2214:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2216:	fe 01       	movw	r30, r28
    2218:	ed 59       	subi	r30, 0x9D	; 157
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	80 81       	ld	r24, Z
    221e:	98 2f       	mov	r25, r24
    2220:	91 70       	andi	r25, 0x01	; 1
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	62 e0       	ldi	r22, 0x02	; 2
    2226:	49 2f       	mov	r20, r25
    2228:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    222c:	fe 01       	movw	r30, r28
    222e:	ed 59       	subi	r30, 0x9D	; 157
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	80 81       	ld	r24, Z
    2234:	88 2f       	mov	r24, r24
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	82 70       	andi	r24, 0x02	; 2
    223a:	90 70       	andi	r25, 0x00	; 0
    223c:	95 95       	asr	r25
    223e:	87 95       	ror	r24
    2240:	98 2f       	mov	r25, r24
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	63 e0       	ldi	r22, 0x03	; 3
    2246:	49 2f       	mov	r20, r25
    2248:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    224c:	fe 01       	movw	r30, r28
    224e:	ed 59       	subi	r30, 0x9D	; 157
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	80 81       	ld	r24, Z
    2254:	88 2f       	mov	r24, r24
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	84 70       	andi	r24, 0x04	; 4
    225a:	90 70       	andi	r25, 0x00	; 0
    225c:	95 95       	asr	r25
    225e:	87 95       	ror	r24
    2260:	95 95       	asr	r25
    2262:	87 95       	ror	r24
    2264:	98 2f       	mov	r25, r24
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	64 e0       	ldi	r22, 0x04	; 4
    226a:	49 2f       	mov	r20, r25
    226c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2270:	fe 01       	movw	r30, r28
    2272:	ed 59       	subi	r30, 0x9D	; 157
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	80 81       	ld	r24, Z
    2278:	88 2f       	mov	r24, r24
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	88 70       	andi	r24, 0x08	; 8
    227e:	90 70       	andi	r25, 0x00	; 0
    2280:	95 95       	asr	r25
    2282:	87 95       	ror	r24
    2284:	95 95       	asr	r25
    2286:	87 95       	ror	r24
    2288:	95 95       	asr	r25
    228a:	87 95       	ror	r24
    228c:	98 2f       	mov	r25, r24
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	65 e0       	ldi	r22, 0x05	; 5
    2292:	49 2f       	mov	r20, r25
    2294:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	a0 e8       	ldi	r26, 0x80	; 128
    229e:	bf e3       	ldi	r27, 0x3F	; 63
    22a0:	89 8f       	std	Y+25, r24	; 0x19
    22a2:	9a 8f       	std	Y+26, r25	; 0x1a
    22a4:	ab 8f       	std	Y+27, r26	; 0x1b
    22a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a8:	69 8d       	ldd	r22, Y+25	; 0x19
    22aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	4a e7       	ldi	r20, 0x7A	; 122
    22b6:	55 e4       	ldi	r21, 0x45	; 69
    22b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	8d 8b       	std	Y+21, r24	; 0x15
    22c2:	9e 8b       	std	Y+22, r25	; 0x16
    22c4:	af 8b       	std	Y+23, r26	; 0x17
    22c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22c8:	6d 89       	ldd	r22, Y+21	; 0x15
    22ca:	7e 89       	ldd	r23, Y+22	; 0x16
    22cc:	8f 89       	ldd	r24, Y+23	; 0x17
    22ce:	98 8d       	ldd	r25, Y+24	; 0x18
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e8       	ldi	r20, 0x80	; 128
    22d6:	5f e3       	ldi	r21, 0x3F	; 63
    22d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22dc:	88 23       	and	r24, r24
    22de:	2c f4       	brge	.+10     	; 0x22ea <LCD_sendCommand+0x75e>
		__ticks = 1;
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	9c 8b       	std	Y+20, r25	; 0x14
    22e6:	8b 8b       	std	Y+19, r24	; 0x13
    22e8:	3f c0       	rjmp	.+126    	; 0x2368 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    22ea:	6d 89       	ldd	r22, Y+21	; 0x15
    22ec:	7e 89       	ldd	r23, Y+22	; 0x16
    22ee:	8f 89       	ldd	r24, Y+23	; 0x17
    22f0:	98 8d       	ldd	r25, Y+24	; 0x18
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	3f ef       	ldi	r19, 0xFF	; 255
    22f6:	4f e7       	ldi	r20, 0x7F	; 127
    22f8:	57 e4       	ldi	r21, 0x47	; 71
    22fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22fe:	18 16       	cp	r1, r24
    2300:	4c f5       	brge	.+82     	; 0x2354 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2302:	69 8d       	ldd	r22, Y+25	; 0x19
    2304:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2306:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2308:	9c 8d       	ldd	r25, Y+28	; 0x1c
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e2       	ldi	r20, 0x20	; 32
    2310:	51 e4       	ldi	r21, 0x41	; 65
    2312:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	bc 01       	movw	r22, r24
    231c:	cd 01       	movw	r24, r26
    231e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9c 8b       	std	Y+20, r25	; 0x14
    2328:	8b 8b       	std	Y+19, r24	; 0x13
    232a:	0f c0       	rjmp	.+30     	; 0x234a <LCD_sendCommand+0x7be>
    232c:	80 e9       	ldi	r24, 0x90	; 144
    232e:	91 e0       	ldi	r25, 0x01	; 1
    2330:	9a 8b       	std	Y+18, r25	; 0x12
    2332:	89 8b       	std	Y+17, r24	; 0x11
    2334:	89 89       	ldd	r24, Y+17	; 0x11
    2336:	9a 89       	ldd	r25, Y+18	; 0x12
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <LCD_sendCommand+0x7ac>
    233c:	9a 8b       	std	Y+18, r25	; 0x12
    233e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2340:	8b 89       	ldd	r24, Y+19	; 0x13
    2342:	9c 89       	ldd	r25, Y+20	; 0x14
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	9c 8b       	std	Y+20, r25	; 0x14
    2348:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234a:	8b 89       	ldd	r24, Y+19	; 0x13
    234c:	9c 89       	ldd	r25, Y+20	; 0x14
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	69 f7       	brne	.-38     	; 0x232c <LCD_sendCommand+0x7a0>
    2352:	14 c0       	rjmp	.+40     	; 0x237c <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2354:	6d 89       	ldd	r22, Y+21	; 0x15
    2356:	7e 89       	ldd	r23, Y+22	; 0x16
    2358:	8f 89       	ldd	r24, Y+23	; 0x17
    235a:	98 8d       	ldd	r25, Y+24	; 0x18
    235c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	9c 8b       	std	Y+20, r25	; 0x14
    2366:	8b 8b       	std	Y+19, r24	; 0x13
    2368:	8b 89       	ldd	r24, Y+19	; 0x13
    236a:	9c 89       	ldd	r25, Y+20	; 0x14
    236c:	98 8b       	std	Y+16, r25	; 0x10
    236e:	8f 87       	std	Y+15, r24	; 0x0f
    2370:	8f 85       	ldd	r24, Y+15	; 0x0f
    2372:	98 89       	ldd	r25, Y+16	; 0x10
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	f1 f7       	brne	.-4      	; 0x2374 <LCD_sendCommand+0x7e8>
    2378:	98 8b       	std	Y+16, r25	; 0x10
    237a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	61 e0       	ldi	r22, 0x01	; 1
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	a0 e8       	ldi	r26, 0x80	; 128
    238c:	bf e3       	ldi	r27, 0x3F	; 63
    238e:	8b 87       	std	Y+11, r24	; 0x0b
    2390:	9c 87       	std	Y+12, r25	; 0x0c
    2392:	ad 87       	std	Y+13, r26	; 0x0d
    2394:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2396:	6b 85       	ldd	r22, Y+11	; 0x0b
    2398:	7c 85       	ldd	r23, Y+12	; 0x0c
    239a:	8d 85       	ldd	r24, Y+13	; 0x0d
    239c:	9e 85       	ldd	r25, Y+14	; 0x0e
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	4a e7       	ldi	r20, 0x7A	; 122
    23a4:	55 e4       	ldi	r21, 0x45	; 69
    23a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	8f 83       	std	Y+7, r24	; 0x07
    23b0:	98 87       	std	Y+8, r25	; 0x08
    23b2:	a9 87       	std	Y+9, r26	; 0x09
    23b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23b6:	6f 81       	ldd	r22, Y+7	; 0x07
    23b8:	78 85       	ldd	r23, Y+8	; 0x08
    23ba:	89 85       	ldd	r24, Y+9	; 0x09
    23bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e8       	ldi	r20, 0x80	; 128
    23c4:	5f e3       	ldi	r21, 0x3F	; 63
    23c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23ca:	88 23       	and	r24, r24
    23cc:	2c f4       	brge	.+10     	; 0x23d8 <LCD_sendCommand+0x84c>
		__ticks = 1;
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	9e 83       	std	Y+6, r25	; 0x06
    23d4:	8d 83       	std	Y+5, r24	; 0x05
    23d6:	3f c0       	rjmp	.+126    	; 0x2456 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    23d8:	6f 81       	ldd	r22, Y+7	; 0x07
    23da:	78 85       	ldd	r23, Y+8	; 0x08
    23dc:	89 85       	ldd	r24, Y+9	; 0x09
    23de:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	3f ef       	ldi	r19, 0xFF	; 255
    23e4:	4f e7       	ldi	r20, 0x7F	; 127
    23e6:	57 e4       	ldi	r21, 0x47	; 71
    23e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23ec:	18 16       	cp	r1, r24
    23ee:	4c f5       	brge	.+82     	; 0x2442 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e2       	ldi	r20, 0x20	; 32
    23fe:	51 e4       	ldi	r21, 0x41	; 65
    2400:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	bc 01       	movw	r22, r24
    240a:	cd 01       	movw	r24, r26
    240c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	9e 83       	std	Y+6, r25	; 0x06
    2416:	8d 83       	std	Y+5, r24	; 0x05
    2418:	0f c0       	rjmp	.+30     	; 0x2438 <LCD_sendCommand+0x8ac>
    241a:	80 e9       	ldi	r24, 0x90	; 144
    241c:	91 e0       	ldi	r25, 0x01	; 1
    241e:	9c 83       	std	Y+4, r25	; 0x04
    2420:	8b 83       	std	Y+3, r24	; 0x03
    2422:	8b 81       	ldd	r24, Y+3	; 0x03
    2424:	9c 81       	ldd	r25, Y+4	; 0x04
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <LCD_sendCommand+0x89a>
    242a:	9c 83       	std	Y+4, r25	; 0x04
    242c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242e:	8d 81       	ldd	r24, Y+5	; 0x05
    2430:	9e 81       	ldd	r25, Y+6	; 0x06
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	9e 83       	std	Y+6, r25	; 0x06
    2436:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2438:	8d 81       	ldd	r24, Y+5	; 0x05
    243a:	9e 81       	ldd	r25, Y+6	; 0x06
    243c:	00 97       	sbiw	r24, 0x00	; 0
    243e:	69 f7       	brne	.-38     	; 0x241a <LCD_sendCommand+0x88e>
    2440:	14 c0       	rjmp	.+40     	; 0x246a <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2442:	6f 81       	ldd	r22, Y+7	; 0x07
    2444:	78 85       	ldd	r23, Y+8	; 0x08
    2446:	89 85       	ldd	r24, Y+9	; 0x09
    2448:	9a 85       	ldd	r25, Y+10	; 0x0a
    244a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	9e 83       	std	Y+6, r25	; 0x06
    2454:	8d 83       	std	Y+5, r24	; 0x05
    2456:	8d 81       	ldd	r24, Y+5	; 0x05
    2458:	9e 81       	ldd	r25, Y+6	; 0x06
    245a:	9a 83       	std	Y+2, r25	; 0x02
    245c:	89 83       	std	Y+1, r24	; 0x01
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	9a 81       	ldd	r25, Y+2	; 0x02
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <LCD_sendCommand+0x8d6>
    2466:	9a 83       	std	Y+2, r25	; 0x02
    2468:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    246a:	cd 59       	subi	r28, 0x9D	; 157
    246c:	df 4f       	sbci	r29, 0xFF	; 255
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	cf 91       	pop	r28
    247a:	df 91       	pop	r29
    247c:	1f 91       	pop	r17
    247e:	0f 91       	pop	r16
    2480:	08 95       	ret

00002482 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2482:	0f 93       	push	r16
    2484:	1f 93       	push	r17
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
    248e:	c3 56       	subi	r28, 0x63	; 99
    2490:	d0 40       	sbci	r29, 0x00	; 0
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	fe 01       	movw	r30, r28
    249e:	ed 59       	subi	r30, 0x9D	; 157
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	60 e0       	ldi	r22, 0x00	; 0
    24a8:	41 e0       	ldi	r20, 0x01	; 1
    24aa:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
    24ae:	fe 01       	movw	r30, r28
    24b0:	e1 5a       	subi	r30, 0xA1	; 161
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	a0 e8       	ldi	r26, 0x80	; 128
    24ba:	bf e3       	ldi	r27, 0x3F	; 63
    24bc:	80 83       	st	Z, r24
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	a2 83       	std	Z+2, r26	; 0x02
    24c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c4:	8e 01       	movw	r16, r28
    24c6:	05 5a       	subi	r16, 0xA5	; 165
    24c8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ca:	fe 01       	movw	r30, r28
    24cc:	e1 5a       	subi	r30, 0xA1	; 161
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	60 81       	ld	r22, Z
    24d2:	71 81       	ldd	r23, Z+1	; 0x01
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	93 81       	ldd	r25, Z+3	; 0x03
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	4a e7       	ldi	r20, 0x7A	; 122
    24de:	55 e4       	ldi	r21, 0x45	; 69
    24e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	f8 01       	movw	r30, r16
    24ea:	80 83       	st	Z, r24
    24ec:	91 83       	std	Z+1, r25	; 0x01
    24ee:	a2 83       	std	Z+2, r26	; 0x02
    24f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24f2:	fe 01       	movw	r30, r28
    24f4:	e5 5a       	subi	r30, 0xA5	; 165
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	60 81       	ld	r22, Z
    24fa:	71 81       	ldd	r23, Z+1	; 0x01
    24fc:	82 81       	ldd	r24, Z+2	; 0x02
    24fe:	93 81       	ldd	r25, Z+3	; 0x03
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e8       	ldi	r20, 0x80	; 128
    2506:	5f e3       	ldi	r21, 0x3F	; 63
    2508:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    250c:	88 23       	and	r24, r24
    250e:	44 f4       	brge	.+16     	; 0x2520 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2510:	fe 01       	movw	r30, r28
    2512:	e7 5a       	subi	r30, 0xA7	; 167
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	91 83       	std	Z+1, r25	; 0x01
    251c:	80 83       	st	Z, r24
    251e:	64 c0       	rjmp	.+200    	; 0x25e8 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2520:	fe 01       	movw	r30, r28
    2522:	e5 5a       	subi	r30, 0xA5	; 165
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	60 81       	ld	r22, Z
    2528:	71 81       	ldd	r23, Z+1	; 0x01
    252a:	82 81       	ldd	r24, Z+2	; 0x02
    252c:	93 81       	ldd	r25, Z+3	; 0x03
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	3f ef       	ldi	r19, 0xFF	; 255
    2532:	4f e7       	ldi	r20, 0x7F	; 127
    2534:	57 e4       	ldi	r21, 0x47	; 71
    2536:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    253a:	18 16       	cp	r1, r24
    253c:	0c f0       	brlt	.+2      	; 0x2540 <LCD_displayCharacter+0xbe>
    253e:	43 c0       	rjmp	.+134    	; 0x25c6 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2540:	fe 01       	movw	r30, r28
    2542:	e1 5a       	subi	r30, 0xA1	; 161
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	60 81       	ld	r22, Z
    2548:	71 81       	ldd	r23, Z+1	; 0x01
    254a:	82 81       	ldd	r24, Z+2	; 0x02
    254c:	93 81       	ldd	r25, Z+3	; 0x03
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e2       	ldi	r20, 0x20	; 32
    2554:	51 e4       	ldi	r21, 0x41	; 65
    2556:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	8e 01       	movw	r16, r28
    2560:	07 5a       	subi	r16, 0xA7	; 167
    2562:	1f 4f       	sbci	r17, 0xFF	; 255
    2564:	bc 01       	movw	r22, r24
    2566:	cd 01       	movw	r24, r26
    2568:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	f8 01       	movw	r30, r16
    2572:	91 83       	std	Z+1, r25	; 0x01
    2574:	80 83       	st	Z, r24
    2576:	1f c0       	rjmp	.+62     	; 0x25b6 <LCD_displayCharacter+0x134>
    2578:	fe 01       	movw	r30, r28
    257a:	e9 5a       	subi	r30, 0xA9	; 169
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 e9       	ldi	r24, 0x90	; 144
    2580:	91 e0       	ldi	r25, 0x01	; 1
    2582:	91 83       	std	Z+1, r25	; 0x01
    2584:	80 83       	st	Z, r24
    2586:	fe 01       	movw	r30, r28
    2588:	e9 5a       	subi	r30, 0xA9	; 169
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 81       	ld	r24, Z
    258e:	91 81       	ldd	r25, Z+1	; 0x01
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f1 f7       	brne	.-4      	; 0x2590 <LCD_displayCharacter+0x10e>
    2594:	fe 01       	movw	r30, r28
    2596:	e9 5a       	subi	r30, 0xA9	; 169
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	91 83       	std	Z+1, r25	; 0x01
    259c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259e:	de 01       	movw	r26, r28
    25a0:	a7 5a       	subi	r26, 0xA7	; 167
    25a2:	bf 4f       	sbci	r27, 0xFF	; 255
    25a4:	fe 01       	movw	r30, r28
    25a6:	e7 5a       	subi	r30, 0xA7	; 167
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	80 81       	ld	r24, Z
    25ac:	91 81       	ldd	r25, Z+1	; 0x01
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	11 96       	adiw	r26, 0x01	; 1
    25b2:	9c 93       	st	X, r25
    25b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b6:	fe 01       	movw	r30, r28
    25b8:	e7 5a       	subi	r30, 0xA7	; 167
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 81       	ld	r24, Z
    25be:	91 81       	ldd	r25, Z+1	; 0x01
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	d1 f6       	brne	.-76     	; 0x2578 <LCD_displayCharacter+0xf6>
    25c4:	27 c0       	rjmp	.+78     	; 0x2614 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c6:	8e 01       	movw	r16, r28
    25c8:	07 5a       	subi	r16, 0xA7	; 167
    25ca:	1f 4f       	sbci	r17, 0xFF	; 255
    25cc:	fe 01       	movw	r30, r28
    25ce:	e5 5a       	subi	r30, 0xA5	; 165
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	60 81       	ld	r22, Z
    25d4:	71 81       	ldd	r23, Z+1	; 0x01
    25d6:	82 81       	ldd	r24, Z+2	; 0x02
    25d8:	93 81       	ldd	r25, Z+3	; 0x03
    25da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	f8 01       	movw	r30, r16
    25e4:	91 83       	std	Z+1, r25	; 0x01
    25e6:	80 83       	st	Z, r24
    25e8:	de 01       	movw	r26, r28
    25ea:	ab 5a       	subi	r26, 0xAB	; 171
    25ec:	bf 4f       	sbci	r27, 0xFF	; 255
    25ee:	fe 01       	movw	r30, r28
    25f0:	e7 5a       	subi	r30, 0xA7	; 167
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	80 81       	ld	r24, Z
    25f6:	91 81       	ldd	r25, Z+1	; 0x01
    25f8:	8d 93       	st	X+, r24
    25fa:	9c 93       	st	X, r25
    25fc:	fe 01       	movw	r30, r28
    25fe:	eb 5a       	subi	r30, 0xAB	; 171
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	80 81       	ld	r24, Z
    2604:	91 81       	ldd	r25, Z+1	; 0x01
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <LCD_displayCharacter+0x184>
    260a:	fe 01       	movw	r30, r28
    260c:	eb 5a       	subi	r30, 0xAB	; 171
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	91 83       	std	Z+1, r25	; 0x01
    2612:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	61 e0       	ldi	r22, 0x01	; 1
    2618:	41 e0       	ldi	r20, 0x01	; 1
    261a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
    261e:	fe 01       	movw	r30, r28
    2620:	ef 5a       	subi	r30, 0xAF	; 175
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	a0 e8       	ldi	r26, 0x80	; 128
    262a:	bf e3       	ldi	r27, 0x3F	; 63
    262c:	80 83       	st	Z, r24
    262e:	91 83       	std	Z+1, r25	; 0x01
    2630:	a2 83       	std	Z+2, r26	; 0x02
    2632:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2634:	8e 01       	movw	r16, r28
    2636:	03 5b       	subi	r16, 0xB3	; 179
    2638:	1f 4f       	sbci	r17, 0xFF	; 255
    263a:	fe 01       	movw	r30, r28
    263c:	ef 5a       	subi	r30, 0xAF	; 175
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	60 81       	ld	r22, Z
    2642:	71 81       	ldd	r23, Z+1	; 0x01
    2644:	82 81       	ldd	r24, Z+2	; 0x02
    2646:	93 81       	ldd	r25, Z+3	; 0x03
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	4a e7       	ldi	r20, 0x7A	; 122
    264e:	55 e4       	ldi	r21, 0x45	; 69
    2650:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	f8 01       	movw	r30, r16
    265a:	80 83       	st	Z, r24
    265c:	91 83       	std	Z+1, r25	; 0x01
    265e:	a2 83       	std	Z+2, r26	; 0x02
    2660:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2662:	fe 01       	movw	r30, r28
    2664:	e3 5b       	subi	r30, 0xB3	; 179
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	60 81       	ld	r22, Z
    266a:	71 81       	ldd	r23, Z+1	; 0x01
    266c:	82 81       	ldd	r24, Z+2	; 0x02
    266e:	93 81       	ldd	r25, Z+3	; 0x03
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e8       	ldi	r20, 0x80	; 128
    2676:	5f e3       	ldi	r21, 0x3F	; 63
    2678:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    267c:	88 23       	and	r24, r24
    267e:	44 f4       	brge	.+16     	; 0x2690 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2680:	fe 01       	movw	r30, r28
    2682:	e5 5b       	subi	r30, 0xB5	; 181
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	80 83       	st	Z, r24
    268e:	64 c0       	rjmp	.+200    	; 0x2758 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2690:	fe 01       	movw	r30, r28
    2692:	e3 5b       	subi	r30, 0xB3	; 179
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	60 81       	ld	r22, Z
    2698:	71 81       	ldd	r23, Z+1	; 0x01
    269a:	82 81       	ldd	r24, Z+2	; 0x02
    269c:	93 81       	ldd	r25, Z+3	; 0x03
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	3f ef       	ldi	r19, 0xFF	; 255
    26a2:	4f e7       	ldi	r20, 0x7F	; 127
    26a4:	57 e4       	ldi	r21, 0x47	; 71
    26a6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26aa:	18 16       	cp	r1, r24
    26ac:	0c f0       	brlt	.+2      	; 0x26b0 <LCD_displayCharacter+0x22e>
    26ae:	43 c0       	rjmp	.+134    	; 0x2736 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b0:	fe 01       	movw	r30, r28
    26b2:	ef 5a       	subi	r30, 0xAF	; 175
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	60 81       	ld	r22, Z
    26b8:	71 81       	ldd	r23, Z+1	; 0x01
    26ba:	82 81       	ldd	r24, Z+2	; 0x02
    26bc:	93 81       	ldd	r25, Z+3	; 0x03
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e2       	ldi	r20, 0x20	; 32
    26c4:	51 e4       	ldi	r21, 0x41	; 65
    26c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	8e 01       	movw	r16, r28
    26d0:	05 5b       	subi	r16, 0xB5	; 181
    26d2:	1f 4f       	sbci	r17, 0xFF	; 255
    26d4:	bc 01       	movw	r22, r24
    26d6:	cd 01       	movw	r24, r26
    26d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	f8 01       	movw	r30, r16
    26e2:	91 83       	std	Z+1, r25	; 0x01
    26e4:	80 83       	st	Z, r24
    26e6:	1f c0       	rjmp	.+62     	; 0x2726 <LCD_displayCharacter+0x2a4>
    26e8:	fe 01       	movw	r30, r28
    26ea:	e7 5b       	subi	r30, 0xB7	; 183
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	80 e9       	ldi	r24, 0x90	; 144
    26f0:	91 e0       	ldi	r25, 0x01	; 1
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	80 83       	st	Z, r24
    26f6:	fe 01       	movw	r30, r28
    26f8:	e7 5b       	subi	r30, 0xB7	; 183
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	91 81       	ldd	r25, Z+1	; 0x01
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <LCD_displayCharacter+0x27e>
    2704:	fe 01       	movw	r30, r28
    2706:	e7 5b       	subi	r30, 0xB7	; 183
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270e:	de 01       	movw	r26, r28
    2710:	a5 5b       	subi	r26, 0xB5	; 181
    2712:	bf 4f       	sbci	r27, 0xFF	; 255
    2714:	fe 01       	movw	r30, r28
    2716:	e5 5b       	subi	r30, 0xB5	; 181
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	80 81       	ld	r24, Z
    271c:	91 81       	ldd	r25, Z+1	; 0x01
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	11 96       	adiw	r26, 0x01	; 1
    2722:	9c 93       	st	X, r25
    2724:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2726:	fe 01       	movw	r30, r28
    2728:	e5 5b       	subi	r30, 0xB5	; 181
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	80 81       	ld	r24, Z
    272e:	91 81       	ldd	r25, Z+1	; 0x01
    2730:	00 97       	sbiw	r24, 0x00	; 0
    2732:	d1 f6       	brne	.-76     	; 0x26e8 <LCD_displayCharacter+0x266>
    2734:	27 c0       	rjmp	.+78     	; 0x2784 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2736:	8e 01       	movw	r16, r28
    2738:	05 5b       	subi	r16, 0xB5	; 181
    273a:	1f 4f       	sbci	r17, 0xFF	; 255
    273c:	fe 01       	movw	r30, r28
    273e:	e3 5b       	subi	r30, 0xB3	; 179
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	60 81       	ld	r22, Z
    2744:	71 81       	ldd	r23, Z+1	; 0x01
    2746:	82 81       	ldd	r24, Z+2	; 0x02
    2748:	93 81       	ldd	r25, Z+3	; 0x03
    274a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	f8 01       	movw	r30, r16
    2754:	91 83       	std	Z+1, r25	; 0x01
    2756:	80 83       	st	Z, r24
    2758:	de 01       	movw	r26, r28
    275a:	a9 5b       	subi	r26, 0xB9	; 185
    275c:	bf 4f       	sbci	r27, 0xFF	; 255
    275e:	fe 01       	movw	r30, r28
    2760:	e5 5b       	subi	r30, 0xB5	; 181
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	80 81       	ld	r24, Z
    2766:	91 81       	ldd	r25, Z+1	; 0x01
    2768:	8d 93       	st	X+, r24
    276a:	9c 93       	st	X, r25
    276c:	fe 01       	movw	r30, r28
    276e:	e9 5b       	subi	r30, 0xB9	; 185
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	80 81       	ld	r24, Z
    2774:	91 81       	ldd	r25, Z+1	; 0x01
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <LCD_displayCharacter+0x2f4>
    277a:	fe 01       	movw	r30, r28
    277c:	e9 5b       	subi	r30, 0xB9	; 185
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	91 83       	std	Z+1, r25	; 0x01
    2782:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2784:	fe 01       	movw	r30, r28
    2786:	ed 59       	subi	r30, 0x9D	; 157
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	80 81       	ld	r24, Z
    278c:	88 2f       	mov	r24, r24
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	80 71       	andi	r24, 0x10	; 16
    2792:	90 70       	andi	r25, 0x00	; 0
    2794:	95 95       	asr	r25
    2796:	87 95       	ror	r24
    2798:	95 95       	asr	r25
    279a:	87 95       	ror	r24
    279c:	95 95       	asr	r25
    279e:	87 95       	ror	r24
    27a0:	95 95       	asr	r25
    27a2:	87 95       	ror	r24
    27a4:	98 2f       	mov	r25, r24
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	62 e0       	ldi	r22, 0x02	; 2
    27aa:	49 2f       	mov	r20, r25
    27ac:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    27b0:	fe 01       	movw	r30, r28
    27b2:	ed 59       	subi	r30, 0x9D	; 157
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	80 81       	ld	r24, Z
    27b8:	88 2f       	mov	r24, r24
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	80 72       	andi	r24, 0x20	; 32
    27be:	90 70       	andi	r25, 0x00	; 0
    27c0:	95 95       	asr	r25
    27c2:	87 95       	ror	r24
    27c4:	95 95       	asr	r25
    27c6:	87 95       	ror	r24
    27c8:	95 95       	asr	r25
    27ca:	87 95       	ror	r24
    27cc:	95 95       	asr	r25
    27ce:	87 95       	ror	r24
    27d0:	95 95       	asr	r25
    27d2:	87 95       	ror	r24
    27d4:	98 2f       	mov	r25, r24
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	63 e0       	ldi	r22, 0x03	; 3
    27da:	49 2f       	mov	r20, r25
    27dc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    27e0:	fe 01       	movw	r30, r28
    27e2:	ed 59       	subi	r30, 0x9D	; 157
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	80 81       	ld	r24, Z
    27e8:	88 2f       	mov	r24, r24
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	80 74       	andi	r24, 0x40	; 64
    27ee:	90 70       	andi	r25, 0x00	; 0
    27f0:	08 2e       	mov	r0, r24
    27f2:	89 2f       	mov	r24, r25
    27f4:	00 0c       	add	r0, r0
    27f6:	88 1f       	adc	r24, r24
    27f8:	99 0b       	sbc	r25, r25
    27fa:	00 0c       	add	r0, r0
    27fc:	88 1f       	adc	r24, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	98 2f       	mov	r25, r24
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	64 e0       	ldi	r22, 0x04	; 4
    2806:	49 2f       	mov	r20, r25
    2808:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    280c:	fe 01       	movw	r30, r28
    280e:	ed 59       	subi	r30, 0x9D	; 157
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	80 81       	ld	r24, Z
    2814:	98 2f       	mov	r25, r24
    2816:	99 1f       	adc	r25, r25
    2818:	99 27       	eor	r25, r25
    281a:	99 1f       	adc	r25, r25
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	65 e0       	ldi	r22, 0x05	; 5
    2820:	49 2f       	mov	r20, r25
    2822:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
    2826:	fe 01       	movw	r30, r28
    2828:	ed 5b       	subi	r30, 0xBD	; 189
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	a0 e8       	ldi	r26, 0x80	; 128
    2832:	bf e3       	ldi	r27, 0x3F	; 63
    2834:	80 83       	st	Z, r24
    2836:	91 83       	std	Z+1, r25	; 0x01
    2838:	a2 83       	std	Z+2, r26	; 0x02
    283a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    283c:	8e 01       	movw	r16, r28
    283e:	01 5c       	subi	r16, 0xC1	; 193
    2840:	1f 4f       	sbci	r17, 0xFF	; 255
    2842:	fe 01       	movw	r30, r28
    2844:	ed 5b       	subi	r30, 0xBD	; 189
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	60 81       	ld	r22, Z
    284a:	71 81       	ldd	r23, Z+1	; 0x01
    284c:	82 81       	ldd	r24, Z+2	; 0x02
    284e:	93 81       	ldd	r25, Z+3	; 0x03
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	4a e7       	ldi	r20, 0x7A	; 122
    2856:	55 e4       	ldi	r21, 0x45	; 69
    2858:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	f8 01       	movw	r30, r16
    2862:	80 83       	st	Z, r24
    2864:	91 83       	std	Z+1, r25	; 0x01
    2866:	a2 83       	std	Z+2, r26	; 0x02
    2868:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    286a:	fe 01       	movw	r30, r28
    286c:	ff 96       	adiw	r30, 0x3f	; 63
    286e:	60 81       	ld	r22, Z
    2870:	71 81       	ldd	r23, Z+1	; 0x01
    2872:	82 81       	ldd	r24, Z+2	; 0x02
    2874:	93 81       	ldd	r25, Z+3	; 0x03
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e8       	ldi	r20, 0x80	; 128
    287c:	5f e3       	ldi	r21, 0x3F	; 63
    287e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2882:	88 23       	and	r24, r24
    2884:	2c f4       	brge	.+10     	; 0x2890 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	9e af       	std	Y+62, r25	; 0x3e
    288c:	8d af       	std	Y+61, r24	; 0x3d
    288e:	46 c0       	rjmp	.+140    	; 0x291c <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2890:	fe 01       	movw	r30, r28
    2892:	ff 96       	adiw	r30, 0x3f	; 63
    2894:	60 81       	ld	r22, Z
    2896:	71 81       	ldd	r23, Z+1	; 0x01
    2898:	82 81       	ldd	r24, Z+2	; 0x02
    289a:	93 81       	ldd	r25, Z+3	; 0x03
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	3f ef       	ldi	r19, 0xFF	; 255
    28a0:	4f e7       	ldi	r20, 0x7F	; 127
    28a2:	57 e4       	ldi	r21, 0x47	; 71
    28a4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28a8:	18 16       	cp	r1, r24
    28aa:	64 f5       	brge	.+88     	; 0x2904 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ac:	fe 01       	movw	r30, r28
    28ae:	ed 5b       	subi	r30, 0xBD	; 189
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	60 81       	ld	r22, Z
    28b4:	71 81       	ldd	r23, Z+1	; 0x01
    28b6:	82 81       	ldd	r24, Z+2	; 0x02
    28b8:	93 81       	ldd	r25, Z+3	; 0x03
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e2       	ldi	r20, 0x20	; 32
    28c0:	51 e4       	ldi	r21, 0x41	; 65
    28c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	bc 01       	movw	r22, r24
    28cc:	cd 01       	movw	r24, r26
    28ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	9e af       	std	Y+62, r25	; 0x3e
    28d8:	8d af       	std	Y+61, r24	; 0x3d
    28da:	0f c0       	rjmp	.+30     	; 0x28fa <LCD_displayCharacter+0x478>
    28dc:	80 e9       	ldi	r24, 0x90	; 144
    28de:	91 e0       	ldi	r25, 0x01	; 1
    28e0:	9c af       	std	Y+60, r25	; 0x3c
    28e2:	8b af       	std	Y+59, r24	; 0x3b
    28e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    28e6:	9c ad       	ldd	r25, Y+60	; 0x3c
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	f1 f7       	brne	.-4      	; 0x28e8 <LCD_displayCharacter+0x466>
    28ec:	9c af       	std	Y+60, r25	; 0x3c
    28ee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    28f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	9e af       	std	Y+62, r25	; 0x3e
    28f8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    28fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    28fe:	00 97       	sbiw	r24, 0x00	; 0
    2900:	69 f7       	brne	.-38     	; 0x28dc <LCD_displayCharacter+0x45a>
    2902:	16 c0       	rjmp	.+44     	; 0x2930 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2904:	fe 01       	movw	r30, r28
    2906:	ff 96       	adiw	r30, 0x3f	; 63
    2908:	60 81       	ld	r22, Z
    290a:	71 81       	ldd	r23, Z+1	; 0x01
    290c:	82 81       	ldd	r24, Z+2	; 0x02
    290e:	93 81       	ldd	r25, Z+3	; 0x03
    2910:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	9e af       	std	Y+62, r25	; 0x3e
    291a:	8d af       	std	Y+61, r24	; 0x3d
    291c:	8d ad       	ldd	r24, Y+61	; 0x3d
    291e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2920:	9a af       	std	Y+58, r25	; 0x3a
    2922:	89 af       	std	Y+57, r24	; 0x39
    2924:	89 ad       	ldd	r24, Y+57	; 0x39
    2926:	9a ad       	ldd	r25, Y+58	; 0x3a
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <LCD_displayCharacter+0x4a6>
    292c:	9a af       	std	Y+58, r25	; 0x3a
    292e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	61 e0       	ldi	r22, 0x01	; 1
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	a0 e8       	ldi	r26, 0x80	; 128
    2940:	bf e3       	ldi	r27, 0x3F	; 63
    2942:	8d ab       	std	Y+53, r24	; 0x35
    2944:	9e ab       	std	Y+54, r25	; 0x36
    2946:	af ab       	std	Y+55, r26	; 0x37
    2948:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294a:	6d a9       	ldd	r22, Y+53	; 0x35
    294c:	7e a9       	ldd	r23, Y+54	; 0x36
    294e:	8f a9       	ldd	r24, Y+55	; 0x37
    2950:	98 ad       	ldd	r25, Y+56	; 0x38
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	4a e7       	ldi	r20, 0x7A	; 122
    2958:	55 e4       	ldi	r21, 0x45	; 69
    295a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	89 ab       	std	Y+49, r24	; 0x31
    2964:	9a ab       	std	Y+50, r25	; 0x32
    2966:	ab ab       	std	Y+51, r26	; 0x33
    2968:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    296a:	69 a9       	ldd	r22, Y+49	; 0x31
    296c:	7a a9       	ldd	r23, Y+50	; 0x32
    296e:	8b a9       	ldd	r24, Y+51	; 0x33
    2970:	9c a9       	ldd	r25, Y+52	; 0x34
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e8       	ldi	r20, 0x80	; 128
    2978:	5f e3       	ldi	r21, 0x3F	; 63
    297a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    297e:	88 23       	and	r24, r24
    2980:	2c f4       	brge	.+10     	; 0x298c <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	98 ab       	std	Y+48, r25	; 0x30
    2988:	8f a7       	std	Y+47, r24	; 0x2f
    298a:	3f c0       	rjmp	.+126    	; 0x2a0a <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    298c:	69 a9       	ldd	r22, Y+49	; 0x31
    298e:	7a a9       	ldd	r23, Y+50	; 0x32
    2990:	8b a9       	ldd	r24, Y+51	; 0x33
    2992:	9c a9       	ldd	r25, Y+52	; 0x34
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	3f ef       	ldi	r19, 0xFF	; 255
    2998:	4f e7       	ldi	r20, 0x7F	; 127
    299a:	57 e4       	ldi	r21, 0x47	; 71
    299c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29a0:	18 16       	cp	r1, r24
    29a2:	4c f5       	brge	.+82     	; 0x29f6 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a4:	6d a9       	ldd	r22, Y+53	; 0x35
    29a6:	7e a9       	ldd	r23, Y+54	; 0x36
    29a8:	8f a9       	ldd	r24, Y+55	; 0x37
    29aa:	98 ad       	ldd	r25, Y+56	; 0x38
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	40 e2       	ldi	r20, 0x20	; 32
    29b2:	51 e4       	ldi	r21, 0x41	; 65
    29b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	bc 01       	movw	r22, r24
    29be:	cd 01       	movw	r24, r26
    29c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	98 ab       	std	Y+48, r25	; 0x30
    29ca:	8f a7       	std	Y+47, r24	; 0x2f
    29cc:	0f c0       	rjmp	.+30     	; 0x29ec <LCD_displayCharacter+0x56a>
    29ce:	80 e9       	ldi	r24, 0x90	; 144
    29d0:	91 e0       	ldi	r25, 0x01	; 1
    29d2:	9e a7       	std	Y+46, r25	; 0x2e
    29d4:	8d a7       	std	Y+45, r24	; 0x2d
    29d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    29d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	f1 f7       	brne	.-4      	; 0x29da <LCD_displayCharacter+0x558>
    29de:	9e a7       	std	Y+46, r25	; 0x2e
    29e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29e4:	98 a9       	ldd	r25, Y+48	; 0x30
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	98 ab       	std	Y+48, r25	; 0x30
    29ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ee:	98 a9       	ldd	r25, Y+48	; 0x30
    29f0:	00 97       	sbiw	r24, 0x00	; 0
    29f2:	69 f7       	brne	.-38     	; 0x29ce <LCD_displayCharacter+0x54c>
    29f4:	14 c0       	rjmp	.+40     	; 0x2a1e <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f6:	69 a9       	ldd	r22, Y+49	; 0x31
    29f8:	7a a9       	ldd	r23, Y+50	; 0x32
    29fa:	8b a9       	ldd	r24, Y+51	; 0x33
    29fc:	9c a9       	ldd	r25, Y+52	; 0x34
    29fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	98 ab       	std	Y+48, r25	; 0x30
    2a08:	8f a7       	std	Y+47, r24	; 0x2f
    2a0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a0c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a0e:	9c a7       	std	Y+44, r25	; 0x2c
    2a10:	8b a7       	std	Y+43, r24	; 0x2b
    2a12:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a14:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	f1 f7       	brne	.-4      	; 0x2a16 <LCD_displayCharacter+0x594>
    2a1a:	9c a7       	std	Y+44, r25	; 0x2c
    2a1c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	61 e0       	ldi	r22, 0x01	; 1
    2a22:	41 e0       	ldi	r20, 0x01	; 1
    2a24:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	a0 e8       	ldi	r26, 0x80	; 128
    2a2e:	bf e3       	ldi	r27, 0x3F	; 63
    2a30:	8f a3       	std	Y+39, r24	; 0x27
    2a32:	98 a7       	std	Y+40, r25	; 0x28
    2a34:	a9 a7       	std	Y+41, r26	; 0x29
    2a36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a38:	6f a1       	ldd	r22, Y+39	; 0x27
    2a3a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a3c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	4a e7       	ldi	r20, 0x7A	; 122
    2a46:	55 e4       	ldi	r21, 0x45	; 69
    2a48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	8b a3       	std	Y+35, r24	; 0x23
    2a52:	9c a3       	std	Y+36, r25	; 0x24
    2a54:	ad a3       	std	Y+37, r26	; 0x25
    2a56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a58:	6b a1       	ldd	r22, Y+35	; 0x23
    2a5a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a5c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a5e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	40 e8       	ldi	r20, 0x80	; 128
    2a66:	5f e3       	ldi	r21, 0x3F	; 63
    2a68:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a6c:	88 23       	and	r24, r24
    2a6e:	2c f4       	brge	.+10     	; 0x2a7a <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	9a a3       	std	Y+34, r25	; 0x22
    2a76:	89 a3       	std	Y+33, r24	; 0x21
    2a78:	3f c0       	rjmp	.+126    	; 0x2af8 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2a7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a80:	9e a1       	ldd	r25, Y+38	; 0x26
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	3f ef       	ldi	r19, 0xFF	; 255
    2a86:	4f e7       	ldi	r20, 0x7F	; 127
    2a88:	57 e4       	ldi	r21, 0x47	; 71
    2a8a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a8e:	18 16       	cp	r1, r24
    2a90:	4c f5       	brge	.+82     	; 0x2ae4 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a92:	6f a1       	ldd	r22, Y+39	; 0x27
    2a94:	78 a5       	ldd	r23, Y+40	; 0x28
    2a96:	89 a5       	ldd	r24, Y+41	; 0x29
    2a98:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	40 e2       	ldi	r20, 0x20	; 32
    2aa0:	51 e4       	ldi	r21, 0x41	; 65
    2aa2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	bc 01       	movw	r22, r24
    2aac:	cd 01       	movw	r24, r26
    2aae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	9a a3       	std	Y+34, r25	; 0x22
    2ab8:	89 a3       	std	Y+33, r24	; 0x21
    2aba:	0f c0       	rjmp	.+30     	; 0x2ada <LCD_displayCharacter+0x658>
    2abc:	80 e9       	ldi	r24, 0x90	; 144
    2abe:	91 e0       	ldi	r25, 0x01	; 1
    2ac0:	98 a3       	std	Y+32, r25	; 0x20
    2ac2:	8f 8f       	std	Y+31, r24	; 0x1f
    2ac4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ac6:	98 a1       	ldd	r25, Y+32	; 0x20
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	f1 f7       	brne	.-4      	; 0x2ac8 <LCD_displayCharacter+0x646>
    2acc:	98 a3       	std	Y+32, r25	; 0x20
    2ace:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ad2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	9a a3       	std	Y+34, r25	; 0x22
    2ad8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ada:	89 a1       	ldd	r24, Y+33	; 0x21
    2adc:	9a a1       	ldd	r25, Y+34	; 0x22
    2ade:	00 97       	sbiw	r24, 0x00	; 0
    2ae0:	69 f7       	brne	.-38     	; 0x2abc <LCD_displayCharacter+0x63a>
    2ae2:	14 c0       	rjmp	.+40     	; 0x2b0c <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ae6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ae8:	8d a1       	ldd	r24, Y+37	; 0x25
    2aea:	9e a1       	ldd	r25, Y+38	; 0x26
    2aec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	9a a3       	std	Y+34, r25	; 0x22
    2af6:	89 a3       	std	Y+33, r24	; 0x21
    2af8:	89 a1       	ldd	r24, Y+33	; 0x21
    2afa:	9a a1       	ldd	r25, Y+34	; 0x22
    2afc:	9e 8f       	std	Y+30, r25	; 0x1e
    2afe:	8d 8f       	std	Y+29, r24	; 0x1d
    2b00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b04:	01 97       	sbiw	r24, 0x01	; 1
    2b06:	f1 f7       	brne	.-4      	; 0x2b04 <LCD_displayCharacter+0x682>
    2b08:	9e 8f       	std	Y+30, r25	; 0x1e
    2b0a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	ed 59       	subi	r30, 0x9D	; 157
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	80 81       	ld	r24, Z
    2b14:	98 2f       	mov	r25, r24
    2b16:	91 70       	andi	r25, 0x01	; 1
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	62 e0       	ldi	r22, 0x02	; 2
    2b1c:	49 2f       	mov	r20, r25
    2b1e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2b22:	fe 01       	movw	r30, r28
    2b24:	ed 59       	subi	r30, 0x9D	; 157
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	80 81       	ld	r24, Z
    2b2a:	88 2f       	mov	r24, r24
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	82 70       	andi	r24, 0x02	; 2
    2b30:	90 70       	andi	r25, 0x00	; 0
    2b32:	95 95       	asr	r25
    2b34:	87 95       	ror	r24
    2b36:	98 2f       	mov	r25, r24
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	63 e0       	ldi	r22, 0x03	; 3
    2b3c:	49 2f       	mov	r20, r25
    2b3e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2b42:	fe 01       	movw	r30, r28
    2b44:	ed 59       	subi	r30, 0x9D	; 157
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	80 81       	ld	r24, Z
    2b4a:	88 2f       	mov	r24, r24
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	84 70       	andi	r24, 0x04	; 4
    2b50:	90 70       	andi	r25, 0x00	; 0
    2b52:	95 95       	asr	r25
    2b54:	87 95       	ror	r24
    2b56:	95 95       	asr	r25
    2b58:	87 95       	ror	r24
    2b5a:	98 2f       	mov	r25, r24
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	64 e0       	ldi	r22, 0x04	; 4
    2b60:	49 2f       	mov	r20, r25
    2b62:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2b66:	fe 01       	movw	r30, r28
    2b68:	ed 59       	subi	r30, 0x9D	; 157
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	80 81       	ld	r24, Z
    2b6e:	88 2f       	mov	r24, r24
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	88 70       	andi	r24, 0x08	; 8
    2b74:	90 70       	andi	r25, 0x00	; 0
    2b76:	95 95       	asr	r25
    2b78:	87 95       	ror	r24
    2b7a:	95 95       	asr	r25
    2b7c:	87 95       	ror	r24
    2b7e:	95 95       	asr	r25
    2b80:	87 95       	ror	r24
    2b82:	98 2f       	mov	r25, r24
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	65 e0       	ldi	r22, 0x05	; 5
    2b88:	49 2f       	mov	r20, r25
    2b8a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	a0 e8       	ldi	r26, 0x80	; 128
    2b94:	bf e3       	ldi	r27, 0x3F	; 63
    2b96:	89 8f       	std	Y+25, r24	; 0x19
    2b98:	9a 8f       	std	Y+26, r25	; 0x1a
    2b9a:	ab 8f       	std	Y+27, r26	; 0x1b
    2b9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b9e:	69 8d       	ldd	r22, Y+25	; 0x19
    2ba0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ba2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ba4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	4a e7       	ldi	r20, 0x7A	; 122
    2bac:	55 e4       	ldi	r21, 0x45	; 69
    2bae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	8d 8b       	std	Y+21, r24	; 0x15
    2bb8:	9e 8b       	std	Y+22, r25	; 0x16
    2bba:	af 8b       	std	Y+23, r26	; 0x17
    2bbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bbe:	6d 89       	ldd	r22, Y+21	; 0x15
    2bc0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e8       	ldi	r20, 0x80	; 128
    2bcc:	5f e3       	ldi	r21, 0x3F	; 63
    2bce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bd2:	88 23       	and	r24, r24
    2bd4:	2c f4       	brge	.+10     	; 0x2be0 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	9c 8b       	std	Y+20, r25	; 0x14
    2bdc:	8b 8b       	std	Y+19, r24	; 0x13
    2bde:	3f c0       	rjmp	.+126    	; 0x2c5e <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2be0:	6d 89       	ldd	r22, Y+21	; 0x15
    2be2:	7e 89       	ldd	r23, Y+22	; 0x16
    2be4:	8f 89       	ldd	r24, Y+23	; 0x17
    2be6:	98 8d       	ldd	r25, Y+24	; 0x18
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	3f ef       	ldi	r19, 0xFF	; 255
    2bec:	4f e7       	ldi	r20, 0x7F	; 127
    2bee:	57 e4       	ldi	r21, 0x47	; 71
    2bf0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2bf4:	18 16       	cp	r1, r24
    2bf6:	4c f5       	brge	.+82     	; 0x2c4a <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf8:	69 8d       	ldd	r22, Y+25	; 0x19
    2bfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	40 e2       	ldi	r20, 0x20	; 32
    2c06:	51 e4       	ldi	r21, 0x41	; 65
    2c08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	bc 01       	movw	r22, r24
    2c12:	cd 01       	movw	r24, r26
    2c14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	9c 8b       	std	Y+20, r25	; 0x14
    2c1e:	8b 8b       	std	Y+19, r24	; 0x13
    2c20:	0f c0       	rjmp	.+30     	; 0x2c40 <LCD_displayCharacter+0x7be>
    2c22:	80 e9       	ldi	r24, 0x90	; 144
    2c24:	91 e0       	ldi	r25, 0x01	; 1
    2c26:	9a 8b       	std	Y+18, r25	; 0x12
    2c28:	89 8b       	std	Y+17, r24	; 0x11
    2c2a:	89 89       	ldd	r24, Y+17	; 0x11
    2c2c:	9a 89       	ldd	r25, Y+18	; 0x12
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	f1 f7       	brne	.-4      	; 0x2c2e <LCD_displayCharacter+0x7ac>
    2c32:	9a 8b       	std	Y+18, r25	; 0x12
    2c34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c36:	8b 89       	ldd	r24, Y+19	; 0x13
    2c38:	9c 89       	ldd	r25, Y+20	; 0x14
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	9c 8b       	std	Y+20, r25	; 0x14
    2c3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c40:	8b 89       	ldd	r24, Y+19	; 0x13
    2c42:	9c 89       	ldd	r25, Y+20	; 0x14
    2c44:	00 97       	sbiw	r24, 0x00	; 0
    2c46:	69 f7       	brne	.-38     	; 0x2c22 <LCD_displayCharacter+0x7a0>
    2c48:	14 c0       	rjmp	.+40     	; 0x2c72 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c50:	98 8d       	ldd	r25, Y+24	; 0x18
    2c52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	9c 8b       	std	Y+20, r25	; 0x14
    2c5c:	8b 8b       	std	Y+19, r24	; 0x13
    2c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c60:	9c 89       	ldd	r25, Y+20	; 0x14
    2c62:	98 8b       	std	Y+16, r25	; 0x10
    2c64:	8f 87       	std	Y+15, r24	; 0x0f
    2c66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c68:	98 89       	ldd	r25, Y+16	; 0x10
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	f1 f7       	brne	.-4      	; 0x2c6a <LCD_displayCharacter+0x7e8>
    2c6e:	98 8b       	std	Y+16, r25	; 0x10
    2c70:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c72:	80 e0       	ldi	r24, 0x00	; 0
    2c74:	61 e0       	ldi	r22, 0x01	; 1
    2c76:	40 e0       	ldi	r20, 0x00	; 0
    2c78:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePin>
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	a0 e8       	ldi	r26, 0x80	; 128
    2c82:	bf e3       	ldi	r27, 0x3F	; 63
    2c84:	8b 87       	std	Y+11, r24	; 0x0b
    2c86:	9c 87       	std	Y+12, r25	; 0x0c
    2c88:	ad 87       	std	Y+13, r26	; 0x0d
    2c8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	4a e7       	ldi	r20, 0x7A	; 122
    2c9a:	55 e4       	ldi	r21, 0x45	; 69
    2c9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	8f 83       	std	Y+7, r24	; 0x07
    2ca6:	98 87       	std	Y+8, r25	; 0x08
    2ca8:	a9 87       	std	Y+9, r26	; 0x09
    2caa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cac:	6f 81       	ldd	r22, Y+7	; 0x07
    2cae:	78 85       	ldd	r23, Y+8	; 0x08
    2cb0:	89 85       	ldd	r24, Y+9	; 0x09
    2cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e8       	ldi	r20, 0x80	; 128
    2cba:	5f e3       	ldi	r21, 0x3F	; 63
    2cbc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cc0:	88 23       	and	r24, r24
    2cc2:	2c f4       	brge	.+10     	; 0x2cce <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	9e 83       	std	Y+6, r25	; 0x06
    2cca:	8d 83       	std	Y+5, r24	; 0x05
    2ccc:	3f c0       	rjmp	.+126    	; 0x2d4c <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2cce:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd0:	78 85       	ldd	r23, Y+8	; 0x08
    2cd2:	89 85       	ldd	r24, Y+9	; 0x09
    2cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	3f ef       	ldi	r19, 0xFF	; 255
    2cda:	4f e7       	ldi	r20, 0x7F	; 127
    2cdc:	57 e4       	ldi	r21, 0x47	; 71
    2cde:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ce2:	18 16       	cp	r1, r24
    2ce4:	4c f5       	brge	.+82     	; 0x2d38 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	40 e2       	ldi	r20, 0x20	; 32
    2cf4:	51 e4       	ldi	r21, 0x41	; 65
    2cf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	bc 01       	movw	r22, r24
    2d00:	cd 01       	movw	r24, r26
    2d02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	9e 83       	std	Y+6, r25	; 0x06
    2d0c:	8d 83       	std	Y+5, r24	; 0x05
    2d0e:	0f c0       	rjmp	.+30     	; 0x2d2e <LCD_displayCharacter+0x8ac>
    2d10:	80 e9       	ldi	r24, 0x90	; 144
    2d12:	91 e0       	ldi	r25, 0x01	; 1
    2d14:	9c 83       	std	Y+4, r25	; 0x04
    2d16:	8b 83       	std	Y+3, r24	; 0x03
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	f1 f7       	brne	.-4      	; 0x2d1c <LCD_displayCharacter+0x89a>
    2d20:	9c 83       	std	Y+4, r25	; 0x04
    2d22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d24:	8d 81       	ldd	r24, Y+5	; 0x05
    2d26:	9e 81       	ldd	r25, Y+6	; 0x06
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	9e 83       	std	Y+6, r25	; 0x06
    2d2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d30:	9e 81       	ldd	r25, Y+6	; 0x06
    2d32:	00 97       	sbiw	r24, 0x00	; 0
    2d34:	69 f7       	brne	.-38     	; 0x2d10 <LCD_displayCharacter+0x88e>
    2d36:	14 c0       	rjmp	.+40     	; 0x2d60 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d38:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3a:	78 85       	ldd	r23, Y+8	; 0x08
    2d3c:	89 85       	ldd	r24, Y+9	; 0x09
    2d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	9e 83       	std	Y+6, r25	; 0x06
    2d4a:	8d 83       	std	Y+5, r24	; 0x05
    2d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d50:	9a 83       	std	Y+2, r25	; 0x02
    2d52:	89 83       	std	Y+1, r24	; 0x01
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
    2d56:	9a 81       	ldd	r25, Y+2	; 0x02
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	f1 f7       	brne	.-4      	; 0x2d58 <LCD_displayCharacter+0x8d6>
    2d5c:	9a 83       	std	Y+2, r25	; 0x02
    2d5e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2d60:	cd 59       	subi	r28, 0x9D	; 157
    2d62:	df 4f       	sbci	r29, 0xFF	; 255
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	cf 91       	pop	r28
    2d70:	df 91       	pop	r29
    2d72:	1f 91       	pop	r17
    2d74:	0f 91       	pop	r16
    2d76:	08 95       	ret

00002d78 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2d78:	df 93       	push	r29
    2d7a:	cf 93       	push	r28
    2d7c:	00 d0       	rcall	.+0      	; 0x2d7e <LCD_displayString+0x6>
    2d7e:	0f 92       	push	r0
    2d80:	cd b7       	in	r28, 0x3d	; 61
    2d82:	de b7       	in	r29, 0x3e	; 62
    2d84:	9b 83       	std	Y+3, r25	; 0x03
    2d86:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d88:	19 82       	std	Y+1, r1	; 0x01
    2d8a:	0e c0       	rjmp	.+28     	; 0x2da8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	28 2f       	mov	r18, r24
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	8a 81       	ldd	r24, Y+2	; 0x02
    2d94:	9b 81       	ldd	r25, Y+3	; 0x03
    2d96:	fc 01       	movw	r30, r24
    2d98:	e2 0f       	add	r30, r18
    2d9a:	f3 1f       	adc	r31, r19
    2d9c:	80 81       	ld	r24, Z
    2d9e:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayCharacter>
		i++;
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	8f 5f       	subi	r24, 0xFF	; 255
    2da6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
    2daa:	28 2f       	mov	r18, r24
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	8a 81       	ldd	r24, Y+2	; 0x02
    2db0:	9b 81       	ldd	r25, Y+3	; 0x03
    2db2:	fc 01       	movw	r30, r24
    2db4:	e2 0f       	add	r30, r18
    2db6:	f3 1f       	adc	r31, r19
    2db8:	80 81       	ld	r24, Z
    2dba:	88 23       	and	r24, r24
    2dbc:	39 f7       	brne	.-50     	; 0x2d8c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	cf 91       	pop	r28
    2dc6:	df 91       	pop	r29
    2dc8:	08 95       	ret

00002dca <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	00 d0       	rcall	.+0      	; 0x2dd0 <LCD_moveCursor+0x6>
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <LCD_moveCursor+0x8>
    2dd2:	0f 92       	push	r0
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	8a 83       	std	Y+2, r24	; 0x02
    2dda:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dde:	28 2f       	mov	r18, r24
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	3d 83       	std	Y+5, r19	; 0x05
    2de4:	2c 83       	std	Y+4, r18	; 0x04
    2de6:	8c 81       	ldd	r24, Y+4	; 0x04
    2de8:	9d 81       	ldd	r25, Y+5	; 0x05
    2dea:	81 30       	cpi	r24, 0x01	; 1
    2dec:	91 05       	cpc	r25, r1
    2dee:	c1 f0       	breq	.+48     	; 0x2e20 <LCD_moveCursor+0x56>
    2df0:	2c 81       	ldd	r18, Y+4	; 0x04
    2df2:	3d 81       	ldd	r19, Y+5	; 0x05
    2df4:	22 30       	cpi	r18, 0x02	; 2
    2df6:	31 05       	cpc	r19, r1
    2df8:	2c f4       	brge	.+10     	; 0x2e04 <LCD_moveCursor+0x3a>
    2dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    2dfc:	9d 81       	ldd	r25, Y+5	; 0x05
    2dfe:	00 97       	sbiw	r24, 0x00	; 0
    2e00:	61 f0       	breq	.+24     	; 0x2e1a <LCD_moveCursor+0x50>
    2e02:	19 c0       	rjmp	.+50     	; 0x2e36 <LCD_moveCursor+0x6c>
    2e04:	2c 81       	ldd	r18, Y+4	; 0x04
    2e06:	3d 81       	ldd	r19, Y+5	; 0x05
    2e08:	22 30       	cpi	r18, 0x02	; 2
    2e0a:	31 05       	cpc	r19, r1
    2e0c:	69 f0       	breq	.+26     	; 0x2e28 <LCD_moveCursor+0x5e>
    2e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e10:	9d 81       	ldd	r25, Y+5	; 0x05
    2e12:	83 30       	cpi	r24, 0x03	; 3
    2e14:	91 05       	cpc	r25, r1
    2e16:	61 f0       	breq	.+24     	; 0x2e30 <LCD_moveCursor+0x66>
    2e18:	0e c0       	rjmp	.+28     	; 0x2e36 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1c:	89 83       	std	Y+1, r24	; 0x01
    2e1e:	0b c0       	rjmp	.+22     	; 0x2e36 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2e20:	8b 81       	ldd	r24, Y+3	; 0x03
    2e22:	80 5c       	subi	r24, 0xC0	; 192
    2e24:	89 83       	std	Y+1, r24	; 0x01
    2e26:	07 c0       	rjmp	.+14     	; 0x2e36 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2e28:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2a:	80 5f       	subi	r24, 0xF0	; 240
    2e2c:	89 83       	std	Y+1, r24	; 0x01
    2e2e:	03 c0       	rjmp	.+6      	; 0x2e36 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	80 5b       	subi	r24, 0xB0	; 176
    2e34:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	80 68       	ori	r24, 0x80	; 128
    2e3a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_sendCommand>
}
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	cf 91       	pop	r28
    2e4a:	df 91       	pop	r29
    2e4c:	08 95       	ret

00002e4e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2e4e:	df 93       	push	r29
    2e50:	cf 93       	push	r28
    2e52:	00 d0       	rcall	.+0      	; 0x2e54 <LCD_displayStringRowColumn+0x6>
    2e54:	00 d0       	rcall	.+0      	; 0x2e56 <LCD_displayStringRowColumn+0x8>
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	89 83       	std	Y+1, r24	; 0x01
    2e5c:	6a 83       	std	Y+2, r22	; 0x02
    2e5e:	5c 83       	std	Y+4, r21	; 0x04
    2e60:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	6a 81       	ldd	r22, Y+2	; 0x02
    2e66:	0e 94 e5 16 	call	0x2dca	; 0x2dca <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6e:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_displayString>
}
    2e72:	0f 90       	pop	r0
    2e74:	0f 90       	pop	r0
    2e76:	0f 90       	pop	r0
    2e78:	0f 90       	pop	r0
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	08 95       	ret

00002e80 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	cd b7       	in	r28, 0x3d	; 61
    2e86:	de b7       	in	r29, 0x3e	; 62
    2e88:	62 97       	sbiw	r28, 0x12	; 18
    2e8a:	0f b6       	in	r0, 0x3f	; 63
    2e8c:	f8 94       	cli
    2e8e:	de bf       	out	0x3e, r29	; 62
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	cd bf       	out	0x3d, r28	; 61
    2e94:	9a 8b       	std	Y+18, r25	; 0x12
    2e96:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2e98:	89 89       	ldd	r24, Y+17	; 0x11
    2e9a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e9c:	9e 01       	movw	r18, r28
    2e9e:	2f 5f       	subi	r18, 0xFF	; 255
    2ea0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea2:	b9 01       	movw	r22, r18
    2ea4:	4a e0       	ldi	r20, 0x0A	; 10
    2ea6:	50 e0       	ldi	r21, 0x00	; 0
    2ea8:	0e 94 76 18 	call	0x30ec	; 0x30ec <itoa>
   LCD_displayString(buff); /* Display the string */
    2eac:	ce 01       	movw	r24, r28
    2eae:	01 96       	adiw	r24, 0x01	; 1
    2eb0:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_displayString>
}
    2eb4:	62 96       	adiw	r28, 0x12	; 18
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	de bf       	out	0x3e, r29	; 62
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	cd bf       	out	0x3d, r28	; 61
    2ec0:	cf 91       	pop	r28
    2ec2:	df 91       	pop	r29
    2ec4:	08 95       	ret

00002ec6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <LCD_sendCommand>
}
    2ed4:	cf 91       	pop	r28
    2ed6:	df 91       	pop	r29
    2ed8:	08 95       	ret

00002eda <servo_init>:
#include<avr/io.h>
#include"../common/Common_Macros.h"
#include"servo.h"


void servo_init(void){
    2eda:	df 93       	push	r29
    2edc:	cf 93       	push	r28
    2ede:	cd b7       	in	r28, 0x3d	; 61
    2ee0:	de b7       	in	r29, 0x3e	; 62
SET_BIT(servo_ddrx,servo_pin); // at3rf eno output kda
    2ee2:	a1 e3       	ldi	r26, 0x31	; 49
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	e1 e3       	ldi	r30, 0x31	; 49
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	80 81       	ld	r24, Z
    2eec:	80 61       	ori	r24, 0x10	; 16
    2eee:	8c 93       	st	X, r24
// hard coded settings for timer
TCCR1A|=(1<<COM1B1) |  (1<<WGM11);
    2ef0:	af e4       	ldi	r26, 0x4F	; 79
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	ef e4       	ldi	r30, 0x4F	; 79
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	82 62       	ori	r24, 0x22	; 34
    2efc:	8c 93       	st	X, r24
TCCR1B|=(1<<CS12) | (1<<WGM12)   | (1<<WGM13);
    2efe:	ae e4       	ldi	r26, 0x4E	; 78
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	ee e4       	ldi	r30, 0x4E	; 78
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	8c 61       	ori	r24, 0x1C	; 28
    2f0a:	8c 93       	st	X, r24

ICR1=1250;
    2f0c:	e6 e4       	ldi	r30, 0x46	; 70
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	82 ee       	ldi	r24, 0xE2	; 226
    2f12:	94 e0       	ldi	r25, 0x04	; 4
    2f14:	91 83       	std	Z+1, r25	; 0x01
    2f16:	80 83       	st	Z, r24
}
    2f18:	cf 91       	pop	r28
    2f1a:	df 91       	pop	r29
    2f1c:	08 95       	ret

00002f1e <servo_set_angle>:

void servo_set_angle(uint8 angle){
    2f1e:	df 93       	push	r29
    2f20:	cf 93       	push	r28
    2f22:	00 d0       	rcall	.+0      	; 0x2f24 <servo_set_angle+0x6>
    2f24:	0f 92       	push	r0
    2f26:	cd b7       	in	r28, 0x3d	; 61
    2f28:	de b7       	in	r29, 0x3e	; 62
    2f2a:	8b 83       	std	Y+3, r24	; 0x03
	if(angle>180){
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	85 3b       	cpi	r24, 0xB5	; 181
    2f30:	10 f0       	brcs	.+4      	; 0x2f36 <servo_set_angle+0x18>
		angle=180;
    2f32:	84 eb       	ldi	r24, 0xB4	; 180
    2f34:	8b 83       	std	Y+3, r24	; 0x03
	}
	  uint16_t pulse = 62 + ((uint32_t)angle * (125 - 62)) / 180; //62 for 0 angle and 125 for 180 angle
    2f36:	8b 81       	ldd	r24, Y+3	; 0x03
    2f38:	28 2f       	mov	r18, r24
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	40 e0       	ldi	r20, 0x00	; 0
    2f3e:	50 e0       	ldi	r21, 0x00	; 0
    2f40:	da 01       	movw	r26, r20
    2f42:	c9 01       	movw	r24, r18
    2f44:	88 0f       	add	r24, r24
    2f46:	99 1f       	adc	r25, r25
    2f48:	aa 1f       	adc	r26, r26
    2f4a:	bb 1f       	adc	r27, r27
    2f4c:	88 0f       	add	r24, r24
    2f4e:	99 1f       	adc	r25, r25
    2f50:	aa 1f       	adc	r26, r26
    2f52:	bb 1f       	adc	r27, r27
    2f54:	88 0f       	add	r24, r24
    2f56:	99 1f       	adc	r25, r25
    2f58:	aa 1f       	adc	r26, r26
    2f5a:	bb 1f       	adc	r27, r27
    2f5c:	88 0f       	add	r24, r24
    2f5e:	99 1f       	adc	r25, r25
    2f60:	aa 1f       	adc	r26, r26
    2f62:	bb 1f       	adc	r27, r27
    2f64:	88 0f       	add	r24, r24
    2f66:	99 1f       	adc	r25, r25
    2f68:	aa 1f       	adc	r26, r26
    2f6a:	bb 1f       	adc	r27, r27
    2f6c:	88 0f       	add	r24, r24
    2f6e:	99 1f       	adc	r25, r25
    2f70:	aa 1f       	adc	r26, r26
    2f72:	bb 1f       	adc	r27, r27
    2f74:	82 1b       	sub	r24, r18
    2f76:	93 0b       	sbc	r25, r19
    2f78:	a4 0b       	sbc	r26, r20
    2f7a:	b5 0b       	sbc	r27, r21
    2f7c:	24 eb       	ldi	r18, 0xB4	; 180
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e0       	ldi	r20, 0x00	; 0
    2f82:	50 e0       	ldi	r21, 0x00	; 0
    2f84:	bc 01       	movw	r22, r24
    2f86:	cd 01       	movw	r24, r26
    2f88:	0e 94 09 18 	call	0x3012	; 0x3012 <__udivmodsi4>
    2f8c:	da 01       	movw	r26, r20
    2f8e:	c9 01       	movw	r24, r18
    2f90:	ce 96       	adiw	r24, 0x3e	; 62
    2f92:	9a 83       	std	Y+2, r25	; 0x02
    2f94:	89 83       	std	Y+1, r24	; 0x01
	    OCR1B = pulse;//compare just to get the right angle u want
    2f96:	e8 e4       	ldi	r30, 0x48	; 72
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
    2f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9e:	91 83       	std	Z+1, r25	; 0x01
    2fa0:	80 83       	st	Z, r24

}
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	cf 91       	pop	r28
    2faa:	df 91       	pop	r29
    2fac:	08 95       	ret

00002fae <__mulsi3>:
    2fae:	62 9f       	mul	r22, r18
    2fb0:	d0 01       	movw	r26, r0
    2fb2:	73 9f       	mul	r23, r19
    2fb4:	f0 01       	movw	r30, r0
    2fb6:	82 9f       	mul	r24, r18
    2fb8:	e0 0d       	add	r30, r0
    2fba:	f1 1d       	adc	r31, r1
    2fbc:	64 9f       	mul	r22, r20
    2fbe:	e0 0d       	add	r30, r0
    2fc0:	f1 1d       	adc	r31, r1
    2fc2:	92 9f       	mul	r25, r18
    2fc4:	f0 0d       	add	r31, r0
    2fc6:	83 9f       	mul	r24, r19
    2fc8:	f0 0d       	add	r31, r0
    2fca:	74 9f       	mul	r23, r20
    2fcc:	f0 0d       	add	r31, r0
    2fce:	65 9f       	mul	r22, r21
    2fd0:	f0 0d       	add	r31, r0
    2fd2:	99 27       	eor	r25, r25
    2fd4:	72 9f       	mul	r23, r18
    2fd6:	b0 0d       	add	r27, r0
    2fd8:	e1 1d       	adc	r30, r1
    2fda:	f9 1f       	adc	r31, r25
    2fdc:	63 9f       	mul	r22, r19
    2fde:	b0 0d       	add	r27, r0
    2fe0:	e1 1d       	adc	r30, r1
    2fe2:	f9 1f       	adc	r31, r25
    2fe4:	bd 01       	movw	r22, r26
    2fe6:	cf 01       	movw	r24, r30
    2fe8:	11 24       	eor	r1, r1
    2fea:	08 95       	ret

00002fec <__divmodhi4>:
    2fec:	97 fb       	bst	r25, 7
    2fee:	09 2e       	mov	r0, r25
    2ff0:	07 26       	eor	r0, r23
    2ff2:	0a d0       	rcall	.+20     	; 0x3008 <__divmodhi4_neg1>
    2ff4:	77 fd       	sbrc	r23, 7
    2ff6:	04 d0       	rcall	.+8      	; 0x3000 <__divmodhi4_neg2>
    2ff8:	2e d0       	rcall	.+92     	; 0x3056 <__udivmodhi4>
    2ffa:	06 d0       	rcall	.+12     	; 0x3008 <__divmodhi4_neg1>
    2ffc:	00 20       	and	r0, r0
    2ffe:	1a f4       	brpl	.+6      	; 0x3006 <__divmodhi4_exit>

00003000 <__divmodhi4_neg2>:
    3000:	70 95       	com	r23
    3002:	61 95       	neg	r22
    3004:	7f 4f       	sbci	r23, 0xFF	; 255

00003006 <__divmodhi4_exit>:
    3006:	08 95       	ret

00003008 <__divmodhi4_neg1>:
    3008:	f6 f7       	brtc	.-4      	; 0x3006 <__divmodhi4_exit>
    300a:	90 95       	com	r25
    300c:	81 95       	neg	r24
    300e:	9f 4f       	sbci	r25, 0xFF	; 255
    3010:	08 95       	ret

00003012 <__udivmodsi4>:
    3012:	a1 e2       	ldi	r26, 0x21	; 33
    3014:	1a 2e       	mov	r1, r26
    3016:	aa 1b       	sub	r26, r26
    3018:	bb 1b       	sub	r27, r27
    301a:	fd 01       	movw	r30, r26
    301c:	0d c0       	rjmp	.+26     	; 0x3038 <__udivmodsi4_ep>

0000301e <__udivmodsi4_loop>:
    301e:	aa 1f       	adc	r26, r26
    3020:	bb 1f       	adc	r27, r27
    3022:	ee 1f       	adc	r30, r30
    3024:	ff 1f       	adc	r31, r31
    3026:	a2 17       	cp	r26, r18
    3028:	b3 07       	cpc	r27, r19
    302a:	e4 07       	cpc	r30, r20
    302c:	f5 07       	cpc	r31, r21
    302e:	20 f0       	brcs	.+8      	; 0x3038 <__udivmodsi4_ep>
    3030:	a2 1b       	sub	r26, r18
    3032:	b3 0b       	sbc	r27, r19
    3034:	e4 0b       	sbc	r30, r20
    3036:	f5 0b       	sbc	r31, r21

00003038 <__udivmodsi4_ep>:
    3038:	66 1f       	adc	r22, r22
    303a:	77 1f       	adc	r23, r23
    303c:	88 1f       	adc	r24, r24
    303e:	99 1f       	adc	r25, r25
    3040:	1a 94       	dec	r1
    3042:	69 f7       	brne	.-38     	; 0x301e <__udivmodsi4_loop>
    3044:	60 95       	com	r22
    3046:	70 95       	com	r23
    3048:	80 95       	com	r24
    304a:	90 95       	com	r25
    304c:	9b 01       	movw	r18, r22
    304e:	ac 01       	movw	r20, r24
    3050:	bd 01       	movw	r22, r26
    3052:	cf 01       	movw	r24, r30
    3054:	08 95       	ret

00003056 <__udivmodhi4>:
    3056:	aa 1b       	sub	r26, r26
    3058:	bb 1b       	sub	r27, r27
    305a:	51 e1       	ldi	r21, 0x11	; 17
    305c:	07 c0       	rjmp	.+14     	; 0x306c <__udivmodhi4_ep>

0000305e <__udivmodhi4_loop>:
    305e:	aa 1f       	adc	r26, r26
    3060:	bb 1f       	adc	r27, r27
    3062:	a6 17       	cp	r26, r22
    3064:	b7 07       	cpc	r27, r23
    3066:	10 f0       	brcs	.+4      	; 0x306c <__udivmodhi4_ep>
    3068:	a6 1b       	sub	r26, r22
    306a:	b7 0b       	sbc	r27, r23

0000306c <__udivmodhi4_ep>:
    306c:	88 1f       	adc	r24, r24
    306e:	99 1f       	adc	r25, r25
    3070:	5a 95       	dec	r21
    3072:	a9 f7       	brne	.-22     	; 0x305e <__udivmodhi4_loop>
    3074:	80 95       	com	r24
    3076:	90 95       	com	r25
    3078:	bc 01       	movw	r22, r24
    307a:	cd 01       	movw	r24, r26
    307c:	08 95       	ret

0000307e <__prologue_saves__>:
    307e:	2f 92       	push	r2
    3080:	3f 92       	push	r3
    3082:	4f 92       	push	r4
    3084:	5f 92       	push	r5
    3086:	6f 92       	push	r6
    3088:	7f 92       	push	r7
    308a:	8f 92       	push	r8
    308c:	9f 92       	push	r9
    308e:	af 92       	push	r10
    3090:	bf 92       	push	r11
    3092:	cf 92       	push	r12
    3094:	df 92       	push	r13
    3096:	ef 92       	push	r14
    3098:	ff 92       	push	r15
    309a:	0f 93       	push	r16
    309c:	1f 93       	push	r17
    309e:	cf 93       	push	r28
    30a0:	df 93       	push	r29
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	ca 1b       	sub	r28, r26
    30a8:	db 0b       	sbc	r29, r27
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	f8 94       	cli
    30ae:	de bf       	out	0x3e, r29	; 62
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	cd bf       	out	0x3d, r28	; 61
    30b4:	09 94       	ijmp

000030b6 <__epilogue_restores__>:
    30b6:	2a 88       	ldd	r2, Y+18	; 0x12
    30b8:	39 88       	ldd	r3, Y+17	; 0x11
    30ba:	48 88       	ldd	r4, Y+16	; 0x10
    30bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    30be:	6e 84       	ldd	r6, Y+14	; 0x0e
    30c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    30c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    30c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    30c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    30c8:	b9 84       	ldd	r11, Y+9	; 0x09
    30ca:	c8 84       	ldd	r12, Y+8	; 0x08
    30cc:	df 80       	ldd	r13, Y+7	; 0x07
    30ce:	ee 80       	ldd	r14, Y+6	; 0x06
    30d0:	fd 80       	ldd	r15, Y+5	; 0x05
    30d2:	0c 81       	ldd	r16, Y+4	; 0x04
    30d4:	1b 81       	ldd	r17, Y+3	; 0x03
    30d6:	aa 81       	ldd	r26, Y+2	; 0x02
    30d8:	b9 81       	ldd	r27, Y+1	; 0x01
    30da:	ce 0f       	add	r28, r30
    30dc:	d1 1d       	adc	r29, r1
    30de:	0f b6       	in	r0, 0x3f	; 63
    30e0:	f8 94       	cli
    30e2:	de bf       	out	0x3e, r29	; 62
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	cd bf       	out	0x3d, r28	; 61
    30e8:	ed 01       	movw	r28, r26
    30ea:	08 95       	ret

000030ec <itoa>:
    30ec:	fb 01       	movw	r30, r22
    30ee:	9f 01       	movw	r18, r30
    30f0:	e8 94       	clt
    30f2:	42 30       	cpi	r20, 0x02	; 2
    30f4:	c4 f0       	brlt	.+48     	; 0x3126 <itoa+0x3a>
    30f6:	45 32       	cpi	r20, 0x25	; 37
    30f8:	b4 f4       	brge	.+44     	; 0x3126 <itoa+0x3a>
    30fa:	4a 30       	cpi	r20, 0x0A	; 10
    30fc:	29 f4       	brne	.+10     	; 0x3108 <itoa+0x1c>
    30fe:	97 fb       	bst	r25, 7
    3100:	1e f4       	brtc	.+6      	; 0x3108 <itoa+0x1c>
    3102:	90 95       	com	r25
    3104:	81 95       	neg	r24
    3106:	9f 4f       	sbci	r25, 0xFF	; 255
    3108:	64 2f       	mov	r22, r20
    310a:	77 27       	eor	r23, r23
    310c:	0e 94 2b 18 	call	0x3056	; 0x3056 <__udivmodhi4>
    3110:	80 5d       	subi	r24, 0xD0	; 208
    3112:	8a 33       	cpi	r24, 0x3A	; 58
    3114:	0c f0       	brlt	.+2      	; 0x3118 <itoa+0x2c>
    3116:	89 5d       	subi	r24, 0xD9	; 217
    3118:	81 93       	st	Z+, r24
    311a:	cb 01       	movw	r24, r22
    311c:	00 97       	sbiw	r24, 0x00	; 0
    311e:	a1 f7       	brne	.-24     	; 0x3108 <itoa+0x1c>
    3120:	16 f4       	brtc	.+4      	; 0x3126 <itoa+0x3a>
    3122:	5d e2       	ldi	r21, 0x2D	; 45
    3124:	51 93       	st	Z+, r21
    3126:	10 82       	st	Z, r1
    3128:	c9 01       	movw	r24, r18
    312a:	0c 94 97 18 	jmp	0x312e	; 0x312e <strrev>

0000312e <strrev>:
    312e:	dc 01       	movw	r26, r24
    3130:	fc 01       	movw	r30, r24
    3132:	67 2f       	mov	r22, r23
    3134:	71 91       	ld	r23, Z+
    3136:	77 23       	and	r23, r23
    3138:	e1 f7       	brne	.-8      	; 0x3132 <strrev+0x4>
    313a:	32 97       	sbiw	r30, 0x02	; 2
    313c:	04 c0       	rjmp	.+8      	; 0x3146 <strrev+0x18>
    313e:	7c 91       	ld	r23, X
    3140:	6d 93       	st	X+, r22
    3142:	70 83       	st	Z, r23
    3144:	62 91       	ld	r22, -Z
    3146:	ae 17       	cp	r26, r30
    3148:	bf 07       	cpc	r27, r31
    314a:	c8 f3       	brcs	.-14     	; 0x313e <strrev+0x10>
    314c:	08 95       	ret

0000314e <_exit>:
    314e:	f8 94       	cli

00003150 <__stop_program>:
    3150:	ff cf       	rjmp	.-2      	; 0x3150 <__stop_program>
