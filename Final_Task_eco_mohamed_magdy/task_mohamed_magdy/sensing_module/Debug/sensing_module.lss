
sensing_module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000190  00800060  00003f0c  00003fa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008001f0  008001f0  00004130  2**0
                  ALLOC
  3 .stab         00003aec  00000000  00000000  00004130  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a2c  00000000  00000000  00007c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000097e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000099da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000bde5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d16b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e344  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e504  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e7fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f168  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3f       	cpi	r26, 0xF0	; 240
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ef       	ldi	r26, 0xF0	; 240
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3f       	cpi	r26, 0xF5	; 245
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 50 19 	call	0x32a0	; 0x32a0 <main>
      8a:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 08 1f 	jmp	0x3e10	; 0x3e10 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ee       	ldi	r26, 0xE2	; 226
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 08 1f 	jmp	0x3e10	; 0x3e10 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ee       	ldi	r24, 0xE2	; 226
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 ee       	ldi	r22, 0xE2	; 226
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 18 1f 	jmp	0x3e30	; 0x3e30 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 34 1f 	jmp	0x3e68	; 0x3e68 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e6 51       	subi	r30, 0x16	; 22
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1 << REFS1) | (1 << REFS0) ;  // Internal 2.56V reference
     e36:	e7 e2       	ldi	r30, 0x27	; 39
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 ec       	ldi	r24, 0xC0	; 192
     e3c:	80 83       	st	Z, r24

	ADCSRA = (1<<ADEN) | (0<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);  // F_CPU / 128
     e3e:	e6 e2       	ldi	r30, 0x26	; 38
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	82 e8       	ldi	r24, 0x82	; 130
     e44:	80 83       	st	Z, r24
}
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	0f 92       	push	r0
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	87 70       	andi	r24, 0x07	; 7
     e5c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     e5e:	a7 e2       	ldi	r26, 0x27	; 39
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e7 e2       	ldi	r30, 0x27	; 39
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	80 7e       	andi	r24, 0xE0	; 224
     e6a:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     e6c:	a7 e2       	ldi	r26, 0x27	; 39
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e7 e2       	ldi	r30, 0x27	; 39
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	90 81       	ld	r25, Z
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	89 2b       	or	r24, r25
     e7a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 64       	ori	r24, 0x40	; 64
     e88:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
     e8a:	e6 e2       	ldi	r30, 0x26	; 38
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	80 71       	andi	r24, 0x10	; 16
     e96:	90 70       	andi	r25, 0x00	; 0
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	b9 f3       	breq	.-18     	; 0xe8a <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
     e9c:	a6 e2       	ldi	r26, 0x26	; 38
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e6 e2       	ldi	r30, 0x26	; 38
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	80 61       	ori	r24, 0x10	; 16
     ea8:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
     eaa:	e4 e2       	ldi	r30, 0x24	; 36
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	91 81       	ldd	r25, Z+1	; 0x01
}
     eb2:	0f 90       	pop	r0
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <GPIO_setupPinDirection+0x6>
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <GPIO_setupPinDirection+0x8>
     ec2:	0f 92       	push	r0
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	89 83       	std	Y+1, r24	; 0x01
     eca:	6a 83       	std	Y+2, r22	; 0x02
     ecc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	88 30       	cpi	r24, 0x08	; 8
     ed2:	08 f0       	brcs	.+2      	; 0xed6 <GPIO_setupPinDirection+0x1c>
     ed4:	d5 c0       	rjmp	.+426    	; 0x1080 <GPIO_setupPinDirection+0x1c6>
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	84 30       	cpi	r24, 0x04	; 4
     eda:	08 f0       	brcs	.+2      	; 0xede <GPIO_setupPinDirection+0x24>
     edc:	d1 c0       	rjmp	.+418    	; 0x1080 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	3d 83       	std	Y+5, r19	; 0x05
     ee6:	2c 83       	std	Y+4, r18	; 0x04
     ee8:	8c 81       	ldd	r24, Y+4	; 0x04
     eea:	9d 81       	ldd	r25, Y+5	; 0x05
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	91 05       	cpc	r25, r1
     ef0:	09 f4       	brne	.+2      	; 0xef4 <GPIO_setupPinDirection+0x3a>
     ef2:	43 c0       	rjmp	.+134    	; 0xf7a <GPIO_setupPinDirection+0xc0>
     ef4:	2c 81       	ldd	r18, Y+4	; 0x04
     ef6:	3d 81       	ldd	r19, Y+5	; 0x05
     ef8:	22 30       	cpi	r18, 0x02	; 2
     efa:	31 05       	cpc	r19, r1
     efc:	2c f4       	brge	.+10     	; 0xf08 <GPIO_setupPinDirection+0x4e>
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	9d 81       	ldd	r25, Y+5	; 0x05
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	71 f0       	breq	.+28     	; 0xf22 <GPIO_setupPinDirection+0x68>
     f06:	bc c0       	rjmp	.+376    	; 0x1080 <GPIO_setupPinDirection+0x1c6>
     f08:	2c 81       	ldd	r18, Y+4	; 0x04
     f0a:	3d 81       	ldd	r19, Y+5	; 0x05
     f0c:	22 30       	cpi	r18, 0x02	; 2
     f0e:	31 05       	cpc	r19, r1
     f10:	09 f4       	brne	.+2      	; 0xf14 <GPIO_setupPinDirection+0x5a>
     f12:	5f c0       	rjmp	.+190    	; 0xfd2 <GPIO_setupPinDirection+0x118>
     f14:	8c 81       	ldd	r24, Y+4	; 0x04
     f16:	9d 81       	ldd	r25, Y+5	; 0x05
     f18:	83 30       	cpi	r24, 0x03	; 3
     f1a:	91 05       	cpc	r25, r1
     f1c:	09 f4       	brne	.+2      	; 0xf20 <GPIO_setupPinDirection+0x66>
     f1e:	85 c0       	rjmp	.+266    	; 0x102a <GPIO_setupPinDirection+0x170>
     f20:	af c0       	rjmp	.+350    	; 0x1080 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	a1 f4       	brne	.+40     	; 0xf50 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f28:	aa e3       	ldi	r26, 0x3A	; 58
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	ea e3       	ldi	r30, 0x3A	; 58
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <GPIO_setupPinDirection+0x8c>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <GPIO_setupPinDirection+0x88>
     f4a:	84 2b       	or	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	98 c0       	rjmp	.+304    	; 0x1080 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f50:	aa e3       	ldi	r26, 0x3A	; 58
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ea e3       	ldi	r30, 0x3A	; 58
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <GPIO_setupPinDirection+0xb4>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <GPIO_setupPinDirection+0xb0>
     f72:	80 95       	com	r24
     f74:	84 23       	and	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	83 c0       	rjmp	.+262    	; 0x1080 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	a1 f4       	brne	.+40     	; 0xfa8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f80:	a7 e3       	ldi	r26, 0x37	; 55
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e7 e3       	ldi	r30, 0x37	; 55
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <GPIO_setupPinDirection+0xe4>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <GPIO_setupPinDirection+0xe0>
     fa2:	84 2b       	or	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	6c c0       	rjmp	.+216    	; 0x1080 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     fa8:	a7 e3       	ldi	r26, 0x37	; 55
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e7 e3       	ldi	r30, 0x37	; 55
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <GPIO_setupPinDirection+0x10c>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <GPIO_setupPinDirection+0x108>
     fca:	80 95       	com	r24
     fcc:	84 23       	and	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	57 c0       	rjmp	.+174    	; 0x1080 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	a1 f4       	brne	.+40     	; 0x1000 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     fd8:	a4 e3       	ldi	r26, 0x34	; 52
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e4 e3       	ldi	r30, 0x34	; 52
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <GPIO_setupPinDirection+0x13c>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <GPIO_setupPinDirection+0x138>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	40 c0       	rjmp	.+128    	; 0x1080 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1000:	a4 e3       	ldi	r26, 0x34	; 52
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e4 e3       	ldi	r30, 0x34	; 52
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <GPIO_setupPinDirection+0x164>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <GPIO_setupPinDirection+0x160>
    1022:	80 95       	com	r24
    1024:	84 23       	and	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	2b c0       	rjmp	.+86     	; 0x1080 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	a1 f4       	brne	.+40     	; 0x1058 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1030:	a1 e3       	ldi	r26, 0x31	; 49
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e1 e3       	ldi	r30, 0x31	; 49
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <GPIO_setupPinDirection+0x194>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <GPIO_setupPinDirection+0x190>
    1052:	84 2b       	or	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	14 c0       	rjmp	.+40     	; 0x1080 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1058:	a1 e3       	ldi	r26, 0x31	; 49
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e1 e3       	ldi	r30, 0x31	; 49
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <GPIO_setupPinDirection+0x1bc>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <GPIO_setupPinDirection+0x1b8>
    107a:	80 95       	com	r24
    107c:	84 23       	and	r24, r20
    107e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <GPIO_writePin+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <GPIO_writePin+0x8>
    1098:	0f 92       	push	r0
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	6a 83       	std	Y+2, r22	; 0x02
    10a2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	88 30       	cpi	r24, 0x08	; 8
    10a8:	08 f0       	brcs	.+2      	; 0x10ac <GPIO_writePin+0x1c>
    10aa:	d5 c0       	rjmp	.+426    	; 0x1256 <GPIO_writePin+0x1c6>
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	84 30       	cpi	r24, 0x04	; 4
    10b0:	08 f0       	brcs	.+2      	; 0x10b4 <GPIO_writePin+0x24>
    10b2:	d1 c0       	rjmp	.+418    	; 0x1256 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	3d 83       	std	Y+5, r19	; 0x05
    10bc:	2c 83       	std	Y+4, r18	; 0x04
    10be:	8c 81       	ldd	r24, Y+4	; 0x04
    10c0:	9d 81       	ldd	r25, Y+5	; 0x05
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	91 05       	cpc	r25, r1
    10c6:	09 f4       	brne	.+2      	; 0x10ca <GPIO_writePin+0x3a>
    10c8:	43 c0       	rjmp	.+134    	; 0x1150 <GPIO_writePin+0xc0>
    10ca:	2c 81       	ldd	r18, Y+4	; 0x04
    10cc:	3d 81       	ldd	r19, Y+5	; 0x05
    10ce:	22 30       	cpi	r18, 0x02	; 2
    10d0:	31 05       	cpc	r19, r1
    10d2:	2c f4       	brge	.+10     	; 0x10de <GPIO_writePin+0x4e>
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	9d 81       	ldd	r25, Y+5	; 0x05
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	71 f0       	breq	.+28     	; 0x10f8 <GPIO_writePin+0x68>
    10dc:	bc c0       	rjmp	.+376    	; 0x1256 <GPIO_writePin+0x1c6>
    10de:	2c 81       	ldd	r18, Y+4	; 0x04
    10e0:	3d 81       	ldd	r19, Y+5	; 0x05
    10e2:	22 30       	cpi	r18, 0x02	; 2
    10e4:	31 05       	cpc	r19, r1
    10e6:	09 f4       	brne	.+2      	; 0x10ea <GPIO_writePin+0x5a>
    10e8:	5f c0       	rjmp	.+190    	; 0x11a8 <GPIO_writePin+0x118>
    10ea:	8c 81       	ldd	r24, Y+4	; 0x04
    10ec:	9d 81       	ldd	r25, Y+5	; 0x05
    10ee:	83 30       	cpi	r24, 0x03	; 3
    10f0:	91 05       	cpc	r25, r1
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <GPIO_writePin+0x66>
    10f4:	85 c0       	rjmp	.+266    	; 0x1200 <GPIO_writePin+0x170>
    10f6:	af c0       	rjmp	.+350    	; 0x1256 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	a1 f4       	brne	.+40     	; 0x1126 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    10fe:	ab e3       	ldi	r26, 0x3B	; 59
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	eb e3       	ldi	r30, 0x3B	; 59
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <GPIO_writePin+0x8c>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <GPIO_writePin+0x88>
    1120:	84 2b       	or	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	98 c0       	rjmp	.+304    	; 0x1256 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1126:	ab e3       	ldi	r26, 0x3B	; 59
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	eb e3       	ldi	r30, 0x3B	; 59
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <GPIO_writePin+0xb4>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <GPIO_writePin+0xb0>
    1148:	80 95       	com	r24
    114a:	84 23       	and	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	83 c0       	rjmp	.+262    	; 0x1256 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	a1 f4       	brne	.+40     	; 0x117e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1156:	a8 e3       	ldi	r26, 0x38	; 56
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e8 e3       	ldi	r30, 0x38	; 56
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <GPIO_writePin+0xe4>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <GPIO_writePin+0xe0>
    1178:	84 2b       	or	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	6c c0       	rjmp	.+216    	; 0x1256 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    117e:	a8 e3       	ldi	r26, 0x38	; 56
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e8 e3       	ldi	r30, 0x38	; 56
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <GPIO_writePin+0x10c>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <GPIO_writePin+0x108>
    11a0:	80 95       	com	r24
    11a2:	84 23       	and	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	57 c0       	rjmp	.+174    	; 0x1256 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	a1 f4       	brne	.+40     	; 0x11d6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    11ae:	a5 e3       	ldi	r26, 0x35	; 53
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e5 e3       	ldi	r30, 0x35	; 53
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <GPIO_writePin+0x13c>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <GPIO_writePin+0x138>
    11d0:	84 2b       	or	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	40 c0       	rjmp	.+128    	; 0x1256 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    11d6:	a5 e3       	ldi	r26, 0x35	; 53
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e5 e3       	ldi	r30, 0x35	; 53
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <GPIO_writePin+0x164>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <GPIO_writePin+0x160>
    11f8:	80 95       	com	r24
    11fa:	84 23       	and	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	2b c0       	rjmp	.+86     	; 0x1256 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	a1 f4       	brne	.+40     	; 0x122e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1206:	a2 e3       	ldi	r26, 0x32	; 50
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e2 e3       	ldi	r30, 0x32	; 50
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <GPIO_writePin+0x194>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <GPIO_writePin+0x190>
    1228:	84 2b       	or	r24, r20
    122a:	8c 93       	st	X, r24
    122c:	14 c0       	rjmp	.+40     	; 0x1256 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    122e:	a2 e3       	ldi	r26, 0x32	; 50
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e2 e3       	ldi	r30, 0x32	; 50
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <GPIO_writePin+0x1bc>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <GPIO_writePin+0x1b8>
    1250:	80 95       	com	r24
    1252:	84 23       	and	r24, r20
    1254:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	00 d0       	rcall	.+0      	; 0x126c <GPIO_readPin+0x6>
    126c:	00 d0       	rcall	.+0      	; 0x126e <GPIO_readPin+0x8>
    126e:	0f 92       	push	r0
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	8a 83       	std	Y+2, r24	; 0x02
    1276:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1278:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	88 30       	cpi	r24, 0x08	; 8
    127e:	08 f0       	brcs	.+2      	; 0x1282 <GPIO_readPin+0x1c>
    1280:	84 c0       	rjmp	.+264    	; 0x138a <GPIO_readPin+0x124>
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	84 30       	cpi	r24, 0x04	; 4
    1286:	08 f0       	brcs	.+2      	; 0x128a <GPIO_readPin+0x24>
    1288:	80 c0       	rjmp	.+256    	; 0x138a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	3d 83       	std	Y+5, r19	; 0x05
    1292:	2c 83       	std	Y+4, r18	; 0x04
    1294:	4c 81       	ldd	r20, Y+4	; 0x04
    1296:	5d 81       	ldd	r21, Y+5	; 0x05
    1298:	41 30       	cpi	r20, 0x01	; 1
    129a:	51 05       	cpc	r21, r1
    129c:	79 f1       	breq	.+94     	; 0x12fc <GPIO_readPin+0x96>
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	9d 81       	ldd	r25, Y+5	; 0x05
    12a2:	82 30       	cpi	r24, 0x02	; 2
    12a4:	91 05       	cpc	r25, r1
    12a6:	34 f4       	brge	.+12     	; 0x12b4 <GPIO_readPin+0x4e>
    12a8:	2c 81       	ldd	r18, Y+4	; 0x04
    12aa:	3d 81       	ldd	r19, Y+5	; 0x05
    12ac:	21 15       	cp	r18, r1
    12ae:	31 05       	cpc	r19, r1
    12b0:	69 f0       	breq	.+26     	; 0x12cc <GPIO_readPin+0x66>
    12b2:	6b c0       	rjmp	.+214    	; 0x138a <GPIO_readPin+0x124>
    12b4:	4c 81       	ldd	r20, Y+4	; 0x04
    12b6:	5d 81       	ldd	r21, Y+5	; 0x05
    12b8:	42 30       	cpi	r20, 0x02	; 2
    12ba:	51 05       	cpc	r21, r1
    12bc:	b9 f1       	breq	.+110    	; 0x132c <GPIO_readPin+0xc6>
    12be:	8c 81       	ldd	r24, Y+4	; 0x04
    12c0:	9d 81       	ldd	r25, Y+5	; 0x05
    12c2:	83 30       	cpi	r24, 0x03	; 3
    12c4:	91 05       	cpc	r25, r1
    12c6:	09 f4       	brne	.+2      	; 0x12ca <GPIO_readPin+0x64>
    12c8:	49 c0       	rjmp	.+146    	; 0x135c <GPIO_readPin+0xf6>
    12ca:	5f c0       	rjmp	.+190    	; 0x138a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    12cc:	e9 e3       	ldi	r30, 0x39	; 57
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	a9 01       	movw	r20, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <GPIO_readPin+0x7e>
    12e0:	55 95       	asr	r21
    12e2:	47 95       	ror	r20
    12e4:	8a 95       	dec	r24
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <GPIO_readPin+0x7a>
    12e8:	ca 01       	movw	r24, r20
    12ea:	81 70       	andi	r24, 0x01	; 1
    12ec:	90 70       	andi	r25, 0x00	; 0
    12ee:	88 23       	and	r24, r24
    12f0:	19 f0       	breq	.+6      	; 0x12f8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	49 c0       	rjmp	.+146    	; 0x138a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12f8:	19 82       	std	Y+1, r1	; 0x01
    12fa:	47 c0       	rjmp	.+142    	; 0x138a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    12fc:	e6 e3       	ldi	r30, 0x36	; 54
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	a9 01       	movw	r20, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <GPIO_readPin+0xae>
    1310:	55 95       	asr	r21
    1312:	47 95       	ror	r20
    1314:	8a 95       	dec	r24
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <GPIO_readPin+0xaa>
    1318:	ca 01       	movw	r24, r20
    131a:	81 70       	andi	r24, 0x01	; 1
    131c:	90 70       	andi	r25, 0x00	; 0
    131e:	88 23       	and	r24, r24
    1320:	19 f0       	breq	.+6      	; 0x1328 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	31 c0       	rjmp	.+98     	; 0x138a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1328:	19 82       	std	Y+1, r1	; 0x01
    132a:	2f c0       	rjmp	.+94     	; 0x138a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    132c:	e3 e3       	ldi	r30, 0x33	; 51
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	88 2f       	mov	r24, r24
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	a9 01       	movw	r20, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <GPIO_readPin+0xde>
    1340:	55 95       	asr	r21
    1342:	47 95       	ror	r20
    1344:	8a 95       	dec	r24
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <GPIO_readPin+0xda>
    1348:	ca 01       	movw	r24, r20
    134a:	81 70       	andi	r24, 0x01	; 1
    134c:	90 70       	andi	r25, 0x00	; 0
    134e:	88 23       	and	r24, r24
    1350:	19 f0       	breq	.+6      	; 0x1358 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	19 c0       	rjmp	.+50     	; 0x138a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1358:	19 82       	std	Y+1, r1	; 0x01
    135a:	17 c0       	rjmp	.+46     	; 0x138a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    135c:	e0 e3       	ldi	r30, 0x30	; 48
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	88 2f       	mov	r24, r24
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	a9 01       	movw	r20, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <GPIO_readPin+0x10e>
    1370:	55 95       	asr	r21
    1372:	47 95       	ror	r20
    1374:	8a 95       	dec	r24
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <GPIO_readPin+0x10a>
    1378:	ca 01       	movw	r24, r20
    137a:	81 70       	andi	r24, 0x01	; 1
    137c:	90 70       	andi	r25, 0x00	; 0
    137e:	88 23       	and	r24, r24
    1380:	19 f0       	breq	.+6      	; 0x1388 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	01 c0       	rjmp	.+2      	; 0x138a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1388:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    138a:	89 81       	ldd	r24, Y+1	; 0x01
}
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <GPIO_setupPortDirection+0x6>
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <GPIO_setupPortDirection+0x8>
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	84 30       	cpi	r24, 0x04	; 4
    13b0:	90 f5       	brcc	.+100    	; 0x1416 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	3c 83       	std	Y+4, r19	; 0x04
    13ba:	2b 83       	std	Y+3, r18	; 0x03
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	9c 81       	ldd	r25, Y+4	; 0x04
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	91 05       	cpc	r25, r1
    13c4:	d1 f0       	breq	.+52     	; 0x13fa <GPIO_setupPortDirection+0x5e>
    13c6:	2b 81       	ldd	r18, Y+3	; 0x03
    13c8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ca:	22 30       	cpi	r18, 0x02	; 2
    13cc:	31 05       	cpc	r19, r1
    13ce:	2c f4       	brge	.+10     	; 0x13da <GPIO_setupPortDirection+0x3e>
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	61 f0       	breq	.+24     	; 0x13f0 <GPIO_setupPortDirection+0x54>
    13d8:	1e c0       	rjmp	.+60     	; 0x1416 <GPIO_setupPortDirection+0x7a>
    13da:	2b 81       	ldd	r18, Y+3	; 0x03
    13dc:	3c 81       	ldd	r19, Y+4	; 0x04
    13de:	22 30       	cpi	r18, 0x02	; 2
    13e0:	31 05       	cpc	r19, r1
    13e2:	81 f0       	breq	.+32     	; 0x1404 <GPIO_setupPortDirection+0x68>
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	9c 81       	ldd	r25, Y+4	; 0x04
    13e8:	83 30       	cpi	r24, 0x03	; 3
    13ea:	91 05       	cpc	r25, r1
    13ec:	81 f0       	breq	.+32     	; 0x140e <GPIO_setupPortDirection+0x72>
    13ee:	13 c0       	rjmp	.+38     	; 0x1416 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    13f0:	ea e3       	ldi	r30, 0x3A	; 58
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	80 83       	st	Z, r24
    13f8:	0e c0       	rjmp	.+28     	; 0x1416 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13fa:	e7 e3       	ldi	r30, 0x37	; 55
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	80 83       	st	Z, r24
    1402:	09 c0       	rjmp	.+18     	; 0x1416 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1404:	e4 e3       	ldi	r30, 0x34	; 52
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	80 83       	st	Z, r24
    140c:	04 c0       	rjmp	.+8      	; 0x1416 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    140e:	e1 e3       	ldi	r30, 0x31	; 49
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	80 83       	st	Z, r24
			break;
		}
	}
}
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	00 d0       	rcall	.+0      	; 0x142a <GPIO_writePort+0x6>
    142a:	00 d0       	rcall	.+0      	; 0x142c <GPIO_writePort+0x8>
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	84 30       	cpi	r24, 0x04	; 4
    1438:	90 f5       	brcc	.+100    	; 0x149e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	3c 83       	std	Y+4, r19	; 0x04
    1442:	2b 83       	std	Y+3, r18	; 0x03
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	91 05       	cpc	r25, r1
    144c:	d1 f0       	breq	.+52     	; 0x1482 <GPIO_writePort+0x5e>
    144e:	2b 81       	ldd	r18, Y+3	; 0x03
    1450:	3c 81       	ldd	r19, Y+4	; 0x04
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	2c f4       	brge	.+10     	; 0x1462 <GPIO_writePort+0x3e>
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	61 f0       	breq	.+24     	; 0x1478 <GPIO_writePort+0x54>
    1460:	1e c0       	rjmp	.+60     	; 0x149e <GPIO_writePort+0x7a>
    1462:	2b 81       	ldd	r18, Y+3	; 0x03
    1464:	3c 81       	ldd	r19, Y+4	; 0x04
    1466:	22 30       	cpi	r18, 0x02	; 2
    1468:	31 05       	cpc	r19, r1
    146a:	81 f0       	breq	.+32     	; 0x148c <GPIO_writePort+0x68>
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	83 30       	cpi	r24, 0x03	; 3
    1472:	91 05       	cpc	r25, r1
    1474:	81 f0       	breq	.+32     	; 0x1496 <GPIO_writePort+0x72>
    1476:	13 c0       	rjmp	.+38     	; 0x149e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1478:	eb e3       	ldi	r30, 0x3B	; 59
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	80 83       	st	Z, r24
    1480:	0e c0       	rjmp	.+28     	; 0x149e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1482:	e8 e3       	ldi	r30, 0x38	; 56
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	80 83       	st	Z, r24
    148a:	09 c0       	rjmp	.+18     	; 0x149e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    148c:	e5 e3       	ldi	r30, 0x35	; 53
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	80 83       	st	Z, r24
    1494:	04 c0       	rjmp	.+8      	; 0x149e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1496:	e2 e3       	ldi	r30, 0x32	; 50
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	80 83       	st	Z, r24
			break;
		}
	}
}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <GPIO_readPort+0x6>
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <GPIO_readPort+0x8>
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    14ba:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	84 30       	cpi	r24, 0x04	; 4
    14c0:	90 f5       	brcc	.+100    	; 0x1526 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	3c 83       	std	Y+4, r19	; 0x04
    14ca:	2b 83       	std	Y+3, r18	; 0x03
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	9c 81       	ldd	r25, Y+4	; 0x04
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	91 05       	cpc	r25, r1
    14d4:	d1 f0       	breq	.+52     	; 0x150a <GPIO_readPort+0x5e>
    14d6:	2b 81       	ldd	r18, Y+3	; 0x03
    14d8:	3c 81       	ldd	r19, Y+4	; 0x04
    14da:	22 30       	cpi	r18, 0x02	; 2
    14dc:	31 05       	cpc	r19, r1
    14de:	2c f4       	brge	.+10     	; 0x14ea <GPIO_readPort+0x3e>
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	61 f0       	breq	.+24     	; 0x1500 <GPIO_readPort+0x54>
    14e8:	1e c0       	rjmp	.+60     	; 0x1526 <GPIO_readPort+0x7a>
    14ea:	2b 81       	ldd	r18, Y+3	; 0x03
    14ec:	3c 81       	ldd	r19, Y+4	; 0x04
    14ee:	22 30       	cpi	r18, 0x02	; 2
    14f0:	31 05       	cpc	r19, r1
    14f2:	81 f0       	breq	.+32     	; 0x1514 <GPIO_readPort+0x68>
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	9c 81       	ldd	r25, Y+4	; 0x04
    14f8:	83 30       	cpi	r24, 0x03	; 3
    14fa:	91 05       	cpc	r25, r1
    14fc:	81 f0       	breq	.+32     	; 0x151e <GPIO_readPort+0x72>
    14fe:	13 c0       	rjmp	.+38     	; 0x1526 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1500:	e9 e3       	ldi	r30, 0x39	; 57
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	0e c0       	rjmp	.+28     	; 0x1526 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    150a:	e6 e3       	ldi	r30, 0x36	; 54
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	09 c0       	rjmp	.+18     	; 0x1526 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1514:	e3 e3       	ldi	r30, 0x33	; 51
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	04 c0       	rjmp	.+8      	; 0x1526 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    151e:	e0 e3       	ldi	r30, 0x30	; 48
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1526:	89 81       	ldd	r24, Y+1	; 0x01
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    1536:	1f 92       	push	r1
    1538:	0f 92       	push	r0
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	0f 92       	push	r0
    153e:	11 24       	eor	r1, r1
    1540:	2f 93       	push	r18
    1542:	3f 93       	push	r19
    1544:	4f 93       	push	r20
    1546:	5f 93       	push	r21
    1548:	6f 93       	push	r22
    154a:	7f 93       	push	r23
    154c:	8f 93       	push	r24
    154e:	9f 93       	push	r25
    1550:	af 93       	push	r26
    1552:	bf 93       	push	r27
    1554:	ef 93       	push	r30
    1556:	ff 93       	push	r31
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1560:	80 91 f0 01 	lds	r24, 0x01F0
    1564:	90 91 f1 01 	lds	r25, 0x01F1
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	29 f0       	breq	.+10     	; 0x1576 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    156c:	e0 91 f0 01 	lds	r30, 0x01F0
    1570:	f0 91 f1 01 	lds	r31, 0x01F1
    1574:	09 95       	icall
	}
}
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	ff 91       	pop	r31
    157c:	ef 91       	pop	r30
    157e:	bf 91       	pop	r27
    1580:	af 91       	pop	r26
    1582:	9f 91       	pop	r25
    1584:	8f 91       	pop	r24
    1586:	7f 91       	pop	r23
    1588:	6f 91       	pop	r22
    158a:	5f 91       	pop	r21
    158c:	4f 91       	pop	r20
    158e:	3f 91       	pop	r19
    1590:	2f 91       	pop	r18
    1592:	0f 90       	pop	r0
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	0f 90       	pop	r0
    1598:	1f 90       	pop	r1
    159a:	18 95       	reti

0000159c <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <ICU_init+0x6>
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	9a 83       	std	Y+2, r25	; 0x02
    15a8:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    15aa:	a1 e3       	ldi	r26, 0x31	; 49
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e1 e3       	ldi	r30, 0x31	; 49
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	8f 7b       	andi	r24, 0xBF	; 191
    15b6:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    15b8:	ef e4       	ldi	r30, 0x4F	; 79
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	8c e0       	ldi	r24, 0x0C	; 12
    15be:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    15c0:	ae e4       	ldi	r26, 0x4E	; 78
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	ee e4       	ldi	r30, 0x4E	; 78
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	98 2f       	mov	r25, r24
    15cc:	98 7f       	andi	r25, 0xF8	; 248
    15ce:	e9 81       	ldd	r30, Y+1	; 0x01
    15d0:	fa 81       	ldd	r31, Y+2	; 0x02
    15d2:	80 81       	ld	r24, Z
    15d4:	89 2b       	or	r24, r25
    15d6:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    15d8:	ae e4       	ldi	r26, 0x4E	; 78
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	ee e4       	ldi	r30, 0x4E	; 78
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	28 2f       	mov	r18, r24
    15e4:	2f 7b       	andi	r18, 0xBF	; 191
    15e6:	e9 81       	ldd	r30, Y+1	; 0x01
    15e8:	fa 81       	ldd	r31, Y+2	; 0x02
    15ea:	81 81       	ldd	r24, Z+1	; 0x01
    15ec:	88 2f       	mov	r24, r24
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	00 24       	eor	r0, r0
    15f2:	96 95       	lsr	r25
    15f4:	87 95       	ror	r24
    15f6:	07 94       	ror	r0
    15f8:	96 95       	lsr	r25
    15fa:	87 95       	ror	r24
    15fc:	07 94       	ror	r0
    15fe:	98 2f       	mov	r25, r24
    1600:	80 2d       	mov	r24, r0
    1602:	82 2b       	or	r24, r18
    1604:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    1606:	ec e4       	ldi	r30, 0x4C	; 76
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	11 82       	std	Z+1, r1	; 0x01
    160c:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    160e:	e6 e4       	ldi	r30, 0x46	; 70
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	11 82       	std	Z+1, r1	; 0x01
    1614:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    1616:	a9 e5       	ldi	r26, 0x59	; 89
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e9 e5       	ldi	r30, 0x59	; 89
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	80 62       	ori	r24, 0x20	; 32
    1622:	8c 93       	st	X, r24
}
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	00 d0       	rcall	.+0      	; 0x1634 <ICU_setCallBack+0x6>
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	9a 83       	std	Y+2, r25	; 0x02
    163a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	9a 81       	ldd	r25, Y+2	; 0x02
    1640:	90 93 f1 01 	sts	0x01F1, r25
    1644:	80 93 f0 01 	sts	0x01F0, r24
}
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	0f 92       	push	r0
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    165e:	ae e4       	ldi	r26, 0x4E	; 78
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	ee e4       	ldi	r30, 0x4E	; 78
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	28 2f       	mov	r18, r24
    166a:	2f 7b       	andi	r18, 0xBF	; 191
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	88 2f       	mov	r24, r24
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	00 24       	eor	r0, r0
    1674:	96 95       	lsr	r25
    1676:	87 95       	ror	r24
    1678:	07 94       	ror	r0
    167a:	96 95       	lsr	r25
    167c:	87 95       	ror	r24
    167e:	07 94       	ror	r0
    1680:	98 2f       	mov	r25, r24
    1682:	80 2d       	mov	r24, r0
    1684:	82 2b       	or	r24, r18
    1686:	8c 93       	st	X, r24
}
    1688:	0f 90       	pop	r0
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1698:	e6 e4       	ldi	r30, 0x46	; 70
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	91 81       	ldd	r25, Z+1	; 0x01
}
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    16ae:	ec e4       	ldi	r30, 0x4C	; 76
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	11 82       	std	Z+1, r1	; 0x01
    16b4:	10 82       	st	Z, r1
}
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    16c4:	ef e4       	ldi	r30, 0x4F	; 79
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	10 82       	st	Z, r1
	TCCR1B = 0;
    16ca:	ee e4       	ldi	r30, 0x4E	; 78
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	10 82       	st	Z, r1
	TCNT1 = 0;
    16d0:	ec e4       	ldi	r30, 0x4C	; 76
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	11 82       	std	Z+1, r1	; 0x01
    16d6:	10 82       	st	Z, r1
	ICR1 = 0;
    16d8:	e6 e4       	ldi	r30, 0x46	; 70
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	11 82       	std	Z+1, r1	; 0x01
    16de:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    16e0:	a9 e5       	ldi	r26, 0x59	; 89
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e9 e5       	ldi	r30, 0x59	; 89
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	8f 7d       	andi	r24, 0xDF	; 223
    16ec:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    16ee:	10 92 f1 01 	sts	0x01F1, r1
    16f2:	10 92 f0 01 	sts	0x01F0, r1
}
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <SPI_initMaster>:
/*
 * Description :
 * Initialize the SPI device as Master.
 */
void SPI_initMaster(void) 
{
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	64 e0       	ldi	r22, 0x04	; 4
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	65 e0       	ldi	r22, 0x05	; 5
    1712:	41 e0       	ldi	r20, 0x01	; 1
    1714:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_INPUT);
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	66 e0       	ldi	r22, 0x06	; 6
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	67 e0       	ldi	r22, 0x07	; 7
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_setupPinDirection>
     * MSTR    = 1 Enable Master
     * CPOL    = 0 SCK is low when idle
     * CPHA    = 0 Sample Data with the raising edge
     * SPR1:0  = 00 Choose SPI clock = Fosc/4
     ***********************************************************************/
	SPCR = (1<<SPE) | (1<<MSTR);
    172c:	ed e2       	ldi	r30, 0x2D	; 45
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 e5       	ldi	r24, 0x50	; 80
    1732:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    1734:	ae e2       	ldi	r26, 0x2E	; 46
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	ee e2       	ldi	r30, 0x2E	; 46
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	8e 7f       	andi	r24, 0xFE	; 254
    1740:	8c 93       	st	X, r24
}
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <SPI_initSlave>:
/*
 * Description :
 * Initialize the SPI device as Slave.
 */
void SPI_initSlave(void)
{ 
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_INPUT);
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	64 e0       	ldi	r22, 0x04	; 4
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_INPUT);
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	65 e0       	ldi	r22, 0x05	; 5
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_OUTPUT);
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	66 e0       	ldi	r22, 0x06	; 6
    1768:	41 e0       	ldi	r20, 0x01	; 1
    176a:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_INPUT);
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	67 e0       	ldi	r22, 0x07	; 7
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_setupPinDirection>
	 * MSTR    = 0 Disable Master
	 * CPOL    = 0 SCK is low when idle
	 * CPHA    = 0 Sample Data with the raising edge
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	SPCR = (1<<SPE);
    1778:	ed e2       	ldi	r30, 0x2D	; 45
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 e4       	ldi	r24, 0x40	; 64
    177e:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    1780:	ae e2       	ldi	r26, 0x2E	; 46
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	ee e2       	ldi	r30, 0x2E	; 46
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	8e 7f       	andi	r24, 0xFE	; 254
    178c:	8c 93       	st	X, r24
}
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <SPI_sendReceiveByte>:
 * Description :
 * Send the required data through SPI to the other SPI device.
 * In the same time data will be received from the other device.
 */
uint8 SPI_sendReceiveByte(uint8 data)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	0f 92       	push	r0
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPDR = data;
    17a0:	ef e2       	ldi	r30, 0x2F	; 47
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
    17a8:	ee e2       	ldi	r30, 0x2E	; 46
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	88 23       	and	r24, r24
    17b0:	dc f7       	brge	.-10     	; 0x17a8 <SPI_sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPDR;
    17b2:	ef e2       	ldi	r30, 0x2F	; 47
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
}
    17b8:	0f 90       	pop	r0
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <SPI_sendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_sendString(const uint8 *str)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <SPI_sendString+0x6>
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <SPI_sendString+0x8>
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	9c 83       	std	Y+4, r25	; 0x04
    17ce:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    17d0:	1a 82       	std	Y+2, r1	; 0x02
	uint8 received_data = 0;
    17d2:	19 82       	std	Y+1, r1	; 0x01
    17d4:	0f c0       	rjmp	.+30     	; 0x17f4 <SPI_sendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	fc 01       	movw	r30, r24
    17e2:	e2 0f       	add	r30, r18
    17e4:	f3 1f       	adc	r31, r19
    17e6:	80 81       	ld	r24, Z
    17e8:	0e 94 ca 0b 	call	0x1794	; 0x1794 <SPI_sendReceiveByte>
    17ec:	89 83       	std	Y+1, r24	; 0x01
		i++;
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	8f 5f       	subi	r24, 0xFF	; 255
    17f2:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 i = 0;
	uint8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	9c 81       	ldd	r25, Y+4	; 0x04
    17fe:	fc 01       	movw	r30, r24
    1800:	e2 0f       	add	r30, r18
    1802:	f3 1f       	adc	r31, r19
    1804:	80 81       	ld	r24, Z
    1806:	88 23       	and	r24, r24
    1808:	31 f7       	brne	.-52     	; 0x17d6 <SPI_sendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
		i++;
	}
}
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <SPI_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_receiveString(uint8 *str)
{
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	00 d0       	rcall	.+0      	; 0x1822 <SPI_receiveString+0xa>
    1822:	0f 92       	push	r0
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	9b 83       	std	Y+3, r25	; 0x03
    182a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    182c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	9b 81       	ldd	r25, Y+3	; 0x03
    1838:	8c 01       	movw	r16, r24
    183a:	02 0f       	add	r16, r18
    183c:	13 1f       	adc	r17, r19
    183e:	8f ef       	ldi	r24, 0xFF	; 255
    1840:	0e 94 ca 0b 	call	0x1794	; 0x1794 <SPI_sendReceiveByte>
    1844:	f8 01       	movw	r30, r16
    1846:	80 83       	st	Z, r24
    1848:	10 c0       	rjmp	.+32     	; 0x186a <SPI_receiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	9b 81       	ldd	r25, Y+3	; 0x03
    185a:	8c 01       	movw	r16, r24
    185c:	02 0f       	add	r16, r18
    185e:	13 1f       	adc	r17, r19
    1860:	8f ef       	ldi	r24, 0xFF	; 255
    1862:	0e 94 ca 0b 	call	0x1794	; 0x1794 <SPI_sendReceiveByte>
    1866:	f8 01       	movw	r30, r16
    1868:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	9b 81       	ldd	r25, Y+3	; 0x03
    1874:	fc 01       	movw	r30, r24
    1876:	e2 0f       	add	r30, r18
    1878:	f3 1f       	adc	r31, r19
    187a:	80 81       	ld	r24, Z
    187c:	83 32       	cpi	r24, 0x23	; 35
    187e:	29 f7       	brne	.-54     	; 0x184a <SPI_receiveString+0x32>
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	9b 81       	ldd	r25, Y+3	; 0x03
    188a:	fc 01       	movw	r30, r24
    188c:	e2 0f       	add	r30, r18
    188e:	f3 1f       	adc	r31, r19
    1890:	10 82       	st	Z, r1
}
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	08 95       	ret

000018a2 <TWI_init>:
#include "twi.h"
#include "../common/common_macros.h"
#include <avr/io.h>
#define ERROR 0
#define SUCCESS 1
void TWI_init(const TWI_ConfigType * Config_Ptr){
    18a2:	df 93       	push	r29
    18a4:	cf 93       	push	r28
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <TWI_init+0x6>
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <TWI_init+0x8>
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	9a 83       	std	Y+2, r25	; 0x02
    18b0:	89 83       	std	Y+1, r24	; 0x01



	   switch(Config_Ptr->bit_rate)
    18b2:	e9 81       	ldd	r30, Y+1	; 0x01
    18b4:	fa 81       	ldd	r31, Y+2	; 0x02
    18b6:	81 81       	ldd	r24, Z+1	; 0x01
    18b8:	92 81       	ldd	r25, Z+2	; 0x02
    18ba:	9c 83       	std	Y+4, r25	; 0x04
    18bc:	8b 83       	std	Y+3, r24	; 0x03
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	84 36       	cpi	r24, 0x64	; 100
    18c4:	91 05       	cpc	r25, r1
    18c6:	39 f0       	breq	.+14     	; 0x18d6 <TWI_init+0x34>
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	9c 81       	ldd	r25, Y+4	; 0x04
    18cc:	21 e0       	ldi	r18, 0x01	; 1
    18ce:	80 39       	cpi	r24, 0x90	; 144
    18d0:	92 07       	cpc	r25, r18
    18d2:	49 f0       	breq	.+18     	; 0x18e6 <TWI_init+0x44>
    18d4:	0f c0       	rjmp	.+30     	; 0x18f4 <TWI_init+0x52>
	    {
	        case TWI_BAUD_100KHZ:
	            TWBR = 32;
    18d6:	e0 e2       	ldi	r30, 0x20	; 32
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 e2       	ldi	r24, 0x20	; 32
    18dc:	80 83       	st	Z, r24
	            TWSR = 0x00; // prescaler = 1
    18de:	e1 e2       	ldi	r30, 0x21	; 33
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	10 82       	st	Z, r1
    18e4:	07 c0       	rjmp	.+14     	; 0x18f4 <TWI_init+0x52>
	            break;

	        case TWI_BAUD_400KHZ:
	            TWBR = 2;
    18e6:	e0 e2       	ldi	r30, 0x20	; 32
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	82 e0       	ldi	r24, 0x02	; 2
    18ec:	80 83       	st	Z, r24
	            TWSR = 0x00;
    18ee:	e1 e2       	ldi	r30, 0x21	; 33
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	10 82       	st	Z, r1
	            break;
	    }

	    // Set slave address if needed (as master use dummy address)
	    TWAR = (Config_Ptr->address << 1);
    18f4:	a2 e2       	ldi	r26, 0x22	; 34
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e9 81       	ldd	r30, Y+1	; 0x01
    18fa:	fa 81       	ldd	r31, Y+2	; 0x02
    18fc:	80 81       	ld	r24, Z
    18fe:	88 0f       	add	r24, r24
    1900:	8c 93       	st	X, r24

	    // Enable TWI
	    TWCR = (1 << TWEN);
    1902:	e6 e5       	ldi	r30, 0x56	; 86
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	84 e0       	ldi	r24, 0x04	; 4
    1908:	80 83       	st	Z, r24
	}
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <TWI_start>:




void TWI_start(void)
{
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1920:	e6 e5       	ldi	r30, 0x56	; 86
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	84 ea       	ldi	r24, 0xA4	; 164
    1926:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1928:	e6 e5       	ldi	r30, 0x56	; 86
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	88 23       	and	r24, r24
    1930:	dc f7       	brge	.-10     	; 0x1928 <TWI_start+0x10>
}
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <TWI_stop>:

void TWI_stop(void)
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1940:	e6 e5       	ldi	r30, 0x56	; 86
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	84 e9       	ldi	r24, 0x94	; 148
    1946:	80 83       	st	Z, r24
}
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	0f 92       	push	r0
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    195a:	e3 e2       	ldi	r30, 0x23	; 35
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1962:	e6 e5       	ldi	r30, 0x56	; 86
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	84 e8       	ldi	r24, 0x84	; 132
    1968:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    196a:	e6 e5       	ldi	r30, 0x56	; 86
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	88 23       	and	r24, r24
    1972:	dc f7       	brge	.-10     	; 0x196a <TWI_writeByte+0x1c>
}
    1974:	0f 90       	pop	r0
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1984:	e6 e5       	ldi	r30, 0x56	; 86
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	84 ec       	ldi	r24, 0xC4	; 196
    198a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    198c:	e6 e5       	ldi	r30, 0x56	; 86
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	88 23       	and	r24, r24
    1994:	dc f7       	brge	.-10     	; 0x198c <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1996:	e3 e2       	ldi	r30, 0x23	; 35
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
}
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    19aa:	e6 e5       	ldi	r30, 0x56	; 86
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	84 e8       	ldi	r24, 0x84	; 132
    19b0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    19b2:	e6 e5       	ldi	r30, 0x56	; 86
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	88 23       	and	r24, r24
    19ba:	dc f7       	brge	.-10     	; 0x19b2 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    19bc:	e3 e2       	ldi	r30, 0x23	; 35
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
}
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	0f 92       	push	r0
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    19d2:	e1 e2       	ldi	r30, 0x21	; 33
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	88 7f       	andi	r24, 0xF8	; 248
    19da:	89 83       	std	Y+1, r24	; 0x01
    return status;
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    19de:	0f 90       	pop	r0
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <POT_SPEED>:
#include"POT.h"



uint8 POT_SPEED(void)
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <POT_SPEED+0x6>
    19ec:	0f 92       	push	r0
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
	uint8 speed_value = 0;
    19f2:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    19f4:	1a 82       	std	Y+2, r1	; 0x02
    19f6:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the Pot. is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    19f8:	87 e0       	ldi	r24, 0x07	; 7
    19fa:	0e 94 26 07 	call	0xe4c	; 0xe4c <ADC_readChannel>
    19fe:	9a 83       	std	Y+2, r25	; 0x02
    1a00:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the speed from the ADC value*/
	speed_value = (uint8)(((uint32)adc_value*SENSOR_MAX_SPEED*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	9a 81       	ldd	r25, Y+2	; 0x02
    1a06:	cc 01       	movw	r24, r24
    1a08:	a0 e0       	ldi	r26, 0x00	; 0
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	2a e9       	ldi	r18, 0x9A	; 154
    1a0e:	31 e0       	ldi	r19, 0x01	; 1
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	50 e0       	ldi	r21, 0x00	; 0
    1a14:	bc 01       	movw	r22, r24
    1a16:	cd 01       	movw	r24, r26
    1a18:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <__mulsi3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	2a e0       	ldi	r18, 0x0A	; 10
    1a32:	37 ed       	ldi	r19, 0xD7	; 215
    1a34:	43 e2       	ldi	r20, 0x23	; 35
    1a36:	50 e4       	ldi	r21, 0x40	; 64
    1a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	24 e1       	ldi	r18, 0x14	; 20
    1a46:	3e ea       	ldi	r19, 0xAE	; 174
    1a48:	43 e2       	ldi	r20, 0x23	; 35
    1a4a:	55 e4       	ldi	r21, 0x45	; 69
    1a4c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	bc 01       	movw	r22, r24
    1a56:	cd 01       	movw	r24, r26
    1a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	8b 83       	std	Y+3, r24	; 0x03
	return speed_value;
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <Ultrasonic_init>:
the GPIO driver.
▪ Inputs: None.
▪ Return: None. */


void Ultrasonic_init(void){
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
	const ICU_ConfigType config={F_CPU_8,RAISING};
	ICU_init(&config);
    1a78:	8a ee       	ldi	r24, 0xEA	; 234
    1a7a:	91 e0       	ldi	r25, 0x01	; 1
    1a7c:	0e 94 ce 0a 	call	0x159c	; 0x159c <ICU_init>
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    1a80:	84 ed       	ldi	r24, 0xD4	; 212
    1a82:	9e e0       	ldi	r25, 0x0E	; 14
    1a84:	0e 94 17 0b 	call	0x162e	; 0x162e <ICU_setCallBack>
    GPIO_setupPinDirection(Ultrasonic_Trigger_PORT_ID,Ultrasonic_Trigger_PIN_ID ,PIN_OUTPUT);
    1a88:	83 e0       	ldi	r24, 0x03	; 3
    1a8a:	67 e0       	ldi	r22, 0x07	; 7
    1a8c:	41 e0       	ldi	r20, 0x01	; 1
    1a8e:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_setupPinDirection>


}
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	08 95       	ret

00001a98 <Ultrasonic_Trigger>:
/* ▪ Description:
▪ Send the trigger pulse to the ultrasonic sensor.
▪ Inputs: None.
▪ Return: None. */

void Ultrasonic_Trigger(void){
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	68 97       	sbiw	r28, 0x18	; 24
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
    GPIO_writePin(Ultrasonic_Trigger_PORT_ID,Ultrasonic_Trigger_PIN_ID,LOGIC_HIGH);
    1aac:	83 e0       	ldi	r24, 0x03	; 3
    1aae:	67 e0       	ldi	r22, 0x07	; 7
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	a0 e2       	ldi	r26, 0x20	; 32
    1abc:	b1 e4       	ldi	r27, 0x41	; 65
    1abe:	8d 8b       	std	Y+21, r24	; 0x15
    1ac0:	9e 8b       	std	Y+22, r25	; 0x16
    1ac2:	af 8b       	std	Y+23, r26	; 0x17
    1ac4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ac6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aca:	8f 89       	ldd	r24, Y+23	; 0x17
    1acc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ace:	2b ea       	ldi	r18, 0xAB	; 171
    1ad0:	3a ea       	ldi	r19, 0xAA	; 170
    1ad2:	4a ea       	ldi	r20, 0xAA	; 170
    1ad4:	50 e4       	ldi	r21, 0x40	; 64
    1ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	89 8b       	std	Y+17, r24	; 0x11
    1ae0:	9a 8b       	std	Y+18, r25	; 0x12
    1ae2:	ab 8b       	std	Y+19, r26	; 0x13
    1ae4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ae6:	69 89       	ldd	r22, Y+17	; 0x11
    1ae8:	7a 89       	ldd	r23, Y+18	; 0x12
    1aea:	8b 89       	ldd	r24, Y+19	; 0x13
    1aec:	9c 89       	ldd	r25, Y+20	; 0x14
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e8       	ldi	r20, 0x80	; 128
    1af4:	5f e3       	ldi	r21, 0x3F	; 63
    1af6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1afa:	88 23       	and	r24, r24
    1afc:	1c f4       	brge	.+6      	; 0x1b04 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	88 8b       	std	Y+16, r24	; 0x10
    1b02:	91 c0       	rjmp	.+290    	; 0x1c26 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    1b04:	69 89       	ldd	r22, Y+17	; 0x11
    1b06:	7a 89       	ldd	r23, Y+18	; 0x12
    1b08:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	4f e7       	ldi	r20, 0x7F	; 127
    1b12:	53 e4       	ldi	r21, 0x43	; 67
    1b14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b18:	18 16       	cp	r1, r24
    1b1a:	0c f0       	brlt	.+2      	; 0x1b1e <Ultrasonic_Trigger+0x86>
    1b1c:	7b c0       	rjmp	.+246    	; 0x1c14 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1b1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b20:	7e 89       	ldd	r23, Y+22	; 0x16
    1b22:	8f 89       	ldd	r24, Y+23	; 0x17
    1b24:	98 8d       	ldd	r25, Y+24	; 0x18
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	4a e7       	ldi	r20, 0x7A	; 122
    1b2c:	54 e4       	ldi	r21, 0x44	; 68
    1b2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	8c 87       	std	Y+12, r24	; 0x0c
    1b38:	9d 87       	std	Y+13, r25	; 0x0d
    1b3a:	ae 87       	std	Y+14, r26	; 0x0e
    1b3c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b40:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b42:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b44:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	4a e7       	ldi	r20, 0x7A	; 122
    1b4c:	55 e4       	ldi	r21, 0x45	; 69
    1b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	88 87       	std	Y+8, r24	; 0x08
    1b58:	99 87       	std	Y+9, r25	; 0x09
    1b5a:	aa 87       	std	Y+10, r26	; 0x0a
    1b5c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b5e:	68 85       	ldd	r22, Y+8	; 0x08
    1b60:	79 85       	ldd	r23, Y+9	; 0x09
    1b62:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b64:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 e8       	ldi	r20, 0x80	; 128
    1b6c:	5f e3       	ldi	r21, 0x3F	; 63
    1b6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b72:	88 23       	and	r24, r24
    1b74:	2c f4       	brge	.+10     	; 0x1b80 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	9f 83       	std	Y+7, r25	; 0x07
    1b7c:	8e 83       	std	Y+6, r24	; 0x06
    1b7e:	3f c0       	rjmp	.+126    	; 0x1bfe <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    1b80:	68 85       	ldd	r22, Y+8	; 0x08
    1b82:	79 85       	ldd	r23, Y+9	; 0x09
    1b84:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b86:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	3f ef       	ldi	r19, 0xFF	; 255
    1b8c:	4f e7       	ldi	r20, 0x7F	; 127
    1b8e:	57 e4       	ldi	r21, 0x47	; 71
    1b90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b94:	18 16       	cp	r1, r24
    1b96:	4c f5       	brge	.+82     	; 0x1bea <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b98:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b9a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b9c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b9e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e2       	ldi	r20, 0x20	; 32
    1ba6:	51 e4       	ldi	r21, 0x41	; 65
    1ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	9f 83       	std	Y+7, r25	; 0x07
    1bbe:	8e 83       	std	Y+6, r24	; 0x06
    1bc0:	0f c0       	rjmp	.+30     	; 0x1be0 <Ultrasonic_Trigger+0x148>
    1bc2:	80 e9       	ldi	r24, 0x90	; 144
    1bc4:	91 e0       	ldi	r25, 0x01	; 1
    1bc6:	9d 83       	std	Y+5, r25	; 0x05
    1bc8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bca:	8c 81       	ldd	r24, Y+4	; 0x04
    1bcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	f1 f7       	brne	.-4      	; 0x1bce <Ultrasonic_Trigger+0x136>
    1bd2:	9d 83       	std	Y+5, r25	; 0x05
    1bd4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	9f 83       	std	Y+7, r25	; 0x07
    1bde:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be0:	8e 81       	ldd	r24, Y+6	; 0x06
    1be2:	9f 81       	ldd	r25, Y+7	; 0x07
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	69 f7       	brne	.-38     	; 0x1bc2 <Ultrasonic_Trigger+0x12a>
    1be8:	24 c0       	rjmp	.+72     	; 0x1c32 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bea:	68 85       	ldd	r22, Y+8	; 0x08
    1bec:	79 85       	ldd	r23, Y+9	; 0x09
    1bee:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bf0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	9f 83       	std	Y+7, r25	; 0x07
    1bfc:	8e 83       	std	Y+6, r24	; 0x06
    1bfe:	8e 81       	ldd	r24, Y+6	; 0x06
    1c00:	9f 81       	ldd	r25, Y+7	; 0x07
    1c02:	9b 83       	std	Y+3, r25	; 0x03
    1c04:	8a 83       	std	Y+2, r24	; 0x02
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <Ultrasonic_Trigger+0x172>
    1c0e:	9b 83       	std	Y+3, r25	; 0x03
    1c10:	8a 83       	std	Y+2, r24	; 0x02
    1c12:	0f c0       	rjmp	.+30     	; 0x1c32 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c14:	69 89       	ldd	r22, Y+17	; 0x11
    1c16:	7a 89       	ldd	r23, Y+18	; 0x12
    1c18:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	88 8b       	std	Y+16, r24	; 0x10
    1c26:	88 89       	ldd	r24, Y+16	; 0x10
    1c28:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	8a 95       	dec	r24
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <Ultrasonic_Trigger+0x194>
    1c30:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10);
    GPIO_writePin(Ultrasonic_Trigger_PORT_ID,Ultrasonic_Trigger_PIN_ID,LOGIC_LOW);
    1c32:	83 e0       	ldi	r24, 0x03	; 3
    1c34:	67 e0       	ldi	r22, 0x07	; 7
    1c36:	40 e0       	ldi	r20, 0x00	; 0
    1c38:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
}
    1c3c:	68 96       	adiw	r28, 0x18	; 24
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <Ultrasonic_readDistance>:
▪ Start the measurement process via the ICU driver.
6
▪ Inputs: None.
▪ Return: The measured distance in centimeters.*/

uint16 Ultrasonic_readDistance(void){
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	60 97       	sbiw	r28, 0x10	; 16
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
	  uint16 distance=0;
    1c62:	18 8a       	std	Y+16, r1	; 0x10
    1c64:	1f 86       	std	Y+15, r1	; 0x0f
	  g_edgeCount = 0;
    1c66:	10 92 f2 01 	sts	0x01F2, r1
    Ultrasonic_Trigger();
    1c6a:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Ultrasonic_Trigger>
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a8 e4       	ldi	r26, 0x48	; 72
    1c74:	b3 e4       	ldi	r27, 0x43	; 67
    1c76:	8b 87       	std	Y+11, r24	; 0x0b
    1c78:	9c 87       	std	Y+12, r25	; 0x0c
    1c7a:	ad 87       	std	Y+13, r26	; 0x0d
    1c7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	4a e7       	ldi	r20, 0x7A	; 122
    1c8c:	55 e4       	ldi	r21, 0x45	; 69
    1c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	8f 83       	std	Y+7, r24	; 0x07
    1c98:	98 87       	std	Y+8, r25	; 0x08
    1c9a:	a9 87       	std	Y+9, r26	; 0x09
    1c9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca0:	78 85       	ldd	r23, Y+8	; 0x08
    1ca2:	89 85       	ldd	r24, Y+9	; 0x09
    1ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e8       	ldi	r20, 0x80	; 128
    1cac:	5f e3       	ldi	r21, 0x3F	; 63
    1cae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cb2:	88 23       	and	r24, r24
    1cb4:	2c f4       	brge	.+10     	; 0x1cc0 <Ultrasonic_readDistance+0x72>
		__ticks = 1;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
    1cbe:	3f c0       	rjmp	.+126    	; 0x1d3e <Ultrasonic_readDistance+0xf0>
	else if (__tmp > 65535)
    1cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc2:	78 85       	ldd	r23, Y+8	; 0x08
    1cc4:	89 85       	ldd	r24, Y+9	; 0x09
    1cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	3f ef       	ldi	r19, 0xFF	; 255
    1ccc:	4f e7       	ldi	r20, 0x7F	; 127
    1cce:	57 e4       	ldi	r21, 0x47	; 71
    1cd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cd4:	18 16       	cp	r1, r24
    1cd6:	4c f5       	brge	.+82     	; 0x1d2a <Ultrasonic_readDistance+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e2       	ldi	r20, 0x20	; 32
    1ce6:	51 e4       	ldi	r21, 0x41	; 65
    1ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	8d 83       	std	Y+5, r24	; 0x05
    1d00:	0f c0       	rjmp	.+30     	; 0x1d20 <Ultrasonic_readDistance+0xd2>
    1d02:	80 e9       	ldi	r24, 0x90	; 144
    1d04:	91 e0       	ldi	r25, 0x01	; 1
    1d06:	9c 83       	std	Y+4, r25	; 0x04
    1d08:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <Ultrasonic_readDistance+0xc0>
    1d12:	9c 83       	std	Y+4, r25	; 0x04
    1d14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	69 f7       	brne	.-38     	; 0x1d02 <Ultrasonic_readDistance+0xb4>
    1d28:	14 c0       	rjmp	.+40     	; 0x1d52 <Ultrasonic_readDistance+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2c:	78 85       	ldd	r23, Y+8	; 0x08
    1d2e:	89 85       	ldd	r24, Y+9	; 0x09
    1d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	9a 83       	std	Y+2, r25	; 0x02
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <Ultrasonic_readDistance+0xfc>
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(200);// 3lshan el polling msh sh8al f3mlt delay 3lshan el cpu load
    distance=(uint16)(g_timeHigh / 117.6);
    1d52:	80 91 f3 01 	lds	r24, 0x01F3
    1d56:	90 91 f4 01 	lds	r25, 0x01F4
    1d5a:	cc 01       	movw	r24, r24
    1d5c:	a0 e0       	ldi	r26, 0x00	; 0
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	bc 01       	movw	r22, r24
    1d62:	cd 01       	movw	r24, r26
    1d64:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	bc 01       	movw	r22, r24
    1d6e:	cd 01       	movw	r24, r26
    1d70:	23 e3       	ldi	r18, 0x33	; 51
    1d72:	33 e3       	ldi	r19, 0x33	; 51
    1d74:	4b ee       	ldi	r20, 0xEB	; 235
    1d76:	52 e4       	ldi	r21, 0x42	; 66
    1d78:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	98 8b       	std	Y+16, r25	; 0x10
    1d8e:	8f 87       	std	Y+15, r24	; 0x0f

    return (distance+1);
    1d90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d92:	98 89       	ldd	r25, Y+16	; 0x10
    1d94:	01 96       	adiw	r24, 0x01	; 1
}
    1d96:	60 96       	adiw	r28, 0x10	; 16
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	08 95       	ret

00001da8 <Ultrasonic_edgeProcessing>:



void Ultrasonic_edgeProcessing(void)
{
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    1db0:	80 91 f2 01 	lds	r24, 0x01F2
    1db4:	8f 5f       	subi	r24, 0xFF	; 255
    1db6:	80 93 f2 01 	sts	0x01F2, r24
	if(g_edgeCount == 1)
    1dba:	80 91 f2 01 	lds	r24, 0x01F2
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	31 f4       	brne	.+12     	; 0x1dce <Ultrasonic_edgeProcessing+0x26>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */		ICU_clearTimerValue();
    1dc2:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <ICU_clearTimerValue>

		/* Detect falling edge */
		ICU_setEdgeDetectionType(FALLING);
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	0e 94 29 0b 	call	0x1652	; 0x1652 <ICU_setEdgeDetectionType>
    1dcc:	0d c0       	rjmp	.+26     	; 0x1de8 <Ultrasonic_edgeProcessing+0x40>
	}
	else if(g_edgeCount == 2)
    1dce:	80 91 f2 01 	lds	r24, 0x01F2
    1dd2:	82 30       	cpi	r24, 0x02	; 2
    1dd4:	49 f4       	brne	.+18     	; 0x1de8 <Ultrasonic_edgeProcessing+0x40>
	{
		/* Store the High time value */
		g_timeHigh = ICU_getInputCaptureValue();
    1dd6:	0e 94 48 0b 	call	0x1690	; 0x1690 <ICU_getInputCaptureValue>
    1dda:	90 93 f4 01 	sts	0x01F4, r25
    1dde:	80 93 f3 01 	sts	0x01F3, r24
		/* Detect rising edge */
		ICU_setEdgeDetectionType(RAISING);
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	0e 94 29 0b 	call	0x1652	; 0x1652 <ICU_setEdgeDetectionType>

	}

}
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	2e 97       	sbiw	r28, 0x0e	; 14
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	61 e0       	ldi	r22, 0x01	; 1
    1e06:	41 e0       	ldi	r20, 0x01	; 1
    1e08:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	62 e0       	ldi	r22, 0x02	; 2
    1e10:	41 e0       	ldi	r20, 0x01	; 1
    1e12:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_setupPinDirection>
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	a0 ea       	ldi	r26, 0xA0	; 160
    1e1c:	b1 e4       	ldi	r27, 0x41	; 65
    1e1e:	8b 87       	std	Y+11, r24	; 0x0b
    1e20:	9c 87       	std	Y+12, r25	; 0x0c
    1e22:	ad 87       	std	Y+13, r26	; 0x0d
    1e24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	4a e7       	ldi	r20, 0x7A	; 122
    1e34:	55 e4       	ldi	r21, 0x45	; 69
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	8f 83       	std	Y+7, r24	; 0x07
    1e40:	98 87       	std	Y+8, r25	; 0x08
    1e42:	a9 87       	std	Y+9, r26	; 0x09
    1e44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e8       	ldi	r20, 0x80	; 128
    1e54:	5f e3       	ldi	r21, 0x3F	; 63
    1e56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e5a:	88 23       	and	r24, r24
    1e5c:	2c f4       	brge	.+10     	; 0x1e68 <LCD_init+0x7a>
		__ticks = 1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9e 83       	std	Y+6, r25	; 0x06
    1e64:	8d 83       	std	Y+5, r24	; 0x05
    1e66:	3f c0       	rjmp	.+126    	; 0x1ee6 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	4f e7       	ldi	r20, 0x7F	; 127
    1e76:	57 e4       	ldi	r21, 0x47	; 71
    1e78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e7c:	18 16       	cp	r1, r24
    1e7e:	4c f5       	brge	.+82     	; 0x1ed2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e2       	ldi	r20, 0x20	; 32
    1e8e:	51 e4       	ldi	r21, 0x41	; 65
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
    1ea8:	0f c0       	rjmp	.+30     	; 0x1ec8 <LCD_init+0xda>
    1eaa:	80 e9       	ldi	r24, 0x90	; 144
    1eac:	91 e0       	ldi	r25, 0x01	; 1
    1eae:	9c 83       	std	Y+4, r25	; 0x04
    1eb0:	8b 83       	std	Y+3, r24	; 0x03
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <LCD_init+0xc8>
    1eba:	9c 83       	std	Y+4, r25	; 0x04
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	9e 83       	std	Y+6, r25	; 0x06
    1ec6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	69 f7       	brne	.-38     	; 0x1eaa <LCD_init+0xbc>
    1ed0:	14 c0       	rjmp	.+40     	; 0x1efa <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed4:	78 85       	ldd	r23, Y+8	; 0x08
    1ed6:	89 85       	ldd	r24, Y+9	; 0x09
    1ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    1ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eea:	9a 83       	std	Y+2, r25	; 0x02
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <LCD_init+0x104>
    1ef6:	9a 83       	std	Y+2, r25	; 0x02
    1ef8:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	63 e0       	ldi	r22, 0x03	; 3
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	64 e0       	ldi	r22, 0x04	; 4
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	65 e0       	ldi	r22, 0x05	; 5
    1f12:	41 e0       	ldi	r20, 0x01	; 1
    1f14:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	66 e0       	ldi	r22, 0x06	; 6
    1f1c:	41 e0       	ldi	r20, 0x01	; 1
    1f1e:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1f22:	83 e3       	ldi	r24, 0x33	; 51
    1f24:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1f28:	82 e3       	ldi	r24, 0x32	; 50
    1f2a:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1f2e:	88 e2       	ldi	r24, 0x28	; 40
    1f30:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f34:	8c e0       	ldi	r24, 0x0C	; 12
    1f36:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_sendCommand>
}
    1f40:	2e 96       	adiw	r28, 0x0e	; 14
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	f8 94       	cli
    1f46:	de bf       	out	0x3e, r29	; 62
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	cd bf       	out	0x3d, r28	; 61
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1f52:	0f 93       	push	r16
    1f54:	1f 93       	push	r17
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	c3 56       	subi	r28, 0x63	; 99
    1f60:	d0 40       	sbci	r29, 0x00	; 0
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	ed 59       	subi	r30, 0x9D	; 157
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	61 e0       	ldi	r22, 0x01	; 1
    1f78:	40 e0       	ldi	r20, 0x00	; 0
    1f7a:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e1 5a       	subi	r30, 0xA1	; 161
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	a0 e8       	ldi	r26, 0x80	; 128
    1f8a:	bf e3       	ldi	r27, 0x3F	; 63
    1f8c:	80 83       	st	Z, r24
    1f8e:	91 83       	std	Z+1, r25	; 0x01
    1f90:	a2 83       	std	Z+2, r26	; 0x02
    1f92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f94:	8e 01       	movw	r16, r28
    1f96:	05 5a       	subi	r16, 0xA5	; 165
    1f98:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	e1 5a       	subi	r30, 0xA1	; 161
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	60 81       	ld	r22, Z
    1fa2:	71 81       	ldd	r23, Z+1	; 0x01
    1fa4:	82 81       	ldd	r24, Z+2	; 0x02
    1fa6:	93 81       	ldd	r25, Z+3	; 0x03
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	4a e7       	ldi	r20, 0x7A	; 122
    1fae:	55 e4       	ldi	r21, 0x45	; 69
    1fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	f8 01       	movw	r30, r16
    1fba:	80 83       	st	Z, r24
    1fbc:	91 83       	std	Z+1, r25	; 0x01
    1fbe:	a2 83       	std	Z+2, r26	; 0x02
    1fc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	e5 5a       	subi	r30, 0xA5	; 165
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	60 81       	ld	r22, Z
    1fca:	71 81       	ldd	r23, Z+1	; 0x01
    1fcc:	82 81       	ldd	r24, Z+2	; 0x02
    1fce:	93 81       	ldd	r25, Z+3	; 0x03
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e8       	ldi	r20, 0x80	; 128
    1fd6:	5f e3       	ldi	r21, 0x3F	; 63
    1fd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fdc:	88 23       	and	r24, r24
    1fde:	44 f4       	brge	.+16     	; 0x1ff0 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e7 5a       	subi	r30, 0xA7	; 167
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	91 83       	std	Z+1, r25	; 0x01
    1fec:	80 83       	st	Z, r24
    1fee:	64 c0       	rjmp	.+200    	; 0x20b8 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e5 5a       	subi	r30, 0xA5	; 165
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	60 81       	ld	r22, Z
    1ff8:	71 81       	ldd	r23, Z+1	; 0x01
    1ffa:	82 81       	ldd	r24, Z+2	; 0x02
    1ffc:	93 81       	ldd	r25, Z+3	; 0x03
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	3f ef       	ldi	r19, 0xFF	; 255
    2002:	4f e7       	ldi	r20, 0x7F	; 127
    2004:	57 e4       	ldi	r21, 0x47	; 71
    2006:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    200a:	18 16       	cp	r1, r24
    200c:	0c f0       	brlt	.+2      	; 0x2010 <LCD_sendCommand+0xbe>
    200e:	43 c0       	rjmp	.+134    	; 0x2096 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2010:	fe 01       	movw	r30, r28
    2012:	e1 5a       	subi	r30, 0xA1	; 161
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	60 81       	ld	r22, Z
    2018:	71 81       	ldd	r23, Z+1	; 0x01
    201a:	82 81       	ldd	r24, Z+2	; 0x02
    201c:	93 81       	ldd	r25, Z+3	; 0x03
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e2       	ldi	r20, 0x20	; 32
    2024:	51 e4       	ldi	r21, 0x41	; 65
    2026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	8e 01       	movw	r16, r28
    2030:	07 5a       	subi	r16, 0xA7	; 167
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	f8 01       	movw	r30, r16
    2042:	91 83       	std	Z+1, r25	; 0x01
    2044:	80 83       	st	Z, r24
    2046:	1f c0       	rjmp	.+62     	; 0x2086 <LCD_sendCommand+0x134>
    2048:	fe 01       	movw	r30, r28
    204a:	e9 5a       	subi	r30, 0xA9	; 169
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 e9       	ldi	r24, 0x90	; 144
    2050:	91 e0       	ldi	r25, 0x01	; 1
    2052:	91 83       	std	Z+1, r25	; 0x01
    2054:	80 83       	st	Z, r24
    2056:	fe 01       	movw	r30, r28
    2058:	e9 5a       	subi	r30, 0xA9	; 169
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 81       	ld	r24, Z
    205e:	91 81       	ldd	r25, Z+1	; 0x01
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <LCD_sendCommand+0x10e>
    2064:	fe 01       	movw	r30, r28
    2066:	e9 5a       	subi	r30, 0xA9	; 169
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	91 83       	std	Z+1, r25	; 0x01
    206c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206e:	de 01       	movw	r26, r28
    2070:	a7 5a       	subi	r26, 0xA7	; 167
    2072:	bf 4f       	sbci	r27, 0xFF	; 255
    2074:	fe 01       	movw	r30, r28
    2076:	e7 5a       	subi	r30, 0xA7	; 167
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	80 81       	ld	r24, Z
    207c:	91 81       	ldd	r25, Z+1	; 0x01
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	11 96       	adiw	r26, 0x01	; 1
    2082:	9c 93       	st	X, r25
    2084:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2086:	fe 01       	movw	r30, r28
    2088:	e7 5a       	subi	r30, 0xA7	; 167
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	80 81       	ld	r24, Z
    208e:	91 81       	ldd	r25, Z+1	; 0x01
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	d1 f6       	brne	.-76     	; 0x2048 <LCD_sendCommand+0xf6>
    2094:	27 c0       	rjmp	.+78     	; 0x20e4 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2096:	8e 01       	movw	r16, r28
    2098:	07 5a       	subi	r16, 0xA7	; 167
    209a:	1f 4f       	sbci	r17, 0xFF	; 255
    209c:	fe 01       	movw	r30, r28
    209e:	e5 5a       	subi	r30, 0xA5	; 165
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	60 81       	ld	r22, Z
    20a4:	71 81       	ldd	r23, Z+1	; 0x01
    20a6:	82 81       	ldd	r24, Z+2	; 0x02
    20a8:	93 81       	ldd	r25, Z+3	; 0x03
    20aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	f8 01       	movw	r30, r16
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	80 83       	st	Z, r24
    20b8:	de 01       	movw	r26, r28
    20ba:	ab 5a       	subi	r26, 0xAB	; 171
    20bc:	bf 4f       	sbci	r27, 0xFF	; 255
    20be:	fe 01       	movw	r30, r28
    20c0:	e7 5a       	subi	r30, 0xA7	; 167
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	80 81       	ld	r24, Z
    20c6:	91 81       	ldd	r25, Z+1	; 0x01
    20c8:	8d 93       	st	X+, r24
    20ca:	9c 93       	st	X, r25
    20cc:	fe 01       	movw	r30, r28
    20ce:	eb 5a       	subi	r30, 0xAB	; 171
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	80 81       	ld	r24, Z
    20d4:	91 81       	ldd	r25, Z+1	; 0x01
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <LCD_sendCommand+0x184>
    20da:	fe 01       	movw	r30, r28
    20dc:	eb 5a       	subi	r30, 0xAB	; 171
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	91 83       	std	Z+1, r25	; 0x01
    20e2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	62 e0       	ldi	r22, 0x02	; 2
    20e8:	41 e0       	ldi	r20, 0x01	; 1
    20ea:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
    20ee:	fe 01       	movw	r30, r28
    20f0:	ef 5a       	subi	r30, 0xAF	; 175
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a0 e8       	ldi	r26, 0x80	; 128
    20fa:	bf e3       	ldi	r27, 0x3F	; 63
    20fc:	80 83       	st	Z, r24
    20fe:	91 83       	std	Z+1, r25	; 0x01
    2100:	a2 83       	std	Z+2, r26	; 0x02
    2102:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2104:	8e 01       	movw	r16, r28
    2106:	03 5b       	subi	r16, 0xB3	; 179
    2108:	1f 4f       	sbci	r17, 0xFF	; 255
    210a:	fe 01       	movw	r30, r28
    210c:	ef 5a       	subi	r30, 0xAF	; 175
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	60 81       	ld	r22, Z
    2112:	71 81       	ldd	r23, Z+1	; 0x01
    2114:	82 81       	ldd	r24, Z+2	; 0x02
    2116:	93 81       	ldd	r25, Z+3	; 0x03
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	4a e7       	ldi	r20, 0x7A	; 122
    211e:	55 e4       	ldi	r21, 0x45	; 69
    2120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	f8 01       	movw	r30, r16
    212a:	80 83       	st	Z, r24
    212c:	91 83       	std	Z+1, r25	; 0x01
    212e:	a2 83       	std	Z+2, r26	; 0x02
    2130:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2132:	fe 01       	movw	r30, r28
    2134:	e3 5b       	subi	r30, 0xB3	; 179
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	60 81       	ld	r22, Z
    213a:	71 81       	ldd	r23, Z+1	; 0x01
    213c:	82 81       	ldd	r24, Z+2	; 0x02
    213e:	93 81       	ldd	r25, Z+3	; 0x03
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e8       	ldi	r20, 0x80	; 128
    2146:	5f e3       	ldi	r21, 0x3F	; 63
    2148:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    214c:	88 23       	and	r24, r24
    214e:	44 f4       	brge	.+16     	; 0x2160 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2150:	fe 01       	movw	r30, r28
    2152:	e5 5b       	subi	r30, 0xB5	; 181
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	91 83       	std	Z+1, r25	; 0x01
    215c:	80 83       	st	Z, r24
    215e:	64 c0       	rjmp	.+200    	; 0x2228 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2160:	fe 01       	movw	r30, r28
    2162:	e3 5b       	subi	r30, 0xB3	; 179
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	60 81       	ld	r22, Z
    2168:	71 81       	ldd	r23, Z+1	; 0x01
    216a:	82 81       	ldd	r24, Z+2	; 0x02
    216c:	93 81       	ldd	r25, Z+3	; 0x03
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	3f ef       	ldi	r19, 0xFF	; 255
    2172:	4f e7       	ldi	r20, 0x7F	; 127
    2174:	57 e4       	ldi	r21, 0x47	; 71
    2176:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    217a:	18 16       	cp	r1, r24
    217c:	0c f0       	brlt	.+2      	; 0x2180 <LCD_sendCommand+0x22e>
    217e:	43 c0       	rjmp	.+134    	; 0x2206 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2180:	fe 01       	movw	r30, r28
    2182:	ef 5a       	subi	r30, 0xAF	; 175
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	60 81       	ld	r22, Z
    2188:	71 81       	ldd	r23, Z+1	; 0x01
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e2       	ldi	r20, 0x20	; 32
    2194:	51 e4       	ldi	r21, 0x41	; 65
    2196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	8e 01       	movw	r16, r28
    21a0:	05 5b       	subi	r16, 0xB5	; 181
    21a2:	1f 4f       	sbci	r17, 0xFF	; 255
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	f8 01       	movw	r30, r16
    21b2:	91 83       	std	Z+1, r25	; 0x01
    21b4:	80 83       	st	Z, r24
    21b6:	1f c0       	rjmp	.+62     	; 0x21f6 <LCD_sendCommand+0x2a4>
    21b8:	fe 01       	movw	r30, r28
    21ba:	e7 5b       	subi	r30, 0xB7	; 183
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	80 e9       	ldi	r24, 0x90	; 144
    21c0:	91 e0       	ldi	r25, 0x01	; 1
    21c2:	91 83       	std	Z+1, r25	; 0x01
    21c4:	80 83       	st	Z, r24
    21c6:	fe 01       	movw	r30, r28
    21c8:	e7 5b       	subi	r30, 0xB7	; 183
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	80 81       	ld	r24, Z
    21ce:	91 81       	ldd	r25, Z+1	; 0x01
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <LCD_sendCommand+0x27e>
    21d4:	fe 01       	movw	r30, r28
    21d6:	e7 5b       	subi	r30, 0xB7	; 183
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21de:	de 01       	movw	r26, r28
    21e0:	a5 5b       	subi	r26, 0xB5	; 181
    21e2:	bf 4f       	sbci	r27, 0xFF	; 255
    21e4:	fe 01       	movw	r30, r28
    21e6:	e5 5b       	subi	r30, 0xB5	; 181
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	80 81       	ld	r24, Z
    21ec:	91 81       	ldd	r25, Z+1	; 0x01
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	11 96       	adiw	r26, 0x01	; 1
    21f2:	9c 93       	st	X, r25
    21f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f6:	fe 01       	movw	r30, r28
    21f8:	e5 5b       	subi	r30, 0xB5	; 181
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	80 81       	ld	r24, Z
    21fe:	91 81       	ldd	r25, Z+1	; 0x01
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	d1 f6       	brne	.-76     	; 0x21b8 <LCD_sendCommand+0x266>
    2204:	27 c0       	rjmp	.+78     	; 0x2254 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2206:	8e 01       	movw	r16, r28
    2208:	05 5b       	subi	r16, 0xB5	; 181
    220a:	1f 4f       	sbci	r17, 0xFF	; 255
    220c:	fe 01       	movw	r30, r28
    220e:	e3 5b       	subi	r30, 0xB3	; 179
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	60 81       	ld	r22, Z
    2214:	71 81       	ldd	r23, Z+1	; 0x01
    2216:	82 81       	ldd	r24, Z+2	; 0x02
    2218:	93 81       	ldd	r25, Z+3	; 0x03
    221a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	f8 01       	movw	r30, r16
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	80 83       	st	Z, r24
    2228:	de 01       	movw	r26, r28
    222a:	a9 5b       	subi	r26, 0xB9	; 185
    222c:	bf 4f       	sbci	r27, 0xFF	; 255
    222e:	fe 01       	movw	r30, r28
    2230:	e5 5b       	subi	r30, 0xB5	; 181
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	8d 93       	st	X+, r24
    223a:	9c 93       	st	X, r25
    223c:	fe 01       	movw	r30, r28
    223e:	e9 5b       	subi	r30, 0xB9	; 185
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 81       	ld	r24, Z
    2244:	91 81       	ldd	r25, Z+1	; 0x01
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	f1 f7       	brne	.-4      	; 0x2246 <LCD_sendCommand+0x2f4>
    224a:	fe 01       	movw	r30, r28
    224c:	e9 5b       	subi	r30, 0xB9	; 185
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	91 83       	std	Z+1, r25	; 0x01
    2252:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2254:	fe 01       	movw	r30, r28
    2256:	ed 59       	subi	r30, 0x9D	; 157
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	80 81       	ld	r24, Z
    225c:	88 2f       	mov	r24, r24
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	80 71       	andi	r24, 0x10	; 16
    2262:	90 70       	andi	r25, 0x00	; 0
    2264:	95 95       	asr	r25
    2266:	87 95       	ror	r24
    2268:	95 95       	asr	r25
    226a:	87 95       	ror	r24
    226c:	95 95       	asr	r25
    226e:	87 95       	ror	r24
    2270:	95 95       	asr	r25
    2272:	87 95       	ror	r24
    2274:	98 2f       	mov	r25, r24
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	63 e0       	ldi	r22, 0x03	; 3
    227a:	49 2f       	mov	r20, r25
    227c:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2280:	fe 01       	movw	r30, r28
    2282:	ed 59       	subi	r30, 0x9D	; 157
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	80 81       	ld	r24, Z
    2288:	88 2f       	mov	r24, r24
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	80 72       	andi	r24, 0x20	; 32
    228e:	90 70       	andi	r25, 0x00	; 0
    2290:	95 95       	asr	r25
    2292:	87 95       	ror	r24
    2294:	95 95       	asr	r25
    2296:	87 95       	ror	r24
    2298:	95 95       	asr	r25
    229a:	87 95       	ror	r24
    229c:	95 95       	asr	r25
    229e:	87 95       	ror	r24
    22a0:	95 95       	asr	r25
    22a2:	87 95       	ror	r24
    22a4:	98 2f       	mov	r25, r24
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	64 e0       	ldi	r22, 0x04	; 4
    22aa:	49 2f       	mov	r20, r25
    22ac:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    22b0:	fe 01       	movw	r30, r28
    22b2:	ed 59       	subi	r30, 0x9D	; 157
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	80 81       	ld	r24, Z
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	80 74       	andi	r24, 0x40	; 64
    22be:	90 70       	andi	r25, 0x00	; 0
    22c0:	08 2e       	mov	r0, r24
    22c2:	89 2f       	mov	r24, r25
    22c4:	00 0c       	add	r0, r0
    22c6:	88 1f       	adc	r24, r24
    22c8:	99 0b       	sbc	r25, r25
    22ca:	00 0c       	add	r0, r0
    22cc:	88 1f       	adc	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	98 2f       	mov	r25, r24
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	65 e0       	ldi	r22, 0x05	; 5
    22d6:	49 2f       	mov	r20, r25
    22d8:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    22dc:	fe 01       	movw	r30, r28
    22de:	ed 59       	subi	r30, 0x9D	; 157
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	80 81       	ld	r24, Z
    22e4:	98 2f       	mov	r25, r24
    22e6:	99 1f       	adc	r25, r25
    22e8:	99 27       	eor	r25, r25
    22ea:	99 1f       	adc	r25, r25
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	66 e0       	ldi	r22, 0x06	; 6
    22f0:	49 2f       	mov	r20, r25
    22f2:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
    22f6:	fe 01       	movw	r30, r28
    22f8:	ed 5b       	subi	r30, 0xBD	; 189
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	a0 e8       	ldi	r26, 0x80	; 128
    2302:	bf e3       	ldi	r27, 0x3F	; 63
    2304:	80 83       	st	Z, r24
    2306:	91 83       	std	Z+1, r25	; 0x01
    2308:	a2 83       	std	Z+2, r26	; 0x02
    230a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230c:	8e 01       	movw	r16, r28
    230e:	01 5c       	subi	r16, 0xC1	; 193
    2310:	1f 4f       	sbci	r17, 0xFF	; 255
    2312:	fe 01       	movw	r30, r28
    2314:	ed 5b       	subi	r30, 0xBD	; 189
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	60 81       	ld	r22, Z
    231a:	71 81       	ldd	r23, Z+1	; 0x01
    231c:	82 81       	ldd	r24, Z+2	; 0x02
    231e:	93 81       	ldd	r25, Z+3	; 0x03
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	4a e7       	ldi	r20, 0x7A	; 122
    2326:	55 e4       	ldi	r21, 0x45	; 69
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	f8 01       	movw	r30, r16
    2332:	80 83       	st	Z, r24
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	a2 83       	std	Z+2, r26	; 0x02
    2338:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    233a:	fe 01       	movw	r30, r28
    233c:	ff 96       	adiw	r30, 0x3f	; 63
    233e:	60 81       	ld	r22, Z
    2340:	71 81       	ldd	r23, Z+1	; 0x01
    2342:	82 81       	ldd	r24, Z+2	; 0x02
    2344:	93 81       	ldd	r25, Z+3	; 0x03
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	40 e8       	ldi	r20, 0x80	; 128
    234c:	5f e3       	ldi	r21, 0x3F	; 63
    234e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2352:	88 23       	and	r24, r24
    2354:	2c f4       	brge	.+10     	; 0x2360 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	9e af       	std	Y+62, r25	; 0x3e
    235c:	8d af       	std	Y+61, r24	; 0x3d
    235e:	46 c0       	rjmp	.+140    	; 0x23ec <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2360:	fe 01       	movw	r30, r28
    2362:	ff 96       	adiw	r30, 0x3f	; 63
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	3f ef       	ldi	r19, 0xFF	; 255
    2370:	4f e7       	ldi	r20, 0x7F	; 127
    2372:	57 e4       	ldi	r21, 0x47	; 71
    2374:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2378:	18 16       	cp	r1, r24
    237a:	64 f5       	brge	.+88     	; 0x23d4 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237c:	fe 01       	movw	r30, r28
    237e:	ed 5b       	subi	r30, 0xBD	; 189
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	60 81       	ld	r22, Z
    2384:	71 81       	ldd	r23, Z+1	; 0x01
    2386:	82 81       	ldd	r24, Z+2	; 0x02
    2388:	93 81       	ldd	r25, Z+3	; 0x03
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e2       	ldi	r20, 0x20	; 32
    2390:	51 e4       	ldi	r21, 0x41	; 65
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9e af       	std	Y+62, r25	; 0x3e
    23a8:	8d af       	std	Y+61, r24	; 0x3d
    23aa:	0f c0       	rjmp	.+30     	; 0x23ca <LCD_sendCommand+0x478>
    23ac:	80 e9       	ldi	r24, 0x90	; 144
    23ae:	91 e0       	ldi	r25, 0x01	; 1
    23b0:	9c af       	std	Y+60, r25	; 0x3c
    23b2:	8b af       	std	Y+59, r24	; 0x3b
    23b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    23b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <LCD_sendCommand+0x466>
    23bc:	9c af       	std	Y+60, r25	; 0x3c
    23be:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    23c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	9e af       	std	Y+62, r25	; 0x3e
    23c8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    23cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	69 f7       	brne	.-38     	; 0x23ac <LCD_sendCommand+0x45a>
    23d2:	16 c0       	rjmp	.+44     	; 0x2400 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d4:	fe 01       	movw	r30, r28
    23d6:	ff 96       	adiw	r30, 0x3f	; 63
    23d8:	60 81       	ld	r22, Z
    23da:	71 81       	ldd	r23, Z+1	; 0x01
    23dc:	82 81       	ldd	r24, Z+2	; 0x02
    23de:	93 81       	ldd	r25, Z+3	; 0x03
    23e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9e af       	std	Y+62, r25	; 0x3e
    23ea:	8d af       	std	Y+61, r24	; 0x3d
    23ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    23ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    23f0:	9a af       	std	Y+58, r25	; 0x3a
    23f2:	89 af       	std	Y+57, r24	; 0x39
    23f4:	89 ad       	ldd	r24, Y+57	; 0x39
    23f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <LCD_sendCommand+0x4a6>
    23fc:	9a af       	std	Y+58, r25	; 0x3a
    23fe:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	62 e0       	ldi	r22, 0x02	; 2
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	a0 e8       	ldi	r26, 0x80	; 128
    2410:	bf e3       	ldi	r27, 0x3F	; 63
    2412:	8d ab       	std	Y+53, r24	; 0x35
    2414:	9e ab       	std	Y+54, r25	; 0x36
    2416:	af ab       	std	Y+55, r26	; 0x37
    2418:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241a:	6d a9       	ldd	r22, Y+53	; 0x35
    241c:	7e a9       	ldd	r23, Y+54	; 0x36
    241e:	8f a9       	ldd	r24, Y+55	; 0x37
    2420:	98 ad       	ldd	r25, Y+56	; 0x38
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	4a e7       	ldi	r20, 0x7A	; 122
    2428:	55 e4       	ldi	r21, 0x45	; 69
    242a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	89 ab       	std	Y+49, r24	; 0x31
    2434:	9a ab       	std	Y+50, r25	; 0x32
    2436:	ab ab       	std	Y+51, r26	; 0x33
    2438:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    243a:	69 a9       	ldd	r22, Y+49	; 0x31
    243c:	7a a9       	ldd	r23, Y+50	; 0x32
    243e:	8b a9       	ldd	r24, Y+51	; 0x33
    2440:	9c a9       	ldd	r25, Y+52	; 0x34
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e8       	ldi	r20, 0x80	; 128
    2448:	5f e3       	ldi	r21, 0x3F	; 63
    244a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    244e:	88 23       	and	r24, r24
    2450:	2c f4       	brge	.+10     	; 0x245c <LCD_sendCommand+0x50a>
		__ticks = 1;
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	98 ab       	std	Y+48, r25	; 0x30
    2458:	8f a7       	std	Y+47, r24	; 0x2f
    245a:	3f c0       	rjmp	.+126    	; 0x24da <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    245c:	69 a9       	ldd	r22, Y+49	; 0x31
    245e:	7a a9       	ldd	r23, Y+50	; 0x32
    2460:	8b a9       	ldd	r24, Y+51	; 0x33
    2462:	9c a9       	ldd	r25, Y+52	; 0x34
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	3f ef       	ldi	r19, 0xFF	; 255
    2468:	4f e7       	ldi	r20, 0x7F	; 127
    246a:	57 e4       	ldi	r21, 0x47	; 71
    246c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2470:	18 16       	cp	r1, r24
    2472:	4c f5       	brge	.+82     	; 0x24c6 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2474:	6d a9       	ldd	r22, Y+53	; 0x35
    2476:	7e a9       	ldd	r23, Y+54	; 0x36
    2478:	8f a9       	ldd	r24, Y+55	; 0x37
    247a:	98 ad       	ldd	r25, Y+56	; 0x38
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e2       	ldi	r20, 0x20	; 32
    2482:	51 e4       	ldi	r21, 0x41	; 65
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	bc 01       	movw	r22, r24
    248e:	cd 01       	movw	r24, r26
    2490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	98 ab       	std	Y+48, r25	; 0x30
    249a:	8f a7       	std	Y+47, r24	; 0x2f
    249c:	0f c0       	rjmp	.+30     	; 0x24bc <LCD_sendCommand+0x56a>
    249e:	80 e9       	ldi	r24, 0x90	; 144
    24a0:	91 e0       	ldi	r25, 0x01	; 1
    24a2:	9e a7       	std	Y+46, r25	; 0x2e
    24a4:	8d a7       	std	Y+45, r24	; 0x2d
    24a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    24a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <LCD_sendCommand+0x558>
    24ae:	9e a7       	std	Y+46, r25	; 0x2e
    24b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b4:	98 a9       	ldd	r25, Y+48	; 0x30
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	98 ab       	std	Y+48, r25	; 0x30
    24ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24be:	98 a9       	ldd	r25, Y+48	; 0x30
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	69 f7       	brne	.-38     	; 0x249e <LCD_sendCommand+0x54c>
    24c4:	14 c0       	rjmp	.+40     	; 0x24ee <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c6:	69 a9       	ldd	r22, Y+49	; 0x31
    24c8:	7a a9       	ldd	r23, Y+50	; 0x32
    24ca:	8b a9       	ldd	r24, Y+51	; 0x33
    24cc:	9c a9       	ldd	r25, Y+52	; 0x34
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	98 ab       	std	Y+48, r25	; 0x30
    24d8:	8f a7       	std	Y+47, r24	; 0x2f
    24da:	8f a5       	ldd	r24, Y+47	; 0x2f
    24dc:	98 a9       	ldd	r25, Y+48	; 0x30
    24de:	9c a7       	std	Y+44, r25	; 0x2c
    24e0:	8b a7       	std	Y+43, r24	; 0x2b
    24e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    24e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	f1 f7       	brne	.-4      	; 0x24e6 <LCD_sendCommand+0x594>
    24ea:	9c a7       	std	Y+44, r25	; 0x2c
    24ec:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	62 e0       	ldi	r22, 0x02	; 2
    24f2:	41 e0       	ldi	r20, 0x01	; 1
    24f4:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a0 e8       	ldi	r26, 0x80	; 128
    24fe:	bf e3       	ldi	r27, 0x3F	; 63
    2500:	8f a3       	std	Y+39, r24	; 0x27
    2502:	98 a7       	std	Y+40, r25	; 0x28
    2504:	a9 a7       	std	Y+41, r26	; 0x29
    2506:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2508:	6f a1       	ldd	r22, Y+39	; 0x27
    250a:	78 a5       	ldd	r23, Y+40	; 0x28
    250c:	89 a5       	ldd	r24, Y+41	; 0x29
    250e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	4a e7       	ldi	r20, 0x7A	; 122
    2516:	55 e4       	ldi	r21, 0x45	; 69
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	8b a3       	std	Y+35, r24	; 0x23
    2522:	9c a3       	std	Y+36, r25	; 0x24
    2524:	ad a3       	std	Y+37, r26	; 0x25
    2526:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2528:	6b a1       	ldd	r22, Y+35	; 0x23
    252a:	7c a1       	ldd	r23, Y+36	; 0x24
    252c:	8d a1       	ldd	r24, Y+37	; 0x25
    252e:	9e a1       	ldd	r25, Y+38	; 0x26
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e8       	ldi	r20, 0x80	; 128
    2536:	5f e3       	ldi	r21, 0x3F	; 63
    2538:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    253c:	88 23       	and	r24, r24
    253e:	2c f4       	brge	.+10     	; 0x254a <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	9a a3       	std	Y+34, r25	; 0x22
    2546:	89 a3       	std	Y+33, r24	; 0x21
    2548:	3f c0       	rjmp	.+126    	; 0x25c8 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    254a:	6b a1       	ldd	r22, Y+35	; 0x23
    254c:	7c a1       	ldd	r23, Y+36	; 0x24
    254e:	8d a1       	ldd	r24, Y+37	; 0x25
    2550:	9e a1       	ldd	r25, Y+38	; 0x26
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	3f ef       	ldi	r19, 0xFF	; 255
    2556:	4f e7       	ldi	r20, 0x7F	; 127
    2558:	57 e4       	ldi	r21, 0x47	; 71
    255a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    255e:	18 16       	cp	r1, r24
    2560:	4c f5       	brge	.+82     	; 0x25b4 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2562:	6f a1       	ldd	r22, Y+39	; 0x27
    2564:	78 a5       	ldd	r23, Y+40	; 0x28
    2566:	89 a5       	ldd	r24, Y+41	; 0x29
    2568:	9a a5       	ldd	r25, Y+42	; 0x2a
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e2       	ldi	r20, 0x20	; 32
    2570:	51 e4       	ldi	r21, 0x41	; 65
    2572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	bc 01       	movw	r22, r24
    257c:	cd 01       	movw	r24, r26
    257e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	9a a3       	std	Y+34, r25	; 0x22
    2588:	89 a3       	std	Y+33, r24	; 0x21
    258a:	0f c0       	rjmp	.+30     	; 0x25aa <LCD_sendCommand+0x658>
    258c:	80 e9       	ldi	r24, 0x90	; 144
    258e:	91 e0       	ldi	r25, 0x01	; 1
    2590:	98 a3       	std	Y+32, r25	; 0x20
    2592:	8f 8f       	std	Y+31, r24	; 0x1f
    2594:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2596:	98 a1       	ldd	r25, Y+32	; 0x20
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	f1 f7       	brne	.-4      	; 0x2598 <LCD_sendCommand+0x646>
    259c:	98 a3       	std	Y+32, r25	; 0x20
    259e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a0:	89 a1       	ldd	r24, Y+33	; 0x21
    25a2:	9a a1       	ldd	r25, Y+34	; 0x22
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	9a a3       	std	Y+34, r25	; 0x22
    25a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25aa:	89 a1       	ldd	r24, Y+33	; 0x21
    25ac:	9a a1       	ldd	r25, Y+34	; 0x22
    25ae:	00 97       	sbiw	r24, 0x00	; 0
    25b0:	69 f7       	brne	.-38     	; 0x258c <LCD_sendCommand+0x63a>
    25b2:	14 c0       	rjmp	.+40     	; 0x25dc <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b4:	6b a1       	ldd	r22, Y+35	; 0x23
    25b6:	7c a1       	ldd	r23, Y+36	; 0x24
    25b8:	8d a1       	ldd	r24, Y+37	; 0x25
    25ba:	9e a1       	ldd	r25, Y+38	; 0x26
    25bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	9a a3       	std	Y+34, r25	; 0x22
    25c6:	89 a3       	std	Y+33, r24	; 0x21
    25c8:	89 a1       	ldd	r24, Y+33	; 0x21
    25ca:	9a a1       	ldd	r25, Y+34	; 0x22
    25cc:	9e 8f       	std	Y+30, r25	; 0x1e
    25ce:	8d 8f       	std	Y+29, r24	; 0x1d
    25d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <LCD_sendCommand+0x682>
    25d8:	9e 8f       	std	Y+30, r25	; 0x1e
    25da:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    25dc:	fe 01       	movw	r30, r28
    25de:	ed 59       	subi	r30, 0x9D	; 157
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	80 81       	ld	r24, Z
    25e4:	98 2f       	mov	r25, r24
    25e6:	91 70       	andi	r25, 0x01	; 1
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	63 e0       	ldi	r22, 0x03	; 3
    25ec:	49 2f       	mov	r20, r25
    25ee:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    25f2:	fe 01       	movw	r30, r28
    25f4:	ed 59       	subi	r30, 0x9D	; 157
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	80 81       	ld	r24, Z
    25fa:	88 2f       	mov	r24, r24
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	82 70       	andi	r24, 0x02	; 2
    2600:	90 70       	andi	r25, 0x00	; 0
    2602:	95 95       	asr	r25
    2604:	87 95       	ror	r24
    2606:	98 2f       	mov	r25, r24
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	64 e0       	ldi	r22, 0x04	; 4
    260c:	49 2f       	mov	r20, r25
    260e:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2612:	fe 01       	movw	r30, r28
    2614:	ed 59       	subi	r30, 0x9D	; 157
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	80 81       	ld	r24, Z
    261a:	88 2f       	mov	r24, r24
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	84 70       	andi	r24, 0x04	; 4
    2620:	90 70       	andi	r25, 0x00	; 0
    2622:	95 95       	asr	r25
    2624:	87 95       	ror	r24
    2626:	95 95       	asr	r25
    2628:	87 95       	ror	r24
    262a:	98 2f       	mov	r25, r24
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	65 e0       	ldi	r22, 0x05	; 5
    2630:	49 2f       	mov	r20, r25
    2632:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2636:	fe 01       	movw	r30, r28
    2638:	ed 59       	subi	r30, 0x9D	; 157
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	80 81       	ld	r24, Z
    263e:	88 2f       	mov	r24, r24
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	88 70       	andi	r24, 0x08	; 8
    2644:	90 70       	andi	r25, 0x00	; 0
    2646:	95 95       	asr	r25
    2648:	87 95       	ror	r24
    264a:	95 95       	asr	r25
    264c:	87 95       	ror	r24
    264e:	95 95       	asr	r25
    2650:	87 95       	ror	r24
    2652:	98 2f       	mov	r25, r24
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	66 e0       	ldi	r22, 0x06	; 6
    2658:	49 2f       	mov	r20, r25
    265a:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	a0 e8       	ldi	r26, 0x80	; 128
    2664:	bf e3       	ldi	r27, 0x3F	; 63
    2666:	89 8f       	std	Y+25, r24	; 0x19
    2668:	9a 8f       	std	Y+26, r25	; 0x1a
    266a:	ab 8f       	std	Y+27, r26	; 0x1b
    266c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    266e:	69 8d       	ldd	r22, Y+25	; 0x19
    2670:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2672:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2674:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	4a e7       	ldi	r20, 0x7A	; 122
    267c:	55 e4       	ldi	r21, 0x45	; 69
    267e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	8d 8b       	std	Y+21, r24	; 0x15
    2688:	9e 8b       	std	Y+22, r25	; 0x16
    268a:	af 8b       	std	Y+23, r26	; 0x17
    268c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    268e:	6d 89       	ldd	r22, Y+21	; 0x15
    2690:	7e 89       	ldd	r23, Y+22	; 0x16
    2692:	8f 89       	ldd	r24, Y+23	; 0x17
    2694:	98 8d       	ldd	r25, Y+24	; 0x18
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e8       	ldi	r20, 0x80	; 128
    269c:	5f e3       	ldi	r21, 0x3F	; 63
    269e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26a2:	88 23       	and	r24, r24
    26a4:	2c f4       	brge	.+10     	; 0x26b0 <LCD_sendCommand+0x75e>
		__ticks = 1;
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	9c 8b       	std	Y+20, r25	; 0x14
    26ac:	8b 8b       	std	Y+19, r24	; 0x13
    26ae:	3f c0       	rjmp	.+126    	; 0x272e <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    26b0:	6d 89       	ldd	r22, Y+21	; 0x15
    26b2:	7e 89       	ldd	r23, Y+22	; 0x16
    26b4:	8f 89       	ldd	r24, Y+23	; 0x17
    26b6:	98 8d       	ldd	r25, Y+24	; 0x18
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	3f ef       	ldi	r19, 0xFF	; 255
    26bc:	4f e7       	ldi	r20, 0x7F	; 127
    26be:	57 e4       	ldi	r21, 0x47	; 71
    26c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26c4:	18 16       	cp	r1, r24
    26c6:	4c f5       	brge	.+82     	; 0x271a <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c8:	69 8d       	ldd	r22, Y+25	; 0x19
    26ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e2       	ldi	r20, 0x20	; 32
    26d6:	51 e4       	ldi	r21, 0x41	; 65
    26d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	bc 01       	movw	r22, r24
    26e2:	cd 01       	movw	r24, r26
    26e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	9c 8b       	std	Y+20, r25	; 0x14
    26ee:	8b 8b       	std	Y+19, r24	; 0x13
    26f0:	0f c0       	rjmp	.+30     	; 0x2710 <LCD_sendCommand+0x7be>
    26f2:	80 e9       	ldi	r24, 0x90	; 144
    26f4:	91 e0       	ldi	r25, 0x01	; 1
    26f6:	9a 8b       	std	Y+18, r25	; 0x12
    26f8:	89 8b       	std	Y+17, r24	; 0x11
    26fa:	89 89       	ldd	r24, Y+17	; 0x11
    26fc:	9a 89       	ldd	r25, Y+18	; 0x12
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <LCD_sendCommand+0x7ac>
    2702:	9a 8b       	std	Y+18, r25	; 0x12
    2704:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2706:	8b 89       	ldd	r24, Y+19	; 0x13
    2708:	9c 89       	ldd	r25, Y+20	; 0x14
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	9c 8b       	std	Y+20, r25	; 0x14
    270e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2710:	8b 89       	ldd	r24, Y+19	; 0x13
    2712:	9c 89       	ldd	r25, Y+20	; 0x14
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	69 f7       	brne	.-38     	; 0x26f2 <LCD_sendCommand+0x7a0>
    2718:	14 c0       	rjmp	.+40     	; 0x2742 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271a:	6d 89       	ldd	r22, Y+21	; 0x15
    271c:	7e 89       	ldd	r23, Y+22	; 0x16
    271e:	8f 89       	ldd	r24, Y+23	; 0x17
    2720:	98 8d       	ldd	r25, Y+24	; 0x18
    2722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	9c 8b       	std	Y+20, r25	; 0x14
    272c:	8b 8b       	std	Y+19, r24	; 0x13
    272e:	8b 89       	ldd	r24, Y+19	; 0x13
    2730:	9c 89       	ldd	r25, Y+20	; 0x14
    2732:	98 8b       	std	Y+16, r25	; 0x10
    2734:	8f 87       	std	Y+15, r24	; 0x0f
    2736:	8f 85       	ldd	r24, Y+15	; 0x0f
    2738:	98 89       	ldd	r25, Y+16	; 0x10
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	f1 f7       	brne	.-4      	; 0x273a <LCD_sendCommand+0x7e8>
    273e:	98 8b       	std	Y+16, r25	; 0x10
    2740:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	62 e0       	ldi	r22, 0x02	; 2
    2746:	40 e0       	ldi	r20, 0x00	; 0
    2748:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	a0 e8       	ldi	r26, 0x80	; 128
    2752:	bf e3       	ldi	r27, 0x3F	; 63
    2754:	8b 87       	std	Y+11, r24	; 0x0b
    2756:	9c 87       	std	Y+12, r25	; 0x0c
    2758:	ad 87       	std	Y+13, r26	; 0x0d
    275a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275c:	6b 85       	ldd	r22, Y+11	; 0x0b
    275e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2760:	8d 85       	ldd	r24, Y+13	; 0x0d
    2762:	9e 85       	ldd	r25, Y+14	; 0x0e
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	4a e7       	ldi	r20, 0x7A	; 122
    276a:	55 e4       	ldi	r21, 0x45	; 69
    276c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	8f 83       	std	Y+7, r24	; 0x07
    2776:	98 87       	std	Y+8, r25	; 0x08
    2778:	a9 87       	std	Y+9, r26	; 0x09
    277a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    277c:	6f 81       	ldd	r22, Y+7	; 0x07
    277e:	78 85       	ldd	r23, Y+8	; 0x08
    2780:	89 85       	ldd	r24, Y+9	; 0x09
    2782:	9a 85       	ldd	r25, Y+10	; 0x0a
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e8       	ldi	r20, 0x80	; 128
    278a:	5f e3       	ldi	r21, 0x3F	; 63
    278c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2790:	88 23       	and	r24, r24
    2792:	2c f4       	brge	.+10     	; 0x279e <LCD_sendCommand+0x84c>
		__ticks = 1;
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	9e 83       	std	Y+6, r25	; 0x06
    279a:	8d 83       	std	Y+5, r24	; 0x05
    279c:	3f c0       	rjmp	.+126    	; 0x281c <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    279e:	6f 81       	ldd	r22, Y+7	; 0x07
    27a0:	78 85       	ldd	r23, Y+8	; 0x08
    27a2:	89 85       	ldd	r24, Y+9	; 0x09
    27a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	3f ef       	ldi	r19, 0xFF	; 255
    27aa:	4f e7       	ldi	r20, 0x7F	; 127
    27ac:	57 e4       	ldi	r21, 0x47	; 71
    27ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b2:	18 16       	cp	r1, r24
    27b4:	4c f5       	brge	.+82     	; 0x2808 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    27bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e2       	ldi	r20, 0x20	; 32
    27c4:	51 e4       	ldi	r21, 0x41	; 65
    27c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	bc 01       	movw	r22, r24
    27d0:	cd 01       	movw	r24, r26
    27d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	9e 83       	std	Y+6, r25	; 0x06
    27dc:	8d 83       	std	Y+5, r24	; 0x05
    27de:	0f c0       	rjmp	.+30     	; 0x27fe <LCD_sendCommand+0x8ac>
    27e0:	80 e9       	ldi	r24, 0x90	; 144
    27e2:	91 e0       	ldi	r25, 0x01	; 1
    27e4:	9c 83       	std	Y+4, r25	; 0x04
    27e6:	8b 83       	std	Y+3, r24	; 0x03
    27e8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ea:	9c 81       	ldd	r25, Y+4	; 0x04
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <LCD_sendCommand+0x89a>
    27f0:	9c 83       	std	Y+4, r25	; 0x04
    27f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f4:	8d 81       	ldd	r24, Y+5	; 0x05
    27f6:	9e 81       	ldd	r25, Y+6	; 0x06
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	9e 83       	std	Y+6, r25	; 0x06
    27fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2800:	9e 81       	ldd	r25, Y+6	; 0x06
    2802:	00 97       	sbiw	r24, 0x00	; 0
    2804:	69 f7       	brne	.-38     	; 0x27e0 <LCD_sendCommand+0x88e>
    2806:	14 c0       	rjmp	.+40     	; 0x2830 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2808:	6f 81       	ldd	r22, Y+7	; 0x07
    280a:	78 85       	ldd	r23, Y+8	; 0x08
    280c:	89 85       	ldd	r24, Y+9	; 0x09
    280e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	9e 83       	std	Y+6, r25	; 0x06
    281a:	8d 83       	std	Y+5, r24	; 0x05
    281c:	8d 81       	ldd	r24, Y+5	; 0x05
    281e:	9e 81       	ldd	r25, Y+6	; 0x06
    2820:	9a 83       	std	Y+2, r25	; 0x02
    2822:	89 83       	std	Y+1, r24	; 0x01
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	9a 81       	ldd	r25, Y+2	; 0x02
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <LCD_sendCommand+0x8d6>
    282c:	9a 83       	std	Y+2, r25	; 0x02
    282e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2830:	cd 59       	subi	r28, 0x9D	; 157
    2832:	df 4f       	sbci	r29, 0xFF	; 255
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	de bf       	out	0x3e, r29	; 62
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	cd bf       	out	0x3d, r28	; 61
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	1f 91       	pop	r17
    2844:	0f 91       	pop	r16
    2846:	08 95       	ret

00002848 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2848:	0f 93       	push	r16
    284a:	1f 93       	push	r17
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	c3 56       	subi	r28, 0x63	; 99
    2856:	d0 40       	sbci	r29, 0x00	; 0
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	fe 01       	movw	r30, r28
    2864:	ed 59       	subi	r30, 0x9D	; 157
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	61 e0       	ldi	r22, 0x01	; 1
    286e:	41 e0       	ldi	r20, 0x01	; 1
    2870:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
    2874:	fe 01       	movw	r30, r28
    2876:	e1 5a       	subi	r30, 0xA1	; 161
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	a0 e8       	ldi	r26, 0x80	; 128
    2880:	bf e3       	ldi	r27, 0x3F	; 63
    2882:	80 83       	st	Z, r24
    2884:	91 83       	std	Z+1, r25	; 0x01
    2886:	a2 83       	std	Z+2, r26	; 0x02
    2888:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288a:	8e 01       	movw	r16, r28
    288c:	05 5a       	subi	r16, 0xA5	; 165
    288e:	1f 4f       	sbci	r17, 0xFF	; 255
    2890:	fe 01       	movw	r30, r28
    2892:	e1 5a       	subi	r30, 0xA1	; 161
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	60 81       	ld	r22, Z
    2898:	71 81       	ldd	r23, Z+1	; 0x01
    289a:	82 81       	ldd	r24, Z+2	; 0x02
    289c:	93 81       	ldd	r25, Z+3	; 0x03
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	4a e7       	ldi	r20, 0x7A	; 122
    28a4:	55 e4       	ldi	r21, 0x45	; 69
    28a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	f8 01       	movw	r30, r16
    28b0:	80 83       	st	Z, r24
    28b2:	91 83       	std	Z+1, r25	; 0x01
    28b4:	a2 83       	std	Z+2, r26	; 0x02
    28b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28b8:	fe 01       	movw	r30, r28
    28ba:	e5 5a       	subi	r30, 0xA5	; 165
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	60 81       	ld	r22, Z
    28c0:	71 81       	ldd	r23, Z+1	; 0x01
    28c2:	82 81       	ldd	r24, Z+2	; 0x02
    28c4:	93 81       	ldd	r25, Z+3	; 0x03
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e8       	ldi	r20, 0x80	; 128
    28cc:	5f e3       	ldi	r21, 0x3F	; 63
    28ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28d2:	88 23       	and	r24, r24
    28d4:	44 f4       	brge	.+16     	; 0x28e6 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    28d6:	fe 01       	movw	r30, r28
    28d8:	e7 5a       	subi	r30, 0xA7	; 167
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	91 83       	std	Z+1, r25	; 0x01
    28e2:	80 83       	st	Z, r24
    28e4:	64 c0       	rjmp	.+200    	; 0x29ae <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    28e6:	fe 01       	movw	r30, r28
    28e8:	e5 5a       	subi	r30, 0xA5	; 165
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	60 81       	ld	r22, Z
    28ee:	71 81       	ldd	r23, Z+1	; 0x01
    28f0:	82 81       	ldd	r24, Z+2	; 0x02
    28f2:	93 81       	ldd	r25, Z+3	; 0x03
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	3f ef       	ldi	r19, 0xFF	; 255
    28f8:	4f e7       	ldi	r20, 0x7F	; 127
    28fa:	57 e4       	ldi	r21, 0x47	; 71
    28fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2900:	18 16       	cp	r1, r24
    2902:	0c f0       	brlt	.+2      	; 0x2906 <LCD_displayCharacter+0xbe>
    2904:	43 c0       	rjmp	.+134    	; 0x298c <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2906:	fe 01       	movw	r30, r28
    2908:	e1 5a       	subi	r30, 0xA1	; 161
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	60 81       	ld	r22, Z
    290e:	71 81       	ldd	r23, Z+1	; 0x01
    2910:	82 81       	ldd	r24, Z+2	; 0x02
    2912:	93 81       	ldd	r25, Z+3	; 0x03
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e2       	ldi	r20, 0x20	; 32
    291a:	51 e4       	ldi	r21, 0x41	; 65
    291c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	8e 01       	movw	r16, r28
    2926:	07 5a       	subi	r16, 0xA7	; 167
    2928:	1f 4f       	sbci	r17, 0xFF	; 255
    292a:	bc 01       	movw	r22, r24
    292c:	cd 01       	movw	r24, r26
    292e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	f8 01       	movw	r30, r16
    2938:	91 83       	std	Z+1, r25	; 0x01
    293a:	80 83       	st	Z, r24
    293c:	1f c0       	rjmp	.+62     	; 0x297c <LCD_displayCharacter+0x134>
    293e:	fe 01       	movw	r30, r28
    2940:	e9 5a       	subi	r30, 0xA9	; 169
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	80 e9       	ldi	r24, 0x90	; 144
    2946:	91 e0       	ldi	r25, 0x01	; 1
    2948:	91 83       	std	Z+1, r25	; 0x01
    294a:	80 83       	st	Z, r24
    294c:	fe 01       	movw	r30, r28
    294e:	e9 5a       	subi	r30, 0xA9	; 169
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	80 81       	ld	r24, Z
    2954:	91 81       	ldd	r25, Z+1	; 0x01
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	f1 f7       	brne	.-4      	; 0x2956 <LCD_displayCharacter+0x10e>
    295a:	fe 01       	movw	r30, r28
    295c:	e9 5a       	subi	r30, 0xA9	; 169
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	91 83       	std	Z+1, r25	; 0x01
    2962:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2964:	de 01       	movw	r26, r28
    2966:	a7 5a       	subi	r26, 0xA7	; 167
    2968:	bf 4f       	sbci	r27, 0xFF	; 255
    296a:	fe 01       	movw	r30, r28
    296c:	e7 5a       	subi	r30, 0xA7	; 167
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	80 81       	ld	r24, Z
    2972:	91 81       	ldd	r25, Z+1	; 0x01
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	11 96       	adiw	r26, 0x01	; 1
    2978:	9c 93       	st	X, r25
    297a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    297c:	fe 01       	movw	r30, r28
    297e:	e7 5a       	subi	r30, 0xA7	; 167
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	80 81       	ld	r24, Z
    2984:	91 81       	ldd	r25, Z+1	; 0x01
    2986:	00 97       	sbiw	r24, 0x00	; 0
    2988:	d1 f6       	brne	.-76     	; 0x293e <LCD_displayCharacter+0xf6>
    298a:	27 c0       	rjmp	.+78     	; 0x29da <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298c:	8e 01       	movw	r16, r28
    298e:	07 5a       	subi	r16, 0xA7	; 167
    2990:	1f 4f       	sbci	r17, 0xFF	; 255
    2992:	fe 01       	movw	r30, r28
    2994:	e5 5a       	subi	r30, 0xA5	; 165
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	60 81       	ld	r22, Z
    299a:	71 81       	ldd	r23, Z+1	; 0x01
    299c:	82 81       	ldd	r24, Z+2	; 0x02
    299e:	93 81       	ldd	r25, Z+3	; 0x03
    29a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	f8 01       	movw	r30, r16
    29aa:	91 83       	std	Z+1, r25	; 0x01
    29ac:	80 83       	st	Z, r24
    29ae:	de 01       	movw	r26, r28
    29b0:	ab 5a       	subi	r26, 0xAB	; 171
    29b2:	bf 4f       	sbci	r27, 0xFF	; 255
    29b4:	fe 01       	movw	r30, r28
    29b6:	e7 5a       	subi	r30, 0xA7	; 167
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	80 81       	ld	r24, Z
    29bc:	91 81       	ldd	r25, Z+1	; 0x01
    29be:	8d 93       	st	X+, r24
    29c0:	9c 93       	st	X, r25
    29c2:	fe 01       	movw	r30, r28
    29c4:	eb 5a       	subi	r30, 0xAB	; 171
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	80 81       	ld	r24, Z
    29ca:	91 81       	ldd	r25, Z+1	; 0x01
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <LCD_displayCharacter+0x184>
    29d0:	fe 01       	movw	r30, r28
    29d2:	eb 5a       	subi	r30, 0xAB	; 171
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	62 e0       	ldi	r22, 0x02	; 2
    29de:	41 e0       	ldi	r20, 0x01	; 1
    29e0:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
    29e4:	fe 01       	movw	r30, r28
    29e6:	ef 5a       	subi	r30, 0xAF	; 175
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	a0 e8       	ldi	r26, 0x80	; 128
    29f0:	bf e3       	ldi	r27, 0x3F	; 63
    29f2:	80 83       	st	Z, r24
    29f4:	91 83       	std	Z+1, r25	; 0x01
    29f6:	a2 83       	std	Z+2, r26	; 0x02
    29f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29fa:	8e 01       	movw	r16, r28
    29fc:	03 5b       	subi	r16, 0xB3	; 179
    29fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2a00:	fe 01       	movw	r30, r28
    2a02:	ef 5a       	subi	r30, 0xAF	; 175
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	60 81       	ld	r22, Z
    2a08:	71 81       	ldd	r23, Z+1	; 0x01
    2a0a:	82 81       	ldd	r24, Z+2	; 0x02
    2a0c:	93 81       	ldd	r25, Z+3	; 0x03
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	4a e7       	ldi	r20, 0x7A	; 122
    2a14:	55 e4       	ldi	r21, 0x45	; 69
    2a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	f8 01       	movw	r30, r16
    2a20:	80 83       	st	Z, r24
    2a22:	91 83       	std	Z+1, r25	; 0x01
    2a24:	a2 83       	std	Z+2, r26	; 0x02
    2a26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a28:	fe 01       	movw	r30, r28
    2a2a:	e3 5b       	subi	r30, 0xB3	; 179
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	60 81       	ld	r22, Z
    2a30:	71 81       	ldd	r23, Z+1	; 0x01
    2a32:	82 81       	ldd	r24, Z+2	; 0x02
    2a34:	93 81       	ldd	r25, Z+3	; 0x03
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e8       	ldi	r20, 0x80	; 128
    2a3c:	5f e3       	ldi	r21, 0x3F	; 63
    2a3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a42:	88 23       	and	r24, r24
    2a44:	44 f4       	brge	.+16     	; 0x2a56 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2a46:	fe 01       	movw	r30, r28
    2a48:	e5 5b       	subi	r30, 0xB5	; 181
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	91 83       	std	Z+1, r25	; 0x01
    2a52:	80 83       	st	Z, r24
    2a54:	64 c0       	rjmp	.+200    	; 0x2b1e <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2a56:	fe 01       	movw	r30, r28
    2a58:	e3 5b       	subi	r30, 0xB3	; 179
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	60 81       	ld	r22, Z
    2a5e:	71 81       	ldd	r23, Z+1	; 0x01
    2a60:	82 81       	ldd	r24, Z+2	; 0x02
    2a62:	93 81       	ldd	r25, Z+3	; 0x03
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	3f ef       	ldi	r19, 0xFF	; 255
    2a68:	4f e7       	ldi	r20, 0x7F	; 127
    2a6a:	57 e4       	ldi	r21, 0x47	; 71
    2a6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a70:	18 16       	cp	r1, r24
    2a72:	0c f0       	brlt	.+2      	; 0x2a76 <LCD_displayCharacter+0x22e>
    2a74:	43 c0       	rjmp	.+134    	; 0x2afc <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a76:	fe 01       	movw	r30, r28
    2a78:	ef 5a       	subi	r30, 0xAF	; 175
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	60 81       	ld	r22, Z
    2a7e:	71 81       	ldd	r23, Z+1	; 0x01
    2a80:	82 81       	ldd	r24, Z+2	; 0x02
    2a82:	93 81       	ldd	r25, Z+3	; 0x03
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	40 e2       	ldi	r20, 0x20	; 32
    2a8a:	51 e4       	ldi	r21, 0x41	; 65
    2a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	8e 01       	movw	r16, r28
    2a96:	05 5b       	subi	r16, 0xB5	; 181
    2a98:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9a:	bc 01       	movw	r22, r24
    2a9c:	cd 01       	movw	r24, r26
    2a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	80 83       	st	Z, r24
    2aac:	1f c0       	rjmp	.+62     	; 0x2aec <LCD_displayCharacter+0x2a4>
    2aae:	fe 01       	movw	r30, r28
    2ab0:	e7 5b       	subi	r30, 0xB7	; 183
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	80 e9       	ldi	r24, 0x90	; 144
    2ab6:	91 e0       	ldi	r25, 0x01	; 1
    2ab8:	91 83       	std	Z+1, r25	; 0x01
    2aba:	80 83       	st	Z, r24
    2abc:	fe 01       	movw	r30, r28
    2abe:	e7 5b       	subi	r30, 0xB7	; 183
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	80 81       	ld	r24, Z
    2ac4:	91 81       	ldd	r25, Z+1	; 0x01
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	f1 f7       	brne	.-4      	; 0x2ac6 <LCD_displayCharacter+0x27e>
    2aca:	fe 01       	movw	r30, r28
    2acc:	e7 5b       	subi	r30, 0xB7	; 183
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	91 83       	std	Z+1, r25	; 0x01
    2ad2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad4:	de 01       	movw	r26, r28
    2ad6:	a5 5b       	subi	r26, 0xB5	; 181
    2ad8:	bf 4f       	sbci	r27, 0xFF	; 255
    2ada:	fe 01       	movw	r30, r28
    2adc:	e5 5b       	subi	r30, 0xB5	; 181
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	80 81       	ld	r24, Z
    2ae2:	91 81       	ldd	r25, Z+1	; 0x01
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	11 96       	adiw	r26, 0x01	; 1
    2ae8:	9c 93       	st	X, r25
    2aea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aec:	fe 01       	movw	r30, r28
    2aee:	e5 5b       	subi	r30, 0xB5	; 181
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	80 81       	ld	r24, Z
    2af4:	91 81       	ldd	r25, Z+1	; 0x01
    2af6:	00 97       	sbiw	r24, 0x00	; 0
    2af8:	d1 f6       	brne	.-76     	; 0x2aae <LCD_displayCharacter+0x266>
    2afa:	27 c0       	rjmp	.+78     	; 0x2b4a <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afc:	8e 01       	movw	r16, r28
    2afe:	05 5b       	subi	r16, 0xB5	; 181
    2b00:	1f 4f       	sbci	r17, 0xFF	; 255
    2b02:	fe 01       	movw	r30, r28
    2b04:	e3 5b       	subi	r30, 0xB3	; 179
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	60 81       	ld	r22, Z
    2b0a:	71 81       	ldd	r23, Z+1	; 0x01
    2b0c:	82 81       	ldd	r24, Z+2	; 0x02
    2b0e:	93 81       	ldd	r25, Z+3	; 0x03
    2b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	f8 01       	movw	r30, r16
    2b1a:	91 83       	std	Z+1, r25	; 0x01
    2b1c:	80 83       	st	Z, r24
    2b1e:	de 01       	movw	r26, r28
    2b20:	a9 5b       	subi	r26, 0xB9	; 185
    2b22:	bf 4f       	sbci	r27, 0xFF	; 255
    2b24:	fe 01       	movw	r30, r28
    2b26:	e5 5b       	subi	r30, 0xB5	; 181
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	80 81       	ld	r24, Z
    2b2c:	91 81       	ldd	r25, Z+1	; 0x01
    2b2e:	8d 93       	st	X+, r24
    2b30:	9c 93       	st	X, r25
    2b32:	fe 01       	movw	r30, r28
    2b34:	e9 5b       	subi	r30, 0xB9	; 185
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	80 81       	ld	r24, Z
    2b3a:	91 81       	ldd	r25, Z+1	; 0x01
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	f1 f7       	brne	.-4      	; 0x2b3c <LCD_displayCharacter+0x2f4>
    2b40:	fe 01       	movw	r30, r28
    2b42:	e9 5b       	subi	r30, 0xB9	; 185
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	91 83       	std	Z+1, r25	; 0x01
    2b48:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	ed 59       	subi	r30, 0x9D	; 157
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	80 81       	ld	r24, Z
    2b52:	88 2f       	mov	r24, r24
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	80 71       	andi	r24, 0x10	; 16
    2b58:	90 70       	andi	r25, 0x00	; 0
    2b5a:	95 95       	asr	r25
    2b5c:	87 95       	ror	r24
    2b5e:	95 95       	asr	r25
    2b60:	87 95       	ror	r24
    2b62:	95 95       	asr	r25
    2b64:	87 95       	ror	r24
    2b66:	95 95       	asr	r25
    2b68:	87 95       	ror	r24
    2b6a:	98 2f       	mov	r25, r24
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	63 e0       	ldi	r22, 0x03	; 3
    2b70:	49 2f       	mov	r20, r25
    2b72:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2b76:	fe 01       	movw	r30, r28
    2b78:	ed 59       	subi	r30, 0x9D	; 157
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	80 81       	ld	r24, Z
    2b7e:	88 2f       	mov	r24, r24
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	80 72       	andi	r24, 0x20	; 32
    2b84:	90 70       	andi	r25, 0x00	; 0
    2b86:	95 95       	asr	r25
    2b88:	87 95       	ror	r24
    2b8a:	95 95       	asr	r25
    2b8c:	87 95       	ror	r24
    2b8e:	95 95       	asr	r25
    2b90:	87 95       	ror	r24
    2b92:	95 95       	asr	r25
    2b94:	87 95       	ror	r24
    2b96:	95 95       	asr	r25
    2b98:	87 95       	ror	r24
    2b9a:	98 2f       	mov	r25, r24
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	64 e0       	ldi	r22, 0x04	; 4
    2ba0:	49 2f       	mov	r20, r25
    2ba2:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	ed 59       	subi	r30, 0x9D	; 157
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	80 81       	ld	r24, Z
    2bae:	88 2f       	mov	r24, r24
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	80 74       	andi	r24, 0x40	; 64
    2bb4:	90 70       	andi	r25, 0x00	; 0
    2bb6:	08 2e       	mov	r0, r24
    2bb8:	89 2f       	mov	r24, r25
    2bba:	00 0c       	add	r0, r0
    2bbc:	88 1f       	adc	r24, r24
    2bbe:	99 0b       	sbc	r25, r25
    2bc0:	00 0c       	add	r0, r0
    2bc2:	88 1f       	adc	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	98 2f       	mov	r25, r24
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	65 e0       	ldi	r22, 0x05	; 5
    2bcc:	49 2f       	mov	r20, r25
    2bce:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	ed 59       	subi	r30, 0x9D	; 157
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	80 81       	ld	r24, Z
    2bda:	98 2f       	mov	r25, r24
    2bdc:	99 1f       	adc	r25, r25
    2bde:	99 27       	eor	r25, r25
    2be0:	99 1f       	adc	r25, r25
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	66 e0       	ldi	r22, 0x06	; 6
    2be6:	49 2f       	mov	r20, r25
    2be8:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
    2bec:	fe 01       	movw	r30, r28
    2bee:	ed 5b       	subi	r30, 0xBD	; 189
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	a0 e8       	ldi	r26, 0x80	; 128
    2bf8:	bf e3       	ldi	r27, 0x3F	; 63
    2bfa:	80 83       	st	Z, r24
    2bfc:	91 83       	std	Z+1, r25	; 0x01
    2bfe:	a2 83       	std	Z+2, r26	; 0x02
    2c00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c02:	8e 01       	movw	r16, r28
    2c04:	01 5c       	subi	r16, 0xC1	; 193
    2c06:	1f 4f       	sbci	r17, 0xFF	; 255
    2c08:	fe 01       	movw	r30, r28
    2c0a:	ed 5b       	subi	r30, 0xBD	; 189
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	60 81       	ld	r22, Z
    2c10:	71 81       	ldd	r23, Z+1	; 0x01
    2c12:	82 81       	ldd	r24, Z+2	; 0x02
    2c14:	93 81       	ldd	r25, Z+3	; 0x03
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	4a e7       	ldi	r20, 0x7A	; 122
    2c1c:	55 e4       	ldi	r21, 0x45	; 69
    2c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	f8 01       	movw	r30, r16
    2c28:	80 83       	st	Z, r24
    2c2a:	91 83       	std	Z+1, r25	; 0x01
    2c2c:	a2 83       	std	Z+2, r26	; 0x02
    2c2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c30:	fe 01       	movw	r30, r28
    2c32:	ff 96       	adiw	r30, 0x3f	; 63
    2c34:	60 81       	ld	r22, Z
    2c36:	71 81       	ldd	r23, Z+1	; 0x01
    2c38:	82 81       	ldd	r24, Z+2	; 0x02
    2c3a:	93 81       	ldd	r25, Z+3	; 0x03
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	40 e8       	ldi	r20, 0x80	; 128
    2c42:	5f e3       	ldi	r21, 0x3F	; 63
    2c44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c48:	88 23       	and	r24, r24
    2c4a:	2c f4       	brge	.+10     	; 0x2c56 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	9e af       	std	Y+62, r25	; 0x3e
    2c52:	8d af       	std	Y+61, r24	; 0x3d
    2c54:	46 c0       	rjmp	.+140    	; 0x2ce2 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2c56:	fe 01       	movw	r30, r28
    2c58:	ff 96       	adiw	r30, 0x3f	; 63
    2c5a:	60 81       	ld	r22, Z
    2c5c:	71 81       	ldd	r23, Z+1	; 0x01
    2c5e:	82 81       	ldd	r24, Z+2	; 0x02
    2c60:	93 81       	ldd	r25, Z+3	; 0x03
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	3f ef       	ldi	r19, 0xFF	; 255
    2c66:	4f e7       	ldi	r20, 0x7F	; 127
    2c68:	57 e4       	ldi	r21, 0x47	; 71
    2c6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c6e:	18 16       	cp	r1, r24
    2c70:	64 f5       	brge	.+88     	; 0x2cca <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c72:	fe 01       	movw	r30, r28
    2c74:	ed 5b       	subi	r30, 0xBD	; 189
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	60 81       	ld	r22, Z
    2c7a:	71 81       	ldd	r23, Z+1	; 0x01
    2c7c:	82 81       	ldd	r24, Z+2	; 0x02
    2c7e:	93 81       	ldd	r25, Z+3	; 0x03
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	40 e2       	ldi	r20, 0x20	; 32
    2c86:	51 e4       	ldi	r21, 0x41	; 65
    2c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	bc 01       	movw	r22, r24
    2c92:	cd 01       	movw	r24, r26
    2c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	9e af       	std	Y+62, r25	; 0x3e
    2c9e:	8d af       	std	Y+61, r24	; 0x3d
    2ca0:	0f c0       	rjmp	.+30     	; 0x2cc0 <LCD_displayCharacter+0x478>
    2ca2:	80 e9       	ldi	r24, 0x90	; 144
    2ca4:	91 e0       	ldi	r25, 0x01	; 1
    2ca6:	9c af       	std	Y+60, r25	; 0x3c
    2ca8:	8b af       	std	Y+59, r24	; 0x3b
    2caa:	8b ad       	ldd	r24, Y+59	; 0x3b
    2cac:	9c ad       	ldd	r25, Y+60	; 0x3c
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	f1 f7       	brne	.-4      	; 0x2cae <LCD_displayCharacter+0x466>
    2cb2:	9c af       	std	Y+60, r25	; 0x3c
    2cb4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cb8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	9e af       	std	Y+62, r25	; 0x3e
    2cbe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cc2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cc4:	00 97       	sbiw	r24, 0x00	; 0
    2cc6:	69 f7       	brne	.-38     	; 0x2ca2 <LCD_displayCharacter+0x45a>
    2cc8:	16 c0       	rjmp	.+44     	; 0x2cf6 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cca:	fe 01       	movw	r30, r28
    2ccc:	ff 96       	adiw	r30, 0x3f	; 63
    2cce:	60 81       	ld	r22, Z
    2cd0:	71 81       	ldd	r23, Z+1	; 0x01
    2cd2:	82 81       	ldd	r24, Z+2	; 0x02
    2cd4:	93 81       	ldd	r25, Z+3	; 0x03
    2cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	9e af       	std	Y+62, r25	; 0x3e
    2ce0:	8d af       	std	Y+61, r24	; 0x3d
    2ce2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ce4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ce6:	9a af       	std	Y+58, r25	; 0x3a
    2ce8:	89 af       	std	Y+57, r24	; 0x39
    2cea:	89 ad       	ldd	r24, Y+57	; 0x39
    2cec:	9a ad       	ldd	r25, Y+58	; 0x3a
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	f1 f7       	brne	.-4      	; 0x2cee <LCD_displayCharacter+0x4a6>
    2cf2:	9a af       	std	Y+58, r25	; 0x3a
    2cf4:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	62 e0       	ldi	r22, 0x02	; 2
    2cfa:	40 e0       	ldi	r20, 0x00	; 0
    2cfc:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	a0 e8       	ldi	r26, 0x80	; 128
    2d06:	bf e3       	ldi	r27, 0x3F	; 63
    2d08:	8d ab       	std	Y+53, r24	; 0x35
    2d0a:	9e ab       	std	Y+54, r25	; 0x36
    2d0c:	af ab       	std	Y+55, r26	; 0x37
    2d0e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d10:	6d a9       	ldd	r22, Y+53	; 0x35
    2d12:	7e a9       	ldd	r23, Y+54	; 0x36
    2d14:	8f a9       	ldd	r24, Y+55	; 0x37
    2d16:	98 ad       	ldd	r25, Y+56	; 0x38
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	4a e7       	ldi	r20, 0x7A	; 122
    2d1e:	55 e4       	ldi	r21, 0x45	; 69
    2d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	89 ab       	std	Y+49, r24	; 0x31
    2d2a:	9a ab       	std	Y+50, r25	; 0x32
    2d2c:	ab ab       	std	Y+51, r26	; 0x33
    2d2e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d30:	69 a9       	ldd	r22, Y+49	; 0x31
    2d32:	7a a9       	ldd	r23, Y+50	; 0x32
    2d34:	8b a9       	ldd	r24, Y+51	; 0x33
    2d36:	9c a9       	ldd	r25, Y+52	; 0x34
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	40 e8       	ldi	r20, 0x80	; 128
    2d3e:	5f e3       	ldi	r21, 0x3F	; 63
    2d40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d44:	88 23       	and	r24, r24
    2d46:	2c f4       	brge	.+10     	; 0x2d52 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	98 ab       	std	Y+48, r25	; 0x30
    2d4e:	8f a7       	std	Y+47, r24	; 0x2f
    2d50:	3f c0       	rjmp	.+126    	; 0x2dd0 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2d52:	69 a9       	ldd	r22, Y+49	; 0x31
    2d54:	7a a9       	ldd	r23, Y+50	; 0x32
    2d56:	8b a9       	ldd	r24, Y+51	; 0x33
    2d58:	9c a9       	ldd	r25, Y+52	; 0x34
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	3f ef       	ldi	r19, 0xFF	; 255
    2d5e:	4f e7       	ldi	r20, 0x7F	; 127
    2d60:	57 e4       	ldi	r21, 0x47	; 71
    2d62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d66:	18 16       	cp	r1, r24
    2d68:	4c f5       	brge	.+82     	; 0x2dbc <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d6a:	6d a9       	ldd	r22, Y+53	; 0x35
    2d6c:	7e a9       	ldd	r23, Y+54	; 0x36
    2d6e:	8f a9       	ldd	r24, Y+55	; 0x37
    2d70:	98 ad       	ldd	r25, Y+56	; 0x38
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	40 e2       	ldi	r20, 0x20	; 32
    2d78:	51 e4       	ldi	r21, 0x41	; 65
    2d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	bc 01       	movw	r22, r24
    2d84:	cd 01       	movw	r24, r26
    2d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	98 ab       	std	Y+48, r25	; 0x30
    2d90:	8f a7       	std	Y+47, r24	; 0x2f
    2d92:	0f c0       	rjmp	.+30     	; 0x2db2 <LCD_displayCharacter+0x56a>
    2d94:	80 e9       	ldi	r24, 0x90	; 144
    2d96:	91 e0       	ldi	r25, 0x01	; 1
    2d98:	9e a7       	std	Y+46, r25	; 0x2e
    2d9a:	8d a7       	std	Y+45, r24	; 0x2d
    2d9c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d9e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2da0:	01 97       	sbiw	r24, 0x01	; 1
    2da2:	f1 f7       	brne	.-4      	; 0x2da0 <LCD_displayCharacter+0x558>
    2da4:	9e a7       	std	Y+46, r25	; 0x2e
    2da6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2daa:	98 a9       	ldd	r25, Y+48	; 0x30
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	98 ab       	std	Y+48, r25	; 0x30
    2db0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2db4:	98 a9       	ldd	r25, Y+48	; 0x30
    2db6:	00 97       	sbiw	r24, 0x00	; 0
    2db8:	69 f7       	brne	.-38     	; 0x2d94 <LCD_displayCharacter+0x54c>
    2dba:	14 c0       	rjmp	.+40     	; 0x2de4 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dbc:	69 a9       	ldd	r22, Y+49	; 0x31
    2dbe:	7a a9       	ldd	r23, Y+50	; 0x32
    2dc0:	8b a9       	ldd	r24, Y+51	; 0x33
    2dc2:	9c a9       	ldd	r25, Y+52	; 0x34
    2dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	98 ab       	std	Y+48, r25	; 0x30
    2dce:	8f a7       	std	Y+47, r24	; 0x2f
    2dd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dd2:	98 a9       	ldd	r25, Y+48	; 0x30
    2dd4:	9c a7       	std	Y+44, r25	; 0x2c
    2dd6:	8b a7       	std	Y+43, r24	; 0x2b
    2dd8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dda:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	f1 f7       	brne	.-4      	; 0x2ddc <LCD_displayCharacter+0x594>
    2de0:	9c a7       	std	Y+44, r25	; 0x2c
    2de2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	62 e0       	ldi	r22, 0x02	; 2
    2de8:	41 e0       	ldi	r20, 0x01	; 1
    2dea:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	a0 e8       	ldi	r26, 0x80	; 128
    2df4:	bf e3       	ldi	r27, 0x3F	; 63
    2df6:	8f a3       	std	Y+39, r24	; 0x27
    2df8:	98 a7       	std	Y+40, r25	; 0x28
    2dfa:	a9 a7       	std	Y+41, r26	; 0x29
    2dfc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfe:	6f a1       	ldd	r22, Y+39	; 0x27
    2e00:	78 a5       	ldd	r23, Y+40	; 0x28
    2e02:	89 a5       	ldd	r24, Y+41	; 0x29
    2e04:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	4a e7       	ldi	r20, 0x7A	; 122
    2e0c:	55 e4       	ldi	r21, 0x45	; 69
    2e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	8b a3       	std	Y+35, r24	; 0x23
    2e18:	9c a3       	std	Y+36, r25	; 0x24
    2e1a:	ad a3       	std	Y+37, r26	; 0x25
    2e1c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e1e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e20:	7c a1       	ldd	r23, Y+36	; 0x24
    2e22:	8d a1       	ldd	r24, Y+37	; 0x25
    2e24:	9e a1       	ldd	r25, Y+38	; 0x26
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	40 e8       	ldi	r20, 0x80	; 128
    2e2c:	5f e3       	ldi	r21, 0x3F	; 63
    2e2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e32:	88 23       	and	r24, r24
    2e34:	2c f4       	brge	.+10     	; 0x2e40 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	9a a3       	std	Y+34, r25	; 0x22
    2e3c:	89 a3       	std	Y+33, r24	; 0x21
    2e3e:	3f c0       	rjmp	.+126    	; 0x2ebe <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2e40:	6b a1       	ldd	r22, Y+35	; 0x23
    2e42:	7c a1       	ldd	r23, Y+36	; 0x24
    2e44:	8d a1       	ldd	r24, Y+37	; 0x25
    2e46:	9e a1       	ldd	r25, Y+38	; 0x26
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	3f ef       	ldi	r19, 0xFF	; 255
    2e4c:	4f e7       	ldi	r20, 0x7F	; 127
    2e4e:	57 e4       	ldi	r21, 0x47	; 71
    2e50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e54:	18 16       	cp	r1, r24
    2e56:	4c f5       	brge	.+82     	; 0x2eaa <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e58:	6f a1       	ldd	r22, Y+39	; 0x27
    2e5a:	78 a5       	ldd	r23, Y+40	; 0x28
    2e5c:	89 a5       	ldd	r24, Y+41	; 0x29
    2e5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e2       	ldi	r20, 0x20	; 32
    2e66:	51 e4       	ldi	r21, 0x41	; 65
    2e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	bc 01       	movw	r22, r24
    2e72:	cd 01       	movw	r24, r26
    2e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	9a a3       	std	Y+34, r25	; 0x22
    2e7e:	89 a3       	std	Y+33, r24	; 0x21
    2e80:	0f c0       	rjmp	.+30     	; 0x2ea0 <LCD_displayCharacter+0x658>
    2e82:	80 e9       	ldi	r24, 0x90	; 144
    2e84:	91 e0       	ldi	r25, 0x01	; 1
    2e86:	98 a3       	std	Y+32, r25	; 0x20
    2e88:	8f 8f       	std	Y+31, r24	; 0x1f
    2e8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e8c:	98 a1       	ldd	r25, Y+32	; 0x20
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	f1 f7       	brne	.-4      	; 0x2e8e <LCD_displayCharacter+0x646>
    2e92:	98 a3       	std	Y+32, r25	; 0x20
    2e94:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e96:	89 a1       	ldd	r24, Y+33	; 0x21
    2e98:	9a a1       	ldd	r25, Y+34	; 0x22
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	9a a3       	std	Y+34, r25	; 0x22
    2e9e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ea2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ea4:	00 97       	sbiw	r24, 0x00	; 0
    2ea6:	69 f7       	brne	.-38     	; 0x2e82 <LCD_displayCharacter+0x63a>
    2ea8:	14 c0       	rjmp	.+40     	; 0x2ed2 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eaa:	6b a1       	ldd	r22, Y+35	; 0x23
    2eac:	7c a1       	ldd	r23, Y+36	; 0x24
    2eae:	8d a1       	ldd	r24, Y+37	; 0x25
    2eb0:	9e a1       	ldd	r25, Y+38	; 0x26
    2eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	9a a3       	std	Y+34, r25	; 0x22
    2ebc:	89 a3       	std	Y+33, r24	; 0x21
    2ebe:	89 a1       	ldd	r24, Y+33	; 0x21
    2ec0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ec2:	9e 8f       	std	Y+30, r25	; 0x1e
    2ec4:	8d 8f       	std	Y+29, r24	; 0x1d
    2ec6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ec8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <LCD_displayCharacter+0x682>
    2ece:	9e 8f       	std	Y+30, r25	; 0x1e
    2ed0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	ed 59       	subi	r30, 0x9D	; 157
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	80 81       	ld	r24, Z
    2eda:	98 2f       	mov	r25, r24
    2edc:	91 70       	andi	r25, 0x01	; 1
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	63 e0       	ldi	r22, 0x03	; 3
    2ee2:	49 2f       	mov	r20, r25
    2ee4:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2ee8:	fe 01       	movw	r30, r28
    2eea:	ed 59       	subi	r30, 0x9D	; 157
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	80 81       	ld	r24, Z
    2ef0:	88 2f       	mov	r24, r24
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	82 70       	andi	r24, 0x02	; 2
    2ef6:	90 70       	andi	r25, 0x00	; 0
    2ef8:	95 95       	asr	r25
    2efa:	87 95       	ror	r24
    2efc:	98 2f       	mov	r25, r24
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	64 e0       	ldi	r22, 0x04	; 4
    2f02:	49 2f       	mov	r20, r25
    2f04:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2f08:	fe 01       	movw	r30, r28
    2f0a:	ed 59       	subi	r30, 0x9D	; 157
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	80 81       	ld	r24, Z
    2f10:	88 2f       	mov	r24, r24
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	84 70       	andi	r24, 0x04	; 4
    2f16:	90 70       	andi	r25, 0x00	; 0
    2f18:	95 95       	asr	r25
    2f1a:	87 95       	ror	r24
    2f1c:	95 95       	asr	r25
    2f1e:	87 95       	ror	r24
    2f20:	98 2f       	mov	r25, r24
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	65 e0       	ldi	r22, 0x05	; 5
    2f26:	49 2f       	mov	r20, r25
    2f28:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	ed 59       	subi	r30, 0x9D	; 157
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	80 81       	ld	r24, Z
    2f34:	88 2f       	mov	r24, r24
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	88 70       	andi	r24, 0x08	; 8
    2f3a:	90 70       	andi	r25, 0x00	; 0
    2f3c:	95 95       	asr	r25
    2f3e:	87 95       	ror	r24
    2f40:	95 95       	asr	r25
    2f42:	87 95       	ror	r24
    2f44:	95 95       	asr	r25
    2f46:	87 95       	ror	r24
    2f48:	98 2f       	mov	r25, r24
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	66 e0       	ldi	r22, 0x06	; 6
    2f4e:	49 2f       	mov	r20, r25
    2f50:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
    2f54:	80 e0       	ldi	r24, 0x00	; 0
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	a0 e8       	ldi	r26, 0x80	; 128
    2f5a:	bf e3       	ldi	r27, 0x3F	; 63
    2f5c:	89 8f       	std	Y+25, r24	; 0x19
    2f5e:	9a 8f       	std	Y+26, r25	; 0x1a
    2f60:	ab 8f       	std	Y+27, r26	; 0x1b
    2f62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f64:	69 8d       	ldd	r22, Y+25	; 0x19
    2f66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	4a e7       	ldi	r20, 0x7A	; 122
    2f72:	55 e4       	ldi	r21, 0x45	; 69
    2f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	8d 8b       	std	Y+21, r24	; 0x15
    2f7e:	9e 8b       	std	Y+22, r25	; 0x16
    2f80:	af 8b       	std	Y+23, r26	; 0x17
    2f82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f84:	6d 89       	ldd	r22, Y+21	; 0x15
    2f86:	7e 89       	ldd	r23, Y+22	; 0x16
    2f88:	8f 89       	ldd	r24, Y+23	; 0x17
    2f8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e8       	ldi	r20, 0x80	; 128
    2f92:	5f e3       	ldi	r21, 0x3F	; 63
    2f94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f98:	88 23       	and	r24, r24
    2f9a:	2c f4       	brge	.+10     	; 0x2fa6 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	9c 8b       	std	Y+20, r25	; 0x14
    2fa2:	8b 8b       	std	Y+19, r24	; 0x13
    2fa4:	3f c0       	rjmp	.+126    	; 0x3024 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2fa6:	6d 89       	ldd	r22, Y+21	; 0x15
    2fa8:	7e 89       	ldd	r23, Y+22	; 0x16
    2faa:	8f 89       	ldd	r24, Y+23	; 0x17
    2fac:	98 8d       	ldd	r25, Y+24	; 0x18
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	3f ef       	ldi	r19, 0xFF	; 255
    2fb2:	4f e7       	ldi	r20, 0x7F	; 127
    2fb4:	57 e4       	ldi	r21, 0x47	; 71
    2fb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fba:	18 16       	cp	r1, r24
    2fbc:	4c f5       	brge	.+82     	; 0x3010 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbe:	69 8d       	ldd	r22, Y+25	; 0x19
    2fc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	40 e2       	ldi	r20, 0x20	; 32
    2fcc:	51 e4       	ldi	r21, 0x41	; 65
    2fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	bc 01       	movw	r22, r24
    2fd8:	cd 01       	movw	r24, r26
    2fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	9c 8b       	std	Y+20, r25	; 0x14
    2fe4:	8b 8b       	std	Y+19, r24	; 0x13
    2fe6:	0f c0       	rjmp	.+30     	; 0x3006 <LCD_displayCharacter+0x7be>
    2fe8:	80 e9       	ldi	r24, 0x90	; 144
    2fea:	91 e0       	ldi	r25, 0x01	; 1
    2fec:	9a 8b       	std	Y+18, r25	; 0x12
    2fee:	89 8b       	std	Y+17, r24	; 0x11
    2ff0:	89 89       	ldd	r24, Y+17	; 0x11
    2ff2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	f1 f7       	brne	.-4      	; 0x2ff4 <LCD_displayCharacter+0x7ac>
    2ff8:	9a 8b       	std	Y+18, r25	; 0x12
    2ffa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ffe:	9c 89       	ldd	r25, Y+20	; 0x14
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	9c 8b       	std	Y+20, r25	; 0x14
    3004:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3006:	8b 89       	ldd	r24, Y+19	; 0x13
    3008:	9c 89       	ldd	r25, Y+20	; 0x14
    300a:	00 97       	sbiw	r24, 0x00	; 0
    300c:	69 f7       	brne	.-38     	; 0x2fe8 <LCD_displayCharacter+0x7a0>
    300e:	14 c0       	rjmp	.+40     	; 0x3038 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3010:	6d 89       	ldd	r22, Y+21	; 0x15
    3012:	7e 89       	ldd	r23, Y+22	; 0x16
    3014:	8f 89       	ldd	r24, Y+23	; 0x17
    3016:	98 8d       	ldd	r25, Y+24	; 0x18
    3018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	9c 8b       	std	Y+20, r25	; 0x14
    3022:	8b 8b       	std	Y+19, r24	; 0x13
    3024:	8b 89       	ldd	r24, Y+19	; 0x13
    3026:	9c 89       	ldd	r25, Y+20	; 0x14
    3028:	98 8b       	std	Y+16, r25	; 0x10
    302a:	8f 87       	std	Y+15, r24	; 0x0f
    302c:	8f 85       	ldd	r24, Y+15	; 0x0f
    302e:	98 89       	ldd	r25, Y+16	; 0x10
    3030:	01 97       	sbiw	r24, 0x01	; 1
    3032:	f1 f7       	brne	.-4      	; 0x3030 <LCD_displayCharacter+0x7e8>
    3034:	98 8b       	std	Y+16, r25	; 0x10
    3036:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	62 e0       	ldi	r22, 0x02	; 2
    303c:	40 e0       	ldi	r20, 0x00	; 0
    303e:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_writePin>
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	a0 e8       	ldi	r26, 0x80	; 128
    3048:	bf e3       	ldi	r27, 0x3F	; 63
    304a:	8b 87       	std	Y+11, r24	; 0x0b
    304c:	9c 87       	std	Y+12, r25	; 0x0c
    304e:	ad 87       	std	Y+13, r26	; 0x0d
    3050:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3052:	6b 85       	ldd	r22, Y+11	; 0x0b
    3054:	7c 85       	ldd	r23, Y+12	; 0x0c
    3056:	8d 85       	ldd	r24, Y+13	; 0x0d
    3058:	9e 85       	ldd	r25, Y+14	; 0x0e
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	4a e7       	ldi	r20, 0x7A	; 122
    3060:	55 e4       	ldi	r21, 0x45	; 69
    3062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	8f 83       	std	Y+7, r24	; 0x07
    306c:	98 87       	std	Y+8, r25	; 0x08
    306e:	a9 87       	std	Y+9, r26	; 0x09
    3070:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3072:	6f 81       	ldd	r22, Y+7	; 0x07
    3074:	78 85       	ldd	r23, Y+8	; 0x08
    3076:	89 85       	ldd	r24, Y+9	; 0x09
    3078:	9a 85       	ldd	r25, Y+10	; 0x0a
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	40 e8       	ldi	r20, 0x80	; 128
    3080:	5f e3       	ldi	r21, 0x3F	; 63
    3082:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3086:	88 23       	and	r24, r24
    3088:	2c f4       	brge	.+10     	; 0x3094 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	9e 83       	std	Y+6, r25	; 0x06
    3090:	8d 83       	std	Y+5, r24	; 0x05
    3092:	3f c0       	rjmp	.+126    	; 0x3112 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3094:	6f 81       	ldd	r22, Y+7	; 0x07
    3096:	78 85       	ldd	r23, Y+8	; 0x08
    3098:	89 85       	ldd	r24, Y+9	; 0x09
    309a:	9a 85       	ldd	r25, Y+10	; 0x0a
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	3f ef       	ldi	r19, 0xFF	; 255
    30a0:	4f e7       	ldi	r20, 0x7F	; 127
    30a2:	57 e4       	ldi	r21, 0x47	; 71
    30a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30a8:	18 16       	cp	r1, r24
    30aa:	4c f5       	brge	.+82     	; 0x30fe <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    30ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	40 e2       	ldi	r20, 0x20	; 32
    30ba:	51 e4       	ldi	r21, 0x41	; 65
    30bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	bc 01       	movw	r22, r24
    30c6:	cd 01       	movw	r24, r26
    30c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	9e 83       	std	Y+6, r25	; 0x06
    30d2:	8d 83       	std	Y+5, r24	; 0x05
    30d4:	0f c0       	rjmp	.+30     	; 0x30f4 <LCD_displayCharacter+0x8ac>
    30d6:	80 e9       	ldi	r24, 0x90	; 144
    30d8:	91 e0       	ldi	r25, 0x01	; 1
    30da:	9c 83       	std	Y+4, r25	; 0x04
    30dc:	8b 83       	std	Y+3, r24	; 0x03
    30de:	8b 81       	ldd	r24, Y+3	; 0x03
    30e0:	9c 81       	ldd	r25, Y+4	; 0x04
    30e2:	01 97       	sbiw	r24, 0x01	; 1
    30e4:	f1 f7       	brne	.-4      	; 0x30e2 <LCD_displayCharacter+0x89a>
    30e6:	9c 83       	std	Y+4, r25	; 0x04
    30e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ea:	8d 81       	ldd	r24, Y+5	; 0x05
    30ec:	9e 81       	ldd	r25, Y+6	; 0x06
    30ee:	01 97       	sbiw	r24, 0x01	; 1
    30f0:	9e 83       	std	Y+6, r25	; 0x06
    30f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f4:	8d 81       	ldd	r24, Y+5	; 0x05
    30f6:	9e 81       	ldd	r25, Y+6	; 0x06
    30f8:	00 97       	sbiw	r24, 0x00	; 0
    30fa:	69 f7       	brne	.-38     	; 0x30d6 <LCD_displayCharacter+0x88e>
    30fc:	14 c0       	rjmp	.+40     	; 0x3126 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3100:	78 85       	ldd	r23, Y+8	; 0x08
    3102:	89 85       	ldd	r24, Y+9	; 0x09
    3104:	9a 85       	ldd	r25, Y+10	; 0x0a
    3106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	9e 83       	std	Y+6, r25	; 0x06
    3110:	8d 83       	std	Y+5, r24	; 0x05
    3112:	8d 81       	ldd	r24, Y+5	; 0x05
    3114:	9e 81       	ldd	r25, Y+6	; 0x06
    3116:	9a 83       	std	Y+2, r25	; 0x02
    3118:	89 83       	std	Y+1, r24	; 0x01
    311a:	89 81       	ldd	r24, Y+1	; 0x01
    311c:	9a 81       	ldd	r25, Y+2	; 0x02
    311e:	01 97       	sbiw	r24, 0x01	; 1
    3120:	f1 f7       	brne	.-4      	; 0x311e <LCD_displayCharacter+0x8d6>
    3122:	9a 83       	std	Y+2, r25	; 0x02
    3124:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3126:	cd 59       	subi	r28, 0x9D	; 157
    3128:	df 4f       	sbci	r29, 0xFF	; 255
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	f8 94       	cli
    312e:	de bf       	out	0x3e, r29	; 62
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	cd bf       	out	0x3d, r28	; 61
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	1f 91       	pop	r17
    313a:	0f 91       	pop	r16
    313c:	08 95       	ret

0000313e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    313e:	df 93       	push	r29
    3140:	cf 93       	push	r28
    3142:	00 d0       	rcall	.+0      	; 0x3144 <LCD_displayString+0x6>
    3144:	0f 92       	push	r0
    3146:	cd b7       	in	r28, 0x3d	; 61
    3148:	de b7       	in	r29, 0x3e	; 62
    314a:	9b 83       	std	Y+3, r25	; 0x03
    314c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    314e:	19 82       	std	Y+1, r1	; 0x01
    3150:	0e c0       	rjmp	.+28     	; 0x316e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3152:	89 81       	ldd	r24, Y+1	; 0x01
    3154:	28 2f       	mov	r18, r24
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	8a 81       	ldd	r24, Y+2	; 0x02
    315a:	9b 81       	ldd	r25, Y+3	; 0x03
    315c:	fc 01       	movw	r30, r24
    315e:	e2 0f       	add	r30, r18
    3160:	f3 1f       	adc	r31, r19
    3162:	80 81       	ld	r24, Z
    3164:	0e 94 24 14 	call	0x2848	; 0x2848 <LCD_displayCharacter>
		i++;
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	8f 5f       	subi	r24, 0xFF	; 255
    316c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    316e:	89 81       	ldd	r24, Y+1	; 0x01
    3170:	28 2f       	mov	r18, r24
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	8a 81       	ldd	r24, Y+2	; 0x02
    3176:	9b 81       	ldd	r25, Y+3	; 0x03
    3178:	fc 01       	movw	r30, r24
    317a:	e2 0f       	add	r30, r18
    317c:	f3 1f       	adc	r31, r19
    317e:	80 81       	ld	r24, Z
    3180:	88 23       	and	r24, r24
    3182:	39 f7       	brne	.-50     	; 0x3152 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3184:	0f 90       	pop	r0
    3186:	0f 90       	pop	r0
    3188:	0f 90       	pop	r0
    318a:	cf 91       	pop	r28
    318c:	df 91       	pop	r29
    318e:	08 95       	ret

00003190 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3190:	df 93       	push	r29
    3192:	cf 93       	push	r28
    3194:	00 d0       	rcall	.+0      	; 0x3196 <LCD_moveCursor+0x6>
    3196:	00 d0       	rcall	.+0      	; 0x3198 <LCD_moveCursor+0x8>
    3198:	0f 92       	push	r0
    319a:	cd b7       	in	r28, 0x3d	; 61
    319c:	de b7       	in	r29, 0x3e	; 62
    319e:	8a 83       	std	Y+2, r24	; 0x02
    31a0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    31a2:	8a 81       	ldd	r24, Y+2	; 0x02
    31a4:	28 2f       	mov	r18, r24
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	3d 83       	std	Y+5, r19	; 0x05
    31aa:	2c 83       	std	Y+4, r18	; 0x04
    31ac:	8c 81       	ldd	r24, Y+4	; 0x04
    31ae:	9d 81       	ldd	r25, Y+5	; 0x05
    31b0:	81 30       	cpi	r24, 0x01	; 1
    31b2:	91 05       	cpc	r25, r1
    31b4:	c1 f0       	breq	.+48     	; 0x31e6 <LCD_moveCursor+0x56>
    31b6:	2c 81       	ldd	r18, Y+4	; 0x04
    31b8:	3d 81       	ldd	r19, Y+5	; 0x05
    31ba:	22 30       	cpi	r18, 0x02	; 2
    31bc:	31 05       	cpc	r19, r1
    31be:	2c f4       	brge	.+10     	; 0x31ca <LCD_moveCursor+0x3a>
    31c0:	8c 81       	ldd	r24, Y+4	; 0x04
    31c2:	9d 81       	ldd	r25, Y+5	; 0x05
    31c4:	00 97       	sbiw	r24, 0x00	; 0
    31c6:	61 f0       	breq	.+24     	; 0x31e0 <LCD_moveCursor+0x50>
    31c8:	19 c0       	rjmp	.+50     	; 0x31fc <LCD_moveCursor+0x6c>
    31ca:	2c 81       	ldd	r18, Y+4	; 0x04
    31cc:	3d 81       	ldd	r19, Y+5	; 0x05
    31ce:	22 30       	cpi	r18, 0x02	; 2
    31d0:	31 05       	cpc	r19, r1
    31d2:	69 f0       	breq	.+26     	; 0x31ee <LCD_moveCursor+0x5e>
    31d4:	8c 81       	ldd	r24, Y+4	; 0x04
    31d6:	9d 81       	ldd	r25, Y+5	; 0x05
    31d8:	83 30       	cpi	r24, 0x03	; 3
    31da:	91 05       	cpc	r25, r1
    31dc:	61 f0       	breq	.+24     	; 0x31f6 <LCD_moveCursor+0x66>
    31de:	0e c0       	rjmp	.+28     	; 0x31fc <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    31e0:	8b 81       	ldd	r24, Y+3	; 0x03
    31e2:	89 83       	std	Y+1, r24	; 0x01
    31e4:	0b c0       	rjmp	.+22     	; 0x31fc <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    31e6:	8b 81       	ldd	r24, Y+3	; 0x03
    31e8:	80 5c       	subi	r24, 0xC0	; 192
    31ea:	89 83       	std	Y+1, r24	; 0x01
    31ec:	07 c0       	rjmp	.+14     	; 0x31fc <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    31ee:	8b 81       	ldd	r24, Y+3	; 0x03
    31f0:	80 5f       	subi	r24, 0xF0	; 240
    31f2:	89 83       	std	Y+1, r24	; 0x01
    31f4:	03 c0       	rjmp	.+6      	; 0x31fc <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    31f6:	8b 81       	ldd	r24, Y+3	; 0x03
    31f8:	80 5b       	subi	r24, 0xB0	; 176
    31fa:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	80 68       	ori	r24, 0x80	; 128
    3200:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_sendCommand>
}
    3204:	0f 90       	pop	r0
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	0f 90       	pop	r0
    320e:	cf 91       	pop	r28
    3210:	df 91       	pop	r29
    3212:	08 95       	ret

00003214 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3214:	df 93       	push	r29
    3216:	cf 93       	push	r28
    3218:	00 d0       	rcall	.+0      	; 0x321a <LCD_displayStringRowColumn+0x6>
    321a:	00 d0       	rcall	.+0      	; 0x321c <LCD_displayStringRowColumn+0x8>
    321c:	cd b7       	in	r28, 0x3d	; 61
    321e:	de b7       	in	r29, 0x3e	; 62
    3220:	89 83       	std	Y+1, r24	; 0x01
    3222:	6a 83       	std	Y+2, r22	; 0x02
    3224:	5c 83       	std	Y+4, r21	; 0x04
    3226:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3228:	89 81       	ldd	r24, Y+1	; 0x01
    322a:	6a 81       	ldd	r22, Y+2	; 0x02
    322c:	0e 94 c8 18 	call	0x3190	; 0x3190 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3230:	8b 81       	ldd	r24, Y+3	; 0x03
    3232:	9c 81       	ldd	r25, Y+4	; 0x04
    3234:	0e 94 9f 18 	call	0x313e	; 0x313e <LCD_displayString>
}
    3238:	0f 90       	pop	r0
    323a:	0f 90       	pop	r0
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	cf 91       	pop	r28
    3242:	df 91       	pop	r29
    3244:	08 95       	ret

00003246 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3246:	df 93       	push	r29
    3248:	cf 93       	push	r28
    324a:	cd b7       	in	r28, 0x3d	; 61
    324c:	de b7       	in	r29, 0x3e	; 62
    324e:	62 97       	sbiw	r28, 0x12	; 18
    3250:	0f b6       	in	r0, 0x3f	; 63
    3252:	f8 94       	cli
    3254:	de bf       	out	0x3e, r29	; 62
    3256:	0f be       	out	0x3f, r0	; 63
    3258:	cd bf       	out	0x3d, r28	; 61
    325a:	9a 8b       	std	Y+18, r25	; 0x12
    325c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    325e:	89 89       	ldd	r24, Y+17	; 0x11
    3260:	9a 89       	ldd	r25, Y+18	; 0x12
    3262:	9e 01       	movw	r18, r28
    3264:	2f 5f       	subi	r18, 0xFF	; 255
    3266:	3f 4f       	sbci	r19, 0xFF	; 255
    3268:	b9 01       	movw	r22, r18
    326a:	4a e0       	ldi	r20, 0x0A	; 10
    326c:	50 e0       	ldi	r21, 0x00	; 0
    326e:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <itoa>
   LCD_displayString(buff); /* Display the string */
    3272:	ce 01       	movw	r24, r28
    3274:	01 96       	adiw	r24, 0x01	; 1
    3276:	0e 94 9f 18 	call	0x313e	; 0x313e <LCD_displayString>
}
    327a:	62 96       	adiw	r28, 0x12	; 18
    327c:	0f b6       	in	r0, 0x3f	; 63
    327e:	f8 94       	cli
    3280:	de bf       	out	0x3e, r29	; 62
    3282:	0f be       	out	0x3f, r0	; 63
    3284:	cd bf       	out	0x3d, r28	; 61
    3286:	cf 91       	pop	r28
    3288:	df 91       	pop	r29
    328a:	08 95       	ret

0000328c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    328c:	df 93       	push	r29
    328e:	cf 93       	push	r28
    3290:	cd b7       	in	r28, 0x3d	; 61
    3292:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_sendCommand>
}
    329a:	cf 91       	pop	r28
    329c:	df 91       	pop	r29
    329e:	08 95       	ret

000032a0 <main>:
		0x02,
		400
};


int main(void){
    32a0:	0f 93       	push	r16
    32a2:	1f 93       	push	r17
    32a4:	df 93       	push	r29
    32a6:	cf 93       	push	r28
    32a8:	cd b7       	in	r28, 0x3d	; 61
    32aa:	de b7       	in	r29, 0x3e	; 62
    32ac:	c8 57       	subi	r28, 0x78	; 120
    32ae:	d0 40       	sbci	r29, 0x00	; 0
    32b0:	0f b6       	in	r0, 0x3f	; 63
    32b2:	f8 94       	cli
    32b4:	de bf       	out	0x3e, r29	; 62
    32b6:	0f be       	out	0x3f, r0	; 63
    32b8:	cd bf       	out	0x3d, r28	; 61

	SREG|=(1<<7);
    32ba:	af e5       	ldi	r26, 0x5F	; 95
    32bc:	b0 e0       	ldi	r27, 0x00	; 0
    32be:	ef e5       	ldi	r30, 0x5F	; 95
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	80 81       	ld	r24, Z
    32c4:	80 68       	ori	r24, 0x80	; 128
    32c6:	8c 93       	st	X, r24
	SPI_initMaster();
    32c8:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <SPI_initMaster>
	ADC_init();
    32cc:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_init>
	LCD_init();
    32d0:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <LCD_init>
	TWI_init(&TWI_config);
    32d4:	8c ee       	ldi	r24, 0xEC	; 236
    32d6:	91 e0       	ldi	r25, 0x01	; 1
    32d8:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <TWI_init>
	Ultrasonic_init();
    32dc:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Ultrasonic_init>
	uint16 distance=0;
    32e0:	fe 01       	movw	r30, r28
    32e2:	e9 58       	subi	r30, 0x89	; 137
    32e4:	ff 4f       	sbci	r31, 0xFF	; 255
    32e6:	11 82       	std	Z+1, r1	; 0x01
    32e8:	10 82       	st	Z, r1
	uint8 speed=0;
    32ea:	fe 01       	movw	r30, r28
    32ec:	ea 58       	subi	r30, 0x8A	; 138
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	10 82       	st	Z, r1
	uint16 last_read=999;
    32f2:	fe 01       	movw	r30, r28
    32f4:	ec 58       	subi	r30, 0x8C	; 140
    32f6:	ff 4f       	sbci	r31, 0xFF	; 255
    32f8:	87 ee       	ldi	r24, 0xE7	; 231
    32fa:	93 e0       	ldi	r25, 0x03	; 3
    32fc:	91 83       	std	Z+1, r25	; 0x01
    32fe:	80 83       	st	Z, r24
	uint16 speed_last=999;
    3300:	fe 01       	movw	r30, r28
    3302:	ee 58       	subi	r30, 0x8E	; 142
    3304:	ff 4f       	sbci	r31, 0xFF	; 255
    3306:	87 ee       	ldi	r24, 0xE7	; 231
    3308:	93 e0       	ldi	r25, 0x03	; 3
    330a:	91 83       	std	Z+1, r25	; 0x01
    330c:	80 83       	st	Z, r24
	uint8 crash_flag=1;
    330e:	fe 01       	movw	r30, r28
    3310:	ef 58       	subi	r30, 0x8F	; 143
    3312:	ff 4f       	sbci	r31, 0xFF	; 255
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	80 83       	st	Z, r24
	LCD_displayStringRowColumn(0, 0, "Task for CUERT");
    3318:	20 e6       	ldi	r18, 0x60	; 96
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	80 e0       	ldi	r24, 0x00	; 0
    331e:	60 e0       	ldi	r22, 0x00	; 0
    3320:	a9 01       	movw	r20, r18
    3322:	0e 94 0a 19 	call	0x3214	; 0x3214 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Mohamed  Magdy");
    3326:	2f e6       	ldi	r18, 0x6F	; 111
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	81 e0       	ldi	r24, 0x01	; 1
    332c:	60 e0       	ldi	r22, 0x00	; 0
    332e:	a9 01       	movw	r20, r18
    3330:	0e 94 0a 19 	call	0x3214	; 0x3214 <LCD_displayStringRowColumn>
    3334:	fe 01       	movw	r30, r28
    3336:	e3 59       	subi	r30, 0x93	; 147
    3338:	ff 4f       	sbci	r31, 0xFF	; 255
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	aa e7       	ldi	r26, 0x7A	; 122
    3340:	b5 e4       	ldi	r27, 0x45	; 69
    3342:	80 83       	st	Z, r24
    3344:	91 83       	std	Z+1, r25	; 0x01
    3346:	a2 83       	std	Z+2, r26	; 0x02
    3348:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    334a:	8e 01       	movw	r16, r28
    334c:	07 59       	subi	r16, 0x97	; 151
    334e:	1f 4f       	sbci	r17, 0xFF	; 255
    3350:	fe 01       	movw	r30, r28
    3352:	e3 59       	subi	r30, 0x93	; 147
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	60 81       	ld	r22, Z
    3358:	71 81       	ldd	r23, Z+1	; 0x01
    335a:	82 81       	ldd	r24, Z+2	; 0x02
    335c:	93 81       	ldd	r25, Z+3	; 0x03
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	4a e7       	ldi	r20, 0x7A	; 122
    3364:	55 e4       	ldi	r21, 0x45	; 69
    3366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	f8 01       	movw	r30, r16
    3370:	80 83       	st	Z, r24
    3372:	91 83       	std	Z+1, r25	; 0x01
    3374:	a2 83       	std	Z+2, r26	; 0x02
    3376:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3378:	fe 01       	movw	r30, r28
    337a:	e7 59       	subi	r30, 0x97	; 151
    337c:	ff 4f       	sbci	r31, 0xFF	; 255
    337e:	60 81       	ld	r22, Z
    3380:	71 81       	ldd	r23, Z+1	; 0x01
    3382:	82 81       	ldd	r24, Z+2	; 0x02
    3384:	93 81       	ldd	r25, Z+3	; 0x03
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	40 e8       	ldi	r20, 0x80	; 128
    338c:	5f e3       	ldi	r21, 0x3F	; 63
    338e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3392:	88 23       	and	r24, r24
    3394:	44 f4       	brge	.+16     	; 0x33a6 <main+0x106>
		__ticks = 1;
    3396:	fe 01       	movw	r30, r28
    3398:	e9 59       	subi	r30, 0x99	; 153
    339a:	ff 4f       	sbci	r31, 0xFF	; 255
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	91 83       	std	Z+1, r25	; 0x01
    33a2:	80 83       	st	Z, r24
    33a4:	64 c0       	rjmp	.+200    	; 0x346e <main+0x1ce>
	else if (__tmp > 65535)
    33a6:	fe 01       	movw	r30, r28
    33a8:	e7 59       	subi	r30, 0x97	; 151
    33aa:	ff 4f       	sbci	r31, 0xFF	; 255
    33ac:	60 81       	ld	r22, Z
    33ae:	71 81       	ldd	r23, Z+1	; 0x01
    33b0:	82 81       	ldd	r24, Z+2	; 0x02
    33b2:	93 81       	ldd	r25, Z+3	; 0x03
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	3f ef       	ldi	r19, 0xFF	; 255
    33b8:	4f e7       	ldi	r20, 0x7F	; 127
    33ba:	57 e4       	ldi	r21, 0x47	; 71
    33bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33c0:	18 16       	cp	r1, r24
    33c2:	0c f0       	brlt	.+2      	; 0x33c6 <main+0x126>
    33c4:	43 c0       	rjmp	.+134    	; 0x344c <main+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c6:	fe 01       	movw	r30, r28
    33c8:	e3 59       	subi	r30, 0x93	; 147
    33ca:	ff 4f       	sbci	r31, 0xFF	; 255
    33cc:	60 81       	ld	r22, Z
    33ce:	71 81       	ldd	r23, Z+1	; 0x01
    33d0:	82 81       	ldd	r24, Z+2	; 0x02
    33d2:	93 81       	ldd	r25, Z+3	; 0x03
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	40 e2       	ldi	r20, 0x20	; 32
    33da:	51 e4       	ldi	r21, 0x41	; 65
    33dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	8e 01       	movw	r16, r28
    33e6:	09 59       	subi	r16, 0x99	; 153
    33e8:	1f 4f       	sbci	r17, 0xFF	; 255
    33ea:	bc 01       	movw	r22, r24
    33ec:	cd 01       	movw	r24, r26
    33ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	f8 01       	movw	r30, r16
    33f8:	91 83       	std	Z+1, r25	; 0x01
    33fa:	80 83       	st	Z, r24
    33fc:	1f c0       	rjmp	.+62     	; 0x343c <main+0x19c>
    33fe:	fe 01       	movw	r30, r28
    3400:	eb 59       	subi	r30, 0x9B	; 155
    3402:	ff 4f       	sbci	r31, 0xFF	; 255
    3404:	80 e9       	ldi	r24, 0x90	; 144
    3406:	91 e0       	ldi	r25, 0x01	; 1
    3408:	91 83       	std	Z+1, r25	; 0x01
    340a:	80 83       	st	Z, r24
    340c:	fe 01       	movw	r30, r28
    340e:	eb 59       	subi	r30, 0x9B	; 155
    3410:	ff 4f       	sbci	r31, 0xFF	; 255
    3412:	80 81       	ld	r24, Z
    3414:	91 81       	ldd	r25, Z+1	; 0x01
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	f1 f7       	brne	.-4      	; 0x3416 <main+0x176>
    341a:	fe 01       	movw	r30, r28
    341c:	eb 59       	subi	r30, 0x9B	; 155
    341e:	ff 4f       	sbci	r31, 0xFF	; 255
    3420:	91 83       	std	Z+1, r25	; 0x01
    3422:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3424:	de 01       	movw	r26, r28
    3426:	a9 59       	subi	r26, 0x99	; 153
    3428:	bf 4f       	sbci	r27, 0xFF	; 255
    342a:	fe 01       	movw	r30, r28
    342c:	e9 59       	subi	r30, 0x99	; 153
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	80 81       	ld	r24, Z
    3432:	91 81       	ldd	r25, Z+1	; 0x01
    3434:	01 97       	sbiw	r24, 0x01	; 1
    3436:	11 96       	adiw	r26, 0x01	; 1
    3438:	9c 93       	st	X, r25
    343a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    343c:	fe 01       	movw	r30, r28
    343e:	e9 59       	subi	r30, 0x99	; 153
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	80 81       	ld	r24, Z
    3444:	91 81       	ldd	r25, Z+1	; 0x01
    3446:	00 97       	sbiw	r24, 0x00	; 0
    3448:	d1 f6       	brne	.-76     	; 0x33fe <main+0x15e>
    344a:	27 c0       	rjmp	.+78     	; 0x349a <main+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    344c:	8e 01       	movw	r16, r28
    344e:	09 59       	subi	r16, 0x99	; 153
    3450:	1f 4f       	sbci	r17, 0xFF	; 255
    3452:	fe 01       	movw	r30, r28
    3454:	e7 59       	subi	r30, 0x97	; 151
    3456:	ff 4f       	sbci	r31, 0xFF	; 255
    3458:	60 81       	ld	r22, Z
    345a:	71 81       	ldd	r23, Z+1	; 0x01
    345c:	82 81       	ldd	r24, Z+2	; 0x02
    345e:	93 81       	ldd	r25, Z+3	; 0x03
    3460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	f8 01       	movw	r30, r16
    346a:	91 83       	std	Z+1, r25	; 0x01
    346c:	80 83       	st	Z, r24
    346e:	de 01       	movw	r26, r28
    3470:	ad 59       	subi	r26, 0x9D	; 157
    3472:	bf 4f       	sbci	r27, 0xFF	; 255
    3474:	fe 01       	movw	r30, r28
    3476:	e9 59       	subi	r30, 0x99	; 153
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	80 81       	ld	r24, Z
    347c:	91 81       	ldd	r25, Z+1	; 0x01
    347e:	8d 93       	st	X+, r24
    3480:	9c 93       	st	X, r25
    3482:	fe 01       	movw	r30, r28
    3484:	ed 59       	subi	r30, 0x9D	; 157
    3486:	ff 4f       	sbci	r31, 0xFF	; 255
    3488:	80 81       	ld	r24, Z
    348a:	91 81       	ldd	r25, Z+1	; 0x01
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	f1 f7       	brne	.-4      	; 0x348c <main+0x1ec>
    3490:	fe 01       	movw	r30, r28
    3492:	ed 59       	subi	r30, 0x9D	; 157
    3494:	ff 4f       	sbci	r31, 0xFF	; 255
    3496:	91 83       	std	Z+1, r25	; 0x01
    3498:	80 83       	st	Z, r24
	_delay_ms(4000);
	LCD_clearScreen();
    349a:	0e 94 46 19 	call	0x328c	; 0x328c <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Mini Smart");
    349e:	2e e7       	ldi	r18, 0x7E	; 126
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	80 e0       	ldi	r24, 0x00	; 0
    34a4:	60 e0       	ldi	r22, 0x00	; 0
    34a6:	a9 01       	movw	r20, r18
    34a8:	0e 94 0a 19 	call	0x3214	; 0x3214 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0,"Vehicle SIM.");
    34ac:	29 e8       	ldi	r18, 0x89	; 137
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	60 e0       	ldi	r22, 0x00	; 0
    34b4:	a9 01       	movw	r20, r18
    34b6:	0e 94 0a 19 	call	0x3214	; 0x3214 <LCD_displayStringRowColumn>
    34ba:	fe 01       	movw	r30, r28
    34bc:	e1 5a       	subi	r30, 0xA1	; 161
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	90 e8       	ldi	r25, 0x80	; 128
    34c4:	ab e3       	ldi	r26, 0x3B	; 59
    34c6:	b5 e4       	ldi	r27, 0x45	; 69
    34c8:	80 83       	st	Z, r24
    34ca:	91 83       	std	Z+1, r25	; 0x01
    34cc:	a2 83       	std	Z+2, r26	; 0x02
    34ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d0:	8e 01       	movw	r16, r28
    34d2:	05 5a       	subi	r16, 0xA5	; 165
    34d4:	1f 4f       	sbci	r17, 0xFF	; 255
    34d6:	fe 01       	movw	r30, r28
    34d8:	e1 5a       	subi	r30, 0xA1	; 161
    34da:	ff 4f       	sbci	r31, 0xFF	; 255
    34dc:	60 81       	ld	r22, Z
    34de:	71 81       	ldd	r23, Z+1	; 0x01
    34e0:	82 81       	ldd	r24, Z+2	; 0x02
    34e2:	93 81       	ldd	r25, Z+3	; 0x03
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	4a e7       	ldi	r20, 0x7A	; 122
    34ea:	55 e4       	ldi	r21, 0x45	; 69
    34ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	f8 01       	movw	r30, r16
    34f6:	80 83       	st	Z, r24
    34f8:	91 83       	std	Z+1, r25	; 0x01
    34fa:	a2 83       	std	Z+2, r26	; 0x02
    34fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34fe:	fe 01       	movw	r30, r28
    3500:	e5 5a       	subi	r30, 0xA5	; 165
    3502:	ff 4f       	sbci	r31, 0xFF	; 255
    3504:	60 81       	ld	r22, Z
    3506:	71 81       	ldd	r23, Z+1	; 0x01
    3508:	82 81       	ldd	r24, Z+2	; 0x02
    350a:	93 81       	ldd	r25, Z+3	; 0x03
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	40 e8       	ldi	r20, 0x80	; 128
    3512:	5f e3       	ldi	r21, 0x3F	; 63
    3514:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3518:	88 23       	and	r24, r24
    351a:	44 f4       	brge	.+16     	; 0x352c <main+0x28c>
		__ticks = 1;
    351c:	fe 01       	movw	r30, r28
    351e:	e7 5a       	subi	r30, 0xA7	; 167
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	91 83       	std	Z+1, r25	; 0x01
    3528:	80 83       	st	Z, r24
    352a:	64 c0       	rjmp	.+200    	; 0x35f4 <main+0x354>
	else if (__tmp > 65535)
    352c:	fe 01       	movw	r30, r28
    352e:	e5 5a       	subi	r30, 0xA5	; 165
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	60 81       	ld	r22, Z
    3534:	71 81       	ldd	r23, Z+1	; 0x01
    3536:	82 81       	ldd	r24, Z+2	; 0x02
    3538:	93 81       	ldd	r25, Z+3	; 0x03
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	3f ef       	ldi	r19, 0xFF	; 255
    353e:	4f e7       	ldi	r20, 0x7F	; 127
    3540:	57 e4       	ldi	r21, 0x47	; 71
    3542:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3546:	18 16       	cp	r1, r24
    3548:	0c f0       	brlt	.+2      	; 0x354c <main+0x2ac>
    354a:	43 c0       	rjmp	.+134    	; 0x35d2 <main+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354c:	fe 01       	movw	r30, r28
    354e:	e1 5a       	subi	r30, 0xA1	; 161
    3550:	ff 4f       	sbci	r31, 0xFF	; 255
    3552:	60 81       	ld	r22, Z
    3554:	71 81       	ldd	r23, Z+1	; 0x01
    3556:	82 81       	ldd	r24, Z+2	; 0x02
    3558:	93 81       	ldd	r25, Z+3	; 0x03
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	40 e2       	ldi	r20, 0x20	; 32
    3560:	51 e4       	ldi	r21, 0x41	; 65
    3562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	8e 01       	movw	r16, r28
    356c:	07 5a       	subi	r16, 0xA7	; 167
    356e:	1f 4f       	sbci	r17, 0xFF	; 255
    3570:	bc 01       	movw	r22, r24
    3572:	cd 01       	movw	r24, r26
    3574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3578:	dc 01       	movw	r26, r24
    357a:	cb 01       	movw	r24, r22
    357c:	f8 01       	movw	r30, r16
    357e:	91 83       	std	Z+1, r25	; 0x01
    3580:	80 83       	st	Z, r24
    3582:	1f c0       	rjmp	.+62     	; 0x35c2 <main+0x322>
    3584:	fe 01       	movw	r30, r28
    3586:	e9 5a       	subi	r30, 0xA9	; 169
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	80 e9       	ldi	r24, 0x90	; 144
    358c:	91 e0       	ldi	r25, 0x01	; 1
    358e:	91 83       	std	Z+1, r25	; 0x01
    3590:	80 83       	st	Z, r24
    3592:	fe 01       	movw	r30, r28
    3594:	e9 5a       	subi	r30, 0xA9	; 169
    3596:	ff 4f       	sbci	r31, 0xFF	; 255
    3598:	80 81       	ld	r24, Z
    359a:	91 81       	ldd	r25, Z+1	; 0x01
    359c:	01 97       	sbiw	r24, 0x01	; 1
    359e:	f1 f7       	brne	.-4      	; 0x359c <main+0x2fc>
    35a0:	fe 01       	movw	r30, r28
    35a2:	e9 5a       	subi	r30, 0xA9	; 169
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	91 83       	std	Z+1, r25	; 0x01
    35a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35aa:	de 01       	movw	r26, r28
    35ac:	a7 5a       	subi	r26, 0xA7	; 167
    35ae:	bf 4f       	sbci	r27, 0xFF	; 255
    35b0:	fe 01       	movw	r30, r28
    35b2:	e7 5a       	subi	r30, 0xA7	; 167
    35b4:	ff 4f       	sbci	r31, 0xFF	; 255
    35b6:	80 81       	ld	r24, Z
    35b8:	91 81       	ldd	r25, Z+1	; 0x01
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	11 96       	adiw	r26, 0x01	; 1
    35be:	9c 93       	st	X, r25
    35c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c2:	fe 01       	movw	r30, r28
    35c4:	e7 5a       	subi	r30, 0xA7	; 167
    35c6:	ff 4f       	sbci	r31, 0xFF	; 255
    35c8:	80 81       	ld	r24, Z
    35ca:	91 81       	ldd	r25, Z+1	; 0x01
    35cc:	00 97       	sbiw	r24, 0x00	; 0
    35ce:	d1 f6       	brne	.-76     	; 0x3584 <main+0x2e4>
    35d0:	27 c0       	rjmp	.+78     	; 0x3620 <main+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d2:	8e 01       	movw	r16, r28
    35d4:	07 5a       	subi	r16, 0xA7	; 167
    35d6:	1f 4f       	sbci	r17, 0xFF	; 255
    35d8:	fe 01       	movw	r30, r28
    35da:	e5 5a       	subi	r30, 0xA5	; 165
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	60 81       	ld	r22, Z
    35e0:	71 81       	ldd	r23, Z+1	; 0x01
    35e2:	82 81       	ldd	r24, Z+2	; 0x02
    35e4:	93 81       	ldd	r25, Z+3	; 0x03
    35e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ea:	dc 01       	movw	r26, r24
    35ec:	cb 01       	movw	r24, r22
    35ee:	f8 01       	movw	r30, r16
    35f0:	91 83       	std	Z+1, r25	; 0x01
    35f2:	80 83       	st	Z, r24
    35f4:	de 01       	movw	r26, r28
    35f6:	ab 5a       	subi	r26, 0xAB	; 171
    35f8:	bf 4f       	sbci	r27, 0xFF	; 255
    35fa:	fe 01       	movw	r30, r28
    35fc:	e7 5a       	subi	r30, 0xA7	; 167
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	80 81       	ld	r24, Z
    3602:	91 81       	ldd	r25, Z+1	; 0x01
    3604:	8d 93       	st	X+, r24
    3606:	9c 93       	st	X, r25
    3608:	fe 01       	movw	r30, r28
    360a:	eb 5a       	subi	r30, 0xAB	; 171
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	80 81       	ld	r24, Z
    3610:	91 81       	ldd	r25, Z+1	; 0x01
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	f1 f7       	brne	.-4      	; 0x3612 <main+0x372>
    3616:	fe 01       	movw	r30, r28
    3618:	eb 5a       	subi	r30, 0xAB	; 171
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	91 83       	std	Z+1, r25	; 0x01
    361e:	80 83       	st	Z, r24
	_delay_ms(3000);
	LCD_clearScreen();
    3620:	0e 94 46 19 	call	0x328c	; 0x328c <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Distance=    cm");
    3624:	26 e9       	ldi	r18, 0x96	; 150
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	80 e0       	ldi	r24, 0x00	; 0
    362a:	60 e0       	ldi	r22, 0x00	; 0
    362c:	a9 01       	movw	r20, r18
    362e:	0e 94 0a 19 	call	0x3214	; 0x3214 <LCD_displayStringRowColumn>

	LCD_displayStringRowColumn(1, 0, "Speed % =    ");
    3632:	26 ea       	ldi	r18, 0xA6	; 166
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	60 e0       	ldi	r22, 0x00	; 0
    363a:	a9 01       	movw	r20, r18
    363c:	0e 94 0a 19 	call	0x3214	; 0x3214 <LCD_displayStringRowColumn>

	while(1){
		speed=POT_SPEED();
    3640:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <POT_SPEED>
    3644:	fe 01       	movw	r30, r28
    3646:	ea 58       	subi	r30, 0x8A	; 138
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	80 83       	st	Z, r24




		TWI_start();
    364c:	0e 94 8c 0c 	call	0x1918	; 0x1918 <TWI_start>

		if (TWI_getStatus() == 0x08)
    3650:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <TWI_getStatus>
    3654:	88 30       	cpi	r24, 0x08	; 8
    3656:	09 f0       	breq	.+2      	; 0x365a <main+0x3ba>
    3658:	2b c2       	rjmp	.+1110   	; 0x3ab0 <main+0x810>
		{
			TWI_writeByte((0x02 << 1));
    365a:	84 e0       	ldi	r24, 0x04	; 4
    365c:	0e 94 a7 0c 	call	0x194e	; 0x194e <TWI_writeByte>

			if (TWI_getStatus() == 0x18)
    3660:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <TWI_getStatus>
    3664:	88 31       	cpi	r24, 0x18	; 24
    3666:	09 f0       	breq	.+2      	; 0x366a <main+0x3ca>
    3668:	23 c2       	rjmp	.+1094   	; 0x3ab0 <main+0x810>
			{if(distance<=20){
    366a:	fe 01       	movw	r30, r28
    366c:	e9 58       	subi	r30, 0x89	; 137
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	80 81       	ld	r24, Z
    3672:	91 81       	ldd	r25, Z+1	; 0x01
    3674:	85 31       	cpi	r24, 0x15	; 21
    3676:	91 05       	cpc	r25, r1
    3678:	08 f0       	brcs	.+2      	; 0x367c <main+0x3dc>
    367a:	cb c0       	rjmp	.+406    	; 0x3812 <main+0x572>
				TWI_writeByte(0);
    367c:	80 e0       	ldi	r24, 0x00	; 0
    367e:	0e 94 a7 0c 	call	0x194e	; 0x194e <TWI_writeByte>
    3682:	fe 01       	movw	r30, r28
    3684:	ef 5a       	subi	r30, 0xAF	; 175
    3686:	ff 4f       	sbci	r31, 0xFF	; 255
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	a0 ea       	ldi	r26, 0xA0	; 160
    368e:	b1 e4       	ldi	r27, 0x41	; 65
    3690:	80 83       	st	Z, r24
    3692:	91 83       	std	Z+1, r25	; 0x01
    3694:	a2 83       	std	Z+2, r26	; 0x02
    3696:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3698:	8e 01       	movw	r16, r28
    369a:	03 5b       	subi	r16, 0xB3	; 179
    369c:	1f 4f       	sbci	r17, 0xFF	; 255
    369e:	fe 01       	movw	r30, r28
    36a0:	ef 5a       	subi	r30, 0xAF	; 175
    36a2:	ff 4f       	sbci	r31, 0xFF	; 255
    36a4:	60 81       	ld	r22, Z
    36a6:	71 81       	ldd	r23, Z+1	; 0x01
    36a8:	82 81       	ldd	r24, Z+2	; 0x02
    36aa:	93 81       	ldd	r25, Z+3	; 0x03
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	4a e7       	ldi	r20, 0x7A	; 122
    36b2:	55 e4       	ldi	r21, 0x45	; 69
    36b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	f8 01       	movw	r30, r16
    36be:	80 83       	st	Z, r24
    36c0:	91 83       	std	Z+1, r25	; 0x01
    36c2:	a2 83       	std	Z+2, r26	; 0x02
    36c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36c6:	fe 01       	movw	r30, r28
    36c8:	e3 5b       	subi	r30, 0xB3	; 179
    36ca:	ff 4f       	sbci	r31, 0xFF	; 255
    36cc:	60 81       	ld	r22, Z
    36ce:	71 81       	ldd	r23, Z+1	; 0x01
    36d0:	82 81       	ldd	r24, Z+2	; 0x02
    36d2:	93 81       	ldd	r25, Z+3	; 0x03
    36d4:	20 e0       	ldi	r18, 0x00	; 0
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	40 e8       	ldi	r20, 0x80	; 128
    36da:	5f e3       	ldi	r21, 0x3F	; 63
    36dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36e0:	88 23       	and	r24, r24
    36e2:	44 f4       	brge	.+16     	; 0x36f4 <main+0x454>
		__ticks = 1;
    36e4:	fe 01       	movw	r30, r28
    36e6:	e5 5b       	subi	r30, 0xB5	; 181
    36e8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	91 83       	std	Z+1, r25	; 0x01
    36f0:	80 83       	st	Z, r24
    36f2:	64 c0       	rjmp	.+200    	; 0x37bc <main+0x51c>
	else if (__tmp > 65535)
    36f4:	fe 01       	movw	r30, r28
    36f6:	e3 5b       	subi	r30, 0xB3	; 179
    36f8:	ff 4f       	sbci	r31, 0xFF	; 255
    36fa:	60 81       	ld	r22, Z
    36fc:	71 81       	ldd	r23, Z+1	; 0x01
    36fe:	82 81       	ldd	r24, Z+2	; 0x02
    3700:	93 81       	ldd	r25, Z+3	; 0x03
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	3f ef       	ldi	r19, 0xFF	; 255
    3706:	4f e7       	ldi	r20, 0x7F	; 127
    3708:	57 e4       	ldi	r21, 0x47	; 71
    370a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    370e:	18 16       	cp	r1, r24
    3710:	0c f0       	brlt	.+2      	; 0x3714 <main+0x474>
    3712:	43 c0       	rjmp	.+134    	; 0x379a <main+0x4fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3714:	fe 01       	movw	r30, r28
    3716:	ef 5a       	subi	r30, 0xAF	; 175
    3718:	ff 4f       	sbci	r31, 0xFF	; 255
    371a:	60 81       	ld	r22, Z
    371c:	71 81       	ldd	r23, Z+1	; 0x01
    371e:	82 81       	ldd	r24, Z+2	; 0x02
    3720:	93 81       	ldd	r25, Z+3	; 0x03
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	40 e2       	ldi	r20, 0x20	; 32
    3728:	51 e4       	ldi	r21, 0x41	; 65
    372a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	8e 01       	movw	r16, r28
    3734:	05 5b       	subi	r16, 0xB5	; 181
    3736:	1f 4f       	sbci	r17, 0xFF	; 255
    3738:	bc 01       	movw	r22, r24
    373a:	cd 01       	movw	r24, r26
    373c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	f8 01       	movw	r30, r16
    3746:	91 83       	std	Z+1, r25	; 0x01
    3748:	80 83       	st	Z, r24
    374a:	1f c0       	rjmp	.+62     	; 0x378a <main+0x4ea>
    374c:	fe 01       	movw	r30, r28
    374e:	e7 5b       	subi	r30, 0xB7	; 183
    3750:	ff 4f       	sbci	r31, 0xFF	; 255
    3752:	80 e9       	ldi	r24, 0x90	; 144
    3754:	91 e0       	ldi	r25, 0x01	; 1
    3756:	91 83       	std	Z+1, r25	; 0x01
    3758:	80 83       	st	Z, r24
    375a:	fe 01       	movw	r30, r28
    375c:	e7 5b       	subi	r30, 0xB7	; 183
    375e:	ff 4f       	sbci	r31, 0xFF	; 255
    3760:	80 81       	ld	r24, Z
    3762:	91 81       	ldd	r25, Z+1	; 0x01
    3764:	01 97       	sbiw	r24, 0x01	; 1
    3766:	f1 f7       	brne	.-4      	; 0x3764 <main+0x4c4>
    3768:	fe 01       	movw	r30, r28
    376a:	e7 5b       	subi	r30, 0xB7	; 183
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	91 83       	std	Z+1, r25	; 0x01
    3770:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3772:	de 01       	movw	r26, r28
    3774:	a5 5b       	subi	r26, 0xB5	; 181
    3776:	bf 4f       	sbci	r27, 0xFF	; 255
    3778:	fe 01       	movw	r30, r28
    377a:	e5 5b       	subi	r30, 0xB5	; 181
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	80 81       	ld	r24, Z
    3780:	91 81       	ldd	r25, Z+1	; 0x01
    3782:	01 97       	sbiw	r24, 0x01	; 1
    3784:	11 96       	adiw	r26, 0x01	; 1
    3786:	9c 93       	st	X, r25
    3788:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    378a:	fe 01       	movw	r30, r28
    378c:	e5 5b       	subi	r30, 0xB5	; 181
    378e:	ff 4f       	sbci	r31, 0xFF	; 255
    3790:	80 81       	ld	r24, Z
    3792:	91 81       	ldd	r25, Z+1	; 0x01
    3794:	00 97       	sbiw	r24, 0x00	; 0
    3796:	d1 f6       	brne	.-76     	; 0x374c <main+0x4ac>
    3798:	28 c0       	rjmp	.+80     	; 0x37ea <main+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    379a:	8e 01       	movw	r16, r28
    379c:	05 5b       	subi	r16, 0xB5	; 181
    379e:	1f 4f       	sbci	r17, 0xFF	; 255
    37a0:	fe 01       	movw	r30, r28
    37a2:	e3 5b       	subi	r30, 0xB3	; 179
    37a4:	ff 4f       	sbci	r31, 0xFF	; 255
    37a6:	60 81       	ld	r22, Z
    37a8:	71 81       	ldd	r23, Z+1	; 0x01
    37aa:	82 81       	ldd	r24, Z+2	; 0x02
    37ac:	93 81       	ldd	r25, Z+3	; 0x03
    37ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	f8 01       	movw	r30, r16
    37b8:	91 83       	std	Z+1, r25	; 0x01
    37ba:	80 83       	st	Z, r24
    37bc:	de 01       	movw	r26, r28
    37be:	a9 5b       	subi	r26, 0xB9	; 185
    37c0:	bf 4f       	sbci	r27, 0xFF	; 255
    37c2:	fe 01       	movw	r30, r28
    37c4:	e5 5b       	subi	r30, 0xB5	; 181
    37c6:	ff 4f       	sbci	r31, 0xFF	; 255
    37c8:	80 81       	ld	r24, Z
    37ca:	91 81       	ldd	r25, Z+1	; 0x01
    37cc:	11 96       	adiw	r26, 0x01	; 1
    37ce:	9c 93       	st	X, r25
    37d0:	8e 93       	st	-X, r24
    37d2:	fe 01       	movw	r30, r28
    37d4:	e9 5b       	subi	r30, 0xB9	; 185
    37d6:	ff 4f       	sbci	r31, 0xFF	; 255
    37d8:	80 81       	ld	r24, Z
    37da:	91 81       	ldd	r25, Z+1	; 0x01
    37dc:	01 97       	sbiw	r24, 0x01	; 1
    37de:	f1 f7       	brne	.-4      	; 0x37dc <main+0x53c>
    37e0:	fe 01       	movw	r30, r28
    37e2:	e9 5b       	subi	r30, 0xB9	; 185
    37e4:	ff 4f       	sbci	r31, 0xFF	; 255
    37e6:	91 83       	std	Z+1, r25	; 0x01
    37e8:	80 83       	st	Z, r24
				_delay_ms(20);
				if(crash_flag==0){
    37ea:	fe 01       	movw	r30, r28
    37ec:	ef 58       	subi	r30, 0x8F	; 143
    37ee:	ff 4f       	sbci	r31, 0xFF	; 255
    37f0:	80 81       	ld	r24, Z
    37f2:	88 23       	and	r24, r24
    37f4:	09 f0       	breq	.+2      	; 0x37f8 <main+0x558>
    37f6:	5c c1       	rjmp	.+696    	; 0x3ab0 <main+0x810>
					LCD_displayStringRowColumn(1, 0, "Motor OFF CRASH! ");
    37f8:	24 eb       	ldi	r18, 0xB4	; 180
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	60 e0       	ldi	r22, 0x00	; 0
    3800:	a9 01       	movw	r20, r18
    3802:	0e 94 0a 19 	call	0x3214	; 0x3214 <LCD_displayStringRowColumn>
					crash_flag=1;
    3806:	fe 01       	movw	r30, r28
    3808:	ef 58       	subi	r30, 0x8F	; 143
    380a:	ff 4f       	sbci	r31, 0xFF	; 255
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	80 83       	st	Z, r24
    3810:	4f c1       	rjmp	.+670    	; 0x3ab0 <main+0x810>
				}
			}
			else{
				TWI_writeByte(speed);
    3812:	fe 01       	movw	r30, r28
    3814:	ea 58       	subi	r30, 0x8A	; 138
    3816:	ff 4f       	sbci	r31, 0xFF	; 255
    3818:	80 81       	ld	r24, Z
    381a:	0e 94 a7 0c 	call	0x194e	; 0x194e <TWI_writeByte>
    381e:	fe 01       	movw	r30, r28
    3820:	ed 5b       	subi	r30, 0xBD	; 189
    3822:	ff 4f       	sbci	r31, 0xFF	; 255
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	a0 ea       	ldi	r26, 0xA0	; 160
    382a:	b1 e4       	ldi	r27, 0x41	; 65
    382c:	80 83       	st	Z, r24
    382e:	91 83       	std	Z+1, r25	; 0x01
    3830:	a2 83       	std	Z+2, r26	; 0x02
    3832:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3834:	8e 01       	movw	r16, r28
    3836:	01 5c       	subi	r16, 0xC1	; 193
    3838:	1f 4f       	sbci	r17, 0xFF	; 255
    383a:	fe 01       	movw	r30, r28
    383c:	ed 5b       	subi	r30, 0xBD	; 189
    383e:	ff 4f       	sbci	r31, 0xFF	; 255
    3840:	60 81       	ld	r22, Z
    3842:	71 81       	ldd	r23, Z+1	; 0x01
    3844:	82 81       	ldd	r24, Z+2	; 0x02
    3846:	93 81       	ldd	r25, Z+3	; 0x03
    3848:	20 e0       	ldi	r18, 0x00	; 0
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	4a e7       	ldi	r20, 0x7A	; 122
    384e:	55 e4       	ldi	r21, 0x45	; 69
    3850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3854:	dc 01       	movw	r26, r24
    3856:	cb 01       	movw	r24, r22
    3858:	f8 01       	movw	r30, r16
    385a:	80 83       	st	Z, r24
    385c:	91 83       	std	Z+1, r25	; 0x01
    385e:	a2 83       	std	Z+2, r26	; 0x02
    3860:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3862:	fe 01       	movw	r30, r28
    3864:	ff 96       	adiw	r30, 0x3f	; 63
    3866:	60 81       	ld	r22, Z
    3868:	71 81       	ldd	r23, Z+1	; 0x01
    386a:	82 81       	ldd	r24, Z+2	; 0x02
    386c:	93 81       	ldd	r25, Z+3	; 0x03
    386e:	20 e0       	ldi	r18, 0x00	; 0
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	40 e8       	ldi	r20, 0x80	; 128
    3874:	5f e3       	ldi	r21, 0x3F	; 63
    3876:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    387a:	88 23       	and	r24, r24
    387c:	2c f4       	brge	.+10     	; 0x3888 <main+0x5e8>
		__ticks = 1;
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	9e af       	std	Y+62, r25	; 0x3e
    3884:	8d af       	std	Y+61, r24	; 0x3d
    3886:	46 c0       	rjmp	.+140    	; 0x3914 <main+0x674>
	else if (__tmp > 65535)
    3888:	fe 01       	movw	r30, r28
    388a:	ff 96       	adiw	r30, 0x3f	; 63
    388c:	60 81       	ld	r22, Z
    388e:	71 81       	ldd	r23, Z+1	; 0x01
    3890:	82 81       	ldd	r24, Z+2	; 0x02
    3892:	93 81       	ldd	r25, Z+3	; 0x03
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	3f ef       	ldi	r19, 0xFF	; 255
    3898:	4f e7       	ldi	r20, 0x7F	; 127
    389a:	57 e4       	ldi	r21, 0x47	; 71
    389c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38a0:	18 16       	cp	r1, r24
    38a2:	64 f5       	brge	.+88     	; 0x38fc <main+0x65c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a4:	fe 01       	movw	r30, r28
    38a6:	ed 5b       	subi	r30, 0xBD	; 189
    38a8:	ff 4f       	sbci	r31, 0xFF	; 255
    38aa:	60 81       	ld	r22, Z
    38ac:	71 81       	ldd	r23, Z+1	; 0x01
    38ae:	82 81       	ldd	r24, Z+2	; 0x02
    38b0:	93 81       	ldd	r25, Z+3	; 0x03
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	40 e2       	ldi	r20, 0x20	; 32
    38b8:	51 e4       	ldi	r21, 0x41	; 65
    38ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38be:	dc 01       	movw	r26, r24
    38c0:	cb 01       	movw	r24, r22
    38c2:	bc 01       	movw	r22, r24
    38c4:	cd 01       	movw	r24, r26
    38c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ca:	dc 01       	movw	r26, r24
    38cc:	cb 01       	movw	r24, r22
    38ce:	9e af       	std	Y+62, r25	; 0x3e
    38d0:	8d af       	std	Y+61, r24	; 0x3d
    38d2:	0f c0       	rjmp	.+30     	; 0x38f2 <main+0x652>
    38d4:	80 e9       	ldi	r24, 0x90	; 144
    38d6:	91 e0       	ldi	r25, 0x01	; 1
    38d8:	9c af       	std	Y+60, r25	; 0x3c
    38da:	8b af       	std	Y+59, r24	; 0x3b
    38dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    38de:	9c ad       	ldd	r25, Y+60	; 0x3c
    38e0:	01 97       	sbiw	r24, 0x01	; 1
    38e2:	f1 f7       	brne	.-4      	; 0x38e0 <main+0x640>
    38e4:	9c af       	std	Y+60, r25	; 0x3c
    38e6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    38ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    38ec:	01 97       	sbiw	r24, 0x01	; 1
    38ee:	9e af       	std	Y+62, r25	; 0x3e
    38f0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    38f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    38f6:	00 97       	sbiw	r24, 0x00	; 0
    38f8:	69 f7       	brne	.-38     	; 0x38d4 <main+0x634>
    38fa:	16 c0       	rjmp	.+44     	; 0x3928 <main+0x688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38fc:	fe 01       	movw	r30, r28
    38fe:	ff 96       	adiw	r30, 0x3f	; 63
    3900:	60 81       	ld	r22, Z
    3902:	71 81       	ldd	r23, Z+1	; 0x01
    3904:	82 81       	ldd	r24, Z+2	; 0x02
    3906:	93 81       	ldd	r25, Z+3	; 0x03
    3908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390c:	dc 01       	movw	r26, r24
    390e:	cb 01       	movw	r24, r22
    3910:	9e af       	std	Y+62, r25	; 0x3e
    3912:	8d af       	std	Y+61, r24	; 0x3d
    3914:	8d ad       	ldd	r24, Y+61	; 0x3d
    3916:	9e ad       	ldd	r25, Y+62	; 0x3e
    3918:	9a af       	std	Y+58, r25	; 0x3a
    391a:	89 af       	std	Y+57, r24	; 0x39
    391c:	89 ad       	ldd	r24, Y+57	; 0x39
    391e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	f1 f7       	brne	.-4      	; 0x3920 <main+0x680>
    3924:	9a af       	std	Y+58, r25	; 0x3a
    3926:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(20);
				if(crash_flag==1){
    3928:	fe 01       	movw	r30, r28
    392a:	ef 58       	subi	r30, 0x8F	; 143
    392c:	ff 4f       	sbci	r31, 0xFF	; 255
    392e:	80 81       	ld	r24, Z
    3930:	81 30       	cpi	r24, 0x01	; 1
    3932:	09 f0       	breq	.+2      	; 0x3936 <main+0x696>
    3934:	90 c0       	rjmp	.+288    	; 0x3a56 <main+0x7b6>
					LCD_displayStringRowColumn(1, 0, "                ");
    3936:	26 ec       	ldi	r18, 0xC6	; 198
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	60 e0       	ldi	r22, 0x00	; 0
    393e:	a9 01       	movw	r20, r18
    3940:	0e 94 0a 19 	call	0x3214	; 0x3214 <LCD_displayStringRowColumn>
    3944:	80 e0       	ldi	r24, 0x00	; 0
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	a0 e8       	ldi	r26, 0x80	; 128
    394a:	bf e3       	ldi	r27, 0x3F	; 63
    394c:	8d ab       	std	Y+53, r24	; 0x35
    394e:	9e ab       	std	Y+54, r25	; 0x36
    3950:	af ab       	std	Y+55, r26	; 0x37
    3952:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3954:	6d a9       	ldd	r22, Y+53	; 0x35
    3956:	7e a9       	ldd	r23, Y+54	; 0x36
    3958:	8f a9       	ldd	r24, Y+55	; 0x37
    395a:	98 ad       	ldd	r25, Y+56	; 0x38
    395c:	20 e0       	ldi	r18, 0x00	; 0
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	4a e7       	ldi	r20, 0x7A	; 122
    3962:	55 e4       	ldi	r21, 0x45	; 69
    3964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3968:	dc 01       	movw	r26, r24
    396a:	cb 01       	movw	r24, r22
    396c:	89 ab       	std	Y+49, r24	; 0x31
    396e:	9a ab       	std	Y+50, r25	; 0x32
    3970:	ab ab       	std	Y+51, r26	; 0x33
    3972:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3974:	69 a9       	ldd	r22, Y+49	; 0x31
    3976:	7a a9       	ldd	r23, Y+50	; 0x32
    3978:	8b a9       	ldd	r24, Y+51	; 0x33
    397a:	9c a9       	ldd	r25, Y+52	; 0x34
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	40 e8       	ldi	r20, 0x80	; 128
    3982:	5f e3       	ldi	r21, 0x3F	; 63
    3984:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3988:	88 23       	and	r24, r24
    398a:	2c f4       	brge	.+10     	; 0x3996 <main+0x6f6>
		__ticks = 1;
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	98 ab       	std	Y+48, r25	; 0x30
    3992:	8f a7       	std	Y+47, r24	; 0x2f
    3994:	3f c0       	rjmp	.+126    	; 0x3a14 <main+0x774>
	else if (__tmp > 65535)
    3996:	69 a9       	ldd	r22, Y+49	; 0x31
    3998:	7a a9       	ldd	r23, Y+50	; 0x32
    399a:	8b a9       	ldd	r24, Y+51	; 0x33
    399c:	9c a9       	ldd	r25, Y+52	; 0x34
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	3f ef       	ldi	r19, 0xFF	; 255
    39a2:	4f e7       	ldi	r20, 0x7F	; 127
    39a4:	57 e4       	ldi	r21, 0x47	; 71
    39a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39aa:	18 16       	cp	r1, r24
    39ac:	4c f5       	brge	.+82     	; 0x3a00 <main+0x760>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ae:	6d a9       	ldd	r22, Y+53	; 0x35
    39b0:	7e a9       	ldd	r23, Y+54	; 0x36
    39b2:	8f a9       	ldd	r24, Y+55	; 0x37
    39b4:	98 ad       	ldd	r25, Y+56	; 0x38
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	40 e2       	ldi	r20, 0x20	; 32
    39bc:	51 e4       	ldi	r21, 0x41	; 65
    39be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	bc 01       	movw	r22, r24
    39c8:	cd 01       	movw	r24, r26
    39ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ce:	dc 01       	movw	r26, r24
    39d0:	cb 01       	movw	r24, r22
    39d2:	98 ab       	std	Y+48, r25	; 0x30
    39d4:	8f a7       	std	Y+47, r24	; 0x2f
    39d6:	0f c0       	rjmp	.+30     	; 0x39f6 <main+0x756>
    39d8:	80 e9       	ldi	r24, 0x90	; 144
    39da:	91 e0       	ldi	r25, 0x01	; 1
    39dc:	9e a7       	std	Y+46, r25	; 0x2e
    39de:	8d a7       	std	Y+45, r24	; 0x2d
    39e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    39e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    39e4:	01 97       	sbiw	r24, 0x01	; 1
    39e6:	f1 f7       	brne	.-4      	; 0x39e4 <main+0x744>
    39e8:	9e a7       	std	Y+46, r25	; 0x2e
    39ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    39ee:	98 a9       	ldd	r25, Y+48	; 0x30
    39f0:	01 97       	sbiw	r24, 0x01	; 1
    39f2:	98 ab       	std	Y+48, r25	; 0x30
    39f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    39f8:	98 a9       	ldd	r25, Y+48	; 0x30
    39fa:	00 97       	sbiw	r24, 0x00	; 0
    39fc:	69 f7       	brne	.-38     	; 0x39d8 <main+0x738>
    39fe:	14 c0       	rjmp	.+40     	; 0x3a28 <main+0x788>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a00:	69 a9       	ldd	r22, Y+49	; 0x31
    3a02:	7a a9       	ldd	r23, Y+50	; 0x32
    3a04:	8b a9       	ldd	r24, Y+51	; 0x33
    3a06:	9c a9       	ldd	r25, Y+52	; 0x34
    3a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	98 ab       	std	Y+48, r25	; 0x30
    3a12:	8f a7       	std	Y+47, r24	; 0x2f
    3a14:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a16:	98 a9       	ldd	r25, Y+48	; 0x30
    3a18:	9c a7       	std	Y+44, r25	; 0x2c
    3a1a:	8b a7       	std	Y+43, r24	; 0x2b
    3a1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a20:	01 97       	sbiw	r24, 0x01	; 1
    3a22:	f1 f7       	brne	.-4      	; 0x3a20 <main+0x780>
    3a24:	9c a7       	std	Y+44, r25	; 0x2c
    3a26:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(1);
					LCD_displayStringRowColumn(1, 0, "Speed % =    ");
    3a28:	26 ea       	ldi	r18, 0xA6	; 166
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	60 e0       	ldi	r22, 0x00	; 0
    3a30:	a9 01       	movw	r20, r18
    3a32:	0e 94 0a 19 	call	0x3214	; 0x3214 <LCD_displayStringRowColumn>
					LCD_moveCursor(1, 10);
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	6a e0       	ldi	r22, 0x0A	; 10
    3a3a:	0e 94 c8 18 	call	0x3190	; 0x3190 <LCD_moveCursor>
					LCD_intgerToString(speed);
    3a3e:	fe 01       	movw	r30, r28
    3a40:	ea 58       	subi	r30, 0x8A	; 138
    3a42:	ff 4f       	sbci	r31, 0xFF	; 255
    3a44:	80 81       	ld	r24, Z
    3a46:	88 2f       	mov	r24, r24
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	0e 94 23 19 	call	0x3246	; 0x3246 <LCD_intgerToString>

					crash_flag = 0;
    3a4e:	fe 01       	movw	r30, r28
    3a50:	ef 58       	subi	r30, 0x8F	; 143
    3a52:	ff 4f       	sbci	r31, 0xFF	; 255
    3a54:	10 82       	st	Z, r1
				}
				if(speed !=speed_last){
    3a56:	fe 01       	movw	r30, r28
    3a58:	ea 58       	subi	r30, 0x8A	; 138
    3a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5c:	80 81       	ld	r24, Z
    3a5e:	28 2f       	mov	r18, r24
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	fe 01       	movw	r30, r28
    3a64:	ee 58       	subi	r30, 0x8E	; 142
    3a66:	ff 4f       	sbci	r31, 0xFF	; 255
    3a68:	80 81       	ld	r24, Z
    3a6a:	91 81       	ldd	r25, Z+1	; 0x01
    3a6c:	28 17       	cp	r18, r24
    3a6e:	39 07       	cpc	r19, r25
    3a70:	a1 f0       	breq	.+40     	; 0x3a9a <main+0x7fa>
					LCD_moveCursor(1, 10);
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	6a e0       	ldi	r22, 0x0A	; 10
    3a76:	0e 94 c8 18 	call	0x3190	; 0x3190 <LCD_moveCursor>
					LCD_displayString("      ");
    3a7a:	87 ed       	ldi	r24, 0xD7	; 215
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	0e 94 9f 18 	call	0x313e	; 0x313e <LCD_displayString>
					LCD_moveCursor(1, 10);
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	6a e0       	ldi	r22, 0x0A	; 10
    3a86:	0e 94 c8 18 	call	0x3190	; 0x3190 <LCD_moveCursor>
					LCD_intgerToString(speed);
    3a8a:	fe 01       	movw	r30, r28
    3a8c:	ea 58       	subi	r30, 0x8A	; 138
    3a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a90:	80 81       	ld	r24, Z
    3a92:	88 2f       	mov	r24, r24
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	0e 94 23 19 	call	0x3246	; 0x3246 <LCD_intgerToString>
				}
				speed_last=speed;
    3a9a:	de 01       	movw	r26, r28
    3a9c:	ae 58       	subi	r26, 0x8E	; 142
    3a9e:	bf 4f       	sbci	r27, 0xFF	; 255
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	ea 58       	subi	r30, 0x8A	; 138
    3aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa6:	80 81       	ld	r24, Z
    3aa8:	88 2f       	mov	r24, r24
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	8d 93       	st	X+, r24
    3aae:	9c 93       	st	X, r25

			}
			}
		}

		TWI_stop();
    3ab0:	0e 94 9c 0c 	call	0x1938	; 0x1938 <TWI_stop>
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	a0 e2       	ldi	r26, 0x20	; 32
    3aba:	b1 e4       	ldi	r27, 0x41	; 65
    3abc:	8f a3       	std	Y+39, r24	; 0x27
    3abe:	98 a7       	std	Y+40, r25	; 0x28
    3ac0:	a9 a7       	std	Y+41, r26	; 0x29
    3ac2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ac4:	6f a1       	ldd	r22, Y+39	; 0x27
    3ac6:	78 a5       	ldd	r23, Y+40	; 0x28
    3ac8:	89 a5       	ldd	r24, Y+41	; 0x29
    3aca:	9a a5       	ldd	r25, Y+42	; 0x2a
    3acc:	20 e0       	ldi	r18, 0x00	; 0
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	4a e7       	ldi	r20, 0x7A	; 122
    3ad2:	55 e4       	ldi	r21, 0x45	; 69
    3ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad8:	dc 01       	movw	r26, r24
    3ada:	cb 01       	movw	r24, r22
    3adc:	8b a3       	std	Y+35, r24	; 0x23
    3ade:	9c a3       	std	Y+36, r25	; 0x24
    3ae0:	ad a3       	std	Y+37, r26	; 0x25
    3ae2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ae4:	6b a1       	ldd	r22, Y+35	; 0x23
    3ae6:	7c a1       	ldd	r23, Y+36	; 0x24
    3ae8:	8d a1       	ldd	r24, Y+37	; 0x25
    3aea:	9e a1       	ldd	r25, Y+38	; 0x26
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	40 e8       	ldi	r20, 0x80	; 128
    3af2:	5f e3       	ldi	r21, 0x3F	; 63
    3af4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3af8:	88 23       	and	r24, r24
    3afa:	2c f4       	brge	.+10     	; 0x3b06 <main+0x866>
		__ticks = 1;
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	9a a3       	std	Y+34, r25	; 0x22
    3b02:	89 a3       	std	Y+33, r24	; 0x21
    3b04:	3f c0       	rjmp	.+126    	; 0x3b84 <main+0x8e4>
	else if (__tmp > 65535)
    3b06:	6b a1       	ldd	r22, Y+35	; 0x23
    3b08:	7c a1       	ldd	r23, Y+36	; 0x24
    3b0a:	8d a1       	ldd	r24, Y+37	; 0x25
    3b0c:	9e a1       	ldd	r25, Y+38	; 0x26
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	3f ef       	ldi	r19, 0xFF	; 255
    3b12:	4f e7       	ldi	r20, 0x7F	; 127
    3b14:	57 e4       	ldi	r21, 0x47	; 71
    3b16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b1a:	18 16       	cp	r1, r24
    3b1c:	4c f5       	brge	.+82     	; 0x3b70 <main+0x8d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b1e:	6f a1       	ldd	r22, Y+39	; 0x27
    3b20:	78 a5       	ldd	r23, Y+40	; 0x28
    3b22:	89 a5       	ldd	r24, Y+41	; 0x29
    3b24:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	40 e2       	ldi	r20, 0x20	; 32
    3b2c:	51 e4       	ldi	r21, 0x41	; 65
    3b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b32:	dc 01       	movw	r26, r24
    3b34:	cb 01       	movw	r24, r22
    3b36:	bc 01       	movw	r22, r24
    3b38:	cd 01       	movw	r24, r26
    3b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3e:	dc 01       	movw	r26, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	9a a3       	std	Y+34, r25	; 0x22
    3b44:	89 a3       	std	Y+33, r24	; 0x21
    3b46:	0f c0       	rjmp	.+30     	; 0x3b66 <main+0x8c6>
    3b48:	80 e9       	ldi	r24, 0x90	; 144
    3b4a:	91 e0       	ldi	r25, 0x01	; 1
    3b4c:	98 a3       	std	Y+32, r25	; 0x20
    3b4e:	8f 8f       	std	Y+31, r24	; 0x1f
    3b50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b52:	98 a1       	ldd	r25, Y+32	; 0x20
    3b54:	01 97       	sbiw	r24, 0x01	; 1
    3b56:	f1 f7       	brne	.-4      	; 0x3b54 <main+0x8b4>
    3b58:	98 a3       	std	Y+32, r25	; 0x20
    3b5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b5c:	89 a1       	ldd	r24, Y+33	; 0x21
    3b5e:	9a a1       	ldd	r25, Y+34	; 0x22
    3b60:	01 97       	sbiw	r24, 0x01	; 1
    3b62:	9a a3       	std	Y+34, r25	; 0x22
    3b64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b66:	89 a1       	ldd	r24, Y+33	; 0x21
    3b68:	9a a1       	ldd	r25, Y+34	; 0x22
    3b6a:	00 97       	sbiw	r24, 0x00	; 0
    3b6c:	69 f7       	brne	.-38     	; 0x3b48 <main+0x8a8>
    3b6e:	14 c0       	rjmp	.+40     	; 0x3b98 <main+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b70:	6b a1       	ldd	r22, Y+35	; 0x23
    3b72:	7c a1       	ldd	r23, Y+36	; 0x24
    3b74:	8d a1       	ldd	r24, Y+37	; 0x25
    3b76:	9e a1       	ldd	r25, Y+38	; 0x26
    3b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	9a a3       	std	Y+34, r25	; 0x22
    3b82:	89 a3       	std	Y+33, r24	; 0x21
    3b84:	89 a1       	ldd	r24, Y+33	; 0x21
    3b86:	9a a1       	ldd	r25, Y+34	; 0x22
    3b88:	9e 8f       	std	Y+30, r25	; 0x1e
    3b8a:	8d 8f       	std	Y+29, r24	; 0x1d
    3b8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b90:	01 97       	sbiw	r24, 0x01	; 1
    3b92:	f1 f7       	brne	.-4      	; 0x3b90 <main+0x8f0>
    3b94:	9e 8f       	std	Y+30, r25	; 0x1e
    3b96:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(10);

		distance=Ultrasonic_readDistance();
    3b98:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <Ultrasonic_readDistance>
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	e9 58       	subi	r30, 0x89	; 137
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	91 83       	std	Z+1, r25	; 0x01
    3ba4:	80 83       	st	Z, r24

		if(distance!=last_read){
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	e9 58       	subi	r30, 0x89	; 137
    3baa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bac:	de 01       	movw	r26, r28
    3bae:	ac 58       	subi	r26, 0x8C	; 140
    3bb0:	bf 4f       	sbci	r27, 0xFF	; 255
    3bb2:	20 81       	ld	r18, Z
    3bb4:	31 81       	ldd	r19, Z+1	; 0x01
    3bb6:	8d 91       	ld	r24, X+
    3bb8:	9c 91       	ld	r25, X
    3bba:	11 97       	sbiw	r26, 0x01	; 1
    3bbc:	28 17       	cp	r18, r24
    3bbe:	39 07       	cpc	r19, r25
    3bc0:	99 f0       	breq	.+38     	; 0x3be8 <main+0x948>
			LCD_moveCursor(0, 10);
    3bc2:	80 e0       	ldi	r24, 0x00	; 0
    3bc4:	6a e0       	ldi	r22, 0x0A	; 10
    3bc6:	0e 94 c8 18 	call	0x3190	; 0x3190 <LCD_moveCursor>
			LCD_displayString("   ");
    3bca:	8e ed       	ldi	r24, 0xDE	; 222
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	0e 94 9f 18 	call	0x313e	; 0x313e <LCD_displayString>
			LCD_moveCursor(0, 10);
    3bd2:	80 e0       	ldi	r24, 0x00	; 0
    3bd4:	6a e0       	ldi	r22, 0x0A	; 10
    3bd6:	0e 94 c8 18 	call	0x3190	; 0x3190 <LCD_moveCursor>
			LCD_intgerToString(distance);
    3bda:	fe 01       	movw	r30, r28
    3bdc:	e9 58       	subi	r30, 0x89	; 137
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	80 81       	ld	r24, Z
    3be2:	91 81       	ldd	r25, Z+1	; 0x01
    3be4:	0e 94 23 19 	call	0x3246	; 0x3246 <LCD_intgerToString>
		}
		last_read=distance;
    3be8:	de 01       	movw	r26, r28
    3bea:	ac 58       	subi	r26, 0x8C	; 140
    3bec:	bf 4f       	sbci	r27, 0xFF	; 255
    3bee:	fe 01       	movw	r30, r28
    3bf0:	e9 58       	subi	r30, 0x89	; 137
    3bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf4:	80 81       	ld	r24, Z
    3bf6:	91 81       	ldd	r25, Z+1	; 0x01
    3bf8:	8d 93       	st	X+, r24
    3bfa:	9c 93       	st	X, r25
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	a0 e2       	ldi	r26, 0x20	; 32
    3c02:	b1 e4       	ldi	r27, 0x41	; 65
    3c04:	89 8f       	std	Y+25, r24	; 0x19
    3c06:	9a 8f       	std	Y+26, r25	; 0x1a
    3c08:	ab 8f       	std	Y+27, r26	; 0x1b
    3c0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c0c:	69 8d       	ldd	r22, Y+25	; 0x19
    3c0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	4a e7       	ldi	r20, 0x7A	; 122
    3c1a:	55 e4       	ldi	r21, 0x45	; 69
    3c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c20:	dc 01       	movw	r26, r24
    3c22:	cb 01       	movw	r24, r22
    3c24:	8d 8b       	std	Y+21, r24	; 0x15
    3c26:	9e 8b       	std	Y+22, r25	; 0x16
    3c28:	af 8b       	std	Y+23, r26	; 0x17
    3c2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c2c:	6d 89       	ldd	r22, Y+21	; 0x15
    3c2e:	7e 89       	ldd	r23, Y+22	; 0x16
    3c30:	8f 89       	ldd	r24, Y+23	; 0x17
    3c32:	98 8d       	ldd	r25, Y+24	; 0x18
    3c34:	20 e0       	ldi	r18, 0x00	; 0
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	40 e8       	ldi	r20, 0x80	; 128
    3c3a:	5f e3       	ldi	r21, 0x3F	; 63
    3c3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c40:	88 23       	and	r24, r24
    3c42:	2c f4       	brge	.+10     	; 0x3c4e <main+0x9ae>
		__ticks = 1;
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	9c 8b       	std	Y+20, r25	; 0x14
    3c4a:	8b 8b       	std	Y+19, r24	; 0x13
    3c4c:	3f c0       	rjmp	.+126    	; 0x3ccc <main+0xa2c>
	else if (__tmp > 65535)
    3c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    3c50:	7e 89       	ldd	r23, Y+22	; 0x16
    3c52:	8f 89       	ldd	r24, Y+23	; 0x17
    3c54:	98 8d       	ldd	r25, Y+24	; 0x18
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	3f ef       	ldi	r19, 0xFF	; 255
    3c5a:	4f e7       	ldi	r20, 0x7F	; 127
    3c5c:	57 e4       	ldi	r21, 0x47	; 71
    3c5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c62:	18 16       	cp	r1, r24
    3c64:	4c f5       	brge	.+82     	; 0x3cb8 <main+0xa18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c66:	69 8d       	ldd	r22, Y+25	; 0x19
    3c68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c6e:	20 e0       	ldi	r18, 0x00	; 0
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	40 e2       	ldi	r20, 0x20	; 32
    3c74:	51 e4       	ldi	r21, 0x41	; 65
    3c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c7a:	dc 01       	movw	r26, r24
    3c7c:	cb 01       	movw	r24, r22
    3c7e:	bc 01       	movw	r22, r24
    3c80:	cd 01       	movw	r24, r26
    3c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c86:	dc 01       	movw	r26, r24
    3c88:	cb 01       	movw	r24, r22
    3c8a:	9c 8b       	std	Y+20, r25	; 0x14
    3c8c:	8b 8b       	std	Y+19, r24	; 0x13
    3c8e:	0f c0       	rjmp	.+30     	; 0x3cae <main+0xa0e>
    3c90:	80 e9       	ldi	r24, 0x90	; 144
    3c92:	91 e0       	ldi	r25, 0x01	; 1
    3c94:	9a 8b       	std	Y+18, r25	; 0x12
    3c96:	89 8b       	std	Y+17, r24	; 0x11
    3c98:	89 89       	ldd	r24, Y+17	; 0x11
    3c9a:	9a 89       	ldd	r25, Y+18	; 0x12
    3c9c:	01 97       	sbiw	r24, 0x01	; 1
    3c9e:	f1 f7       	brne	.-4      	; 0x3c9c <main+0x9fc>
    3ca0:	9a 8b       	std	Y+18, r25	; 0x12
    3ca2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ca4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ca6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ca8:	01 97       	sbiw	r24, 0x01	; 1
    3caa:	9c 8b       	std	Y+20, r25	; 0x14
    3cac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cae:	8b 89       	ldd	r24, Y+19	; 0x13
    3cb0:	9c 89       	ldd	r25, Y+20	; 0x14
    3cb2:	00 97       	sbiw	r24, 0x00	; 0
    3cb4:	69 f7       	brne	.-38     	; 0x3c90 <main+0x9f0>
    3cb6:	14 c0       	rjmp	.+40     	; 0x3ce0 <main+0xa40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb8:	6d 89       	ldd	r22, Y+21	; 0x15
    3cba:	7e 89       	ldd	r23, Y+22	; 0x16
    3cbc:	8f 89       	ldd	r24, Y+23	; 0x17
    3cbe:	98 8d       	ldd	r25, Y+24	; 0x18
    3cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc4:	dc 01       	movw	r26, r24
    3cc6:	cb 01       	movw	r24, r22
    3cc8:	9c 8b       	std	Y+20, r25	; 0x14
    3cca:	8b 8b       	std	Y+19, r24	; 0x13
    3ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    3cce:	9c 89       	ldd	r25, Y+20	; 0x14
    3cd0:	98 8b       	std	Y+16, r25	; 0x10
    3cd2:	8f 87       	std	Y+15, r24	; 0x0f
    3cd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cd6:	98 89       	ldd	r25, Y+16	; 0x10
    3cd8:	01 97       	sbiw	r24, 0x01	; 1
    3cda:	f1 f7       	brne	.-4      	; 0x3cd8 <main+0xa38>
    3cdc:	98 8b       	std	Y+16, r25	; 0x10
    3cde:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(10);

		SPI_sendReceiveByte(distance);
    3ce0:	fe 01       	movw	r30, r28
    3ce2:	e9 58       	subi	r30, 0x89	; 137
    3ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce6:	80 81       	ld	r24, Z
    3ce8:	0e 94 ca 0b 	call	0x1794	; 0x1794 <SPI_sendReceiveByte>
    3cec:	80 e0       	ldi	r24, 0x00	; 0
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	a0 e2       	ldi	r26, 0x20	; 32
    3cf2:	b1 e4       	ldi	r27, 0x41	; 65
    3cf4:	8b 87       	std	Y+11, r24	; 0x0b
    3cf6:	9c 87       	std	Y+12, r25	; 0x0c
    3cf8:	ad 87       	std	Y+13, r26	; 0x0d
    3cfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d00:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d02:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d04:	20 e0       	ldi	r18, 0x00	; 0
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	4a e7       	ldi	r20, 0x7A	; 122
    3d0a:	55 e4       	ldi	r21, 0x45	; 69
    3d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d10:	dc 01       	movw	r26, r24
    3d12:	cb 01       	movw	r24, r22
    3d14:	8f 83       	std	Y+7, r24	; 0x07
    3d16:	98 87       	std	Y+8, r25	; 0x08
    3d18:	a9 87       	std	Y+9, r26	; 0x09
    3d1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d1e:	78 85       	ldd	r23, Y+8	; 0x08
    3d20:	89 85       	ldd	r24, Y+9	; 0x09
    3d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	40 e8       	ldi	r20, 0x80	; 128
    3d2a:	5f e3       	ldi	r21, 0x3F	; 63
    3d2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d30:	88 23       	and	r24, r24
    3d32:	2c f4       	brge	.+10     	; 0x3d3e <main+0xa9e>
		__ticks = 1;
    3d34:	81 e0       	ldi	r24, 0x01	; 1
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	9e 83       	std	Y+6, r25	; 0x06
    3d3a:	8d 83       	std	Y+5, r24	; 0x05
    3d3c:	3f c0       	rjmp	.+126    	; 0x3dbc <main+0xb1c>
	else if (__tmp > 65535)
    3d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d40:	78 85       	ldd	r23, Y+8	; 0x08
    3d42:	89 85       	ldd	r24, Y+9	; 0x09
    3d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d46:	20 e0       	ldi	r18, 0x00	; 0
    3d48:	3f ef       	ldi	r19, 0xFF	; 255
    3d4a:	4f e7       	ldi	r20, 0x7F	; 127
    3d4c:	57 e4       	ldi	r21, 0x47	; 71
    3d4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d52:	18 16       	cp	r1, r24
    3d54:	4c f5       	brge	.+82     	; 0x3da8 <main+0xb08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d56:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d58:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e2       	ldi	r20, 0x20	; 32
    3d64:	51 e4       	ldi	r21, 0x41	; 65
    3d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d6a:	dc 01       	movw	r26, r24
    3d6c:	cb 01       	movw	r24, r22
    3d6e:	bc 01       	movw	r22, r24
    3d70:	cd 01       	movw	r24, r26
    3d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d76:	dc 01       	movw	r26, r24
    3d78:	cb 01       	movw	r24, r22
    3d7a:	9e 83       	std	Y+6, r25	; 0x06
    3d7c:	8d 83       	std	Y+5, r24	; 0x05
    3d7e:	0f c0       	rjmp	.+30     	; 0x3d9e <main+0xafe>
    3d80:	80 e9       	ldi	r24, 0x90	; 144
    3d82:	91 e0       	ldi	r25, 0x01	; 1
    3d84:	9c 83       	std	Y+4, r25	; 0x04
    3d86:	8b 83       	std	Y+3, r24	; 0x03
    3d88:	8b 81       	ldd	r24, Y+3	; 0x03
    3d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d8c:	01 97       	sbiw	r24, 0x01	; 1
    3d8e:	f1 f7       	brne	.-4      	; 0x3d8c <main+0xaec>
    3d90:	9c 83       	std	Y+4, r25	; 0x04
    3d92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d94:	8d 81       	ldd	r24, Y+5	; 0x05
    3d96:	9e 81       	ldd	r25, Y+6	; 0x06
    3d98:	01 97       	sbiw	r24, 0x01	; 1
    3d9a:	9e 83       	std	Y+6, r25	; 0x06
    3d9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3da0:	9e 81       	ldd	r25, Y+6	; 0x06
    3da2:	00 97       	sbiw	r24, 0x00	; 0
    3da4:	69 f7       	brne	.-38     	; 0x3d80 <main+0xae0>
    3da6:	4c cc       	rjmp	.-1896   	; 0x3640 <main+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3da8:	6f 81       	ldd	r22, Y+7	; 0x07
    3daa:	78 85       	ldd	r23, Y+8	; 0x08
    3dac:	89 85       	ldd	r24, Y+9	; 0x09
    3dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db4:	dc 01       	movw	r26, r24
    3db6:	cb 01       	movw	r24, r22
    3db8:	9e 83       	std	Y+6, r25	; 0x06
    3dba:	8d 83       	std	Y+5, r24	; 0x05
    3dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc0:	9a 83       	std	Y+2, r25	; 0x02
    3dc2:	89 83       	std	Y+1, r24	; 0x01
    3dc4:	89 81       	ldd	r24, Y+1	; 0x01
    3dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    3dc8:	01 97       	sbiw	r24, 0x01	; 1
    3dca:	f1 f7       	brne	.-4      	; 0x3dc8 <main+0xb28>
    3dcc:	9a 83       	std	Y+2, r25	; 0x02
    3dce:	89 83       	std	Y+1, r24	; 0x01
    3dd0:	37 cc       	rjmp	.-1938   	; 0x3640 <main+0x3a0>

00003dd2 <__mulsi3>:
    3dd2:	62 9f       	mul	r22, r18
    3dd4:	d0 01       	movw	r26, r0
    3dd6:	73 9f       	mul	r23, r19
    3dd8:	f0 01       	movw	r30, r0
    3dda:	82 9f       	mul	r24, r18
    3ddc:	e0 0d       	add	r30, r0
    3dde:	f1 1d       	adc	r31, r1
    3de0:	64 9f       	mul	r22, r20
    3de2:	e0 0d       	add	r30, r0
    3de4:	f1 1d       	adc	r31, r1
    3de6:	92 9f       	mul	r25, r18
    3de8:	f0 0d       	add	r31, r0
    3dea:	83 9f       	mul	r24, r19
    3dec:	f0 0d       	add	r31, r0
    3dee:	74 9f       	mul	r23, r20
    3df0:	f0 0d       	add	r31, r0
    3df2:	65 9f       	mul	r22, r21
    3df4:	f0 0d       	add	r31, r0
    3df6:	99 27       	eor	r25, r25
    3df8:	72 9f       	mul	r23, r18
    3dfa:	b0 0d       	add	r27, r0
    3dfc:	e1 1d       	adc	r30, r1
    3dfe:	f9 1f       	adc	r31, r25
    3e00:	63 9f       	mul	r22, r19
    3e02:	b0 0d       	add	r27, r0
    3e04:	e1 1d       	adc	r30, r1
    3e06:	f9 1f       	adc	r31, r25
    3e08:	bd 01       	movw	r22, r26
    3e0a:	cf 01       	movw	r24, r30
    3e0c:	11 24       	eor	r1, r1
    3e0e:	08 95       	ret

00003e10 <__prologue_saves__>:
    3e10:	2f 92       	push	r2
    3e12:	3f 92       	push	r3
    3e14:	4f 92       	push	r4
    3e16:	5f 92       	push	r5
    3e18:	6f 92       	push	r6
    3e1a:	7f 92       	push	r7
    3e1c:	8f 92       	push	r8
    3e1e:	9f 92       	push	r9
    3e20:	af 92       	push	r10
    3e22:	bf 92       	push	r11
    3e24:	cf 92       	push	r12
    3e26:	df 92       	push	r13
    3e28:	ef 92       	push	r14
    3e2a:	ff 92       	push	r15
    3e2c:	0f 93       	push	r16
    3e2e:	1f 93       	push	r17
    3e30:	cf 93       	push	r28
    3e32:	df 93       	push	r29
    3e34:	cd b7       	in	r28, 0x3d	; 61
    3e36:	de b7       	in	r29, 0x3e	; 62
    3e38:	ca 1b       	sub	r28, r26
    3e3a:	db 0b       	sbc	r29, r27
    3e3c:	0f b6       	in	r0, 0x3f	; 63
    3e3e:	f8 94       	cli
    3e40:	de bf       	out	0x3e, r29	; 62
    3e42:	0f be       	out	0x3f, r0	; 63
    3e44:	cd bf       	out	0x3d, r28	; 61
    3e46:	09 94       	ijmp

00003e48 <__epilogue_restores__>:
    3e48:	2a 88       	ldd	r2, Y+18	; 0x12
    3e4a:	39 88       	ldd	r3, Y+17	; 0x11
    3e4c:	48 88       	ldd	r4, Y+16	; 0x10
    3e4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e50:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e52:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e54:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e56:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e58:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e5a:	b9 84       	ldd	r11, Y+9	; 0x09
    3e5c:	c8 84       	ldd	r12, Y+8	; 0x08
    3e5e:	df 80       	ldd	r13, Y+7	; 0x07
    3e60:	ee 80       	ldd	r14, Y+6	; 0x06
    3e62:	fd 80       	ldd	r15, Y+5	; 0x05
    3e64:	0c 81       	ldd	r16, Y+4	; 0x04
    3e66:	1b 81       	ldd	r17, Y+3	; 0x03
    3e68:	aa 81       	ldd	r26, Y+2	; 0x02
    3e6a:	b9 81       	ldd	r27, Y+1	; 0x01
    3e6c:	ce 0f       	add	r28, r30
    3e6e:	d1 1d       	adc	r29, r1
    3e70:	0f b6       	in	r0, 0x3f	; 63
    3e72:	f8 94       	cli
    3e74:	de bf       	out	0x3e, r29	; 62
    3e76:	0f be       	out	0x3f, r0	; 63
    3e78:	cd bf       	out	0x3d, r28	; 61
    3e7a:	ed 01       	movw	r28, r26
    3e7c:	08 95       	ret

00003e7e <itoa>:
    3e7e:	fb 01       	movw	r30, r22
    3e80:	9f 01       	movw	r18, r30
    3e82:	e8 94       	clt
    3e84:	42 30       	cpi	r20, 0x02	; 2
    3e86:	c4 f0       	brlt	.+48     	; 0x3eb8 <itoa+0x3a>
    3e88:	45 32       	cpi	r20, 0x25	; 37
    3e8a:	b4 f4       	brge	.+44     	; 0x3eb8 <itoa+0x3a>
    3e8c:	4a 30       	cpi	r20, 0x0A	; 10
    3e8e:	29 f4       	brne	.+10     	; 0x3e9a <itoa+0x1c>
    3e90:	97 fb       	bst	r25, 7
    3e92:	1e f4       	brtc	.+6      	; 0x3e9a <itoa+0x1c>
    3e94:	90 95       	com	r25
    3e96:	81 95       	neg	r24
    3e98:	9f 4f       	sbci	r25, 0xFF	; 255
    3e9a:	64 2f       	mov	r22, r20
    3e9c:	77 27       	eor	r23, r23
    3e9e:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__udivmodhi4>
    3ea2:	80 5d       	subi	r24, 0xD0	; 208
    3ea4:	8a 33       	cpi	r24, 0x3A	; 58
    3ea6:	0c f0       	brlt	.+2      	; 0x3eaa <itoa+0x2c>
    3ea8:	89 5d       	subi	r24, 0xD9	; 217
    3eaa:	81 93       	st	Z+, r24
    3eac:	cb 01       	movw	r24, r22
    3eae:	00 97       	sbiw	r24, 0x00	; 0
    3eb0:	a1 f7       	brne	.-24     	; 0x3e9a <itoa+0x1c>
    3eb2:	16 f4       	brtc	.+4      	; 0x3eb8 <itoa+0x3a>
    3eb4:	5d e2       	ldi	r21, 0x2D	; 45
    3eb6:	51 93       	st	Z+, r21
    3eb8:	10 82       	st	Z, r1
    3eba:	c9 01       	movw	r24, r18
    3ebc:	0c 94 60 1f 	jmp	0x3ec0	; 0x3ec0 <strrev>

00003ec0 <strrev>:
    3ec0:	dc 01       	movw	r26, r24
    3ec2:	fc 01       	movw	r30, r24
    3ec4:	67 2f       	mov	r22, r23
    3ec6:	71 91       	ld	r23, Z+
    3ec8:	77 23       	and	r23, r23
    3eca:	e1 f7       	brne	.-8      	; 0x3ec4 <strrev+0x4>
    3ecc:	32 97       	sbiw	r30, 0x02	; 2
    3ece:	04 c0       	rjmp	.+8      	; 0x3ed8 <strrev+0x18>
    3ed0:	7c 91       	ld	r23, X
    3ed2:	6d 93       	st	X+, r22
    3ed4:	70 83       	st	Z, r23
    3ed6:	62 91       	ld	r22, -Z
    3ed8:	ae 17       	cp	r26, r30
    3eda:	bf 07       	cpc	r27, r31
    3edc:	c8 f3       	brcs	.-14     	; 0x3ed0 <strrev+0x10>
    3ede:	08 95       	ret

00003ee0 <__udivmodhi4>:
    3ee0:	aa 1b       	sub	r26, r26
    3ee2:	bb 1b       	sub	r27, r27
    3ee4:	51 e1       	ldi	r21, 0x11	; 17
    3ee6:	07 c0       	rjmp	.+14     	; 0x3ef6 <__udivmodhi4_ep>

00003ee8 <__udivmodhi4_loop>:
    3ee8:	aa 1f       	adc	r26, r26
    3eea:	bb 1f       	adc	r27, r27
    3eec:	a6 17       	cp	r26, r22
    3eee:	b7 07       	cpc	r27, r23
    3ef0:	10 f0       	brcs	.+4      	; 0x3ef6 <__udivmodhi4_ep>
    3ef2:	a6 1b       	sub	r26, r22
    3ef4:	b7 0b       	sbc	r27, r23

00003ef6 <__udivmodhi4_ep>:
    3ef6:	88 1f       	adc	r24, r24
    3ef8:	99 1f       	adc	r25, r25
    3efa:	5a 95       	dec	r21
    3efc:	a9 f7       	brne	.-22     	; 0x3ee8 <__udivmodhi4_loop>
    3efe:	80 95       	com	r24
    3f00:	90 95       	com	r25
    3f02:	bc 01       	movw	r22, r24
    3f04:	cd 01       	movw	r24, r26
    3f06:	08 95       	ret

00003f08 <_exit>:
    3f08:	f8 94       	cli

00003f0a <__stop_program>:
    3f0a:	ff cf       	rjmp	.-2      	; 0x3f0a <__stop_program>
